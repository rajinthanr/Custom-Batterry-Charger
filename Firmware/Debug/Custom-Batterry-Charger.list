
Custom-Batterry-Charger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eadc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800ec80  0800ec80  0000fc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f15c  0800f15c  000112ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f15c  0800f15c  0001015c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f164  0800f164  000112ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f164  0800f164  00010164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f168  0800f168  00010168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  0800f16c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ef0  200002ec  0800f458  000112ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021dc  0800f458  000121dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b2  00000000  00000000  0001131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd7  00000000  00000000  00028bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0002c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001139  00000000  00000000  0002de10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba36  00000000  00000000  0002ef49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a87d  00000000  00000000  0004a97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0821  00000000  00000000  000651fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073cc  00000000  00000000  00105a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002ec 	.word	0x200002ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ec64 	.word	0x0800ec64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f0 	.word	0x200002f0
 80001dc:	0800ec64 	.word	0x0800ec64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800103a:	4a38      	ldr	r2, [pc, #224]	@ (800111c <HD44780_Init+0xec>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001040:	4b37      	ldr	r3, [pc, #220]	@ (8001120 <HD44780_Init+0xf0>)
 8001042:	2208      	movs	r2, #8
 8001044:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001046:	4b37      	ldr	r3, [pc, #220]	@ (8001124 <HD44780_Init+0xf4>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800104c:	4b33      	ldr	r3, [pc, #204]	@ (800111c <HD44780_Init+0xec>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d907      	bls.n	8001064 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001054:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <HD44780_Init+0xf4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b31      	ldr	r3, [pc, #196]	@ (8001124 <HD44780_Init+0xf4>)
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e006      	b.n	8001072 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001064:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <HD44780_Init+0xf4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <HD44780_Init+0xf4>)
 8001070:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001072:	f000 f9bf 	bl	80013f4 <DelayInit>
  HAL_Delay(50);
 8001076:	2032      	movs	r0, #50	@ 0x32
 8001078:	f001 f9d4 	bl	8002424 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <HD44780_Init+0xf0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f97d 	bl	8001380 <ExpanderWrite>
  HAL_Delay(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108a:	f001 f9cb 	bl	8002424 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800108e:	2030      	movs	r0, #48	@ 0x30
 8001090:	f000 f965 	bl	800135e <Write4Bits>
  DelayUS(4500);
 8001094:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001098:	f000 f9d6 	bl	8001448 <DelayUS>

  Write4Bits(0x03 << 4);
 800109c:	2030      	movs	r0, #48	@ 0x30
 800109e:	f000 f95e 	bl	800135e <Write4Bits>
  DelayUS(4500);
 80010a2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010a6:	f000 f9cf 	bl	8001448 <DelayUS>

  Write4Bits(0x03 << 4);
 80010aa:	2030      	movs	r0, #48	@ 0x30
 80010ac:	f000 f957 	bl	800135e <Write4Bits>
  DelayUS(4500);
 80010b0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010b4:	f000 f9c8 	bl	8001448 <DelayUS>

  Write4Bits(0x02 << 4);
 80010b8:	2020      	movs	r0, #32
 80010ba:	f000 f950 	bl	800135e <Write4Bits>
  DelayUS(100);
 80010be:	2064      	movs	r0, #100	@ 0x64
 80010c0:	f000 f9c2 	bl	8001448 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HD44780_Init+0xf4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f908 	bl	80012e4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HD44780_Init+0xf8>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010da:	f000 f88b 	bl	80011f4 <HD44780_Display>
  HD44780_Clear();
 80010de:	f000 f82b 	bl	8001138 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HD44780_Init+0xfc>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HD44780_Init+0xfc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8f6 	bl	80012e4 <SendCommand>
  DelayUS(4500);
 80010f8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010fc:	f000 f9a4 	bl	8001448 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001100:	490b      	ldr	r1, [pc, #44]	@ (8001130 <HD44780_Init+0x100>)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f8a2 	bl	800124c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001108:	490a      	ldr	r1, [pc, #40]	@ (8001134 <HD44780_Init+0x104>)
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f89e 	bl	800124c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001110:	f000 f81d 	bl	800114e <HD44780_Home>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000030b 	.word	0x2000030b
 8001120:	2000030c 	.word	0x2000030c
 8001124:	20000308 	.word	0x20000308
 8001128:	20000309 	.word	0x20000309
 800112c:	2000030a 	.word	0x2000030a
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008

08001138 <HD44780_Clear>:

void HD44780_Clear()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 f8d1 	bl	80012e4 <SendCommand>
  DelayUS(2000);
 8001142:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001146:	f000 f97f 	bl	8001448 <DelayUS>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <HD44780_Home>:

void HD44780_Home()
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001152:	2002      	movs	r0, #2
 8001154:	f000 f8c6 	bl	80012e4 <SendCommand>
  DelayUS(2000);
 8001158:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800115c:	f000 f974 	bl	8001448 <DelayUS>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HD44780_SetCursor+0x5c>)
 8001176:	f107 0408 	add.w	r4, r7, #8
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HD44780_SetCursor+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	429a      	cmp	r2, r3
 8001188:	d303      	bcc.n	8001192 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HD44780_SetCursor+0x60>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3318      	adds	r3, #24
 8001198:	443b      	add	r3, r7
 800119a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f897 	bl	80012e4 <SendCommand>
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800ec80 	.word	0x0800ec80
 80011c4:	2000030b 	.word	0x2000030b

080011c8 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HD44780_NoDisplay+0x28>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f023 0304 	bic.w	r3, r3, #4
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HD44780_NoDisplay+0x28>)
 80011d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HD44780_NoDisplay+0x28>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f87d 	bl	80012e4 <SendCommand>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000309 	.word	0x20000309

080011f4 <HD44780_Display>:

void HD44780_Display()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HD44780_Display+0x28>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HD44780_Display+0x28>)
 8001204:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HD44780_Display+0x28>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f867 	bl	80012e4 <SendCommand>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000309 	.word	0x20000309

08001220 <HD44780_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Cursor()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HD44780_Cursor+0x28>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HD44780_Cursor+0x28>)
 8001230:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001232:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HD44780_Cursor+0x28>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f851 	bl	80012e4 <SendCommand>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000309 	.word	0x20000309

0800124c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	b25b      	sxtb	r3, r3
 8001268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126c:	b25b      	sxtb	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f837 	bl	80012e4 <SendCommand>
  for (int i=0; i<8; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e009      	b.n	8001290 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f83b 	bl	8001300 <SendChar>
  for (int i=0; i<8; i++)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b07      	cmp	r3, #7
 8001294:	ddf2      	ble.n	800127c <HD44780_CreateSpecialChar+0x30>
  }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f827 	bl	8001300 <SendChar>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80012c2:	e006      	b.n	80012d2 <HD44780_PrintStr+0x18>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f817 	bl	8001300 <SendChar>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f4      	bne.n	80012c4 <HD44780_PrintStr+0xa>
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f812 	bl	800131c <Send>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2101      	movs	r1, #1
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f804 	bl	800131c <Send>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f023 030f 	bic.w	r3, r3, #15
 8001332:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	4313      	orrs	r3, r2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f80b 	bl	800135e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001348:	7bba      	ldrb	r2, [r7, #14]
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	4313      	orrs	r3, r2
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f804 	bl	800135e <Write4Bits>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f808 	bl	8001380 <ExpanderWrite>
  PulseEnable(value);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f820 	bl	80013b8 <PulseEnable>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <ExpanderWrite+0x30>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4313      	orrs	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001396:	f107 020f 	add.w	r2, r7, #15
 800139a:	230a      	movs	r3, #10
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	214e      	movs	r1, #78	@ 0x4e
 80013a2:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <ExpanderWrite+0x34>)
 80013a4:	f002 f862 	bl	800346c <HAL_I2C_Master_Transmit>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000030c 	.word	0x2000030c
 80013b4:	20000358 	.word	0x20000358

080013b8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffd8 	bl	8001380 <ExpanderWrite>
  DelayUS(20);
 80013d0:	2014      	movs	r0, #20
 80013d2:	f000 f839 	bl	8001448 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ffce 	bl	8001380 <ExpanderWrite>
  DelayUS(20);
 80013e4:	2014      	movs	r0, #20
 80013e6:	f000 f82f 	bl	8001448 <DelayUS>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <DelayInit>:

static void DelayInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <DelayInit+0x4c>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <DelayInit+0x4c>)
 80013fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001402:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <DelayInit+0x4c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <DelayInit+0x4c>)
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800140e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <DelayInit+0x50>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <DelayInit+0x50>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <DelayInit+0x50>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <DelayInit+0x50>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <DelayInit+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800142e:	bf00      	nop
  __ASM volatile ("NOP");
 8001430:	bf00      	nop
  __ASM volatile ("NOP");
 8001432:	bf00      	nop
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000edf0 	.word	0xe000edf0
 8001444:	e0001000 	.word	0xe0001000

08001448 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <DelayUS+0x44>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0e      	ldr	r2, [pc, #56]	@ (8001490 <DelayUS+0x48>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9a      	lsrs	r2, r3, #18
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <DelayUS+0x4c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <DelayUS+0x4c>)
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f6      	bhi.n	800146a <DelayUS+0x22>
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000028 	.word	0x20000028
 8001490:	431bde83 	.word	0x431bde83
 8001494:	e0001000 	.word	0xe0001000

08001498 <readADC>:





int readADC(uint32_t pin){
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  sConfig.Channel = pin;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	480f      	ldr	r0, [pc, #60]	@ (8001500 <readADC+0x68>)
 80014c2:	f001 f997 	bl	80027f4 <HAL_ADC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <readADC+0x38>
  {
    Error_Handler();
 80014cc:	f000 fca0 	bl	8001e10 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <readADC+0x68>)
 80014d2:	f001 f80f 	bl	80024f4 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 80014d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014da:	4809      	ldr	r0, [pc, #36]	@ (8001500 <readADC+0x68>)
 80014dc:	f001 f8f1 	bl	80026c2 <HAL_ADC_PollForConversion>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <readADC+0x52>
  {
    Error_Handler();
 80014e6:	f000 fc93 	bl	8001e10 <Error_Handler>
  }
  HAL_ADC_Stop(&hadc1);
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <readADC+0x68>)
 80014ec:	f001 f8b6 	bl	800265c <HAL_ADC_Stop>

  return HAL_ADC_GetValue(&hadc1);
 80014f0:	4803      	ldr	r0, [pc, #12]	@ (8001500 <readADC+0x68>)
 80014f2:	f001 f971 	bl	80027d8 <HAL_ADC_GetValue>
 80014f6:	4603      	mov	r3, r0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000310 	.word	0x20000310

08001504 <pwm>:

void pwm(float pulseWidth) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0a01 	vstr	s0, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001522:	2360      	movs	r3, #96	@ 0x60
 8001524:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = pulseWidth * 4095; // Scale pulse width to match timer resolution
 8001526:	edd7 7a01 	vldr	s15, [r7, #4]
 800152a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800156c <pwm+0x68>
 800152e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001536:	ee17 3a90 	vmov	r3, s15
 800153a:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2208      	movs	r2, #8
 800154a:	4619      	mov	r1, r3
 800154c:	4808      	ldr	r0, [pc, #32]	@ (8001570 <pwm+0x6c>)
 800154e:	f004 fad5 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <pwm+0x58>
  {
    Error_Handler();
 8001558:	f000 fc5a 	bl	8001e10 <Error_Handler>
  }

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800155c:	2108      	movs	r1, #8
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <pwm+0x6c>)
 8001560:	f004 fa1c 	bl	800599c <HAL_TIM_PWM_Start>
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	457ff000 	.word	0x457ff000
 8001570:	200003f4 	.word	0x200003f4

08001574 <toggle>:

void toggle(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001578:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <toggle+0x14>)
 800157e:	f001 fe16 	bl	80031ae <HAL_GPIO_TogglePin>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020800 	.word	0x40020800
 800158c:	00000000 	.word	0x00000000

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001594:	b09e      	sub	sp, #120	@ 0x78
 8001596:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001598:	f000 fed2 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 f9f6 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a0:	f000 fbc6 	bl	8001d30 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015a4:	f000 fa5a 	bl	8001a5c <MX_ADC1_Init>
  MX_I2C1_Init();
 80015a8:	f000 faaa 	bl	8001b00 <MX_I2C1_Init>
  MX_TIM1_Init();
 80015ac:	f000 fad6 	bl	8001b5c <MX_TIM1_Init>
  MX_TIM2_Init();
 80015b0:	f000 fb24 	bl	8001bfc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80015b4:	f008 faaa 	bl	8009b0c <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 80015b8:	f000 fb96 	bl	8001ce8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  toggle(); // Initial toggle to indicate start
 80015bc:	f7ff ffda 	bl	8001574 <toggle>
  toggle();
 80015c0:	f7ff ffd8 	bl	8001574 <toggle>

  HD44780_Init(2);
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff fd33 	bl	8001030 <HD44780_Init>

  /* Clear buffer */
  HD44780_Clear();
 80015ca:	f7ff fdb5 	bl	8001138 <HD44780_Clear>

  /* Hide characters */
  HD44780_NoDisplay();
 80015ce:	f7ff fdfb 	bl	80011c8 <HD44780_NoDisplay>
  HD44780_Cursor();
 80015d2:	f7ff fe25 	bl	8001220 <HD44780_Cursor>
  HD44780_SetCursor(0,0);
 80015d6:	2100      	movs	r1, #0
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fdc3 	bl	8001164 <HD44780_SetCursor>
  HD44780_PrintStr("Booting...");
 80015de:	48c6      	ldr	r0, [pc, #792]	@ (80018f8 <main+0x368>)
 80015e0:	f7ff fe6b 	bl	80012ba <HD44780_PrintStr>
  HD44780_PrintSpecialChar(0);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff fe5b 	bl	80012a0 <HD44780_PrintSpecialChar>

  /* Show characters */
  HD44780_Display();
 80015ea:	f7ff fe03 	bl	80011f4 <HD44780_Display>
  HAL_Delay(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f2:	f000 ff17 	bl	8002424 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    v_out = readADC(ADC_CHANNEL_0) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff ff4e 	bl	8001498 <readADC>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff98 	bl	8000534 <__aeabi_i2d>
 8001604:	a3b6      	add	r3, pc, #728	@ (adr r3, 80018e0 <main+0x350>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe fffd 	bl	8000608 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	a3b4      	add	r3, pc, #720	@ (adr r3, 80018e8 <main+0x358>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fff4 	bl	8000608 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fae6 	bl	8000bf8 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4ab3      	ldr	r2, [pc, #716]	@ (80018fc <main+0x36c>)
 8001630:	6013      	str	r3, [r2, #0]

    v_in = readADC(ADC_CHANNEL_9) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 8001632:	2009      	movs	r0, #9
 8001634:	f7ff ff30 	bl	8001498 <readADC>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff7a 	bl	8000534 <__aeabi_i2d>
 8001640:	a3a7      	add	r3, pc, #668	@ (adr r3, 80018e0 <main+0x350>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffdf 	bl	8000608 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	a3a5      	add	r3, pc, #660	@ (adr r3, 80018e8 <main+0x358>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffd6 	bl	8000608 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fac8 	bl	8000bf8 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4aa5      	ldr	r2, [pc, #660]	@ (8001900 <main+0x370>)
 800166c:	6013      	str	r3, [r2, #0]

    i_out = readADC(ADC_CHANNEL_2) *(10000.0/22)* (3.3f / 4095.0f); // Read ADC value and convert to current
 800166e:	2002      	movs	r0, #2
 8001670:	f7ff ff12 	bl	8001498 <readADC>
 8001674:	4603      	mov	r3, r0
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff5c 	bl	8000534 <__aeabi_i2d>
 800167c:	a39c      	add	r3, pc, #624	@ (adr r3, 80018f0 <main+0x360>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe ffc1 	bl	8000608 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	a396      	add	r3, pc, #600	@ (adr r3, 80018e8 <main+0x358>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe ffb8 	bl	8000608 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff faaa 	bl	8000bf8 <__aeabi_d2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a97      	ldr	r2, [pc, #604]	@ (8001904 <main+0x374>)
 80016a8:	6013      	str	r3, [r2, #0]

    static uint32_t last_lcd_update = 0;
    if (HAL_GetTick() - last_lcd_update > 1000) {
 80016aa:	f000 feaf 	bl	800240c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b95      	ldr	r3, [pc, #596]	@ (8001908 <main+0x378>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ba:	d936      	bls.n	800172a <main+0x19a>
      last_lcd_update = HAL_GetTick();
 80016bc:	f000 fea6 	bl	800240c <HAL_GetTick>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a91      	ldr	r2, [pc, #580]	@ (8001908 <main+0x378>)
 80016c4:	6013      	str	r3, [r2, #0]
      char lcd_line1[17], lcd_line2[17];
      snprintf(lcd_line1, sizeof(lcd_line1), "V: %.2fV", v_out);
 80016c6:	4b8d      	ldr	r3, [pc, #564]	@ (80018fc <main+0x36c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff44 	bl	8000558 <__aeabi_f2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80016d8:	e9cd 2300 	strd	r2, r3, [sp]
 80016dc:	4a8b      	ldr	r2, [pc, #556]	@ (800190c <main+0x37c>)
 80016de:	2111      	movs	r1, #17
 80016e0:	f009 fe4a 	bl	800b378 <sniprintf>
      snprintf(lcd_line2, sizeof(lcd_line2), "I: %.2fmA", i_out);
 80016e4:	4b87      	ldr	r3, [pc, #540]	@ (8001904 <main+0x374>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff35 	bl	8000558 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80016f6:	e9cd 2300 	strd	r2, r3, [sp]
 80016fa:	4a85      	ldr	r2, [pc, #532]	@ (8001910 <main+0x380>)
 80016fc:	2111      	movs	r1, #17
 80016fe:	f009 fe3b 	bl	800b378 <sniprintf>
      HD44780_Clear();
 8001702:	f7ff fd19 	bl	8001138 <HD44780_Clear>
      HD44780_SetCursor(0, 0);
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fd2b 	bl	8001164 <HD44780_SetCursor>
      HD44780_PrintStr(lcd_line1);
 800170e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fdd1 	bl	80012ba <HD44780_PrintStr>
      HD44780_SetCursor(0, 1);
 8001718:	2101      	movs	r1, #1
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fd22 	bl	8001164 <HD44780_SetCursor>
      HD44780_PrintStr(lcd_line2);
 8001720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fdc8 	bl	80012ba <HD44780_PrintStr>

    // Simple low-pass filter for each reading
    static float v_out_filt = 0.0f;
    static float v_in_filt = 0.0f;
    static float i_out_filt = 0.0f;
    const float alpha = 0.5f; // Smoothing factor (0 < alpha < 1)
 800172a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800172e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    v_out_filt = alpha * v_out + (1.0f - alpha) * v_out_filt;
 8001730:	4b72      	ldr	r3, [pc, #456]	@ (80018fc <main+0x36c>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800173a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001742:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800174a:	4b72      	ldr	r3, [pc, #456]	@ (8001914 <main+0x384>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001758:	4b6e      	ldr	r3, [pc, #440]	@ (8001914 <main+0x384>)
 800175a:	edc3 7a00 	vstr	s15, [r3]
    v_in_filt = alpha * v_in + (1.0f - alpha) * v_in_filt;
 800175e:	4b68      	ldr	r3, [pc, #416]	@ (8001900 <main+0x370>)
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001770:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001774:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001778:	4b67      	ldr	r3, [pc, #412]	@ (8001918 <main+0x388>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	4b64      	ldr	r3, [pc, #400]	@ (8001918 <main+0x388>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
    i_out_filt = alpha * i_out + (1.0f - alpha) * i_out_filt;
 800178c:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <main+0x374>)
 800178e:	ed93 7a00 	vldr	s14, [r3]
 8001792:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800179e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80017a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a6:	4b5d      	ldr	r3, [pc, #372]	@ (800191c <main+0x38c>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	4b59      	ldr	r3, [pc, #356]	@ (800191c <main+0x38c>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]

    // Use filtered values for control and feedback
    v_out = v_out_filt;
 80017ba:	4b56      	ldr	r3, [pc, #344]	@ (8001914 <main+0x384>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a4f      	ldr	r2, [pc, #316]	@ (80018fc <main+0x36c>)
 80017c0:	6013      	str	r3, [r2, #0]
    v_in = v_in_filt;
 80017c2:	4b55      	ldr	r3, [pc, #340]	@ (8001918 <main+0x388>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001900 <main+0x370>)
 80017c8:	6013      	str	r3, [r2, #0]
    i_out = i_out_filt;
 80017ca:	4b54      	ldr	r3, [pc, #336]	@ (800191c <main+0x38c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001904 <main+0x374>)
 80017d0:	6013      	str	r3, [r2, #0]

    char vin_str[32];

    if(feedback){
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <main+0x390>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d02c      	beq.n	8001834 <main+0x2a4>
      feedback=0;
 80017da:	4b51      	ldr	r3, [pc, #324]	@ (8001920 <main+0x390>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
      snprintf(vin_str, sizeof(vin_str), "VOUT:%.2f,IOUT:%.2f,VIN:%.2f\r\n", v_out, i_out, v_in);
 80017e0:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <main+0x36c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe feb7 	bl	8000558 <__aeabi_f2d>
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
 80017ee:	4b45      	ldr	r3, [pc, #276]	@ (8001904 <main+0x374>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe feb0 	bl	8000558 <__aeabi_f2d>
 80017f8:	4680      	mov	r8, r0
 80017fa:	4689      	mov	r9, r1
 80017fc:	4b40      	ldr	r3, [pc, #256]	@ (8001900 <main+0x370>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fea9 	bl	8000558 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	1d38      	adds	r0, r7, #4
 800180c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001810:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001814:	e9cd 4500 	strd	r4, r5, [sp]
 8001818:	4a42      	ldr	r2, [pc, #264]	@ (8001924 <main+0x394>)
 800181a:	2120      	movs	r1, #32
 800181c:	f009 fdac 	bl	800b378 <sniprintf>
      CDC_Transmit_FS((uint8_t*)vin_str, strlen(vin_str));
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fd2c 	bl	8000280 <strlen>
 8001828:	4602      	mov	r2, r0
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f008 fa2a 	bl	8009c88 <CDC_Transmit_FS>
    }



    // Voltage control loop
    float voltageError = targetVoltage - v_out; // Calculate voltage error
 8001834:	4b3c      	ldr	r3, [pc, #240]	@ (8001928 <main+0x398>)
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <main+0x36c>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float voltageControl = kp * voltageError; // Proportional control for voltage
 8001848:	4b38      	ldr	r3, [pc, #224]	@ (800192c <main+0x39c>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    // } else if (pulseWidth > 1.0f) {
    //   pulseWidth = 1.0f; // Ensure pulse width does not exceed 1
    // }

    // Current control loop
    float currentError = targetCurrent - i_out; // Calculate current error
 800185a:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <main+0x3a0>)
 800185c:	ed93 7a00 	vldr	s14, [r3]
 8001860:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <main+0x374>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800186a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float currentControl = ki * currentError; // Integral control for current
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <main+0x3a4>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    if(i_out > targetCurrent) 
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <main+0x374>)
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <main+0x3a0>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	dd0a      	ble.n	80018ac <main+0x31c>
      pulseWidth += currentControl; // Adjust pulse width based on current control
 8001896:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <main+0x3a8>)
 8001898:	ed93 7a00 	vldr	s14, [r3]
 800189c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80018a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <main+0x3a8>)
 80018a6:	edc3 7a00 	vstr	s15, [r3]
 80018aa:	e009      	b.n	80018c0 <main+0x330>
    else 
      pulseWidth += voltageControl; // Adjust pulse width based on voltage control
 80018ac:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <main+0x3a8>)
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <main+0x3a8>)
 80018bc:	edc3 7a00 	vstr	s15, [r3]

    if (pulseWidth < 0.0f) {
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <main+0x3a8>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	d535      	bpl.n	800193c <main+0x3ac>
      pulseWidth = 0.0f; // Ensure pulse width does not go below 0
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <main+0x3a8>)
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e03d      	b.n	8001956 <main+0x3c6>
 80018da:	bf00      	nop
 80018dc:	f3af 8000 	nop.w
 80018e0:	cccccccd 	.word	0xcccccccd
 80018e4:	4016cccc 	.word	0x4016cccc
 80018e8:	e0000000 	.word	0xe0000000
 80018ec:	3f4a680c 	.word	0x3f4a680c
 80018f0:	2e8ba2e9 	.word	0x2e8ba2e9
 80018f4:	407c68ba 	.word	0x407c68ba
 80018f8:	0800ec90 	.word	0x0800ec90
 80018fc:	20000484 	.word	0x20000484
 8001900:	20000488 	.word	0x20000488
 8001904:	2000048c 	.word	0x2000048c
 8001908:	20000494 	.word	0x20000494
 800190c:	0800ec9c 	.word	0x0800ec9c
 8001910:	0800eca8 	.word	0x0800eca8
 8001914:	20000498 	.word	0x20000498
 8001918:	2000049c 	.word	0x2000049c
 800191c:	200004a0 	.word	0x200004a0
 8001920:	20000490 	.word	0x20000490
 8001924:	0800ecb4 	.word	0x0800ecb4
 8001928:	20000014 	.word	0x20000014
 800192c:	2000001c 	.word	0x2000001c
 8001930:	20000018 	.word	0x20000018
 8001934:	20000020 	.word	0x20000020
 8001938:	20000010 	.word	0x20000010
    } else if (pulseWidth > 0.99f) {
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <main+0x3e8>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800197c <main+0x3ec>
 8001946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	dd02      	ble.n	8001956 <main+0x3c6>
      pulseWidth = 0.99f; // Ensure pulse width does not exceed 1
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <main+0x3e8>)
 8001952:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <main+0x3f0>)
 8001954:	601a      	str	r2, [r3, #0]
    }

    if(output)
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <main+0x3f4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <main+0x3de>
      pwm(pulseWidth); // Set PWM output based on pulse width
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <main+0x3e8>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eeb0 0a67 	vmov.f32	s0, s15
 8001968:	f7ff fdcc 	bl	8001504 <pwm>
 800196c:	e643      	b.n	80015f6 <main+0x66>
    else 
      pwm(0);
 800196e:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001988 <main+0x3f8>
 8001972:	f7ff fdc7 	bl	8001504 <pwm>
  {
 8001976:	e63e      	b.n	80015f6 <main+0x66>
 8001978:	20000010 	.word	0x20000010
 800197c:	3f7d70a4 	.word	0x3f7d70a4
 8001980:	3f7d70a4 	.word	0x3f7d70a4
 8001984:	20000024 	.word	0x20000024
 8001988:	00000000 	.word	0x00000000

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b094      	sub	sp, #80	@ 0x50
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2230      	movs	r2, #48	@ 0x30
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f009 fda1 	bl	800b4e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <SystemClock_Config+0xc8>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	4a26      	ldr	r2, [pc, #152]	@ (8001a54 <SystemClock_Config+0xc8>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <SystemClock_Config+0xc8>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a20      	ldr	r2, [pc, #128]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80019fc:	230c      	movs	r3, #12
 80019fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 92;
 8001a00:	235c      	movs	r3, #92	@ 0x5c
 8001a02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fad7 	bl	8004fc4 <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a1c:	f000 f9f8 	bl	8001e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fd39 	bl	80054b4 <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a48:	f000 f9e2 	bl	8001e10 <Error_Handler>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3750      	adds	r7, #80	@ 0x50
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a70:	4a21      	ldr	r2, [pc, #132]	@ (8001af8 <MX_ADC1_Init+0x9c>)
 8001a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001a9c:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <MX_ADC1_Init+0xa0>)
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aba:	480e      	ldr	r0, [pc, #56]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001abc:	f000 fcd6 	bl	800246c <HAL_ADC_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 f9a3 	bl	8001e10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001aca:	2309      	movs	r3, #9
 8001acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <MX_ADC1_Init+0x98>)
 8001adc:	f000 fe8a 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ae6:	f000 f993 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000310 	.word	0x20000310
 8001af8:	40012000 	.word	0x40012000
 8001afc:	0f000001 	.word	0x0f000001

08001b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b06:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <MX_I2C1_Init+0x54>)
 8001b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b0c:	4a12      	ldr	r2, [pc, #72]	@ (8001b58 <MX_I2C1_Init+0x58>)
 8001b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b30:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <MX_I2C1_Init+0x50>)
 8001b3e:	f001 fb51 	bl	80031e4 <HAL_I2C_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b48:	f000 f962 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000358 	.word	0x20000358
 8001b54:	40005400 	.word	0x40005400
 8001b58:	000186a0 	.word	0x000186a0

08001b5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf8 <MX_TIM1_Init+0x9c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b8c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ba4:	4813      	ldr	r0, [pc, #76]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001ba6:	f003 fe51 	bl	800584c <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f000 f92e 	bl	8001e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001bc2:	f004 f85d 	bl	8005c80 <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bcc:	f000 f920 	bl	8001e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001bde:	f004 fbe9 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001be8:	f000 f912 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200003ac 	.word	0x200003ac
 8001bf8:	40010000 	.word	0x40010000

08001bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	@ 0x38
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	f107 0320 	add.w	r3, r7, #32
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	615a      	str	r2, [r3, #20]
 8001c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c42:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c54:	4823      	ldr	r0, [pc, #140]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c56:	f003 fdf9 	bl	800584c <HAL_TIM_Base_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c60:	f000 f8d6 	bl	8001e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	481c      	ldr	r0, [pc, #112]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c72:	f004 f805 	bl	8005c80 <HAL_TIM_ConfigClockSource>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c7c:	f000 f8c8 	bl	8001e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c80:	4818      	ldr	r0, [pc, #96]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001c82:	f003 fe32 	bl	80058ea <HAL_TIM_PWM_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c8c:	f000 f8c0 	bl	8001e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4811      	ldr	r0, [pc, #68]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001ca0:	f004 fb88 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001caa:	f000 f8b1 	bl	8001e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cae:	2360      	movs	r3, #96	@ 0x60
 8001cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001cc6:	f003 ff19 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cd0:	f000 f89e 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cd4:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <MX_TIM2_Init+0xe8>)
 8001cd6:	f000 f9bd 	bl	8002054 <HAL_TIM_MspPostInit>

}
 8001cda:	bf00      	nop
 8001cdc:	3738      	adds	r7, #56	@ 0x38
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200003f4 	.word	0x200003f4

08001ce8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_TIM10_Init+0x40>)
 8001cee:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <MX_TIM10_Init+0x44>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 25-1;
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <MX_TIM10_Init+0x40>)
 8001cf4:	2218      	movs	r2, #24
 8001cf6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_TIM10_Init+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <MX_TIM10_Init+0x40>)
 8001d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_TIM10_Init+0x40>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_TIM10_Init+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_TIM10_Init+0x40>)
 8001d14:	f003 fd9a 	bl	800584c <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001d1e:	f000 f877 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000043c 	.word	0x2000043c
 8001d2c:	40014400 	.word	0x40014400

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b27      	ldr	r3, [pc, #156]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a26      	ldr	r2, [pc, #152]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a1f      	ldr	r2, [pc, #124]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_GPIO_Init+0xd4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dbc:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <MX_GPIO_Init+0xd8>)
 8001dbe:	f001 f9dd 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480b      	ldr	r0, [pc, #44]	@ (8001e08 <MX_GPIO_Init+0xd8>)
 8001ddc:	f001 f84a 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEM_Pin */
  GPIO_InitStruct.Pin = TEM_Pin;
 8001de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEM_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_GPIO_Init+0xdc>)
 8001df6:	f001 f83d 	bl	8002e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	@ 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020400 	.word	0x40020400

08001e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <Error_Handler+0x8>

08001e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	@ 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <HAL_ADC_MspInit+0xb0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d141      	bne.n	8001f12 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_ADC_MspInit+0xb4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480b      	ldr	r0, [pc, #44]	@ (8001f24 <HAL_ADC_MspInit+0xb8>)
 8001ef6:	f000 ffbd 	bl	8002e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001efa:	2302      	movs	r3, #2
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efe:	2303      	movs	r3, #3
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <HAL_ADC_MspInit+0xbc>)
 8001f0e:	f000 ffb1 	bl	8002e74 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40012000 	.word	0x40012000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400

08001f2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_I2C_MspInit+0x84>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12b      	bne.n	8001fa6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f6a:	23c0      	movs	r3, #192	@ 0xc0
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6e:	2312      	movs	r3, #18
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <HAL_I2C_MspInit+0x8c>)
 8001f86:	f000 ff75 	bl	8002e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	@ 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020400 	.word	0x40020400

08001fbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002048 <HAL_TIM_Base_MspInit+0x8c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001fea:	e026      	b.n	800203a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	4a13      	ldr	r2, [pc, #76]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6413      	str	r3, [r2, #64]	@ 0x40
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
}
 8002012:	e012      	b.n	800203a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <HAL_TIM_Base_MspInit+0x94>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10d      	bne.n	800203a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	4a09      	ldr	r2, [pc, #36]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8002028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202c:	6453      	str	r3, [r2, #68]	@ 0x44
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <HAL_TIM_Base_MspInit+0x90>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40023800 	.word	0x40023800
 8002050:	40014400 	.word	0x40014400

08002054 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002074:	d11e      	bne.n	80020b4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_TIM_MspPostInit+0x68>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a0f      	ldr	r2, [pc, #60]	@ (80020bc <HAL_TIM_MspPostInit+0x68>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_TIM_MspPostInit+0x68>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002096:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	4804      	ldr	r0, [pc, #16]	@ (80020c0 <HAL_TIM_MspPostInit+0x6c>)
 80020b0:	f000 fee0 	bl	8002e74 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <NMI_Handler+0x4>

080020cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <MemManage_Handler+0x4>

080020dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211a:	f000 f963 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */



  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002128:	4803      	ldr	r0, [pc, #12]	@ (8002138 <OTG_FS_IRQHandler+0x14>)
 800212a:	f001 fe3c 	bl	8003da6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  toggle();
 800212e:	f7ff fa21 	bl	8001574 <toggle>

  

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000198c 	.word	0x2000198c

0800213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_kill>:

int _kill(int pid, int sig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002156:	f009 fa17 	bl	800b588 <__errno>
 800215a:	4603      	mov	r3, r0
 800215c:	2216      	movs	r2, #22
 800215e:	601a      	str	r2, [r3, #0]
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_exit>:

void _exit (int status)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002174:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffe7 	bl	800214c <_kill>
  while (1) {}    /* Make sure we hang here */
 800217e:	bf00      	nop
 8002180:	e7fd      	b.n	800217e <_exit+0x12>

08002182 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e00a      	b.n	80021aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002194:	f3af 8000 	nop.w
 8002198:	4601      	mov	r1, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	b2ca      	uxtb	r2, r1
 80021a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	dbf0      	blt.n	8002194 <_read+0x12>
  }

  return len;
 80021b2:	687b      	ldr	r3, [r7, #4]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e009      	b.n	80021e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	60ba      	str	r2, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dbf1      	blt.n	80021ce <_write+0x12>
  }
  return len;
 80021ea:	687b      	ldr	r3, [r7, #4]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_close>:

int _close(int file)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800221c:	605a      	str	r2, [r3, #4]
  return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_isatty>:

int _isatty(int file)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	@ (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f009 f97c 	bl	800b588 <__errno>
 8002290:	4603      	mov	r3, r0
 8002292:	220c      	movs	r2, #12
 8002294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20020000 	.word	0x20020000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	200004a4 	.word	0x200004a4
 80022c4:	200021e0 	.word	0x200021e0

080022c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <SystemInit+0x20>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <SystemInit+0x20>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
                                                                                                                                                                                          ldr   sp, =_estack    		 /* set stack pointer */
 80022ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002324 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022f0:	f7ff ffea 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022f6:	490d      	ldr	r1, [pc, #52]	@ (800232c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800230c:	4c0a      	ldr	r4, [pc, #40]	@ (8002338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800231a:	f009 f93b 	bl	800b594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231e:	f7ff f937 	bl	8001590 <main>
  bx  lr    
 8002322:	4770      	bx	lr
                                                                                                                                                                                          ldr   sp, =_estack    		 /* set stack pointer */
 8002324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8002330:	0800f16c 	.word	0x0800f16c
  ldr r2, =_sbss
 8002334:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8002338:	200021dc 	.word	0x200021dc

0800233c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC_IRQHandler>
	...

08002340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <HAL_Init+0x40>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800234e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_Init+0x40>)
 8002356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <HAL_Init+0x40>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f000 fd41 	bl	8002df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236e:	200f      	movs	r0, #15
 8002370:	f000 f808 	bl	8002384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002374:	f7ff fd52 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_InitTick+0x54>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_InitTick+0x58>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800239a:	fbb3 f3f1 	udiv	r3, r3, r1
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fd59 	bl	8002e5a <HAL_SYSTICK_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00e      	b.n	80023d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d80a      	bhi.n	80023ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023c0:	f000 fd21 	bl	8002e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c4:	4a06      	ldr	r2, [pc, #24]	@ (80023e0 <HAL_InitTick+0x5c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000028 	.word	0x20000028
 80023dc:	20000030 	.word	0x20000030
 80023e0:	2000002c 	.word	0x2000002c

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000030 	.word	0x20000030
 8002408:	200004a8 	.word	0x200004a8

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200004a8 	.word	0x200004a8

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000030 	.word	0x20000030

0800246c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e033      	b.n	80024ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fcee 	bl	8001e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024b2:	f023 0302 	bic.w	r3, r3, #2
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 faca 	bl	8002a58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024da:	e001      	b.n	80024e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_Start+0x1a>
 800250a:	2302      	movs	r3, #2
 800250c:	e097      	b.n	800263e <HAL_ADC_Start+0x14a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d018      	beq.n	8002556 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002534:	4b45      	ldr	r3, [pc, #276]	@ (800264c <HAL_ADC_Start+0x158>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a45      	ldr	r2, [pc, #276]	@ (8002650 <HAL_ADC_Start+0x15c>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9a      	lsrs	r2, r3, #18
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002548:	e002      	b.n	8002550 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3b01      	subs	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d15f      	bne.n	8002624 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800258e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a2:	d106      	bne.n	80025b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a8:	f023 0206 	bic.w	r2, r3, #6
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80025b0:	e002      	b.n	80025b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c0:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_ADC_Start+0x160>)
 80025c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025cc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d129      	bne.n	800263c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e020      	b.n	800263c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a16      	ldr	r2, [pc, #88]	@ (8002658 <HAL_ADC_Start+0x164>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d11b      	bne.n	800263c <HAL_ADC_Start+0x148>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	e00b      	b.n	800263c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000028 	.word	0x20000028
 8002650:	431bde83 	.word	0x431bde83
 8002654:	40012300 	.word	0x40012300
 8002658:	40012000 	.word	0x40012000

0800265c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Stop+0x16>
 800266e:	2302      	movs	r3, #2
 8002670:	e021      	b.n	80026b6 <HAL_ADC_Stop+0x5a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026de:	d113      	bne.n	8002708 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ee:	d10b      	bne.n	8002708 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e063      	b.n	80027d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7ff fe80 	bl	800240c <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800270e:	e021      	b.n	8002754 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002716:	d01d      	beq.n	8002754 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_ADC_PollForConversion+0x6c>
 800271e:	f7ff fe75 	bl	800240c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d212      	bcs.n	8002754 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d00b      	beq.n	8002754 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e03d      	b.n	80027d0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d1d6      	bne.n	8002710 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f06f 0212 	mvn.w	r2, #18
 800276a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d123      	bne.n	80027ce <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11f      	bne.n	80027ce <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002794:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d111      	bne.n	80027ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1c>
 800280c:	2302      	movs	r3, #2
 800280e:	e113      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x244>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b09      	cmp	r3, #9
 800281e:	d925      	bls.n	800286c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	3b1e      	subs	r3, #30
 8002836:	2207      	movs	r2, #7
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	400a      	ands	r2, r1
 8002844:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68d9      	ldr	r1, [r3, #12]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	4603      	mov	r3, r0
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4403      	add	r3, r0
 800285e:	3b1e      	subs	r3, #30
 8002860:	409a      	lsls	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	e022      	b.n	80028b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	2207      	movs	r2, #7
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	400a      	ands	r2, r1
 800288e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6919      	ldr	r1, [r3, #16]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4403      	add	r3, r0
 80028a8:	409a      	lsls	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d824      	bhi.n	8002904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	3b05      	subs	r3, #5
 80028cc:	221f      	movs	r2, #31
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	400a      	ands	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	3b05      	subs	r3, #5
 80028f6:	fa00 f203 	lsl.w	r2, r0, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34
 8002902:	e04c      	b.n	800299e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d824      	bhi.n	8002956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b23      	subs	r3, #35	@ 0x23
 800291e:	221f      	movs	r2, #31
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43da      	mvns	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	400a      	ands	r2, r1
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	4618      	mov	r0, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b23      	subs	r3, #35	@ 0x23
 8002948:	fa00 f203 	lsl.w	r2, r0, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
 8002954:	e023      	b.n	800299e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b41      	subs	r3, #65	@ 0x41
 8002968:	221f      	movs	r2, #31
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b41      	subs	r3, #65	@ 0x41
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299e:	4b29      	ldr	r3, [pc, #164]	@ (8002a44 <HAL_ADC_ConfigChannel+0x250>)
 80029a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a28      	ldr	r2, [pc, #160]	@ (8002a48 <HAL_ADC_ConfigChannel+0x254>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d10f      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d8>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b12      	cmp	r3, #18
 80029b2:	d10b      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <HAL_ADC_ConfigChannel+0x254>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d12b      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x23a>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1c      	ldr	r2, [pc, #112]	@ (8002a4c <HAL_ADC_ConfigChannel+0x258>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x1f4>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d122      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <HAL_ADC_ConfigChannel+0x258>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d111      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0a:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_ADC_ConfigChannel+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a11      	ldr	r2, [pc, #68]	@ (8002a54 <HAL_ADC_ConfigChannel+0x260>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9a      	lsrs	r2, r3, #18
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a20:	e002      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f9      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40012300 	.word	0x40012300
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	10000012 	.word	0x10000012
 8002a50:	20000028 	.word	0x20000028
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a60:	4b79      	ldr	r3, [pc, #484]	@ (8002c48 <ADC_Init+0x1f0>)
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <ADC_Init+0x1f4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	e00f      	b.n	8002b56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0202 	bic.w	r2, r2, #2
 8002b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7e1b      	ldrb	r3, [r3, #24]
 8002b70:	005a      	lsls	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	035a      	lsls	r2, r3, #13
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e007      	b.n	8002bcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	051a      	lsls	r2, r3, #20
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c0e:	025a      	lsls	r2, r3, #9
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	029a      	lsls	r2, r3, #10
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	0f000001 	.word	0x0f000001

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	@ (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	@ (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	@ (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	@ (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	@ 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
         );
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	@ 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dbc:	d301      	bcc.n	8002dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00f      	b.n	8002de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <SysTick_Config+0x40>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dca:	210f      	movs	r1, #15
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dd0:	f7ff ff8e 	bl	8002cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <SysTick_Config+0x40>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dda:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <SysTick_Config+0x40>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff29 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e18:	f7ff ff3e 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f7ff ff8e 	bl	8002d44 <NVIC_EncodePriority>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff5d 	bl	8002cf0 <__NVIC_SetPriority>
}
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff31 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ffa2 	bl	8002dac <SysTick_Config>
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e159      	b.n	8003144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8148 	bne.w	800313e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d005      	beq.n	8002ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d130      	bne.n	8002f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0201 	and.w	r2, r3, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d017      	beq.n	8002f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a2 	beq.w	800313e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b57      	ldr	r3, [pc, #348]	@ (800315c <HAL_GPIO_Init+0x2e8>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003002:	4a56      	ldr	r2, [pc, #344]	@ (800315c <HAL_GPIO_Init+0x2e8>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003008:	6453      	str	r3, [r2, #68]	@ 0x44
 800300a:	4b54      	ldr	r3, [pc, #336]	@ (800315c <HAL_GPIO_Init+0x2e8>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003016:	4a52      	ldr	r2, [pc, #328]	@ (8003160 <HAL_GPIO_Init+0x2ec>)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a49      	ldr	r2, [pc, #292]	@ (8003164 <HAL_GPIO_Init+0x2f0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x202>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a48      	ldr	r2, [pc, #288]	@ (8003168 <HAL_GPIO_Init+0x2f4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x1fe>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a47      	ldr	r2, [pc, #284]	@ (800316c <HAL_GPIO_Init+0x2f8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x1fa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a46      	ldr	r2, [pc, #280]	@ (8003170 <HAL_GPIO_Init+0x2fc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x1f6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a45      	ldr	r2, [pc, #276]	@ (8003174 <HAL_GPIO_Init+0x300>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x1f2>
 8003062:	2304      	movs	r3, #4
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003066:	2307      	movs	r3, #7
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x204>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x204>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	4935      	ldr	r1, [pc, #212]	@ (8003160 <HAL_GPIO_Init+0x2ec>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	4b38      	ldr	r3, [pc, #224]	@ (8003178 <HAL_GPIO_Init+0x304>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003178 <HAL_GPIO_Init+0x304>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003178 <HAL_GPIO_Init+0x304>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e4:	4a24      	ldr	r2, [pc, #144]	@ (8003178 <HAL_GPIO_Init+0x304>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ea:	4b23      	ldr	r3, [pc, #140]	@ (8003178 <HAL_GPIO_Init+0x304>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800310e:	4a1a      	ldr	r2, [pc, #104]	@ (8003178 <HAL_GPIO_Init+0x304>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003114:	4b18      	ldr	r3, [pc, #96]	@ (8003178 <HAL_GPIO_Init+0x304>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003138:	4a0f      	ldr	r2, [pc, #60]	@ (8003178 <HAL_GPIO_Init+0x304>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f aea2 	bls.w	8002e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	40013800 	.word	0x40013800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020400 	.word	0x40020400
 800316c:	40020800 	.word	0x40020800
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40013c00 	.word	0x40013c00

0800317c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	807b      	strh	r3, [r7, #2]
 8003188:	4613      	mov	r3, r2
 800318a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800318c:	787b      	ldrb	r3, [r7, #1]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003198:	e003      	b.n	80031a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319a:	887b      	ldrh	r3, [r7, #2]
 800319c:	041a      	lsls	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	619a      	str	r2, [r3, #24]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c0:	887a      	ldrh	r2, [r7, #2]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	041a      	lsls	r2, r3, #16
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	400b      	ands	r3, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	619a      	str	r2, [r3, #24]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e12b      	b.n	800344e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fe8e 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	@ 0x24
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003248:	f002 faec 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 800324c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a81      	ldr	r2, [pc, #516]	@ (8003458 <HAL_I2C_Init+0x274>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d807      	bhi.n	8003268 <HAL_I2C_Init+0x84>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a80      	ldr	r2, [pc, #512]	@ (800345c <HAL_I2C_Init+0x278>)
 800325c:	4293      	cmp	r3, r2
 800325e:	bf94      	ite	ls
 8003260:	2301      	movls	r3, #1
 8003262:	2300      	movhi	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e006      	b.n	8003276 <HAL_I2C_Init+0x92>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a7d      	ldr	r2, [pc, #500]	@ (8003460 <HAL_I2C_Init+0x27c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	bf94      	ite	ls
 8003270:	2301      	movls	r3, #1
 8003272:	2300      	movhi	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0e7      	b.n	800344e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a78      	ldr	r2, [pc, #480]	@ (8003464 <HAL_I2C_Init+0x280>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0c9b      	lsrs	r3, r3, #18
 8003288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003458 <HAL_I2C_Init+0x274>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d802      	bhi.n	80032b8 <HAL_I2C_Init+0xd4>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3301      	adds	r3, #1
 80032b6:	e009      	b.n	80032cc <HAL_I2C_Init+0xe8>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	4a69      	ldr	r2, [pc, #420]	@ (8003468 <HAL_I2C_Init+0x284>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	3301      	adds	r3, #1
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	495c      	ldr	r1, [pc, #368]	@ (8003458 <HAL_I2C_Init+0x274>)
 80032e8:	428b      	cmp	r3, r1
 80032ea:	d819      	bhi.n	8003320 <HAL_I2C_Init+0x13c>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e59      	subs	r1, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032fa:	1c59      	adds	r1, r3, #1
 80032fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003300:	400b      	ands	r3, r1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_I2C_Init+0x138>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1e59      	subs	r1, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fbb1 f3f3 	udiv	r3, r1, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331a:	e051      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 800331c:	2304      	movs	r3, #4
 800331e:	e04f      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d111      	bne.n	800334c <HAL_I2C_Init+0x168>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1e58      	subs	r0, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	440b      	add	r3, r1
 8003336:	fbb0 f3f3 	udiv	r3, r0, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e012      	b.n	8003372 <HAL_I2C_Init+0x18e>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	0099      	lsls	r1, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Init+0x196>
 8003376:	2301      	movs	r3, #1
 8003378:	e022      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10e      	bne.n	80033a0 <HAL_I2C_Init+0x1bc>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e58      	subs	r0, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	440b      	add	r3, r1
 8003390:	fbb0 f3f3 	udiv	r3, r0, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800339e:	e00f      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e58      	subs	r0, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	0099      	lsls	r1, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	6809      	ldr	r1, [r1, #0]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6911      	ldr	r1, [r2, #16]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68d2      	ldr	r2, [r2, #12]
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	430b      	orrs	r3, r1
 8003402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	000186a0 	.word	0x000186a0
 800345c:	001e847f 	.word	0x001e847f
 8003460:	003d08ff 	.word	0x003d08ff
 8003464:	431bde83 	.word	0x431bde83
 8003468:	10624dd3 	.word	0x10624dd3

0800346c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	460b      	mov	r3, r1
 800347a:	817b      	strh	r3, [r7, #10]
 800347c:	4613      	mov	r3, r2
 800347e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003480:	f7fe ffc4 	bl	800240c <HAL_GetTick>
 8003484:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	f040 80e0 	bne.w	8003654 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2319      	movs	r3, #25
 800349a:	2201      	movs	r2, #1
 800349c:	4970      	ldr	r1, [pc, #448]	@ (8003660 <HAL_I2C_Master_Transmit+0x1f4>)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f964 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0d3      	b.n	8003656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_I2C_Master_Transmit+0x50>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0cc      	b.n	8003656 <HAL_I2C_Master_Transmit+0x1ea>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d007      	beq.n	80034e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2221      	movs	r2, #33	@ 0x21
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2210      	movs	r2, #16
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	893a      	ldrh	r2, [r7, #8]
 8003512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a50      	ldr	r2, [pc, #320]	@ (8003664 <HAL_I2C_Master_Transmit+0x1f8>)
 8003522:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003524:	8979      	ldrh	r1, [r7, #10]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f89c 	bl	8003668 <I2C_MasterRequestWrite>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e08d      	b.n	8003656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003550:	e066      	b.n	8003620 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	6a39      	ldr	r1, [r7, #32]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fa22 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	2b04      	cmp	r3, #4
 8003568:	d107      	bne.n	800357a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d11b      	bne.n	80035f4 <HAL_I2C_Master_Transmit+0x188>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d017      	beq.n	80035f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	6a39      	ldr	r1, [r7, #32]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fa19 	bl	8003a30 <I2C_WaitOnBTFFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	2b04      	cmp	r3, #4
 800360a:	d107      	bne.n	800361c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e01a      	b.n	8003656 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d194      	bne.n	8003552 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	00100002 	.word	0x00100002
 8003664:	ffff0000 	.word	0xffff0000

08003668 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	460b      	mov	r3, r1
 8003676:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d006      	beq.n	8003692 <I2C_MasterRequestWrite+0x2a>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d003      	beq.n	8003692 <I2C_MasterRequestWrite+0x2a>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003690:	d108      	bne.n	80036a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e00b      	b.n	80036bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	2b12      	cmp	r3, #18
 80036aa:	d107      	bne.n	80036bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f84f 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e2:	d103      	bne.n	80036ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e035      	b.n	800375c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036f8:	d108      	bne.n	800370c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003708:	611a      	str	r2, [r3, #16]
 800370a:	e01b      	b.n	8003744 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	11db      	asrs	r3, r3, #7
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 0306 	and.w	r3, r3, #6
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f063 030f 	orn	r3, r3, #15
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	490e      	ldr	r1, [pc, #56]	@ (8003764 <I2C_MasterRequestWrite+0xfc>)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f898 	bl	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e010      	b.n	800375c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4907      	ldr	r1, [pc, #28]	@ (8003768 <I2C_MasterRequestWrite+0x100>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f888 	bl	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	00010008 	.word	0x00010008
 8003768:	00010002 	.word	0x00010002

0800376c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377c:	e048      	b.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003784:	d044      	beq.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fe fe41 	bl	800240c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d139      	bne.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10d      	bne.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	e00c      	b.n	80037dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d116      	bne.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e023      	b.n	8003858 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0c1b      	lsrs	r3, r3, #16
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10d      	bne.n	8003836 <I2C_WaitOnFlagUntilTimeout+0xca>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	43da      	mvns	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	e00c      	b.n	8003850 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	43da      	mvns	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	d093      	beq.n	800377e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800386e:	e071      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387e:	d123      	bne.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003898:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e067      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ce:	d041      	beq.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d0:	f7fe fd9c 	bl	800240c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d136      	bne.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e00b      	b.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	43da      	mvns	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e021      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d10c      	bne.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	43da      	mvns	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e00b      	b.n	8003990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	f47f af6d 	bne.w	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ac:	e034      	b.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f886 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e034      	b.n	8003a28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c4:	d028      	beq.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe fd21 	bl	800240c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11d      	bne.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	2b80      	cmp	r3, #128	@ 0x80
 80039e8:	d016      	beq.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e007      	b.n	8003a28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a22:	2b80      	cmp	r3, #128	@ 0x80
 8003a24:	d1c3      	bne.n	80039ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a3c:	e034      	b.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f83e 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e034      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a54:	d028      	beq.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	f7fe fcd9 	bl	800240c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11d      	bne.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d016      	beq.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d1c3      	bne.n	8003a3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad6:	d11b      	bne.n	8003b10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f043 0204 	orr.w	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af02      	add	r7, sp, #8
 8003b24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e101      	b.n	8003d34 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f006 f9e4 	bl	8009f18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2203      	movs	r2, #3
 8003b54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b5e:	d102      	bne.n	8003b66 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 fda7 	bl	80066be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7c1a      	ldrb	r2, [r3, #16]
 8003b78:	f88d 2000 	strb.w	r2, [sp]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b80:	f002 fc86 	bl	8006490 <USB_CoreInit>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0ce      	b.n	8003d34 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f002 fd9f 	bl	80066e0 <USB_SetCurrentMode>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0bf      	b.n	8003d34 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e04a      	b.n	8003c50 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bba:	7bfa      	ldrb	r2, [r7, #15]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3315      	adds	r3, #21
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bce:	7bfa      	ldrb	r2, [r7, #15]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3314      	adds	r3, #20
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	b298      	uxth	r0, r3
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	332e      	adds	r3, #46	@ 0x2e
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3318      	adds	r3, #24
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	331c      	adds	r3, #28
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	3320      	adds	r3, #32
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3324      	adds	r3, #36	@ 0x24
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	791b      	ldrb	r3, [r3, #4]
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3af      	bcc.n	8003bba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e044      	b.n	8003cea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	791b      	ldrb	r3, [r3, #4]
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d3b5      	bcc.n	8003c60 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7c1a      	ldrb	r2, [r3, #16]
 8003cfc:	f88d 2000 	strb.w	r2, [sp]
 8003d00:	3304      	adds	r3, #4
 8003d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d04:	f002 fd38 	bl	8006778 <USB_DevInit>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00c      	b.n	8003d34 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 fd82 	bl	8007836 <USB_DevDisconnect>

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_PCD_Start+0x1c>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e022      	b.n	8003d9e <HAL_PCD_Start+0x62>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f002 fc89 	bl	800669c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fd30 	bl	80077f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003da6:	b590      	push	{r4, r7, lr}
 8003da8:	b08d      	sub	sp, #52	@ 0x34
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f003 fdee 	bl	800799e <USB_GetMode>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 848c 	bne.w	80046e2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 fd52 	bl	8007878 <USB_ReadInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8482 	beq.w	80046e0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 fd3f 	bl	8007878 <USB_ReadInterrupts>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d107      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f002 0202 	and.w	r2, r2, #2
 8003e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 fd2d 	bl	8007878 <USB_ReadInterrupts>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d161      	bne.n	8003eec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0210 	bic.w	r2, r2, #16
 8003e36:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003e5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e62:	d124      	bne.n	8003eae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d035      	beq.n	8003edc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	6a38      	ldr	r0, [r7, #32]
 8003e84:	f003 fb64 	bl	8007550 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e94:	441a      	add	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ea6:	441a      	add	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	615a      	str	r2, [r3, #20]
 8003eac:	e016      	b.n	8003edc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003eb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003eb8:	d110      	bne.n	8003edc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6a38      	ldr	r0, [r7, #32]
 8003ec6:	f003 fb43 	bl	8007550 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed6:	441a      	add	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0210 	orr.w	r2, r2, #16
 8003eea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f003 fcc1 	bl	8007878 <USB_ReadInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003efc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f00:	f040 80a7 	bne.w	8004052 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fcc6 	bl	800789e <USB_ReadDevAllOutEpInterrupt>
 8003f12:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f14:	e099      	b.n	800404a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 808e 	beq.w	800403e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fcea 	bl	8007906 <USB_ReadDevOutEPInterrupt>
 8003f32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fea4 	bl	8004ca0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2308      	movs	r3, #8
 8003f72:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 ff7a 	bl	8004e70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	2310      	movs	r3, #16
 8003f96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d030      	beq.n	8004004 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b80      	cmp	r3, #128	@ 0x80
 8003fac:	d109      	bne.n	8003fc2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fc0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	78db      	ldrb	r3, [r3, #3]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d108      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f006 f88f 	bl	800a110 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	2302      	movs	r3, #2
 8004002:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	2320      	movs	r3, #32
 800401e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004036:	461a      	mov	r2, r3
 8004038:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800403c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	3301      	adds	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f af62 	bne.w	8003f16 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f003 fc0e 	bl	8007878 <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004062:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004066:	f040 80db 	bne.w	8004220 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f003 fc2f 	bl	80078d2 <USB_ReadDevAllInEpInterrupt>
 8004074:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800407a:	e0cd      	b.n	8004218 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80c2 	beq.w	800420c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f003 fc55 	bl	8007942 <USB_ReadDevInEPInterrupt>
 8004098:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d057      	beq.n	8004154 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	2201      	movs	r2, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69f9      	ldr	r1, [r7, #28]
 80040c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040c4:	4013      	ands	r3, r2
 80040c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d4:	461a      	mov	r2, r3
 80040d6:	2301      	movs	r3, #1
 80040d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	799b      	ldrb	r3, [r3, #6]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d132      	bne.n	8004148 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	3320      	adds	r3, #32
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4403      	add	r3, r0
 8004102:	331c      	adds	r3, #28
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4419      	add	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4403      	add	r3, r0
 8004116:	3320      	adds	r3, #32
 8004118:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d113      	bne.n	8004148 <HAL_PCD_IRQHandler+0x3a2>
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3324      	adds	r3, #36	@ 0x24
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004140:	461a      	mov	r2, r3
 8004142:	2101      	movs	r1, #1
 8004144:	f003 fc5c 	bl	8007a00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	b2db      	uxtb	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f005 ff63 	bl	800a01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416a:	461a      	mov	r2, r3
 800416c:	2308      	movs	r3, #8
 800416e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004186:	461a      	mov	r2, r3
 8004188:	2310      	movs	r3, #16
 800418a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a2:	461a      	mov	r2, r3
 80041a4:	2340      	movs	r3, #64	@ 0x40
 80041a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d023      	beq.n	80041fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041b4:	6a38      	ldr	r0, [r7, #32]
 80041b6:	f002 fc43 	bl	8006a40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	3310      	adds	r3, #16
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	3304      	adds	r3, #4
 80041cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	78db      	ldrb	r3, [r3, #3]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d108      	bne.n	80041e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	4619      	mov	r1, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f005 ffa6 	bl	800a134 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f4:	461a      	mov	r2, r3
 80041f6:	2302      	movs	r3, #2
 80041f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fcbd 	bl	8004b86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	3301      	adds	r3, #1
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	f47f af2e 	bne.w	800407c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f003 fb27 	bl	8007878 <USB_ReadInterrupts>
 800422a:	4603      	mov	r3, r0
 800422c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004234:	d122      	bne.n	800427c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004250:	2b01      	cmp	r3, #1
 8004252:	d108      	bne.n	8004266 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800425c:	2100      	movs	r1, #0
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fea4 	bl	8004fac <HAL_PCDEx_LPM_Callback>
 8004264:	e002      	b.n	800426c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f005 ff44 	bl	800a0f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800427a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f003 faf9 	bl	8007878 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800428c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004290:	d112      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d102      	bne.n	80042a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f005 ff00 	bl	800a0a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f003 fadb 	bl	8007878 <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042cc:	f040 80b7 	bne.w	800443e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2110      	movs	r1, #16
 80042ea:	4618      	mov	r0, r3
 80042ec:	f002 fba8 	bl	8006a40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f4:	e046      	b.n	8004384 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004302:	461a      	mov	r2, r3
 8004304:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004308:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800430a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004324:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004328:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800433c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004358:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800435c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004378:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800437c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004380:	3301      	adds	r3, #1
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	461a      	mov	r2, r3
 800438a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438c:	4293      	cmp	r3, r2
 800438e:	d3b2      	bcc.n	80042f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800439e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80043a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7bdb      	ldrb	r3, [r3, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043bc:	f043 030b 	orr.w	r3, r3, #11
 80043c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043d2:	f043 030b 	orr.w	r3, r3, #11
 80043d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80043d8:	e015      	b.n	8004406 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043ec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80043f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004400:	f043 030b 	orr.w	r3, r3, #11
 8004404:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004414:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004418:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004428:	461a      	mov	r2, r3
 800442a:	f003 fae9 	bl	8007a00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f003 fa18 	bl	8007878 <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800444e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004452:	d123      	bne.n	800449c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f003 faae 	bl	80079ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f002 fb65 	bl	8006b32 <USB_GetDevSpeed>
 8004468:	4603      	mov	r3, r0
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681c      	ldr	r4, [r3, #0]
 8004474:	f001 f9ca 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8004478:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800447e:	461a      	mov	r2, r3
 8004480:	4620      	mov	r0, r4
 8004482:	f002 f869 	bl	8006558 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f005 fdef 	bl	800a06a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800449a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f003 f9e9 	bl	8007878 <USB_ReadInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d10a      	bne.n	80044c6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f005 fdcc 	bl	800a04e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f002 0208 	and.w	r2, r2, #8
 80044c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 f9d4 	bl	8007878 <USB_ReadInterrupts>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d123      	bne.n	8004522 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e6:	2301      	movs	r3, #1
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ea:	e014      	b.n	8004516 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	b2db      	uxtb	r3, r3
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fb0a 	bl	8004b24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	3301      	adds	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	791b      	ldrb	r3, [r3, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	4293      	cmp	r3, r2
 8004520:	d3e4      	bcc.n	80044ec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f003 f9a6 	bl	8007878 <USB_ReadInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004536:	d13c      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004538:	2301      	movs	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
 800453c:	e02b      	b.n	8004596 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3318      	adds	r3, #24
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d115      	bne.n	8004590 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004564:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004566:	2b00      	cmp	r3, #0
 8004568:	da12      	bge.n	8004590 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3317      	adds	r3, #23
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 faca 	bl	8004b24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	3301      	adds	r3, #1
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	791b      	ldrb	r3, [r3, #4]
 800459a:	461a      	mov	r2, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	4293      	cmp	r3, r2
 80045a0:	d3cd      	bcc.n	800453e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80045b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 f95e 	bl	8007878 <USB_ReadInterrupts>
 80045bc:	4603      	mov	r3, r0
 80045be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045c6:	d156      	bne.n	8004676 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045c8:	2301      	movs	r3, #1
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80045cc:	e045      	b.n	800465a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d12e      	bne.n	8004654 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da2b      	bge.n	8004654 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	0c1a      	lsrs	r2, r3, #16
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004606:	4053      	eors	r3, r2
 8004608:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800460c:	2b00      	cmp	r3, #0
 800460e:	d121      	bne.n	8004654 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800464c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004650:	6053      	str	r3, [r2, #4]
            break;
 8004652:	e008      	b.n	8004666 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	3301      	adds	r3, #1
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	791b      	ldrb	r3, [r3, #4]
 800465e:	461a      	mov	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	4293      	cmp	r3, r2
 8004664:	d3b3      	bcc.n	80045ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f003 f8fc 	bl	8007878 <USB_ReadInterrupts>
 8004680:	4603      	mov	r3, r0
 8004682:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468a:	d10a      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f005 fd63 	bl	800a158 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f003 f8e6 	bl	8007878 <USB_ReadInterrupts>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d115      	bne.n	80046e2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f005 fd53 	bl	800a174 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	e000      	b.n	80046e2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80046e0:	bf00      	nop
    }
  }
}
 80046e2:	3734      	adds	r7, #52	@ 0x34
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd90      	pop	{r4, r7, pc}

080046e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_PCD_SetAddress+0x1a>
 80046fe:	2302      	movs	r3, #2
 8004700:	e012      	b.n	8004728 <HAL_PCD_SetAddress+0x40>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f003 f845 	bl	80077a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	461a      	mov	r2, r3
 800473e:	4603      	mov	r3, r0
 8004740:	70fb      	strb	r3, [r7, #3]
 8004742:	460b      	mov	r3, r1
 8004744:	803b      	strh	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800474e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004752:	2b00      	cmp	r3, #0
 8004754:	da0f      	bge.n	8004776 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	3310      	adds	r3, #16
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4413      	add	r3, r2
 800476a:	3304      	adds	r3, #4
 800476c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	705a      	strb	r2, [r3, #1]
 8004774:	e00f      	b.n	8004796 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f003 020f 	and.w	r2, r3, #15
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4413      	add	r3, r2
 800478c:	3304      	adds	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80047a2:	883b      	ldrh	r3, [r7, #0]
 80047a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	78ba      	ldrb	r2, [r7, #2]
 80047b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047c4:	78bb      	ldrb	r3, [r7, #2]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d102      	bne.n	80047d0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_PCD_EP_Open+0xae>
 80047da:	2302      	movs	r3, #2
 80047dc:	e00e      	b.n	80047fc <HAL_PCD_EP_Open+0xcc>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f002 f9c5 	bl	8006b7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80047fa:	7afb      	ldrb	r3, [r7, #11]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da0f      	bge.n	8004838 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f003 020f 	and.w	r2, r3, #15
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	3310      	adds	r3, #16
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	705a      	strb	r2, [r3, #1]
 8004836:	e00f      	b.n	8004858 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_PCD_EP_Close+0x6e>
 800486e:	2302      	movs	r3, #2
 8004870:	e00e      	b.n	8004890 <HAL_PCD_EP_Close+0x8c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	4618      	mov	r0, r3
 8004882:	f002 fa03 	bl	8006c8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	460b      	mov	r3, r1
 80048a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	f003 020f 	and.w	r2, r3, #15
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	3304      	adds	r3, #4
 80048c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2200      	movs	r2, #0
 80048d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048da:	7afb      	ldrb	r3, [r7, #11]
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	799b      	ldrb	r3, [r3, #6]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d102      	bne.n	80048f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	799b      	ldrb	r3, [r3, #6]
 80048fc:	461a      	mov	r2, r3
 80048fe:	6979      	ldr	r1, [r7, #20]
 8004900:	f002 faa0 	bl	8006e44 <USB_EPStartXfer>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004930:	681b      	ldr	r3, [r3, #0]
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	460b      	mov	r3, r1
 800494c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800494e:	7afb      	ldrb	r3, [r7, #11]
 8004950:	f003 020f 	and.w	r2, r3, #15
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3310      	adds	r3, #16
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	3304      	adds	r3, #4
 8004964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2201      	movs	r2, #1
 800497c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800497e:	7afb      	ldrb	r3, [r7, #11]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	b2da      	uxtb	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	799b      	ldrb	r3, [r3, #6]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	799b      	ldrb	r3, [r3, #6]
 80049a0:	461a      	mov	r2, r3
 80049a2:	6979      	ldr	r1, [r7, #20]
 80049a4:	f002 fa4e 	bl	8006e44 <USB_EPStartXfer>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	7912      	ldrb	r2, [r2, #4]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e04f      	b.n	8004a70 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	da0f      	bge.n	80049f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	3310      	adds	r3, #16
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	3304      	adds	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	705a      	strb	r2, [r3, #1]
 80049f6:	e00d      	b.n	8004a14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_EP_SetStall+0x82>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e01d      	b.n	8004a70 <HAL_PCD_EP_SetStall+0xbe>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f002 fddc 	bl	8007600 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7999      	ldrb	r1, [r3, #6]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a60:	461a      	mov	r2, r3
 8004a62:	f002 ffcd 	bl	8007a00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	7912      	ldrb	r2, [r2, #4]
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da0f      	bge.n	8004abe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	3310      	adds	r3, #16
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	705a      	strb	r2, [r3, #1]
 8004abc:	e00f      	b.n	8004ade <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	f003 020f 	and.w	r2, r3, #15
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_PCD_EP_ClrStall+0x86>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e00e      	b.n	8004b1c <HAL_PCD_EP_ClrStall+0xa4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f002 fde5 	bl	80076dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da0c      	bge.n	8004b52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	4613      	mov	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	3310      	adds	r3, #16
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e00c      	b.n	8004b6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 fc04 	bl	8007380 <USB_EPStopXfer>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b08a      	sub	sp, #40	@ 0x28
 8004b8a:	af02      	add	r7, sp, #8
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3310      	adds	r3, #16
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	3304      	adds	r3, #4
 8004bac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d901      	bls.n	8004bbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e06b      	b.n	8004c96 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d902      	bls.n	8004bda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3303      	adds	r3, #3
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004be2:	e02a      	b.n	8004c3a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d902      	bls.n	8004c00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3303      	adds	r3, #3
 8004c04:	089b      	lsrs	r3, r3, #2
 8004c06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68d9      	ldr	r1, [r3, #12]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	6978      	ldr	r0, [r7, #20]
 8004c1e:	f002 fc59 	bl	80074d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	441a      	add	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d809      	bhi.n	8004c64 <PCD_WriteEmptyTxFifo+0xde>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d203      	bcs.n	8004c64 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1bf      	bne.n	8004be4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d811      	bhi.n	8004c94 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2201      	movs	r2, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c90:	4013      	ands	r3, r2
 8004c92:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	333c      	adds	r3, #60	@ 0x3c
 8004cb8:	3304      	adds	r3, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	799b      	ldrb	r3, [r3, #6]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d17b      	bne.n	8004dce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d015      	beq.n	8004d0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4a61      	ldr	r2, [pc, #388]	@ (8004e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f240 80b9 	bls.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80b3 	beq.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d02:	461a      	mov	r2, r3
 8004d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	e0a7      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	2320      	movs	r3, #32
 8004d26:	6093      	str	r3, [r2, #8]
 8004d28:	e098      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 8093 	bne.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4a4b      	ldr	r2, [pc, #300]	@ (8004e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d90f      	bls.n	8004d5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d54:	461a      	mov	r2, r3
 8004d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d5a:	6093      	str	r3, [r2, #8]
 8004d5c:	e07e      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d114      	bne.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004da8:	461a      	mov	r2, r3
 8004daa:	2101      	movs	r1, #1
 8004dac:	f002 fe28 	bl	8007a00 <USB_EP0_OutStart>
 8004db0:	e006      	b.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f005 f90c 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
 8004dcc:	e046      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	@ (8004e6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d124      	bne.n	8004e20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004df2:	6093      	str	r3, [r2, #8]
 8004df4:	e032      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2320      	movs	r3, #32
 8004e10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f005 f8e3 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
 8004e1e:	e01d      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d114      	bne.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f002 fdd8 	bl	8007a00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f005 f8c4 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	4f54300a 	.word	0x4f54300a
 8004e6c:	4f54310a 	.word	0x4f54310a

08004e70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	333c      	adds	r3, #60	@ 0x3c
 8004e88:	3304      	adds	r3, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d90e      	bls.n	8004ec4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f005 f87b 	bl	8009fc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d90c      	bls.n	8004eec <PCD_EP_OutSetupPacket_int+0x7c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	799b      	ldrb	r3, [r3, #6]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d108      	bne.n	8004eec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	f002 fd8a 	bl	8007a00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	4f54300a 	.word	0x4f54300a

08004efc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f1a:	883b      	ldrh	r3, [r7, #0]
 8004f1c:	0419      	lsls	r1, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f28:	e028      	b.n	8004f7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4413      	add	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	e00d      	b.n	8004f5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	3340      	adds	r3, #64	@ 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	3301      	adds	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d3ec      	bcc.n	8004f3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f64:	883b      	ldrh	r3, [r7, #0]
 8004f66:	0418      	lsls	r0, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	4302      	orrs	r2, r0
 8004f74:	3340      	adds	r3, #64	@ 0x40
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e267      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d075      	beq.n	80050ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fe2:	4b88      	ldr	r3, [pc, #544]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d00c      	beq.n	8005008 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fee:	4b85      	ldr	r3, [pc, #532]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d112      	bne.n	8005020 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ffa:	4b82      	ldr	r3, [pc, #520]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005006:	d10b      	bne.n	8005020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005008:	4b7e      	ldr	r3, [pc, #504]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d05b      	beq.n	80050cc <HAL_RCC_OscConfig+0x108>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d157      	bne.n	80050cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e242      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005028:	d106      	bne.n	8005038 <HAL_RCC_OscConfig+0x74>
 800502a:	4b76      	ldr	r3, [pc, #472]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a75      	ldr	r2, [pc, #468]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e01d      	b.n	8005074 <HAL_RCC_OscConfig+0xb0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x98>
 8005042:	4b70      	ldr	r3, [pc, #448]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a6f      	ldr	r2, [pc, #444]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b6d      	ldr	r3, [pc, #436]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6c      	ldr	r2, [pc, #432]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e00b      	b.n	8005074 <HAL_RCC_OscConfig+0xb0>
 800505c:	4b69      	ldr	r3, [pc, #420]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a68      	ldr	r2, [pc, #416]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	4b66      	ldr	r3, [pc, #408]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a65      	ldr	r2, [pc, #404]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 800506e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d013      	beq.n	80050a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fd f9c6 	bl	800240c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005084:	f7fd f9c2 	bl	800240c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	@ 0x64
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e207      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	4b5b      	ldr	r3, [pc, #364]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0xc0>
 80050a2:	e014      	b.n	80050ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fd f9b2 	bl	800240c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ac:	f7fd f9ae 	bl	800240c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	@ 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e1f3      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050be:	4b51      	ldr	r3, [pc, #324]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0xe8>
 80050ca:	e000      	b.n	80050ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d063      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050da:	4b4a      	ldr	r3, [pc, #296]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e6:	4b47      	ldr	r3, [pc, #284]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d11c      	bne.n	800512c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f2:	4b44      	ldr	r3, [pc, #272]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d116      	bne.n	800512c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fe:	4b41      	ldr	r3, [pc, #260]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCC_OscConfig+0x152>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e1c7      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	4b3b      	ldr	r3, [pc, #236]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4937      	ldr	r1, [pc, #220]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	e03a      	b.n	80051a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005134:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <HAL_RCC_OscConfig+0x244>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fd f967 	bl	800240c <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005142:	f7fd f963 	bl	800240c <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e1a8      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005154:	4b2b      	ldr	r3, [pc, #172]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005160:	4b28      	ldr	r3, [pc, #160]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4925      	ldr	r1, [pc, #148]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
 8005174:	e015      	b.n	80051a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <HAL_RCC_OscConfig+0x244>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fd f946 	bl	800240c <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005184:	f7fd f942 	bl	800240c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e187      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d036      	beq.n	800521c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b6:	4b15      	ldr	r3, [pc, #84]	@ (800520c <HAL_RCC_OscConfig+0x248>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd f926 	bl	800240c <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c4:	f7fd f922 	bl	800240c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e167      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <HAL_RCC_OscConfig+0x240>)
 80051d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x200>
 80051e2:	e01b      	b.n	800521c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e4:	4b09      	ldr	r3, [pc, #36]	@ (800520c <HAL_RCC_OscConfig+0x248>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ea:	f7fd f90f 	bl	800240c <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f0:	e00e      	b.n	8005210 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f2:	f7fd f90b 	bl	800240c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d907      	bls.n	8005210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e150      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
 8005204:	40023800 	.word	0x40023800
 8005208:	42470000 	.word	0x42470000
 800520c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005210:	4b88      	ldr	r3, [pc, #544]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ea      	bne.n	80051f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8097 	beq.w	8005358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522e:	4b81      	ldr	r3, [pc, #516]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	4b7d      	ldr	r3, [pc, #500]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	4a7c      	ldr	r2, [pc, #496]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005248:	6413      	str	r3, [r2, #64]	@ 0x40
 800524a:	4b7a      	ldr	r3, [pc, #488]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b77      	ldr	r3, [pc, #476]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d118      	bne.n	8005298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005266:	4b74      	ldr	r3, [pc, #464]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a73      	ldr	r2, [pc, #460]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005272:	f7fd f8cb 	bl	800240c <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fd f8c7 	bl	800240c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e10c      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	4b6a      	ldr	r3, [pc, #424]	@ (8005438 <HAL_RCC_OscConfig+0x474>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d106      	bne.n	80052ae <HAL_RCC_OscConfig+0x2ea>
 80052a0:	4b64      	ldr	r3, [pc, #400]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	4a63      	ldr	r2, [pc, #396]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ac:	e01c      	b.n	80052e8 <HAL_RCC_OscConfig+0x324>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x30c>
 80052b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052bc:	f043 0304 	orr.w	r3, r3, #4
 80052c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0x324>
 80052d0:	4b58      	ldr	r3, [pc, #352]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4a57      	ldr	r2, [pc, #348]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6713      	str	r3, [r2, #112]	@ 0x70
 80052dc:	4b55      	ldr	r3, [pc, #340]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a54      	ldr	r2, [pc, #336]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fd f88c 	bl	800240c <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fd f888 	bl	800240c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0cb      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530e:	4b49      	ldr	r3, [pc, #292]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ee      	beq.n	80052f8 <HAL_RCC_OscConfig+0x334>
 800531a:	e014      	b.n	8005346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531c:	f7fd f876 	bl	800240c <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005322:	e00a      	b.n	800533a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fd f872 	bl	800240c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e0b5      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533a:	4b3e      	ldr	r3, [pc, #248]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ee      	bne.n	8005324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d105      	bne.n	8005358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534c:	4b39      	ldr	r3, [pc, #228]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	4a38      	ldr	r2, [pc, #224]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005356:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80a1 	beq.w	80054a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005362:	4b34      	ldr	r3, [pc, #208]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b08      	cmp	r3, #8
 800536c:	d05c      	beq.n	8005428 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d141      	bne.n	80053fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b31      	ldr	r3, [pc, #196]	@ (800543c <HAL_RCC_OscConfig+0x478>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd f846 	bl	800240c <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005384:	f7fd f842 	bl	800240c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e087      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	4b27      	ldr	r3, [pc, #156]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	019b      	lsls	r3, r3, #6
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	3b01      	subs	r3, #1
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	491b      	ldr	r1, [pc, #108]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053cc:	4b1b      	ldr	r3, [pc, #108]	@ (800543c <HAL_RCC_OscConfig+0x478>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fd f81b 	bl	800240c <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053da:	f7fd f817 	bl	800240c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e05c      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ec:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x416>
 80053f8:	e054      	b.n	80054a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fa:	4b10      	ldr	r3, [pc, #64]	@ (800543c <HAL_RCC_OscConfig+0x478>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005400:	f7fd f804 	bl	800240c <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005408:	f7fd f800 	bl	800240c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e045      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <HAL_RCC_OscConfig+0x470>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x444>
 8005426:	e03d      	b.n	80054a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d107      	bne.n	8005440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e038      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
 8005434:	40023800 	.word	0x40023800
 8005438:	40007000 	.word	0x40007000
 800543c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005440:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <HAL_RCC_OscConfig+0x4ec>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d028      	beq.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d121      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d11a      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005478:	4293      	cmp	r3, r2
 800547a:	d111      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	3b01      	subs	r3, #1
 800548a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023800 	.word	0x40023800

080054b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0cc      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054c8:	4b68      	ldr	r3, [pc, #416]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d90c      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d6:	4b65      	ldr	r3, [pc, #404]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b63      	ldr	r3, [pc, #396]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0b8      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005508:	4b59      	ldr	r3, [pc, #356]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a58      	ldr	r2, [pc, #352]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005520:	4b53      	ldr	r3, [pc, #332]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	4a52      	ldr	r2, [pc, #328]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800552a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800552c:	4b50      	ldr	r3, [pc, #320]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	494d      	ldr	r1, [pc, #308]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d044      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005552:	4b47      	ldr	r3, [pc, #284]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d119      	bne.n	8005592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e07f      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d003      	beq.n	8005572 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556e:	2b03      	cmp	r3, #3
 8005570:	d107      	bne.n	8005582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005572:	4b3f      	ldr	r3, [pc, #252]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e06f      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005582:	4b3b      	ldr	r3, [pc, #236]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e067      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005592:	4b37      	ldr	r3, [pc, #220]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f023 0203 	bic.w	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4934      	ldr	r1, [pc, #208]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a4:	f7fc ff32 	bl	800240c <HAL_GetTick>
 80055a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	e00a      	b.n	80055c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ac:	f7fc ff2e 	bl	800240c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e04f      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 020c 	and.w	r2, r3, #12
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d1eb      	bne.n	80055ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d20c      	bcs.n	80055fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b20      	ldr	r3, [pc, #128]	@ (800566c <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e032      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005608:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4916      	ldr	r1, [pc, #88]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005626:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	490e      	ldr	r1, [pc, #56]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800563a:	f000 f821 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800563e:	4602      	mov	r2, r0
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	490a      	ldr	r1, [pc, #40]	@ (8005674 <HAL_RCC_ClockConfig+0x1c0>)
 800564c:	5ccb      	ldrb	r3, [r1, r3]
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	4a09      	ldr	r2, [pc, #36]	@ (8005678 <HAL_RCC_ClockConfig+0x1c4>)
 8005654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <HAL_RCC_ClockConfig+0x1c8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc fe92 	bl	8002384 <HAL_InitTick>

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40023c00 	.word	0x40023c00
 8005670:	40023800 	.word	0x40023800
 8005674:	0800ed1c 	.word	0x0800ed1c
 8005678:	20000028 	.word	0x20000028
 800567c:	2000002c 	.word	0x2000002c

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005684:	b090      	sub	sp, #64	@ 0x40
 8005686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005698:	4b59      	ldr	r3, [pc, #356]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x180>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d00d      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x40>
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	f200 80a1 	bhi.w	80057ec <HAL_RCC_GetSysClockFreq+0x16c>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x34>
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d003      	beq.n	80056ba <HAL_RCC_GetSysClockFreq+0x3a>
 80056b2:	e09b      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b53      	ldr	r3, [pc, #332]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x184>)
 80056b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056b8:	e09b      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ba:	4b53      	ldr	r3, [pc, #332]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x188>)
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056be:	e098      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x180>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x180>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d028      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x180>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	2200      	movs	r2, #0
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056e8:	2100      	movs	r1, #0
 80056ea:	4b47      	ldr	r3, [pc, #284]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x188>)
 80056ec:	fb03 f201 	mul.w	r2, r3, r1
 80056f0:	2300      	movs	r3, #0
 80056f2:	fb00 f303 	mul.w	r3, r0, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	4a43      	ldr	r2, [pc, #268]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x188>)
 80056fa:	fba0 1202 	umull	r1, r2, r0, r2
 80056fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005700:	460a      	mov	r2, r1
 8005702:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005706:	4413      	add	r3, r2
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570c:	2200      	movs	r2, #0
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	61fa      	str	r2, [r7, #28]
 8005712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005716:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800571a:	f7fb fabd 	bl	8000c98 <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4613      	mov	r3, r2
 8005724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005726:	e053      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005728:	4b35      	ldr	r3, [pc, #212]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x180>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	2200      	movs	r2, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	617a      	str	r2, [r7, #20]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800573a:	f04f 0b00 	mov.w	fp, #0
 800573e:	4652      	mov	r2, sl
 8005740:	465b      	mov	r3, fp
 8005742:	f04f 0000 	mov.w	r0, #0
 8005746:	f04f 0100 	mov.w	r1, #0
 800574a:	0159      	lsls	r1, r3, #5
 800574c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005750:	0150      	lsls	r0, r2, #5
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	ebb2 080a 	subs.w	r8, r2, sl
 800575a:	eb63 090b 	sbc.w	r9, r3, fp
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800576a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800576e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005772:	ebb2 0408 	subs.w	r4, r2, r8
 8005776:	eb63 0509 	sbc.w	r5, r3, r9
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	00eb      	lsls	r3, r5, #3
 8005784:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005788:	00e2      	lsls	r2, r4, #3
 800578a:	4614      	mov	r4, r2
 800578c:	461d      	mov	r5, r3
 800578e:	eb14 030a 	adds.w	r3, r4, sl
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	eb45 030b 	adc.w	r3, r5, fp
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057a6:	4629      	mov	r1, r5
 80057a8:	028b      	lsls	r3, r1, #10
 80057aa:	4621      	mov	r1, r4
 80057ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057b0:	4621      	mov	r1, r4
 80057b2:	028a      	lsls	r2, r1, #10
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ba:	2200      	movs	r2, #0
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	60fa      	str	r2, [r7, #12]
 80057c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c4:	f7fb fa68 	bl	8000c98 <__aeabi_uldivmod>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4613      	mov	r3, r2
 80057ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x180>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	3301      	adds	r3, #1
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80057e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057ea:	e002      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x184>)
 80057ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3740      	adds	r7, #64	@ 0x40
 80057f8:	46bd      	mov	sp, r7
 80057fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800
 8005804:	00f42400 	.word	0x00f42400
 8005808:	017d7840 	.word	0x017d7840

0800580c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_RCC_GetHCLKFreq+0x14>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000028 	.word	0x20000028

08005824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005828:	f7ff fff0 	bl	800580c <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	0a9b      	lsrs	r3, r3, #10
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4903      	ldr	r1, [pc, #12]	@ (8005848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40023800 	.word	0x40023800
 8005848:	0800ed2c 	.word	0x0800ed2c

0800584c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e041      	b.n	80058e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fc fba2 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f000 fac0 	bl	8005e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e041      	b.n	8005980 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f839 	bl	8005988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3304      	adds	r3, #4
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f000 fa71 	bl	8005e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <HAL_TIM_PWM_Start+0x24>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e022      	b.n	8005a06 <HAL_TIM_PWM_Start+0x6a>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d109      	bne.n	80059da <HAL_TIM_PWM_Start+0x3e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	e015      	b.n	8005a06 <HAL_TIM_PWM_Start+0x6a>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d109      	bne.n	80059f4 <HAL_TIM_PWM_Start+0x58>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e008      	b.n	8005a06 <HAL_TIM_PWM_Start+0x6a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e068      	b.n	8005ae0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Start+0x82>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a1c:	e013      	b.n	8005a46 <HAL_TIM_PWM_Start+0xaa>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d104      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x92>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a2c:	e00b      	b.n	8005a46 <HAL_TIM_PWM_Start+0xaa>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d104      	bne.n	8005a3e <HAL_TIM_PWM_Start+0xa2>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a3c:	e003      	b.n	8005a46 <HAL_TIM_PWM_Start+0xaa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fc8a 	bl	8006368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a23      	ldr	r2, [pc, #140]	@ (8005ae8 <HAL_TIM_PWM_Start+0x14c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d107      	bne.n	8005a6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae8 <HAL_TIM_PWM_Start+0x14c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x10e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a80:	d013      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x10e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a19      	ldr	r2, [pc, #100]	@ (8005aec <HAL_TIM_PWM_Start+0x150>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x10e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a17      	ldr	r2, [pc, #92]	@ (8005af0 <HAL_TIM_PWM_Start+0x154>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x10e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <HAL_TIM_PWM_Start+0x158>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x10e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a14      	ldr	r2, [pc, #80]	@ (8005af8 <HAL_TIM_PWM_Start+0x15c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d111      	bne.n	8005ace <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d010      	beq.n	8005ade <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005acc:	e007      	b.n	8005ade <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40014000 	.word	0x40014000

08005afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e0ae      	b.n	8005c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b0c      	cmp	r3, #12
 8005b26:	f200 809f 	bhi.w	8005c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b30:	08005b65 	.word	0x08005b65
 8005b34:	08005c69 	.word	0x08005c69
 8005b38:	08005c69 	.word	0x08005c69
 8005b3c:	08005c69 	.word	0x08005c69
 8005b40:	08005ba5 	.word	0x08005ba5
 8005b44:	08005c69 	.word	0x08005c69
 8005b48:	08005c69 	.word	0x08005c69
 8005b4c:	08005c69 	.word	0x08005c69
 8005b50:	08005be7 	.word	0x08005be7
 8005b54:	08005c69 	.word	0x08005c69
 8005b58:	08005c69 	.word	0x08005c69
 8005b5c:	08005c69 	.word	0x08005c69
 8005b60:	08005c27 	.word	0x08005c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f9d6 	bl	8005f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6999      	ldr	r1, [r3, #24]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	619a      	str	r2, [r3, #24]
      break;
 8005ba2:	e064      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fa1c 	bl	8005fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6999      	ldr	r1, [r3, #24]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	021a      	lsls	r2, r3, #8
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	619a      	str	r2, [r3, #24]
      break;
 8005be4:	e043      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fa67 	bl	80060c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0208 	orr.w	r2, r2, #8
 8005c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0204 	bic.w	r2, r2, #4
 8005c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69d9      	ldr	r1, [r3, #28]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	61da      	str	r2, [r3, #28]
      break;
 8005c24:	e023      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fab1 	bl	8006194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69d9      	ldr	r1, [r3, #28]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	021a      	lsls	r2, r3, #8
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	61da      	str	r2, [r3, #28]
      break;
 8005c66:	e002      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIM_ConfigClockSource+0x1c>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e0b4      	b.n	8005e06 <HAL_TIM_ConfigClockSource+0x186>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd4:	d03e      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0xd4>
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cda:	f200 8087 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce2:	f000 8086 	beq.w	8005df2 <HAL_TIM_ConfigClockSource+0x172>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cea:	d87f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b70      	cmp	r3, #112	@ 0x70
 8005cee:	d01a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0xa6>
 8005cf0:	2b70      	cmp	r3, #112	@ 0x70
 8005cf2:	d87b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b60      	cmp	r3, #96	@ 0x60
 8005cf6:	d050      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x11a>
 8005cf8:	2b60      	cmp	r3, #96	@ 0x60
 8005cfa:	d877      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b50      	cmp	r3, #80	@ 0x50
 8005cfe:	d03c      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0xfa>
 8005d00:	2b50      	cmp	r3, #80	@ 0x50
 8005d02:	d873      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b40      	cmp	r3, #64	@ 0x40
 8005d06:	d058      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x13a>
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	d86f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b30      	cmp	r3, #48	@ 0x30
 8005d0e:	d064      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b30      	cmp	r3, #48	@ 0x30
 8005d12:	d86b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d060      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d867      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05c      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d05a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	e062      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d36:	f000 faf7 	bl	8006328 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
      break;
 8005d52:	e04f      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	f000 fae0 	bl	8006328 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d76:	609a      	str	r2, [r3, #8]
      break;
 8005d78:	e03c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 fa54 	bl	8006234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2150      	movs	r1, #80	@ 0x50
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 faad 	bl	80062f2 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e02c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 fa73 	bl	8006292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2160      	movs	r1, #96	@ 0x60
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fa9d 	bl	80062f2 <TIM_ITRx_SetConfig>
      break;
 8005db8:	e01c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 fa34 	bl	8006234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2140      	movs	r1, #64	@ 0x40
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa8d 	bl	80062f2 <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e00c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f000 fa84 	bl	80062f2 <TIM_ITRx_SetConfig>
      break;
 8005dea:	e003      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	e000      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a37      	ldr	r2, [pc, #220]	@ (8005f00 <TIM_Base_SetConfig+0xf0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00f      	beq.n	8005e48 <TIM_Base_SetConfig+0x38>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2e:	d00b      	beq.n	8005e48 <TIM_Base_SetConfig+0x38>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a34      	ldr	r2, [pc, #208]	@ (8005f04 <TIM_Base_SetConfig+0xf4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d007      	beq.n	8005e48 <TIM_Base_SetConfig+0x38>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a33      	ldr	r2, [pc, #204]	@ (8005f08 <TIM_Base_SetConfig+0xf8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_Base_SetConfig+0x38>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a32      	ldr	r2, [pc, #200]	@ (8005f0c <TIM_Base_SetConfig+0xfc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d108      	bne.n	8005e5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a28      	ldr	r2, [pc, #160]	@ (8005f00 <TIM_Base_SetConfig+0xf0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01b      	beq.n	8005e9a <TIM_Base_SetConfig+0x8a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e68:	d017      	beq.n	8005e9a <TIM_Base_SetConfig+0x8a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a25      	ldr	r2, [pc, #148]	@ (8005f04 <TIM_Base_SetConfig+0xf4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <TIM_Base_SetConfig+0x8a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a24      	ldr	r2, [pc, #144]	@ (8005f08 <TIM_Base_SetConfig+0xf8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_Base_SetConfig+0x8a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a23      	ldr	r2, [pc, #140]	@ (8005f0c <TIM_Base_SetConfig+0xfc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_Base_SetConfig+0x8a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a22      	ldr	r2, [pc, #136]	@ (8005f10 <TIM_Base_SetConfig+0x100>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0x8a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a21      	ldr	r2, [pc, #132]	@ (8005f14 <TIM_Base_SetConfig+0x104>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0x8a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a20      	ldr	r2, [pc, #128]	@ (8005f18 <TIM_Base_SetConfig+0x108>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8005f00 <TIM_Base_SetConfig+0xf0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d103      	bne.n	8005eda <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800

08005f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f023 0201 	bic.w	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 0302 	bic.w	r3, r3, #2
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a1c      	ldr	r2, [pc, #112]	@ (8005fe4 <TIM_OC1_SetConfig+0xc8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d10c      	bne.n	8005f92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0308 	bic.w	r3, r3, #8
 8005f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f023 0304 	bic.w	r3, r3, #4
 8005f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a13      	ldr	r2, [pc, #76]	@ (8005fe4 <TIM_OC1_SetConfig+0xc8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d111      	bne.n	8005fbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	40010000 	.word	0x40010000

08005fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f023 0210 	bic.w	r2, r3, #16
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800601e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0320 	bic.w	r3, r3, #32
 8006032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a1e      	ldr	r2, [pc, #120]	@ (80060bc <TIM_OC2_SetConfig+0xd4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d10d      	bne.n	8006064 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800604e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006062:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <TIM_OC2_SetConfig+0xd4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d113      	bne.n	8006094 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800607a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000

080060c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1d      	ldr	r2, [pc, #116]	@ (8006190 <TIM_OC3_SetConfig+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10d      	bne.n	800613a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a14      	ldr	r2, [pc, #80]	@ (8006190 <TIM_OC3_SetConfig+0xd0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d113      	bne.n	800616a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40010000 	.word	0x40010000

08006194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a10      	ldr	r2, [pc, #64]	@ (8006230 <TIM_OC4_SetConfig+0x9c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	019b      	lsls	r3, r3, #6
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000

08006234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 0201 	bic.w	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800625e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f023 030a 	bic.w	r3, r3, #10
 8006270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	bf00      	nop
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006292:	b480      	push	{r7}
 8006294:	b087      	sub	sp, #28
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f023 0210 	bic.w	r2, r3, #16
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	031b      	lsls	r3, r3, #12
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	f043 0307 	orr.w	r3, r3, #7
 8006314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	609a      	str	r2, [r3, #8]
}
 800631c:	bf00      	nop
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	021a      	lsls	r2, r3, #8
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	431a      	orrs	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4313      	orrs	r3, r2
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	609a      	str	r2, [r3, #8]
}
 800635c:	bf00      	nop
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2201      	movs	r2, #1
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	43db      	mvns	r3, r3
 800638a:	401a      	ands	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1a      	ldr	r2, [r3, #32]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	fa01 f303 	lsl.w	r3, r1, r3
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e050      	b.n	800646e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1c      	ldr	r2, [pc, #112]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d018      	beq.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006418:	d013      	beq.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00e      	beq.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a16      	ldr	r2, [pc, #88]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d009      	beq.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a15      	ldr	r2, [pc, #84]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a13      	ldr	r2, [pc, #76]	@ (800648c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10c      	bne.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	4313      	orrs	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40014000 	.word	0x40014000

08006490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006490:	b084      	sub	sp, #16
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	f107 001c 	add.w	r0, r7, #28
 800649e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d123      	bne.n	80064f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80064be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d105      	bne.n	80064e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fae8 	bl	8007abc <USB_CoreReset>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73fb      	strb	r3, [r7, #15]
 80064f0:	e01b      	b.n	800652a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fadc 	bl	8007abc <USB_CoreReset>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006508:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	@ 0x38
 800651c:	e005      	b.n	800652a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800652a:	7fbb      	ldrb	r3, [r7, #30]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10b      	bne.n	8006548 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f043 0206 	orr.w	r2, r3, #6
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006554:	b004      	add	sp, #16
 8006556:	4770      	bx	lr

08006558 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d165      	bne.n	8006638 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a41      	ldr	r2, [pc, #260]	@ (8006674 <USB_SetTurnaroundTime+0x11c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d906      	bls.n	8006582 <USB_SetTurnaroundTime+0x2a>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a40      	ldr	r2, [pc, #256]	@ (8006678 <USB_SetTurnaroundTime+0x120>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d202      	bcs.n	8006582 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800657c:	230f      	movs	r3, #15
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e062      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4a3c      	ldr	r2, [pc, #240]	@ (8006678 <USB_SetTurnaroundTime+0x120>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d306      	bcc.n	8006598 <USB_SetTurnaroundTime+0x40>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4a3b      	ldr	r2, [pc, #236]	@ (800667c <USB_SetTurnaroundTime+0x124>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d202      	bcs.n	8006598 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006592:	230e      	movs	r3, #14
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e057      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a38      	ldr	r2, [pc, #224]	@ (800667c <USB_SetTurnaroundTime+0x124>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d306      	bcc.n	80065ae <USB_SetTurnaroundTime+0x56>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a37      	ldr	r2, [pc, #220]	@ (8006680 <USB_SetTurnaroundTime+0x128>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d202      	bcs.n	80065ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80065a8:	230d      	movs	r3, #13
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e04c      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4a33      	ldr	r2, [pc, #204]	@ (8006680 <USB_SetTurnaroundTime+0x128>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d306      	bcc.n	80065c4 <USB_SetTurnaroundTime+0x6c>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4a32      	ldr	r2, [pc, #200]	@ (8006684 <USB_SetTurnaroundTime+0x12c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d802      	bhi.n	80065c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065be:	230c      	movs	r3, #12
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e041      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006684 <USB_SetTurnaroundTime+0x12c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d906      	bls.n	80065da <USB_SetTurnaroundTime+0x82>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006688 <USB_SetTurnaroundTime+0x130>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d802      	bhi.n	80065da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065d4:	230b      	movs	r3, #11
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e036      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006688 <USB_SetTurnaroundTime+0x130>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d906      	bls.n	80065f0 <USB_SetTurnaroundTime+0x98>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4a29      	ldr	r2, [pc, #164]	@ (800668c <USB_SetTurnaroundTime+0x134>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d802      	bhi.n	80065f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065ea:	230a      	movs	r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e02b      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4a26      	ldr	r2, [pc, #152]	@ (800668c <USB_SetTurnaroundTime+0x134>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d906      	bls.n	8006606 <USB_SetTurnaroundTime+0xae>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a25      	ldr	r2, [pc, #148]	@ (8006690 <USB_SetTurnaroundTime+0x138>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d202      	bcs.n	8006606 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006600:	2309      	movs	r3, #9
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e020      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4a21      	ldr	r2, [pc, #132]	@ (8006690 <USB_SetTurnaroundTime+0x138>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d306      	bcc.n	800661c <USB_SetTurnaroundTime+0xc4>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4a20      	ldr	r2, [pc, #128]	@ (8006694 <USB_SetTurnaroundTime+0x13c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d802      	bhi.n	800661c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006616:	2308      	movs	r3, #8
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e015      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4a1d      	ldr	r2, [pc, #116]	@ (8006694 <USB_SetTurnaroundTime+0x13c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d906      	bls.n	8006632 <USB_SetTurnaroundTime+0xda>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4a1c      	ldr	r2, [pc, #112]	@ (8006698 <USB_SetTurnaroundTime+0x140>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d202      	bcs.n	8006632 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800662c:	2307      	movs	r3, #7
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e00a      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006632:	2306      	movs	r3, #6
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	e007      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800663e:	2309      	movs	r3, #9
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	e001      	b.n	8006648 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006644:	2309      	movs	r3, #9
 8006646:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	029b      	lsls	r3, r3, #10
 800665c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	00d8acbf 	.word	0x00d8acbf
 8006678:	00e4e1c0 	.word	0x00e4e1c0
 800667c:	00f42400 	.word	0x00f42400
 8006680:	01067380 	.word	0x01067380
 8006684:	011a499f 	.word	0x011a499f
 8006688:	01312cff 	.word	0x01312cff
 800668c:	014ca43f 	.word	0x014ca43f
 8006690:	016e3600 	.word	0x016e3600
 8006694:	01a6ab1f 	.word	0x01a6ab1f
 8006698:	01e84800 	.word	0x01e84800

0800669c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f043 0201 	orr.w	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f023 0201 	bic.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d115      	bne.n	800672e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800670e:	200a      	movs	r0, #10
 8006710:	f7fb fe88 	bl	8002424 <HAL_Delay>
      ms += 10U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	330a      	adds	r3, #10
 8006718:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 f93f 	bl	800799e <USB_GetMode>
 8006720:	4603      	mov	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d01e      	beq.n	8006764 <USB_SetCurrentMode+0x84>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2bc7      	cmp	r3, #199	@ 0xc7
 800672a:	d9f0      	bls.n	800670e <USB_SetCurrentMode+0x2e>
 800672c:	e01a      	b.n	8006764 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d115      	bne.n	8006760 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006740:	200a      	movs	r0, #10
 8006742:	f7fb fe6f 	bl	8002424 <HAL_Delay>
      ms += 10U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	330a      	adds	r3, #10
 800674a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 f926 	bl	800799e <USB_GetMode>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <USB_SetCurrentMode+0x84>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2bc7      	cmp	r3, #199	@ 0xc7
 800675c:	d9f0      	bls.n	8006740 <USB_SetCurrentMode+0x60>
 800675e:	e001      	b.n	8006764 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e005      	b.n	8006770 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2bc8      	cmp	r3, #200	@ 0xc8
 8006768:	d101      	bne.n	800676e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006778:	b084      	sub	sp, #16
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	e009      	b.n	80067ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3340      	adds	r3, #64	@ 0x40
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	2200      	movs	r2, #0
 80067a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b0e      	cmp	r3, #14
 80067b0:	d9f2      	bls.n	8006798 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d11c      	bne.n	80067f4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067c8:	f043 0302 	orr.w	r3, r3, #2
 80067cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80067f2:	e00b      	b.n	800680c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006812:	461a      	mov	r2, r3
 8006814:	2300      	movs	r3, #0
 8006816:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006818:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10d      	bne.n	800683c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006824:	2b00      	cmp	r3, #0
 8006826:	d104      	bne.n	8006832 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006828:	2100      	movs	r1, #0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f968 	bl	8006b00 <USB_SetDevSpeed>
 8006830:	e008      	b.n	8006844 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006832:	2101      	movs	r1, #1
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f963 	bl	8006b00 <USB_SetDevSpeed>
 800683a:	e003      	b.n	8006844 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800683c:	2103      	movs	r1, #3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f95e 	bl	8006b00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006844:	2110      	movs	r1, #16
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8fa 	bl	8006a40 <USB_FlushTxFifo>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f924 	bl	8006aa4 <USB_FlushRxFifo>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800686c:	461a      	mov	r2, r3
 800686e:	2300      	movs	r3, #0
 8006870:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006878:	461a      	mov	r2, r3
 800687a:	2300      	movs	r3, #0
 800687c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006884:	461a      	mov	r2, r3
 8006886:	2300      	movs	r3, #0
 8006888:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	e043      	b.n	8006918 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a6:	d118      	bne.n	80068da <USB_DevInit+0x162>
    {
      if (i == 0U)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ba:	461a      	mov	r2, r3
 80068bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	e013      	b.n	80068ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d0:	461a      	mov	r2, r3
 80068d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e008      	b.n	80068ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e6:	461a      	mov	r2, r3
 80068e8:	2300      	movs	r3, #0
 80068ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	461a      	mov	r2, r3
 80068fa:	2300      	movs	r3, #0
 80068fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690a:	461a      	mov	r2, r3
 800690c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006910:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	3301      	adds	r3, #1
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800691c:	461a      	mov	r2, r3
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4293      	cmp	r3, r2
 8006922:	d3b5      	bcc.n	8006890 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006924:	2300      	movs	r3, #0
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e043      	b.n	80069b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800693c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006940:	d118      	bne.n	8006974 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	e013      	b.n	8006986 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696a:	461a      	mov	r2, r3
 800696c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e008      	b.n	8006986 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006980:	461a      	mov	r2, r3
 8006982:	2300      	movs	r3, #0
 8006984:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a4:	461a      	mov	r2, r3
 80069a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3301      	adds	r3, #1
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069b6:	461a      	mov	r2, r3
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d3b5      	bcc.n	800692a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80069de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d105      	bne.n	80069f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f043 0210 	orr.w	r2, r3, #16
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	4b10      	ldr	r3, [pc, #64]	@ (8006a3c <USB_DevInit+0x2c4>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f043 0208 	orr.w	r2, r3, #8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d107      	bne.n	8006a2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a24:	f043 0304 	orr.w	r3, r3, #4
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a38:	b004      	add	sp, #16
 8006a3a:	4770      	bx	lr
 8006a3c:	803c3800 	.word	0x803c3800

08006a40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a5a:	d901      	bls.n	8006a60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e01b      	b.n	8006a98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	daf2      	bge.n	8006a4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	019b      	lsls	r3, r3, #6
 8006a70:	f043 0220 	orr.w	r2, r3, #32
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a84:	d901      	bls.n	8006a8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e006      	b.n	8006a98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d0f0      	beq.n	8006a78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006abc:	d901      	bls.n	8006ac2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e018      	b.n	8006af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	daf2      	bge.n	8006ab0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2210      	movs	r2, #16
 8006ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ae0:	d901      	bls.n	8006ae6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e006      	b.n	8006af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b10      	cmp	r3, #16
 8006af0:	d0f0      	beq.n	8006ad4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b20:	4313      	orrs	r3, r2
 8006b22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b087      	sub	sp, #28
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 0306 	and.w	r3, r3, #6
 8006b4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75fb      	strb	r3, [r7, #23]
 8006b56:	e00a      	b.n	8006b6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d002      	beq.n	8006b64 <USB_GetDevSpeed+0x32>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d102      	bne.n	8006b6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b64:	2302      	movs	r3, #2
 8006b66:	75fb      	strb	r3, [r7, #23]
 8006b68:	e001      	b.n	8006b6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b6a:	230f      	movs	r3, #15
 8006b6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d13a      	bne.n	8006c0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	2101      	movs	r1, #1
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d155      	bne.n	8006c7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	791b      	ldrb	r3, [r3, #4]
 8006bea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	059b      	lsls	r3, r3, #22
 8006bf2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	e036      	b.n	8006c7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	2101      	movs	r1, #1
 8006c20:	fa01 f303 	lsl.w	r3, r1, r3
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d11a      	bne.n	8006c7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	791b      	ldrb	r3, [r3, #4]
 8006c60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c62:	430b      	orrs	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d161      	bne.n	8006d6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cbe:	d11f      	bne.n	8006d00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f303 	lsl.w	r3, r1, r3
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d20:	4013      	ands	r3, r2
 8006d22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	2101      	movs	r1, #1
 8006d36:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d44:	4013      	ands	r3, r2
 8006d46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	0159      	lsls	r1, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	440b      	add	r3, r1
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d62:	4619      	mov	r1, r3
 8006d64:	4b35      	ldr	r3, [pc, #212]	@ (8006e3c <USB_DeactivateEndpoint+0x1b0>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	600b      	str	r3, [r1, #0]
 8006d6a:	e060      	b.n	8006e2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d82:	d11f      	bne.n	8006dc4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006da2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dda:	041b      	lsls	r3, r3, #16
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006de4:	4013      	ands	r3, r2
 8006de6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	2101      	movs	r1, #1
 8006dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	43db      	mvns	r3, r3
 8006e02:	68f9      	ldr	r1, [r7, #12]
 8006e04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e08:	4013      	ands	r3, r2
 8006e0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	0159      	lsls	r1, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	440b      	add	r3, r1
 8006e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e26:	4619      	mov	r1, r3
 8006e28:	4b05      	ldr	r3, [pc, #20]	@ (8006e40 <USB_DeactivateEndpoint+0x1b4>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	ec337800 	.word	0xec337800
 8006e40:	eff37800 	.word	0xeff37800

08006e44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	@ 0x28
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	f040 817f 	bne.w	8007164 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d132      	bne.n	8006ed4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006eb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ecc:	0cdb      	lsrs	r3, r3, #19
 8006ece:	04db      	lsls	r3, r3, #19
 8006ed0:	6113      	str	r3, [r2, #16]
 8006ed2:	e097      	b.n	8007004 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eee:	0cdb      	lsrs	r3, r3, #19
 8006ef0:	04db      	lsls	r3, r3, #19
 8006ef2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f16:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d11a      	bne.n	8006f54 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d903      	bls.n	8006f32 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f50:	6113      	str	r3, [r2, #16]
 8006f52:	e044      	b.n	8006fde <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	1e5a      	subs	r2, r3, #1
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f68:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	8afb      	ldrh	r3, [r7, #22]
 8006f7a:	04d9      	lsls	r1, r3, #19
 8006f7c:	4ba4      	ldr	r3, [pc, #656]	@ (8007210 <USB_EPStartXfer+0x3cc>)
 8006f7e:	400b      	ands	r3, r1
 8006f80:	69b9      	ldr	r1, [r7, #24]
 8006f82:	0148      	lsls	r0, r1, #5
 8006f84:	69f9      	ldr	r1, [r7, #28]
 8006f86:	4401      	add	r1, r0
 8006f88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	791b      	ldrb	r3, [r3, #4]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d122      	bne.n	8006fde <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fb2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006fb6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	8afb      	ldrh	r3, [r7, #22]
 8006fc8:	075b      	lsls	r3, r3, #29
 8006fca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	0148      	lsls	r0, r1, #5
 8006fd2:	69f9      	ldr	r1, [r7, #28]
 8006fd4:	4401      	add	r1, r0
 8006fd6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	0148      	lsls	r0, r1, #5
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	4401      	add	r1, r0
 8006ffc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007000:	4313      	orrs	r3, r2
 8007002:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d14b      	bne.n	80070a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701e:	461a      	mov	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	791b      	ldrb	r3, [r3, #4]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d128      	bne.n	8007080 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800703a:	2b00      	cmp	r3, #0
 800703c:	d110      	bne.n	8007060 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007058:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e00f      	b.n	8007080 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800707a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800707e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e166      	b.n	8007370 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	791b      	ldrb	r3, [r3, #4]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d015      	beq.n	80070f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 814e 	beq.w	8007370 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ea:	69f9      	ldr	r1, [r7, #28]
 80070ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070f0:	4313      	orrs	r3, r2
 80070f2:	634b      	str	r3, [r1, #52]	@ 0x34
 80070f4:	e13c      	b.n	8007370 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d110      	bne.n	8007128 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007120:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	e00f      	b.n	8007148 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007146:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68d9      	ldr	r1, [r3, #12]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	b298      	uxth	r0, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	4603      	mov	r3, r0
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f9b9 	bl	80074d4 <USB_WritePacket>
 8007162:	e105      	b.n	8007370 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800717e:	0cdb      	lsrs	r3, r3, #19
 8007180:	04db      	lsls	r3, r3, #19
 8007182:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800719e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80071a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80071a6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d132      	bne.n	8007214 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071dc:	69b9      	ldr	r1, [r7, #24]
 80071de:	0148      	lsls	r0, r1, #5
 80071e0:	69f9      	ldr	r1, [r7, #28]
 80071e2:	4401      	add	r1, r0
 80071e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071e8:	4313      	orrs	r3, r2
 80071ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	440a      	add	r2, r1
 8007202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007206:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800720a:	6113      	str	r3, [r2, #16]
 800720c:	e062      	b.n	80072d4 <USB_EPStartXfer+0x490>
 800720e:	bf00      	nop
 8007210:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d123      	bne.n	8007264 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007228:	691a      	ldr	r2, [r3, #16]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007232:	69b9      	ldr	r1, [r7, #24]
 8007234:	0148      	lsls	r0, r1, #5
 8007236:	69f9      	ldr	r1, [r7, #28]
 8007238:	4401      	add	r1, r0
 800723a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800723e:	4313      	orrs	r3, r2
 8007240:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800725c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007260:	6113      	str	r3, [r2, #16]
 8007262:	e037      	b.n	80072d4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	4413      	add	r3, r2
 800726e:	1e5a      	subs	r2, r3, #1
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	8afa      	ldrh	r2, [r7, #22]
 8007280:	fb03 f202 	mul.w	r2, r3, r2
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	8afb      	ldrh	r3, [r7, #22]
 8007298:	04d9      	lsls	r1, r3, #19
 800729a:	4b38      	ldr	r3, [pc, #224]	@ (800737c <USB_EPStartXfer+0x538>)
 800729c:	400b      	ands	r3, r1
 800729e:	69b9      	ldr	r1, [r7, #24]
 80072a0:	0148      	lsls	r0, r1, #5
 80072a2:	69f9      	ldr	r1, [r7, #28]
 80072a4:	4401      	add	r1, r0
 80072a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072aa:	4313      	orrs	r3, r2
 80072ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c4:	69b9      	ldr	r1, [r7, #24]
 80072c6:	0148      	lsls	r0, r1, #5
 80072c8:	69f9      	ldr	r1, [r7, #28]
 80072ca:	4401      	add	r1, r0
 80072cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072d0:	4313      	orrs	r3, r2
 80072d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d10d      	bne.n	80072f6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	68d9      	ldr	r1, [r3, #12]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f2:	460a      	mov	r2, r1
 80072f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	791b      	ldrb	r3, [r3, #4]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d128      	bne.n	8007350 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d110      	bne.n	8007330 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	0151      	lsls	r1, r2, #5
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	440a      	add	r2, r1
 8007324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007328:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	e00f      	b.n	8007350 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800734a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800734e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800736a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800736e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	1ff80000 	.word	0x1ff80000

08007380 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d14a      	bne.n	8007434 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073b6:	f040 8086 	bne.w	80074c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	7812      	ldrb	r2, [r2, #0]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007400:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800740e:	4293      	cmp	r3, r2
 8007410:	d902      	bls.n	8007418 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
          break;
 8007416:	e056      	b.n	80074c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800742c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007430:	d0e7      	beq.n	8007402 <USB_EPStopXfer+0x82>
 8007432:	e048      	b.n	80074c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800744c:	d13b      	bne.n	80074c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800746c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007470:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	7812      	ldrb	r2, [r2, #0]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007490:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007494:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d902      	bls.n	80074ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	75fb      	strb	r3, [r7, #23]
          break;
 80074aa:	e00c      	b.n	80074c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074c4:	d0e7      	beq.n	8007496 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b089      	sub	sp, #36	@ 0x24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	460b      	mov	r3, r1
 80074e4:	71fb      	strb	r3, [r7, #7]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d123      	bne.n	8007542 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074fa:	88bb      	ldrh	r3, [r7, #4]
 80074fc:	3303      	adds	r3, #3
 80074fe:	089b      	lsrs	r3, r3, #2
 8007500:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	e018      	b.n	800753a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	031a      	lsls	r2, r3, #12
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	4413      	add	r3, r2
 8007510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007514:	461a      	mov	r2, r3
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	3301      	adds	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	3301      	adds	r3, #1
 8007526:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	3301      	adds	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	3301      	adds	r3, #1
 8007532:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	3301      	adds	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	429a      	cmp	r2, r3
 8007540:	d3e2      	bcc.n	8007508 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3724      	adds	r7, #36	@ 0x24
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007550:	b480      	push	{r7}
 8007552:	b08b      	sub	sp, #44	@ 0x2c
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	b29b      	uxth	r3, r3
 800756c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007576:	2300      	movs	r3, #0
 8007578:	623b      	str	r3, [r7, #32]
 800757a:	e014      	b.n	80075a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	601a      	str	r2, [r3, #0]
    pDest++;
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	3301      	adds	r3, #1
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	3301      	adds	r3, #1
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	3301      	adds	r3, #1
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	3301      	adds	r3, #1
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	3301      	adds	r3, #1
 80075a4:	623b      	str	r3, [r7, #32]
 80075a6:	6a3a      	ldr	r2, [r7, #32]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d3e6      	bcc.n	800757c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075ae:	8bfb      	ldrh	r3, [r7, #30]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01e      	beq.n	80075f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075be:	461a      	mov	r2, r3
 80075c0:	f107 0310 	add.w	r3, r7, #16
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	701a      	strb	r2, [r3, #0]
      i++;
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	3301      	adds	r3, #1
 80075de:	623b      	str	r3, [r7, #32]
      pDest++;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	3301      	adds	r3, #1
 80075e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80075e6:	8bfb      	ldrh	r3, [r7, #30]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075ec:	8bfb      	ldrh	r3, [r7, #30]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1ea      	bne.n	80075c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	372c      	adds	r7, #44	@ 0x2c
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d12c      	bne.n	8007676 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	db12      	blt.n	8007654 <USB_EPSetStall+0x54>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00f      	beq.n	8007654 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800764e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007652:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800766e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e02b      	b.n	80076ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	db12      	blt.n	80076ae <USB_EPSetStall+0xae>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80076ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d128      	bne.n	800774a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007716:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	791b      	ldrb	r3, [r3, #4]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d003      	beq.n	8007728 <USB_EPClearStall+0x4c>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	791b      	ldrb	r3, [r3, #4]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d138      	bne.n	800779a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	e027      	b.n	800779a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	0151      	lsls	r1, r2, #5
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	440a      	add	r2, r1
 8007760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007764:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007768:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	791b      	ldrb	r3, [r3, #4]
 800776e:	2b03      	cmp	r3, #3
 8007770:	d003      	beq.n	800777a <USB_EPClearStall+0x9e>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	791b      	ldrb	r3, [r3, #4]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d10f      	bne.n	800779a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	440a      	add	r2, r1
 8007790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007798:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80077ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80077dc:	68f9      	ldr	r1, [r7, #12]
 80077de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077e2:	4313      	orrs	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007822:	f023 0302 	bic.w	r3, r3, #2
 8007826:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007850:	f023 0303 	bic.w	r3, r3, #3
 8007854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007890:	68fb      	ldr	r3, [r7, #12]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	4013      	ands	r3, r2
 80078c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	0c1b      	lsrs	r3, r3, #16
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	4013      	ands	r3, r2
 80078f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	b29b      	uxth	r3, r3
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007934:	68bb      	ldr	r3, [r7, #8]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007942:	b480      	push	{r7}
 8007944:	b087      	sub	sp, #28
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007964:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	fa22 f303 	lsr.w	r3, r2, r3
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	b2db      	uxtb	r3, r3
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4013      	ands	r3, r2
 800798e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007990:	68bb      	ldr	r3, [r7, #8]
}
 8007992:	4618      	mov	r0, r3
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0301 	and.w	r3, r3, #1
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80079d8:	f023 0307 	bic.w	r3, r3, #7
 80079dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	333c      	adds	r3, #60	@ 0x3c
 8007a16:	3304      	adds	r3, #4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4a26      	ldr	r2, [pc, #152]	@ (8007ab8 <USB_EP0_OutStart+0xb8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d90a      	bls.n	8007a3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a34:	d101      	bne.n	8007a3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e037      	b.n	8007aaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a68:	f043 0318 	orr.w	r3, r3, #24
 8007a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10f      	bne.n	8007aa8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	4f54300a 	.word	0x4f54300a

08007abc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad4:	d901      	bls.n	8007ada <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e022      	b.n	8007b20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	daf2      	bge.n	8007ac8 <USB_CoreReset+0xc>

  count = 10U;
 8007ae2:	230a      	movs	r3, #10
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007ae6:	e002      	b.n	8007aee <USB_CoreReset+0x32>
  {
    count--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1f9      	bne.n	8007ae8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f043 0201 	orr.w	r2, r3, #1
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b0c:	d901      	bls.n	8007b12 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e006      	b.n	8007b20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d0f0      	beq.n	8007b00 <USB_CoreReset+0x44>

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b3c:	f002 fcb2 	bl	800a4a4 <USBD_static_malloc>
 8007b40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	32b0      	adds	r2, #176	@ 0xb0
 8007b52:	2100      	movs	r1, #0
 8007b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e0d4      	b.n	8007d06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f003 fcbd 	bl	800b4e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32b0      	adds	r2, #176	@ 0xb0
 8007b72:	68f9      	ldr	r1, [r7, #12]
 8007b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	32b0      	adds	r2, #176	@ 0xb0
 8007b82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7c1b      	ldrb	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d138      	bne.n	8007c06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b94:	4b5e      	ldr	r3, [pc, #376]	@ (8007d10 <USBD_CDC_Init+0x1e4>)
 8007b96:	7819      	ldrb	r1, [r3, #0]
 8007b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f002 fb5d 	bl	800a25e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8007d10 <USBD_CDC_Init+0x1e4>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 020f 	and.w	r2, r3, #15
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	3323      	adds	r3, #35	@ 0x23
 8007bba:	2201      	movs	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bbe:	4b55      	ldr	r3, [pc, #340]	@ (8007d14 <USBD_CDC_Init+0x1e8>)
 8007bc0:	7819      	ldrb	r1, [r3, #0]
 8007bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f002 fb48 	bl	800a25e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bce:	4b51      	ldr	r3, [pc, #324]	@ (8007d14 <USBD_CDC_Init+0x1e8>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f003 020f 	and.w	r2, r3, #15
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bea:	4b4b      	ldr	r3, [pc, #300]	@ (8007d18 <USBD_CDC_Init+0x1ec>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f003 020f 	and.w	r2, r3, #15
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	331c      	adds	r3, #28
 8007c00:	2210      	movs	r2, #16
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e035      	b.n	8007c72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c06:	4b42      	ldr	r3, [pc, #264]	@ (8007d10 <USBD_CDC_Init+0x1e4>)
 8007c08:	7819      	ldrb	r1, [r3, #0]
 8007c0a:	2340      	movs	r3, #64	@ 0x40
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f002 fb25 	bl	800a25e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c14:	4b3e      	ldr	r3, [pc, #248]	@ (8007d10 <USBD_CDC_Init+0x1e4>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3323      	adds	r3, #35	@ 0x23
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c2e:	4b39      	ldr	r3, [pc, #228]	@ (8007d14 <USBD_CDC_Init+0x1e8>)
 8007c30:	7819      	ldrb	r1, [r3, #0]
 8007c32:	2340      	movs	r3, #64	@ 0x40
 8007c34:	2202      	movs	r2, #2
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f002 fb11 	bl	800a25e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c3c:	4b35      	ldr	r3, [pc, #212]	@ (8007d14 <USBD_CDC_Init+0x1e8>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f003 020f 	and.w	r2, r3, #15
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007c54:	2201      	movs	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c58:	4b2f      	ldr	r3, [pc, #188]	@ (8007d18 <USBD_CDC_Init+0x1ec>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	331c      	adds	r3, #28
 8007c6e:	2210      	movs	r2, #16
 8007c70:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c72:	4b29      	ldr	r3, [pc, #164]	@ (8007d18 <USBD_CDC_Init+0x1ec>)
 8007c74:	7819      	ldrb	r1, [r3, #0]
 8007c76:	2308      	movs	r3, #8
 8007c78:	2203      	movs	r2, #3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f002 faef 	bl	800a25e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c80:	4b25      	ldr	r3, [pc, #148]	@ (8007d18 <USBD_CDC_Init+0x1ec>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	f003 020f 	and.w	r2, r3, #15
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	3323      	adds	r3, #35	@ 0x23
 8007c96:	2201      	movs	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	33b0      	adds	r3, #176	@ 0xb0
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e018      	b.n	8007d06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7c1b      	ldrb	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <USBD_CDC_Init+0x1e8>)
 8007cde:	7819      	ldrb	r1, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f002 fba6 	bl	800a43c <USBD_LL_PrepareReceive>
 8007cf0:	e008      	b.n	8007d04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cf2:	4b08      	ldr	r3, [pc, #32]	@ (8007d14 <USBD_CDC_Init+0x1e8>)
 8007cf4:	7819      	ldrb	r1, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007cfc:	2340      	movs	r3, #64	@ 0x40
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f002 fb9c 	bl	800a43c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200000bb 	.word	0x200000bb
 8007d14:	200000bc 	.word	0x200000bc
 8007d18:	200000bd 	.word	0x200000bd

08007d1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d28:	4b3a      	ldr	r3, [pc, #232]	@ (8007e14 <USBD_CDC_DeInit+0xf8>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f002 fabb 	bl	800a2aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d34:	4b37      	ldr	r3, [pc, #220]	@ (8007e14 <USBD_CDC_DeInit+0xf8>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3323      	adds	r3, #35	@ 0x23
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d4e:	4b32      	ldr	r3, [pc, #200]	@ (8007e18 <USBD_CDC_DeInit+0xfc>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f002 faa8 	bl	800a2aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e18 <USBD_CDC_DeInit+0xfc>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 020f 	and.w	r2, r3, #15
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d76:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <USBD_CDC_DeInit+0x100>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f002 fa94 	bl	800a2aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d82:	4b26      	ldr	r3, [pc, #152]	@ (8007e1c <USBD_CDC_DeInit+0x100>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	f003 020f 	and.w	r2, r3, #15
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	3323      	adds	r3, #35	@ 0x23
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8007e1c <USBD_CDC_DeInit+0x100>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 020f 	and.w	r2, r3, #15
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	440b      	add	r3, r1
 8007db0:	331c      	adds	r3, #28
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	32b0      	adds	r2, #176	@ 0xb0
 8007dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01f      	beq.n	8007e08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	33b0      	adds	r3, #176	@ 0xb0
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	32b0      	adds	r2, #176	@ 0xb0
 8007de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f002 fb68 	bl	800a4c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	32b0      	adds	r2, #176	@ 0xb0
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	200000bb 	.word	0x200000bb
 8007e18:	200000bc 	.word	0x200000bc
 8007e1c:	200000bd 	.word	0x200000bd

08007e20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	32b0      	adds	r2, #176	@ 0xb0
 8007e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e0bf      	b.n	8007fd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d050      	beq.n	8007efe <USBD_CDC_Setup+0xde>
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	f040 80af 	bne.w	8007fc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d03a      	beq.n	8007ee0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b25b      	sxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da1b      	bge.n	8007eac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	33b0      	adds	r3, #176	@ 0xb0
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	88d2      	ldrh	r2, [r2, #6]
 8007e90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	88db      	ldrh	r3, [r3, #6]
 8007e96:	2b07      	cmp	r3, #7
 8007e98:	bf28      	it	cs
 8007e9a:	2307      	movcs	r3, #7
 8007e9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	89fa      	ldrh	r2, [r7, #14]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fda9 	bl	80099fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007eaa:	e090      	b.n	8007fce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	785a      	ldrb	r2, [r3, #1]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	88db      	ldrh	r3, [r3, #6]
 8007eba:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ebc:	d803      	bhi.n	8007ec6 <USBD_CDC_Setup+0xa6>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	88db      	ldrh	r3, [r3, #6]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	e000      	b.n	8007ec8 <USBD_CDC_Setup+0xa8>
 8007ec6:	2240      	movs	r2, #64	@ 0x40
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ece:	6939      	ldr	r1, [r7, #16]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fdbe 	bl	8009a5a <USBD_CtlPrepareRx>
      break;
 8007ede:	e076      	b.n	8007fce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	33b0      	adds	r3, #176	@ 0xb0
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	7850      	ldrb	r0, [r2, #1]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	4798      	blx	r3
      break;
 8007efc:	e067      	b.n	8007fce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b0b      	cmp	r3, #11
 8007f04:	d851      	bhi.n	8007faa <USBD_CDC_Setup+0x18a>
 8007f06:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <USBD_CDC_Setup+0xec>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f3d 	.word	0x08007f3d
 8007f10:	08007fb9 	.word	0x08007fb9
 8007f14:	08007fab 	.word	0x08007fab
 8007f18:	08007fab 	.word	0x08007fab
 8007f1c:	08007fab 	.word	0x08007fab
 8007f20:	08007fab 	.word	0x08007fab
 8007f24:	08007fab 	.word	0x08007fab
 8007f28:	08007fab 	.word	0x08007fab
 8007f2c:	08007fab 	.word	0x08007fab
 8007f30:	08007fab 	.word	0x08007fab
 8007f34:	08007f67 	.word	0x08007f67
 8007f38:	08007f91 	.word	0x08007f91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d107      	bne.n	8007f58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f48:	f107 030a 	add.w	r3, r7, #10
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 fd53 	bl	80099fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f56:	e032      	b.n	8007fbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fcd1 	bl	8009902 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f60:	2303      	movs	r3, #3
 8007f62:	75fb      	strb	r3, [r7, #23]
          break;
 8007f64:	e02b      	b.n	8007fbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d107      	bne.n	8007f82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f72:	f107 030d 	add.w	r3, r7, #13
 8007f76:	2201      	movs	r2, #1
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 fd3e 	bl	80099fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f80:	e01d      	b.n	8007fbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fcbc 	bl	8009902 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8e:	e016      	b.n	8007fbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d00f      	beq.n	8007fbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fcaf 	bl	8009902 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fa8:	e008      	b.n	8007fbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fca8 	bl	8009902 <USBD_CtlError>
          ret = USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb6:	e002      	b.n	8007fbe <USBD_CDC_Setup+0x19e>
          break;
 8007fb8:	bf00      	nop
 8007fba:	e008      	b.n	8007fce <USBD_CDC_Setup+0x1ae>
          break;
 8007fbc:	bf00      	nop
      }
      break;
 8007fbe:	e006      	b.n	8007fce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fc9d 	bl	8009902 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	bf00      	nop
  }

  return (uint8_t)ret;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	32b0      	adds	r2, #176	@ 0xb0
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e065      	b.n	80080ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32b0      	adds	r2, #176	@ 0xb0
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	f003 020f 	and.w	r2, r3, #15
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	3314      	adds	r3, #20
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d02f      	beq.n	800808c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	f003 020f 	and.w	r2, r3, #15
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	3314      	adds	r3, #20
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f003 010f 	and.w	r1, r3, #15
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	460b      	mov	r3, r1
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	440b      	add	r3, r1
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4403      	add	r3, r0
 8008054:	331c      	adds	r3, #28
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	fbb2 f1f3 	udiv	r1, r2, r3
 800805c:	fb01 f303 	mul.w	r3, r1, r3
 8008060:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008062:	2b00      	cmp	r3, #0
 8008064:	d112      	bne.n	800808c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008066:	78fb      	ldrb	r3, [r7, #3]
 8008068:	f003 020f 	and.w	r2, r3, #15
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	3314      	adds	r3, #20
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800807e:	78f9      	ldrb	r1, [r7, #3]
 8008080:	2300      	movs	r3, #0
 8008082:	2200      	movs	r2, #0
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 f9b8 	bl	800a3fa <USBD_LL_Transmit>
 800808a:	e01f      	b.n	80080cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	33b0      	adds	r3, #176	@ 0xb0
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d010      	beq.n	80080cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	33b0      	adds	r3, #176	@ 0xb0
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	32b0      	adds	r2, #176	@ 0xb0
 80080ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	32b0      	adds	r2, #176	@ 0xb0
 80080fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	e01a      	b.n	800813e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f002 f9b6 	bl	800a47e <USBD_LL_GetRxDataSize>
 8008112:	4602      	mov	r2, r0
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	33b0      	adds	r3, #176	@ 0xb0
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008138:	4611      	mov	r1, r2
 800813a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	32b0      	adds	r2, #176	@ 0xb0
 8008158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008164:	2303      	movs	r3, #3
 8008166:	e024      	b.n	80081b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	33b0      	adds	r3, #176	@ 0xb0
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d019      	beq.n	80081b0 <USBD_CDC_EP0_RxReady+0x6a>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008182:	2bff      	cmp	r3, #255	@ 0xff
 8008184:	d014      	beq.n	80081b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	33b0      	adds	r3, #176	@ 0xb0
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800819e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	22ff      	movs	r2, #255	@ 0xff
 80081ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081c4:	2182      	movs	r1, #130	@ 0x82
 80081c6:	4818      	ldr	r0, [pc, #96]	@ (8008228 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081c8:	f000 fd62 	bl	8008c90 <USBD_GetEpDesc>
 80081cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081ce:	2101      	movs	r1, #1
 80081d0:	4815      	ldr	r0, [pc, #84]	@ (8008228 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081d2:	f000 fd5d 	bl	8008c90 <USBD_GetEpDesc>
 80081d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081d8:	2181      	movs	r1, #129	@ 0x81
 80081da:	4813      	ldr	r0, [pc, #76]	@ (8008228 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081dc:	f000 fd58 	bl	8008c90 <USBD_GetEpDesc>
 80081e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2210      	movs	r2, #16
 80081ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081fc:	711a      	strb	r2, [r3, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d006      	beq.n	8008216 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008210:	711a      	strb	r2, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2243      	movs	r2, #67	@ 0x43
 800821a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800821c:	4b02      	ldr	r3, [pc, #8]	@ (8008228 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000078 	.word	0x20000078

0800822c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008234:	2182      	movs	r1, #130	@ 0x82
 8008236:	4818      	ldr	r0, [pc, #96]	@ (8008298 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008238:	f000 fd2a 	bl	8008c90 <USBD_GetEpDesc>
 800823c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800823e:	2101      	movs	r1, #1
 8008240:	4815      	ldr	r0, [pc, #84]	@ (8008298 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008242:	f000 fd25 	bl	8008c90 <USBD_GetEpDesc>
 8008246:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008248:	2181      	movs	r1, #129	@ 0x81
 800824a:	4813      	ldr	r0, [pc, #76]	@ (8008298 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800824c:	f000 fd20 	bl	8008c90 <USBD_GetEpDesc>
 8008250:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2210      	movs	r2, #16
 800825c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d006      	beq.n	8008272 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2200      	movs	r2, #0
 8008268:	711a      	strb	r2, [r3, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f042 0202 	orr.w	r2, r2, #2
 8008270:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	711a      	strb	r2, [r3, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f042 0202 	orr.w	r2, r2, #2
 8008284:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2243      	movs	r2, #67	@ 0x43
 800828a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800828c:	4b02      	ldr	r3, [pc, #8]	@ (8008298 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20000078 	.word	0x20000078

0800829c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082a4:	2182      	movs	r1, #130	@ 0x82
 80082a6:	4818      	ldr	r0, [pc, #96]	@ (8008308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082a8:	f000 fcf2 	bl	8008c90 <USBD_GetEpDesc>
 80082ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082ae:	2101      	movs	r1, #1
 80082b0:	4815      	ldr	r0, [pc, #84]	@ (8008308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082b2:	f000 fced 	bl	8008c90 <USBD_GetEpDesc>
 80082b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082b8:	2181      	movs	r1, #129	@ 0x81
 80082ba:	4813      	ldr	r0, [pc, #76]	@ (8008308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082bc:	f000 fce8 	bl	8008c90 <USBD_GetEpDesc>
 80082c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2210      	movs	r2, #16
 80082cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d006      	beq.n	80082e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082dc:	711a      	strb	r2, [r3, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d006      	beq.n	80082f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082f0:	711a      	strb	r2, [r3, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2243      	movs	r2, #67	@ 0x43
 80082fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082fc:	4b02      	ldr	r3, [pc, #8]	@ (8008308 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000078 	.word	0x20000078

0800830c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	220a      	movs	r2, #10
 8008318:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800831a:	4b03      	ldr	r3, [pc, #12]	@ (8008328 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800831c:	4618      	mov	r0, r3
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	20000034 	.word	0x20000034

0800832c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800833c:	2303      	movs	r3, #3
 800833e:	e009      	b.n	8008354 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	33b0      	adds	r3, #176	@ 0xb0
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	32b0      	adds	r2, #176	@ 0xb0
 8008376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008382:	2303      	movs	r3, #3
 8008384:	e008      	b.n	8008398 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	32b0      	adds	r2, #176	@ 0xb0
 80083b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e004      	b.n	80083d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32b0      	adds	r2, #176	@ 0xb0
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008402:	2303      	movs	r3, #3
 8008404:	e025      	b.n	8008452 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800840c:	2b00      	cmp	r3, #0
 800840e:	d11f      	bne.n	8008450 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2201      	movs	r2, #1
 8008414:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008418:	4b10      	ldr	r3, [pc, #64]	@ (800845c <USBD_CDC_TransmitPacket+0x7c>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f003 020f 	and.w	r2, r3, #15
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4403      	add	r3, r0
 8008432:	3314      	adds	r3, #20
 8008434:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008436:	4b09      	ldr	r3, [pc, #36]	@ (800845c <USBD_CDC_TransmitPacket+0x7c>)
 8008438:	7819      	ldrb	r1, [r3, #0]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 ffd7 	bl	800a3fa <USBD_LL_Transmit>

    ret = USBD_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200000bb 	.word	0x200000bb

08008460 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	32b0      	adds	r2, #176	@ 0xb0
 8008472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008476:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	32b0      	adds	r2, #176	@ 0xb0
 8008482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800848a:	2303      	movs	r3, #3
 800848c:	e018      	b.n	80084c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7c1b      	ldrb	r3, [r3, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008496:	4b0c      	ldr	r3, [pc, #48]	@ (80084c8 <USBD_CDC_ReceivePacket+0x68>)
 8008498:	7819      	ldrb	r1, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 ffc9 	bl	800a43c <USBD_LL_PrepareReceive>
 80084aa:	e008      	b.n	80084be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084ac:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <USBD_CDC_ReceivePacket+0x68>)
 80084ae:	7819      	ldrb	r1, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084b6:	2340      	movs	r3, #64	@ 0x40
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 ffbf 	bl	800a43c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	200000bc 	.word	0x200000bc

080084cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e01f      	b.n	8008524 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	79fa      	ldrb	r2, [r7, #7]
 8008516:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f001 fe39 	bl	800a190 <USBD_LL_Init>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e025      	b.n	8008590 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	32ae      	adds	r2, #174	@ 0xae
 8008556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00f      	beq.n	8008580 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	32ae      	adds	r2, #174	@ 0xae
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008570:	f107 020e 	add.w	r2, r7, #14
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	4602      	mov	r2, r0
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fe41 	bl	800a228 <USBD_LL_Start>
 80085a6:	4603      	mov	r3, r0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	4611      	mov	r1, r2
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	4798      	blx	r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	4611      	mov	r1, r2
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008624:	2303      	movs	r3, #3
 8008626:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f922 	bl	800988e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	2b02      	cmp	r3, #2
 800866c:	d01a      	beq.n	80086a4 <USBD_LL_SetupStage+0x72>
 800866e:	2b02      	cmp	r3, #2
 8008670:	d822      	bhi.n	80086b8 <USBD_LL_SetupStage+0x86>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <USBD_LL_SetupStage+0x4a>
 8008676:	2b01      	cmp	r3, #1
 8008678:	d00a      	beq.n	8008690 <USBD_LL_SetupStage+0x5e>
 800867a:	e01d      	b.n	80086b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fb77 	bl	8008d78 <USBD_StdDevReq>
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
      break;
 800868e:	e020      	b.n	80086d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fbdf 	bl	8008e5c <USBD_StdItfReq>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]
      break;
 80086a2:	e016      	b.n	80086d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fc41 	bl	8008f34 <USBD_StdEPReq>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73fb      	strb	r3, [r7, #15]
      break;
 80086b6:	e00c      	b.n	80086d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 fe0e 	bl	800a2e8 <USBD_LL_StallEP>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]
      break;
 80086d0:	bf00      	nop
  }

  return ret;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	460b      	mov	r3, r1
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80086ee:	7afb      	ldrb	r3, [r7, #11]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d177      	bne.n	80087e4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008702:	2b03      	cmp	r3, #3
 8008704:	f040 80a1 	bne.w	800884a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	8992      	ldrh	r2, [r2, #12]
 8008710:	4293      	cmp	r3, r2
 8008712:	d91c      	bls.n	800874e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	8992      	ldrh	r2, [r2, #12]
 800871c:	1a9a      	subs	r2, r3, r2
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	8992      	ldrh	r2, [r2, #12]
 800872a:	441a      	add	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	6919      	ldr	r1, [r3, #16]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	899b      	ldrh	r3, [r3, #12]
 8008738:	461a      	mov	r2, r3
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	4293      	cmp	r3, r2
 8008740:	bf38      	it	cc
 8008742:	4613      	movcc	r3, r2
 8008744:	461a      	mov	r2, r3
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 f9a8 	bl	8009a9c <USBD_CtlContinueRx>
 800874c:	e07d      	b.n	800884a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008754:	f003 031f 	and.w	r3, r3, #31
 8008758:	2b02      	cmp	r3, #2
 800875a:	d014      	beq.n	8008786 <USBD_LL_DataOutStage+0xaa>
 800875c:	2b02      	cmp	r3, #2
 800875e:	d81d      	bhi.n	800879c <USBD_LL_DataOutStage+0xc0>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <USBD_LL_DataOutStage+0x8e>
 8008764:	2b01      	cmp	r3, #1
 8008766:	d003      	beq.n	8008770 <USBD_LL_DataOutStage+0x94>
 8008768:	e018      	b.n	800879c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	75bb      	strb	r3, [r7, #22]
            break;
 800876e:	e018      	b.n	80087a2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 fa6e 	bl	8008c5c <USBD_CoreFindIF>
 8008780:	4603      	mov	r3, r0
 8008782:	75bb      	strb	r3, [r7, #22]
            break;
 8008784:	e00d      	b.n	80087a2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800878c:	b2db      	uxtb	r3, r3
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fa70 	bl	8008c76 <USBD_CoreFindEP>
 8008796:	4603      	mov	r3, r0
 8008798:	75bb      	strb	r3, [r7, #22]
            break;
 800879a:	e002      	b.n	80087a2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	75bb      	strb	r3, [r7, #22]
            break;
 80087a0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087a2:	7dbb      	ldrb	r3, [r7, #22]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d119      	bne.n	80087dc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d113      	bne.n	80087dc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087b4:	7dba      	ldrb	r2, [r7, #22]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	32ae      	adds	r2, #174	@ 0xae
 80087ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80087c4:	7dba      	ldrb	r2, [r7, #22]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087cc:	7dba      	ldrb	r2, [r7, #22]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	32ae      	adds	r2, #174	@ 0xae
 80087d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f001 f96e 	bl	8009abe <USBD_CtlSendStatus>
 80087e2:	e032      	b.n	800884a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	4619      	mov	r1, r3
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fa41 	bl	8008c76 <USBD_CoreFindEP>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087f8:	7dbb      	ldrb	r3, [r7, #22]
 80087fa:	2bff      	cmp	r3, #255	@ 0xff
 80087fc:	d025      	beq.n	800884a <USBD_LL_DataOutStage+0x16e>
 80087fe:	7dbb      	ldrb	r3, [r7, #22]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d122      	bne.n	800884a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b03      	cmp	r3, #3
 800880e:	d117      	bne.n	8008840 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008810:	7dba      	ldrb	r2, [r7, #22]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	32ae      	adds	r2, #174	@ 0xae
 8008816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00f      	beq.n	8008840 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008820:	7dba      	ldrb	r2, [r7, #22]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008828:	7dba      	ldrb	r2, [r7, #22]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	32ae      	adds	r2, #174	@ 0xae
 800882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	7afa      	ldrb	r2, [r7, #11]
 8008836:	4611      	mov	r1, r2
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	4798      	blx	r3
 800883c:	4603      	mov	r3, r0
 800883e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	e000      	b.n	800884c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	460b      	mov	r3, r1
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008862:	7afb      	ldrb	r3, [r7, #11]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d178      	bne.n	800895a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3314      	adds	r3, #20
 800886c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008874:	2b02      	cmp	r3, #2
 8008876:	d163      	bne.n	8008940 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	8992      	ldrh	r2, [r2, #12]
 8008880:	4293      	cmp	r3, r2
 8008882:	d91c      	bls.n	80088be <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	8992      	ldrh	r2, [r2, #12]
 800888c:	1a9a      	subs	r2, r3, r2
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	8992      	ldrh	r2, [r2, #12]
 800889a:	441a      	add	r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6919      	ldr	r1, [r3, #16]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	461a      	mov	r2, r3
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f001 f8c4 	bl	8009a38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088b0:	2300      	movs	r3, #0
 80088b2:	2200      	movs	r2, #0
 80088b4:	2100      	movs	r1, #0
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f001 fdc0 	bl	800a43c <USBD_LL_PrepareReceive>
 80088bc:	e040      	b.n	8008940 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	899b      	ldrh	r3, [r3, #12]
 80088c2:	461a      	mov	r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d11c      	bne.n	8008906 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d316      	bcc.n	8008906 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d20f      	bcs.n	8008906 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f001 f8a4 	bl	8009a38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088f8:	2300      	movs	r3, #0
 80088fa:	2200      	movs	r2, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f001 fd9c 	bl	800a43c <USBD_LL_PrepareReceive>
 8008904:	e01c      	b.n	8008940 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b03      	cmp	r3, #3
 8008910:	d10f      	bne.n	8008932 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d009      	beq.n	8008932 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008932:	2180      	movs	r1, #128	@ 0x80
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f001 fcd7 	bl	800a2e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f001 f8d2 	bl	8009ae4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d03a      	beq.n	80089c0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff fe30 	bl	80085b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008958:	e032      	b.n	80089c0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008960:	b2db      	uxtb	r3, r3
 8008962:	4619      	mov	r1, r3
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f986 	bl	8008c76 <USBD_CoreFindEP>
 800896a:	4603      	mov	r3, r0
 800896c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	2bff      	cmp	r3, #255	@ 0xff
 8008972:	d025      	beq.n	80089c0 <USBD_LL_DataInStage+0x16c>
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d122      	bne.n	80089c0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b03      	cmp	r3, #3
 8008984:	d11c      	bne.n	80089c0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008986:	7dfa      	ldrb	r2, [r7, #23]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	32ae      	adds	r2, #174	@ 0xae
 800898c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d014      	beq.n	80089c0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008996:	7dfa      	ldrb	r2, [r7, #23]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800899e:	7dfa      	ldrb	r2, [r7, #23]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	32ae      	adds	r2, #174	@ 0xae
 80089a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	7afa      	ldrb	r2, [r7, #11]
 80089ac:	4611      	mov	r1, r2
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	4798      	blx	r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089b6:	7dbb      	ldrb	r3, [r7, #22]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80089bc:	7dbb      	ldrb	r3, [r7, #22]
 80089be:	e000      	b.n	80089c2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d014      	beq.n	8008a30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00e      	beq.n	8008a30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	6852      	ldr	r2, [r2, #4]
 8008a1e:	b2d2      	uxtb	r2, r2
 8008a20:	4611      	mov	r1, r2
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	4798      	blx	r3
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a30:	2340      	movs	r3, #64	@ 0x40
 8008a32:	2200      	movs	r2, #0
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fc11 	bl	800a25e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2240      	movs	r2, #64	@ 0x40
 8008a48:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a4c:	2340      	movs	r3, #64	@ 0x40
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2180      	movs	r1, #128	@ 0x80
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f001 fc03 	bl	800a25e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2240      	movs	r2, #64	@ 0x40
 8008a64:	841a      	strh	r2, [r3, #32]

  return ret;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d006      	beq.n	8008ab2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d106      	bne.n	8008aea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d110      	bne.n	8008b2e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32ae      	adds	r2, #174	@ 0xae
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e01c      	b.n	8008b94 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d115      	bne.n	8008b92 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	32ae      	adds	r2, #174	@ 0xae
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	32ae      	adds	r2, #174	@ 0xae
 8008b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	32ae      	adds	r2, #174	@ 0xae
 8008bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e01c      	b.n	8008bf8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d115      	bne.n	8008bf6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	32ae      	adds	r2, #174	@ 0xae
 8008bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	32ae      	adds	r2, #174	@ 0xae
 8008be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00e      	beq.n	8008c52 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6852      	ldr	r2, [r2, #4]
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	4611      	mov	r1, r2
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	4798      	blx	r3
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	885b      	ldrh	r3, [r3, #2]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d91f      	bls.n	8008cf6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cbc:	e013      	b.n	8008ce6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008cbe:	f107 030a 	add.w	r3, r7, #10
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6978      	ldr	r0, [r7, #20]
 8008cc6:	f000 f81b 	bl	8008d00 <USBD_GetNextDesc>
 8008cca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	2b05      	cmp	r3, #5
 8008cd2:	d108      	bne.n	8008ce6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	789b      	ldrb	r3, [r3, #2]
 8008cdc:	78fa      	ldrb	r2, [r7, #3]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d008      	beq.n	8008cf4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	897b      	ldrh	r3, [r7, #10]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d8e5      	bhi.n	8008cbe <USBD_GetEpDesc+0x2e>
 8008cf2:	e000      	b.n	8008cf6 <USBD_GetEpDesc+0x66>
          break;
 8008cf4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008cf6:	693b      	ldr	r3, [r7, #16]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	4413      	add	r3, r2
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4413      	add	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	b21a      	sxth	r2, r3
 8008d5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	b21b      	sxth	r3, r3
 8008d66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d68:	89fb      	ldrh	r3, [r7, #14]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
	...

08008d78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d8e:	2b40      	cmp	r3, #64	@ 0x40
 8008d90:	d005      	beq.n	8008d9e <USBD_StdDevReq+0x26>
 8008d92:	2b40      	cmp	r3, #64	@ 0x40
 8008d94:	d857      	bhi.n	8008e46 <USBD_StdDevReq+0xce>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00f      	beq.n	8008dba <USBD_StdDevReq+0x42>
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	d153      	bne.n	8008e46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	32ae      	adds	r2, #174	@ 0xae
 8008da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
      break;
 8008db8:	e04a      	b.n	8008e50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	785b      	ldrb	r3, [r3, #1]
 8008dbe:	2b09      	cmp	r3, #9
 8008dc0:	d83b      	bhi.n	8008e3a <USBD_StdDevReq+0xc2>
 8008dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <USBD_StdDevReq+0x50>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008e1d 	.word	0x08008e1d
 8008dcc:	08008e31 	.word	0x08008e31
 8008dd0:	08008e3b 	.word	0x08008e3b
 8008dd4:	08008e27 	.word	0x08008e27
 8008dd8:	08008e3b 	.word	0x08008e3b
 8008ddc:	08008dfb 	.word	0x08008dfb
 8008de0:	08008df1 	.word	0x08008df1
 8008de4:	08008e3b 	.word	0x08008e3b
 8008de8:	08008e13 	.word	0x08008e13
 8008dec:	08008e05 	.word	0x08008e05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa3e 	bl	8009274 <USBD_GetDescriptor>
          break;
 8008df8:	e024      	b.n	8008e44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fba3 	bl	8009548 <USBD_SetAddress>
          break;
 8008e02:	e01f      	b.n	8008e44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fbe2 	bl	80095d0 <USBD_SetConfig>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
          break;
 8008e10:	e018      	b.n	8008e44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fc85 	bl	8009724 <USBD_GetConfig>
          break;
 8008e1a:	e013      	b.n	8008e44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fcb6 	bl	8009790 <USBD_GetStatus>
          break;
 8008e24:	e00e      	b.n	8008e44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fce5 	bl	80097f8 <USBD_SetFeature>
          break;
 8008e2e:	e009      	b.n	8008e44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fd09 	bl	800984a <USBD_ClrFeature>
          break;
 8008e38:	e004      	b.n	8008e44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fd60 	bl	8009902 <USBD_CtlError>
          break;
 8008e42:	bf00      	nop
      }
      break;
 8008e44:	e004      	b.n	8008e50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fd5a 	bl	8009902 <USBD_CtlError>
      break;
 8008e4e:	bf00      	nop
  }

  return ret;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop

08008e5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e72:	2b40      	cmp	r3, #64	@ 0x40
 8008e74:	d005      	beq.n	8008e82 <USBD_StdItfReq+0x26>
 8008e76:	2b40      	cmp	r3, #64	@ 0x40
 8008e78:	d852      	bhi.n	8008f20 <USBD_StdItfReq+0xc4>
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <USBD_StdItfReq+0x26>
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d14e      	bne.n	8008f20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d840      	bhi.n	8008f12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	889b      	ldrh	r3, [r3, #4]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d836      	bhi.n	8008f08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	889b      	ldrh	r3, [r3, #4]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff feda 	bl	8008c5c <USBD_CoreFindIF>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	2bff      	cmp	r3, #255	@ 0xff
 8008eb0:	d01d      	beq.n	8008eee <USBD_StdItfReq+0x92>
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d11a      	bne.n	8008eee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008eb8:	7bba      	ldrb	r2, [r7, #14]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	32ae      	adds	r2, #174	@ 0xae
 8008ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00f      	beq.n	8008ee8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ec8:	7bba      	ldrb	r2, [r7, #14]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ed0:	7bba      	ldrb	r2, [r7, #14]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	32ae      	adds	r2, #174	@ 0xae
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	4798      	blx	r3
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ee6:	e004      	b.n	8008ef2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008eec:	e001      	b.n	8008ef2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	88db      	ldrh	r3, [r3, #6]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d110      	bne.n	8008f1c <USBD_StdItfReq+0xc0>
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10d      	bne.n	8008f1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fddc 	bl	8009abe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f06:	e009      	b.n	8008f1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fcf9 	bl	8009902 <USBD_CtlError>
          break;
 8008f10:	e004      	b.n	8008f1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fcf4 	bl	8009902 <USBD_CtlError>
          break;
 8008f1a:	e000      	b.n	8008f1e <USBD_StdItfReq+0xc2>
          break;
 8008f1c:	bf00      	nop
      }
      break;
 8008f1e:	e004      	b.n	8008f2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fced 	bl	8009902 <USBD_CtlError>
      break;
 8008f28:	bf00      	nop
  }

  return ret;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	889b      	ldrh	r3, [r3, #4]
 8008f46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f50:	2b40      	cmp	r3, #64	@ 0x40
 8008f52:	d007      	beq.n	8008f64 <USBD_StdEPReq+0x30>
 8008f54:	2b40      	cmp	r3, #64	@ 0x40
 8008f56:	f200 8181 	bhi.w	800925c <USBD_StdEPReq+0x328>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d02a      	beq.n	8008fb4 <USBD_StdEPReq+0x80>
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	f040 817c 	bne.w	800925c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff fe84 	bl	8008c76 <USBD_CoreFindEP>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f72:	7b7b      	ldrb	r3, [r7, #13]
 8008f74:	2bff      	cmp	r3, #255	@ 0xff
 8008f76:	f000 8176 	beq.w	8009266 <USBD_StdEPReq+0x332>
 8008f7a:	7b7b      	ldrb	r3, [r7, #13]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 8172 	bne.w	8009266 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008f82:	7b7a      	ldrb	r2, [r7, #13]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f8a:	7b7a      	ldrb	r2, [r7, #13]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	32ae      	adds	r2, #174	@ 0xae
 8008f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 8165 	beq.w	8009266 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f9c:	7b7a      	ldrb	r2, [r7, #13]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32ae      	adds	r2, #174	@ 0xae
 8008fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
 8008fae:	4603      	mov	r3, r0
 8008fb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fb2:	e158      	b.n	8009266 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d008      	beq.n	8008fce <USBD_StdEPReq+0x9a>
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	f300 8147 	bgt.w	8009250 <USBD_StdEPReq+0x31c>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 809b 	beq.w	80090fe <USBD_StdEPReq+0x1ca>
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d03c      	beq.n	8009046 <USBD_StdEPReq+0x112>
 8008fcc:	e140      	b.n	8009250 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d002      	beq.n	8008fe0 <USBD_StdEPReq+0xac>
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d016      	beq.n	800900c <USBD_StdEPReq+0xd8>
 8008fde:	e02c      	b.n	800903a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <USBD_StdEPReq+0xce>
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b80      	cmp	r3, #128	@ 0x80
 8008fea:	d00a      	beq.n	8009002 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f979 	bl	800a2e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff6:	2180      	movs	r1, #128	@ 0x80
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 f975 	bl	800a2e8 <USBD_LL_StallEP>
 8008ffe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009000:	e020      	b.n	8009044 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fc7c 	bl	8009902 <USBD_CtlError>
              break;
 800900a:	e01b      	b.n	8009044 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	885b      	ldrh	r3, [r3, #2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10e      	bne.n	8009032 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <USBD_StdEPReq+0xfe>
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b80      	cmp	r3, #128	@ 0x80
 800901e:	d008      	beq.n	8009032 <USBD_StdEPReq+0xfe>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	88db      	ldrh	r3, [r3, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f95b 	bl	800a2e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fd43 	bl	8009abe <USBD_CtlSendStatus>

              break;
 8009038:	e004      	b.n	8009044 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fc60 	bl	8009902 <USBD_CtlError>
              break;
 8009042:	bf00      	nop
          }
          break;
 8009044:	e109      	b.n	800925a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b02      	cmp	r3, #2
 8009050:	d002      	beq.n	8009058 <USBD_StdEPReq+0x124>
 8009052:	2b03      	cmp	r3, #3
 8009054:	d016      	beq.n	8009084 <USBD_StdEPReq+0x150>
 8009056:	e04b      	b.n	80090f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00d      	beq.n	800907a <USBD_StdEPReq+0x146>
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	2b80      	cmp	r3, #128	@ 0x80
 8009062:	d00a      	beq.n	800907a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 f93d 	bl	800a2e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800906e:	2180      	movs	r1, #128	@ 0x80
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 f939 	bl	800a2e8 <USBD_LL_StallEP>
 8009076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009078:	e040      	b.n	80090fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fc40 	bl	8009902 <USBD_CtlError>
              break;
 8009082:	e03b      	b.n	80090fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	885b      	ldrh	r3, [r3, #2]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d136      	bne.n	80090fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 f943 	bl	800a326 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fd0c 	bl	8009abe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fde3 	bl	8008c76 <USBD_CoreFindEP>
 80090b0:	4603      	mov	r3, r0
 80090b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090b4:	7b7b      	ldrb	r3, [r7, #13]
 80090b6:	2bff      	cmp	r3, #255	@ 0xff
 80090b8:	d01f      	beq.n	80090fa <USBD_StdEPReq+0x1c6>
 80090ba:	7b7b      	ldrb	r3, [r7, #13]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d11c      	bne.n	80090fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090c0:	7b7a      	ldrb	r2, [r7, #13]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090c8:	7b7a      	ldrb	r2, [r7, #13]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	32ae      	adds	r2, #174	@ 0xae
 80090ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d010      	beq.n	80090fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090d8:	7b7a      	ldrb	r2, [r7, #13]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	32ae      	adds	r2, #174	@ 0xae
 80090de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090ee:	e004      	b.n	80090fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fc05 	bl	8009902 <USBD_CtlError>
              break;
 80090f8:	e000      	b.n	80090fc <USBD_StdEPReq+0x1c8>
              break;
 80090fa:	bf00      	nop
          }
          break;
 80090fc:	e0ad      	b.n	800925a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d002      	beq.n	8009110 <USBD_StdEPReq+0x1dc>
 800910a:	2b03      	cmp	r3, #3
 800910c:	d033      	beq.n	8009176 <USBD_StdEPReq+0x242>
 800910e:	e099      	b.n	8009244 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <USBD_StdEPReq+0x1f2>
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b80      	cmp	r3, #128	@ 0x80
 800911a:	d004      	beq.n	8009126 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fbef 	bl	8009902 <USBD_CtlError>
                break;
 8009124:	e093      	b.n	800924e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912a:	2b00      	cmp	r3, #0
 800912c:	da0b      	bge.n	8009146 <USBD_StdEPReq+0x212>
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	3310      	adds	r3, #16
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	4413      	add	r3, r2
 8009142:	3304      	adds	r3, #4
 8009144:	e00b      	b.n	800915e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	4413      	add	r3, r2
 800915c:	3304      	adds	r3, #4
 800915e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2200      	movs	r2, #0
 8009164:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	330e      	adds	r3, #14
 800916a:	2202      	movs	r2, #2
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc44 	bl	80099fc <USBD_CtlSendData>
              break;
 8009174:	e06b      	b.n	800924e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800917a:	2b00      	cmp	r3, #0
 800917c:	da11      	bge.n	80091a2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	f003 020f 	and.w	r2, r3, #15
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	3323      	adds	r3, #35	@ 0x23
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d117      	bne.n	80091c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fbb1 	bl	8009902 <USBD_CtlError>
                  break;
 80091a0:	e055      	b.n	800924e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	440b      	add	r3, r1
 80091b4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d104      	bne.n	80091c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fb9e 	bl	8009902 <USBD_CtlError>
                  break;
 80091c6:	e042      	b.n	800924e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	da0b      	bge.n	80091e8 <USBD_StdEPReq+0x2b4>
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	3310      	adds	r3, #16
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	3304      	adds	r3, #4
 80091e6:	e00b      	b.n	8009200 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	4413      	add	r3, r2
 80091fe:	3304      	adds	r3, #4
 8009200:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <USBD_StdEPReq+0x2da>
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	2b80      	cmp	r3, #128	@ 0x80
 800920c:	d103      	bne.n	8009216 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2200      	movs	r2, #0
 8009212:	739a      	strb	r2, [r3, #14]
 8009214:	e00e      	b.n	8009234 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 f8a2 	bl	800a364 <USBD_LL_IsStallEP>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2201      	movs	r2, #1
 800922a:	739a      	strb	r2, [r3, #14]
 800922c:	e002      	b.n	8009234 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2200      	movs	r2, #0
 8009232:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	330e      	adds	r3, #14
 8009238:	2202      	movs	r2, #2
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fbdd 	bl	80099fc <USBD_CtlSendData>
              break;
 8009242:	e004      	b.n	800924e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fb5b 	bl	8009902 <USBD_CtlError>
              break;
 800924c:	bf00      	nop
          }
          break;
 800924e:	e004      	b.n	800925a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fb55 	bl	8009902 <USBD_CtlError>
          break;
 8009258:	bf00      	nop
      }
      break;
 800925a:	e005      	b.n	8009268 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fb4f 	bl	8009902 <USBD_CtlError>
      break;
 8009264:	e000      	b.n	8009268 <USBD_StdEPReq+0x334>
      break;
 8009266:	bf00      	nop
  }

  return ret;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	885b      	ldrh	r3, [r3, #2]
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	2b06      	cmp	r3, #6
 8009296:	f200 8128 	bhi.w	80094ea <USBD_GetDescriptor+0x276>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <USBD_GetDescriptor+0x2c>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092bd 	.word	0x080092bd
 80092a4:	080092d5 	.word	0x080092d5
 80092a8:	08009315 	.word	0x08009315
 80092ac:	080094eb 	.word	0x080094eb
 80092b0:	080094eb 	.word	0x080094eb
 80092b4:	0800948b 	.word	0x0800948b
 80092b8:	080094b7 	.word	0x080094b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	7c12      	ldrb	r2, [r2, #16]
 80092c8:	f107 0108 	add.w	r1, r7, #8
 80092cc:	4610      	mov	r0, r2
 80092ce:	4798      	blx	r3
 80092d0:	60f8      	str	r0, [r7, #12]
      break;
 80092d2:	e112      	b.n	80094fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	7c1b      	ldrb	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10d      	bne.n	80092f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e4:	f107 0208 	add.w	r2, r7, #8
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	2202      	movs	r2, #2
 80092f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092f6:	e100      	b.n	80094fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009300:	f107 0208 	add.w	r2, r7, #8
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	2202      	movs	r2, #2
 8009310:	701a      	strb	r2, [r3, #0]
      break;
 8009312:	e0f2      	b.n	80094fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	885b      	ldrh	r3, [r3, #2]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b05      	cmp	r3, #5
 800931c:	f200 80ac 	bhi.w	8009478 <USBD_GetDescriptor+0x204>
 8009320:	a201      	add	r2, pc, #4	@ (adr r2, 8009328 <USBD_GetDescriptor+0xb4>)
 8009322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009326:	bf00      	nop
 8009328:	08009341 	.word	0x08009341
 800932c:	08009375 	.word	0x08009375
 8009330:	080093a9 	.word	0x080093a9
 8009334:	080093dd 	.word	0x080093dd
 8009338:	08009411 	.word	0x08009411
 800933c:	08009445 	.word	0x08009445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7c12      	ldrb	r2, [r2, #16]
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009362:	e091      	b.n	8009488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 facb 	bl	8009902 <USBD_CtlError>
            err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
          break;
 8009372:	e089      	b.n	8009488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00b      	beq.n	8009398 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	7c12      	ldrb	r2, [r2, #16]
 800938c:	f107 0108 	add.w	r1, r7, #8
 8009390:	4610      	mov	r0, r2
 8009392:	4798      	blx	r3
 8009394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009396:	e077      	b.n	8009488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fab1 	bl	8009902 <USBD_CtlError>
            err++;
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	3301      	adds	r3, #1
 80093a4:	72fb      	strb	r3, [r7, #11]
          break;
 80093a6:	e06f      	b.n	8009488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	7c12      	ldrb	r2, [r2, #16]
 80093c0:	f107 0108 	add.w	r1, r7, #8
 80093c4:	4610      	mov	r0, r2
 80093c6:	4798      	blx	r3
 80093c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ca:	e05d      	b.n	8009488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa97 	bl	8009902 <USBD_CtlError>
            err++;
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	3301      	adds	r3, #1
 80093d8:	72fb      	strb	r3, [r7, #11]
          break;
 80093da:	e055      	b.n	8009488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	7c12      	ldrb	r2, [r2, #16]
 80093f4:	f107 0108 	add.w	r1, r7, #8
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
 80093fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093fe:	e043      	b.n	8009488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa7d 	bl	8009902 <USBD_CtlError>
            err++;
 8009408:	7afb      	ldrb	r3, [r7, #11]
 800940a:	3301      	adds	r3, #1
 800940c:	72fb      	strb	r3, [r7, #11]
          break;
 800940e:	e03b      	b.n	8009488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	7c12      	ldrb	r2, [r2, #16]
 8009428:	f107 0108 	add.w	r1, r7, #8
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009432:	e029      	b.n	8009488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa63 	bl	8009902 <USBD_CtlError>
            err++;
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	3301      	adds	r3, #1
 8009440:	72fb      	strb	r3, [r7, #11]
          break;
 8009442:	e021      	b.n	8009488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	7c12      	ldrb	r2, [r2, #16]
 800945c:	f107 0108 	add.w	r1, r7, #8
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
 8009464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009466:	e00f      	b.n	8009488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa49 	bl	8009902 <USBD_CtlError>
            err++;
 8009470:	7afb      	ldrb	r3, [r7, #11]
 8009472:	3301      	adds	r3, #1
 8009474:	72fb      	strb	r3, [r7, #11]
          break;
 8009476:	e007      	b.n	8009488 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fa41 	bl	8009902 <USBD_CtlError>
          err++;
 8009480:	7afb      	ldrb	r3, [r7, #11]
 8009482:	3301      	adds	r3, #1
 8009484:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009486:	bf00      	nop
      }
      break;
 8009488:	e037      	b.n	80094fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	7c1b      	ldrb	r3, [r3, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d109      	bne.n	80094a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800949a:	f107 0208 	add.w	r2, r7, #8
 800949e:	4610      	mov	r0, r2
 80094a0:	4798      	blx	r3
 80094a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094a4:	e029      	b.n	80094fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fa2a 	bl	8009902 <USBD_CtlError>
        err++;
 80094ae:	7afb      	ldrb	r3, [r7, #11]
 80094b0:	3301      	adds	r3, #1
 80094b2:	72fb      	strb	r3, [r7, #11]
      break;
 80094b4:	e021      	b.n	80094fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	7c1b      	ldrb	r3, [r3, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10d      	bne.n	80094da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c6:	f107 0208 	add.w	r2, r7, #8
 80094ca:	4610      	mov	r0, r2
 80094cc:	4798      	blx	r3
 80094ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	2207      	movs	r2, #7
 80094d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094d8:	e00f      	b.n	80094fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fa10 	bl	8009902 <USBD_CtlError>
        err++;
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	3301      	adds	r3, #1
 80094e6:	72fb      	strb	r3, [r7, #11]
      break;
 80094e8:	e007      	b.n	80094fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fa08 	bl	8009902 <USBD_CtlError>
      err++;
 80094f2:	7afb      	ldrb	r3, [r7, #11]
 80094f4:	3301      	adds	r3, #1
 80094f6:	72fb      	strb	r3, [r7, #11]
      break;
 80094f8:	bf00      	nop
  }

  if (err != 0U)
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d11e      	bne.n	800953e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	88db      	ldrh	r3, [r3, #6]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d016      	beq.n	8009536 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009508:	893b      	ldrh	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00e      	beq.n	800952c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	88da      	ldrh	r2, [r3, #6]
 8009512:	893b      	ldrh	r3, [r7, #8]
 8009514:	4293      	cmp	r3, r2
 8009516:	bf28      	it	cs
 8009518:	4613      	movcs	r3, r2
 800951a:	b29b      	uxth	r3, r3
 800951c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800951e:	893b      	ldrh	r3, [r7, #8]
 8009520:	461a      	mov	r2, r3
 8009522:	68f9      	ldr	r1, [r7, #12]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fa69 	bl	80099fc <USBD_CtlSendData>
 800952a:	e009      	b.n	8009540 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f9e7 	bl	8009902 <USBD_CtlError>
 8009534:	e004      	b.n	8009540 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fac1 	bl	8009abe <USBD_CtlSendStatus>
 800953c:	e000      	b.n	8009540 <USBD_GetDescriptor+0x2cc>
    return;
 800953e:	bf00      	nop
  }
}
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop

08009548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	889b      	ldrh	r3, [r3, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d131      	bne.n	80095be <USBD_SetAddress+0x76>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	88db      	ldrh	r3, [r3, #6]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d12d      	bne.n	80095be <USBD_SetAddress+0x76>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	885b      	ldrh	r3, [r3, #2]
 8009566:	2b7f      	cmp	r3, #127	@ 0x7f
 8009568:	d829      	bhi.n	80095be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b03      	cmp	r3, #3
 8009580:	d104      	bne.n	800958c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f9bc 	bl	8009902 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958a:	e01d      	b.n	80095c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	7bfa      	ldrb	r2, [r7, #15]
 8009590:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 ff0f 	bl	800a3bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fa8d 	bl	8009abe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d004      	beq.n	80095b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b2:	e009      	b.n	80095c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095bc:	e004      	b.n	80095c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f99e 	bl	8009902 <USBD_CtlError>
  }
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	4b4e      	ldr	r3, [pc, #312]	@ (8009720 <USBD_SetConfig+0x150>)
 80095e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095e8:	4b4d      	ldr	r3, [pc, #308]	@ (8009720 <USBD_SetConfig+0x150>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d905      	bls.n	80095fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f985 	bl	8009902 <USBD_CtlError>
    return USBD_FAIL;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e08c      	b.n	8009716 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b02      	cmp	r3, #2
 8009606:	d002      	beq.n	800960e <USBD_SetConfig+0x3e>
 8009608:	2b03      	cmp	r3, #3
 800960a:	d029      	beq.n	8009660 <USBD_SetConfig+0x90>
 800960c:	e075      	b.n	80096fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800960e:	4b44      	ldr	r3, [pc, #272]	@ (8009720 <USBD_SetConfig+0x150>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d020      	beq.n	8009658 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009616:	4b42      	ldr	r3, [pc, #264]	@ (8009720 <USBD_SetConfig+0x150>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009620:	4b3f      	ldr	r3, [pc, #252]	@ (8009720 <USBD_SetConfig+0x150>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fe ffcd 	bl	80085c6 <USBD_SetClassConfig>
 800962c:	4603      	mov	r3, r0
 800962e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d008      	beq.n	8009648 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f962 	bl	8009902 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2202      	movs	r2, #2
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009646:	e065      	b.n	8009714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fa38 	bl	8009abe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2203      	movs	r2, #3
 8009652:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009656:	e05d      	b.n	8009714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fa30 	bl	8009abe <USBD_CtlSendStatus>
      break;
 800965e:	e059      	b.n	8009714 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009660:	4b2f      	ldr	r3, [pc, #188]	@ (8009720 <USBD_SetConfig+0x150>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d112      	bne.n	800968e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009670:	4b2b      	ldr	r3, [pc, #172]	@ (8009720 <USBD_SetConfig+0x150>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800967a:	4b29      	ldr	r3, [pc, #164]	@ (8009720 <USBD_SetConfig+0x150>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe ffbc 	bl	80085fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fa19 	bl	8009abe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800968c:	e042      	b.n	8009714 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800968e:	4b24      	ldr	r3, [pc, #144]	@ (8009720 <USBD_SetConfig+0x150>)
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	429a      	cmp	r2, r3
 800969a:	d02a      	beq.n	80096f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7fe ffaa 	bl	80085fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009720 <USBD_SetConfig+0x150>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009720 <USBD_SetConfig+0x150>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fe ff83 	bl	80085c6 <USBD_SetClassConfig>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00f      	beq.n	80096ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f918 	bl	8009902 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7fe ff8f 	bl	80085fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80096e8:	e014      	b.n	8009714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f9e7 	bl	8009abe <USBD_CtlSendStatus>
      break;
 80096f0:	e010      	b.n	8009714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f9e3 	bl	8009abe <USBD_CtlSendStatus>
      break;
 80096f8:	e00c      	b.n	8009714 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f900 	bl	8009902 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009702:	4b07      	ldr	r3, [pc, #28]	@ (8009720 <USBD_SetConfig+0x150>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7fe ff78 	bl	80085fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800970e:	2303      	movs	r3, #3
 8009710:	73fb      	strb	r3, [r7, #15]
      break;
 8009712:	bf00      	nop
  }

  return ret;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	200004ac 	.word	0x200004ac

08009724 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	88db      	ldrh	r3, [r3, #6]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d004      	beq.n	8009740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f8e2 	bl	8009902 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800973e:	e023      	b.n	8009788 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	dc02      	bgt.n	8009752 <USBD_GetConfig+0x2e>
 800974c:	2b00      	cmp	r3, #0
 800974e:	dc03      	bgt.n	8009758 <USBD_GetConfig+0x34>
 8009750:	e015      	b.n	800977e <USBD_GetConfig+0x5a>
 8009752:	2b03      	cmp	r3, #3
 8009754:	d00b      	beq.n	800976e <USBD_GetConfig+0x4a>
 8009756:	e012      	b.n	800977e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3308      	adds	r3, #8
 8009762:	2201      	movs	r2, #1
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f948 	bl	80099fc <USBD_CtlSendData>
        break;
 800976c:	e00c      	b.n	8009788 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3304      	adds	r3, #4
 8009772:	2201      	movs	r2, #1
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f940 	bl	80099fc <USBD_CtlSendData>
        break;
 800977c:	e004      	b.n	8009788 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f8be 	bl	8009902 <USBD_CtlError>
        break;
 8009786:	bf00      	nop
}
 8009788:	bf00      	nop
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d81e      	bhi.n	80097e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	88db      	ldrh	r3, [r3, #6]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d004      	beq.n	80097ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f8a5 	bl	8009902 <USBD_CtlError>
        break;
 80097b8:	e01a      	b.n	80097f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f043 0202 	orr.w	r2, r3, #2
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	330c      	adds	r3, #12
 80097da:	2202      	movs	r2, #2
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f90c 	bl	80099fc <USBD_CtlSendData>
      break;
 80097e4:	e004      	b.n	80097f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f88a 	bl	8009902 <USBD_CtlError>
      break;
 80097ee:	bf00      	nop
  }
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d107      	bne.n	800981a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f953 	bl	8009abe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009818:	e013      	b.n	8009842 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	885b      	ldrh	r3, [r3, #2]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d10b      	bne.n	800983a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	889b      	ldrh	r3, [r3, #4]
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	b29b      	uxth	r3, r3
 800982a:	b2da      	uxtb	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f943 	bl	8009abe <USBD_CtlSendStatus>
}
 8009838:	e003      	b.n	8009842 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f860 	bl	8009902 <USBD_CtlError>
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800985a:	b2db      	uxtb	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	2b02      	cmp	r3, #2
 8009860:	d80b      	bhi.n	800987a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	885b      	ldrh	r3, [r3, #2]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d10c      	bne.n	8009884 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f923 	bl	8009abe <USBD_CtlSendStatus>
      }
      break;
 8009878:	e004      	b.n	8009884 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f840 	bl	8009902 <USBD_CtlError>
      break;
 8009882:	e000      	b.n	8009886 <USBD_ClrFeature+0x3c>
      break;
 8009884:	bf00      	nop
  }
}
 8009886:	bf00      	nop
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	781a      	ldrb	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3301      	adds	r3, #1
 80098a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fa3d 	bl	8008d38 <SWAPBYTE>
 80098be:	4603      	mov	r3, r0
 80098c0:	461a      	mov	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f7ff fa30 	bl	8008d38 <SWAPBYTE>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3301      	adds	r3, #1
 80098e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff fa23 	bl	8008d38 <SWAPBYTE>
 80098f2:	4603      	mov	r3, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	80da      	strh	r2, [r3, #6]
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800990c:	2180      	movs	r1, #128	@ 0x80
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fcea 	bl	800a2e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009914:	2100      	movs	r1, #0
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fce6 	bl	800a2e8 <USBD_LL_StallEP>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d042      	beq.n	80099c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800993e:	6938      	ldr	r0, [r7, #16]
 8009940:	f000 f842 	bl	80099c8 <USBD_GetLen>
 8009944:	4603      	mov	r3, r0
 8009946:	3301      	adds	r3, #1
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800994e:	d808      	bhi.n	8009962 <USBD_GetString+0x3e>
 8009950:	6938      	ldr	r0, [r7, #16]
 8009952:	f000 f839 	bl	80099c8 <USBD_GetLen>
 8009956:	4603      	mov	r3, r0
 8009958:	3301      	adds	r3, #1
 800995a:	b29b      	uxth	r3, r3
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	e001      	b.n	8009966 <USBD_GetString+0x42>
 8009962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	4413      	add	r3, r2
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	701a      	strb	r2, [r3, #0]
  idx++;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	3301      	adds	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4413      	add	r3, r2
 8009982:	2203      	movs	r2, #3
 8009984:	701a      	strb	r2, [r3, #0]
  idx++;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	3301      	adds	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800998c:	e013      	b.n	80099b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	4413      	add	r3, r2
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	7812      	ldrb	r2, [r2, #0]
 8009998:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
    idx++;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	3301      	adds	r3, #1
 80099a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	4413      	add	r3, r2
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
 80099b2:	3301      	adds	r3, #1
 80099b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e7      	bne.n	800998e <USBD_GetString+0x6a>
 80099be:	e000      	b.n	80099c2 <USBD_GetString+0x9e>
    return;
 80099c0:	bf00      	nop
  }
}
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099d8:	e005      	b.n	80099e6 <USBD_GetLen+0x1e>
  {
    len++;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	3301      	adds	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	3301      	adds	r3, #1
 80099e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f5      	bne.n	80099da <USBD_GetLen+0x12>
  }

  return len;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	2100      	movs	r1, #0
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fce6 	bl	800a3fa <USBD_LL_Transmit>

  return USBD_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	2100      	movs	r1, #0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fcd5 	bl	800a3fa <USBD_LL_Transmit>

  return USBD_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2203      	movs	r2, #3
 8009a6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 fcd5 	bl	800a43c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	2100      	movs	r1, #0
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 fcc4 	bl	800a43c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2204      	movs	r2, #4
 8009aca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fc90 	bl	800a3fa <USBD_LL_Transmit>

  return USBD_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2205      	movs	r2, #5
 8009af0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009af4:	2300      	movs	r3, #0
 8009af6:	2200      	movs	r2, #0
 8009af8:	2100      	movs	r1, #0
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fc9e 	bl	800a43c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b10:	2200      	movs	r2, #0
 8009b12:	4912      	ldr	r1, [pc, #72]	@ (8009b5c <MX_USB_DEVICE_Init+0x50>)
 8009b14:	4812      	ldr	r0, [pc, #72]	@ (8009b60 <MX_USB_DEVICE_Init+0x54>)
 8009b16:	f7fe fcd9 	bl	80084cc <USBD_Init>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b20:	f7f8 f976 	bl	8001e10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b24:	490f      	ldr	r1, [pc, #60]	@ (8009b64 <MX_USB_DEVICE_Init+0x58>)
 8009b26:	480e      	ldr	r0, [pc, #56]	@ (8009b60 <MX_USB_DEVICE_Init+0x54>)
 8009b28:	f7fe fd00 	bl	800852c <USBD_RegisterClass>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b32:	f7f8 f96d 	bl	8001e10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b36:	490c      	ldr	r1, [pc, #48]	@ (8009b68 <MX_USB_DEVICE_Init+0x5c>)
 8009b38:	4809      	ldr	r0, [pc, #36]	@ (8009b60 <MX_USB_DEVICE_Init+0x54>)
 8009b3a:	f7fe fbf7 	bl	800832c <USBD_CDC_RegisterInterface>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b44:	f7f8 f964 	bl	8001e10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b48:	4805      	ldr	r0, [pc, #20]	@ (8009b60 <MX_USB_DEVICE_Init+0x54>)
 8009b4a:	f7fe fd25 	bl	8008598 <USBD_Start>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b54:	f7f8 f95c 	bl	8001e10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b58:	bf00      	nop
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	200000d4 	.word	0x200000d4
 8009b60:	200004b0 	.word	0x200004b0
 8009b64:	20000040 	.word	0x20000040
 8009b68:	200000c0 	.word	0x200000c0

08009b6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b70:	2200      	movs	r2, #0
 8009b72:	4905      	ldr	r1, [pc, #20]	@ (8009b88 <CDC_Init_FS+0x1c>)
 8009b74:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <CDC_Init_FS+0x20>)
 8009b76:	f7fe fbf3 	bl	8008360 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b7a:	4905      	ldr	r1, [pc, #20]	@ (8009b90 <CDC_Init_FS+0x24>)
 8009b7c:	4803      	ldr	r0, [pc, #12]	@ (8009b8c <CDC_Init_FS+0x20>)
 8009b7e:	f7fe fc11 	bl	80083a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000f8c 	.word	0x20000f8c
 8009b8c:	200004b0 	.word	0x200004b0
 8009b90:	2000078c 	.word	0x2000078c

08009b94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b94:	b480      	push	{r7}
 8009b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	71fb      	strb	r3, [r7, #7]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	2b23      	cmp	r3, #35	@ 0x23
 8009bb8:	d84a      	bhi.n	8009c50 <CDC_Control_FS+0xac>
 8009bba:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc0 <CDC_Control_FS+0x1c>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009c51 	.word	0x08009c51
 8009bc4:	08009c51 	.word	0x08009c51
 8009bc8:	08009c51 	.word	0x08009c51
 8009bcc:	08009c51 	.word	0x08009c51
 8009bd0:	08009c51 	.word	0x08009c51
 8009bd4:	08009c51 	.word	0x08009c51
 8009bd8:	08009c51 	.word	0x08009c51
 8009bdc:	08009c51 	.word	0x08009c51
 8009be0:	08009c51 	.word	0x08009c51
 8009be4:	08009c51 	.word	0x08009c51
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009c51 	.word	0x08009c51
 8009bf0:	08009c51 	.word	0x08009c51
 8009bf4:	08009c51 	.word	0x08009c51
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009c51 	.word	0x08009c51
 8009c04:	08009c51 	.word	0x08009c51
 8009c08:	08009c51 	.word	0x08009c51
 8009c0c:	08009c51 	.word	0x08009c51
 8009c10:	08009c51 	.word	0x08009c51
 8009c14:	08009c51 	.word	0x08009c51
 8009c18:	08009c51 	.word	0x08009c51
 8009c1c:	08009c51 	.word	0x08009c51
 8009c20:	08009c51 	.word	0x08009c51
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	08009c51 	.word	0x08009c51
 8009c2c:	08009c51 	.word	0x08009c51
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009c51 	.word	0x08009c51
 8009c38:	08009c51 	.word	0x08009c51
 8009c3c:	08009c51 	.word	0x08009c51
 8009c40:	08009c51 	.word	0x08009c51
 8009c44:	08009c51 	.word	0x08009c51
 8009c48:	08009c51 	.word	0x08009c51
 8009c4c:	08009c51 	.word	0x08009c51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c50:	bf00      	nop
  }

  return (USBD_OK);
 8009c52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	4805      	ldr	r0, [pc, #20]	@ (8009c84 <CDC_Receive_FS+0x24>)
 8009c6e:	f7fe fb99 	bl	80083a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c72:	4804      	ldr	r0, [pc, #16]	@ (8009c84 <CDC_Receive_FS+0x24>)
 8009c74:	f7fe fbf4 	bl	8008460 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200004b0 	.word	0x200004b0

08009c88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c98:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <CDC_Transmit_FS+0x48>)
 8009c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e00b      	b.n	8009cc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cae:	887b      	ldrh	r3, [r7, #2]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	4806      	ldr	r0, [pc, #24]	@ (8009cd0 <CDC_Transmit_FS+0x48>)
 8009cb6:	f7fe fb53 	bl	8008360 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cba:	4805      	ldr	r0, [pc, #20]	@ (8009cd0 <CDC_Transmit_FS+0x48>)
 8009cbc:	f7fe fb90 	bl	80083e0 <USBD_CDC_TransmitPacket>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200004b0 	.word	0x200004b0

08009cd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	6039      	str	r1, [r7, #0]
 8009d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2212      	movs	r2, #18
 8009d08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d0a:	4b03      	ldr	r3, [pc, #12]	@ (8009d18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	200000f0 	.word	0x200000f0

08009d1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	6039      	str	r1, [r7, #0]
 8009d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2204      	movs	r2, #4
 8009d2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d2e:	4b03      	ldr	r3, [pc, #12]	@ (8009d3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	20000104 	.word	0x20000104

08009d40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	6039      	str	r1, [r7, #0]
 8009d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d4c:	79fb      	ldrb	r3, [r7, #7]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	4907      	ldr	r1, [pc, #28]	@ (8009d74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d56:	4808      	ldr	r0, [pc, #32]	@ (8009d78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d58:	f7ff fde4 	bl	8009924 <USBD_GetString>
 8009d5c:	e004      	b.n	8009d68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	4904      	ldr	r1, [pc, #16]	@ (8009d74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d62:	4805      	ldr	r0, [pc, #20]	@ (8009d78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d64:	f7ff fdde 	bl	8009924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d68:	4b02      	ldr	r3, [pc, #8]	@ (8009d74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	2000178c 	.word	0x2000178c
 8009d78:	0800ecd4 	.word	0x0800ecd4

08009d7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	6039      	str	r1, [r7, #0]
 8009d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	4904      	ldr	r1, [pc, #16]	@ (8009d9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d8c:	4804      	ldr	r0, [pc, #16]	@ (8009da0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d8e:	f7ff fdc9 	bl	8009924 <USBD_GetString>
  return USBD_StrDesc;
 8009d92:	4b02      	ldr	r3, [pc, #8]	@ (8009d9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	2000178c 	.word	0x2000178c
 8009da0:	0800ecec 	.word	0x0800ecec

08009da4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	221a      	movs	r2, #26
 8009db4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009db6:	f000 f843 	bl	8009e40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dba:	4b02      	ldr	r3, [pc, #8]	@ (8009dc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20000108 	.word	0x20000108

08009dc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d105      	bne.n	8009de6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	4907      	ldr	r1, [pc, #28]	@ (8009dfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dde:	4808      	ldr	r0, [pc, #32]	@ (8009e00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009de0:	f7ff fda0 	bl	8009924 <USBD_GetString>
 8009de4:	e004      	b.n	8009df0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	4904      	ldr	r1, [pc, #16]	@ (8009dfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dea:	4805      	ldr	r0, [pc, #20]	@ (8009e00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dec:	f7ff fd9a 	bl	8009924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009df0:	4b02      	ldr	r3, [pc, #8]	@ (8009dfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	2000178c 	.word	0x2000178c
 8009e00:	0800ed00 	.word	0x0800ed00

08009e04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	6039      	str	r1, [r7, #0]
 8009e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d105      	bne.n	8009e22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	4907      	ldr	r1, [pc, #28]	@ (8009e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e1a:	4808      	ldr	r0, [pc, #32]	@ (8009e3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e1c:	f7ff fd82 	bl	8009924 <USBD_GetString>
 8009e20:	e004      	b.n	8009e2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	4904      	ldr	r1, [pc, #16]	@ (8009e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e26:	4805      	ldr	r0, [pc, #20]	@ (8009e3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e28:	f7ff fd7c 	bl	8009924 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e2c:	4b02      	ldr	r3, [pc, #8]	@ (8009e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	2000178c 	.word	0x2000178c
 8009e3c:	0800ed0c 	.word	0x0800ed0c

08009e40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e46:	4b0f      	ldr	r3, [pc, #60]	@ (8009e84 <Get_SerialNum+0x44>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009e88 <Get_SerialNum+0x48>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e52:	4b0e      	ldr	r3, [pc, #56]	@ (8009e8c <Get_SerialNum+0x4c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d009      	beq.n	8009e7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e66:	2208      	movs	r2, #8
 8009e68:	4909      	ldr	r1, [pc, #36]	@ (8009e90 <Get_SerialNum+0x50>)
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f814 	bl	8009e98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e70:	2204      	movs	r2, #4
 8009e72:	4908      	ldr	r1, [pc, #32]	@ (8009e94 <Get_SerialNum+0x54>)
 8009e74:	68b8      	ldr	r0, [r7, #8]
 8009e76:	f000 f80f 	bl	8009e98 <IntToUnicode>
  }
}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	1fff7a10 	.word	0x1fff7a10
 8009e88:	1fff7a14 	.word	0x1fff7a14
 8009e8c:	1fff7a18 	.word	0x1fff7a18
 8009e90:	2000010a 	.word	0x2000010a
 8009e94:	2000011a 	.word	0x2000011a

08009e98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]
 8009eae:	e027      	b.n	8009f00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	0f1b      	lsrs	r3, r3, #28
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d80b      	bhi.n	8009ed0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	0f1b      	lsrs	r3, r3, #28
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	440b      	add	r3, r1
 8009ec8:	3230      	adds	r2, #48	@ 0x30
 8009eca:	b2d2      	uxtb	r2, r2
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	e00a      	b.n	8009ee6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	0f1b      	lsrs	r3, r3, #28
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4619      	mov	r1, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	440b      	add	r3, r1
 8009ee0:	3237      	adds	r2, #55	@ 0x37
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	3301      	adds	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
 8009f00:	7dfa      	ldrb	r2, [r7, #23]
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d3d3      	bcc.n	8009eb0 <IntToUnicode+0x18>
  }
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
	...

08009f18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	@ 0x28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f20:	f107 0314 	add.w	r3, r7, #20
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	60da      	str	r2, [r3, #12]
 8009f2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f38:	d13a      	bne.n	8009fb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	613b      	str	r3, [r7, #16]
 8009f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f42:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f44:	f043 0301 	orr.w	r3, r3, #1
 8009f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	613b      	str	r3, [r7, #16]
 8009f54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f64:	2303      	movs	r3, #3
 8009f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f68:	230a      	movs	r3, #10
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	4619      	mov	r1, r3
 8009f72:	4812      	ldr	r0, [pc, #72]	@ (8009fbc <HAL_PCD_MspInit+0xa4>)
 8009f74:	f7f8 ff7e 	bl	8002e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f78:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f82:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f92:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f94:	4b08      	ldr	r3, [pc, #32]	@ (8009fb8 <HAL_PCD_MspInit+0xa0>)
 8009f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	2043      	movs	r0, #67	@ 0x43
 8009fa6:	f7f8 ff2e 	bl	8002e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009faa:	2043      	movs	r0, #67	@ 0x43
 8009fac:	f7f8 ff47 	bl	8002e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fb0:	bf00      	nop
 8009fb2:	3728      	adds	r7, #40	@ 0x28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	40023800 	.word	0x40023800
 8009fbc:	40020000 	.word	0x40020000

08009fc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe fb2b 	bl	8008632 <USBD_LL_SetupStage>
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	440b      	add	r3, r1
 800a004:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	4619      	mov	r1, r3
 800a00e:	f7fe fb65 	bl	80086dc <USBD_LL_DataOutStage>
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	6879      	ldr	r1, [r7, #4]
 800a030:	4613      	mov	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	440b      	add	r3, r1
 800a03a:	3320      	adds	r3, #32
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	4619      	mov	r1, r3
 800a042:	f7fe fc07 	bl	8008854 <USBD_LL_DataInStage>
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fd4b 	bl	8008af8 <USBD_LL_SOF>
}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a072:	2301      	movs	r3, #1
 800a074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	79db      	ldrb	r3, [r3, #7]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d001      	beq.n	800a082 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a07e:	f7f7 fec7 	bl	8001e10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a088:	7bfa      	ldrb	r2, [r7, #15]
 800a08a:	4611      	mov	r1, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fcef 	bl	8008a70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fc96 	bl	80089ca <USBD_LL_Reset>
}
 800a09e:	bf00      	nop
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fcea 	bl	8008a90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	6812      	ldr	r2, [r2, #0]
 800a0ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7adb      	ldrb	r3, [r3, #11]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0dc:	4b04      	ldr	r3, [pc, #16]	@ (800a0f0 <HAL_PCD_SuspendCallback+0x48>)
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	4a03      	ldr	r2, [pc, #12]	@ (800a0f0 <HAL_PCD_SuspendCallback+0x48>)
 800a0e2:	f043 0306 	orr.w	r3, r3, #6
 800a0e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	e000ed00 	.word	0xe000ed00

0800a0f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fce0 	bl	8008ac8 <USBD_LL_Resume>
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a122:	78fa      	ldrb	r2, [r7, #3]
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fd38 	bl	8008b9c <USBD_LL_IsoOUTIncomplete>
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a146:	78fa      	ldrb	r2, [r7, #3]
 800a148:	4611      	mov	r1, r2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe fcf4 	bl	8008b38 <USBD_LL_IsoINIncomplete>
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe fd4a 	bl	8008c00 <USBD_LL_DevConnected>
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fd47 	bl	8008c16 <USBD_LL_DevDisconnected>
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d13c      	bne.n	800a21a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1a0:	4a20      	ldr	r2, [pc, #128]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a1b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a1b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1ba:	2204      	movs	r2, #4
 800a1bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1be:	4b19      	ldr	r3, [pc, #100]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1c4:	4b17      	ldr	r3, [pc, #92]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1ca:	4b16      	ldr	r3, [pc, #88]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1d0:	4b14      	ldr	r3, [pc, #80]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1d6:	4b13      	ldr	r3, [pc, #76]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a1dc:	4b11      	ldr	r3, [pc, #68]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a1e2:	4b10      	ldr	r3, [pc, #64]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a1e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a1ee:	480d      	ldr	r0, [pc, #52]	@ (800a224 <USBD_LL_Init+0x94>)
 800a1f0:	f7f9 fc95 	bl	8003b1e <HAL_PCD_Init>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a1fa:	f7f7 fe09 	bl	8001e10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a1fe:	2180      	movs	r1, #128	@ 0x80
 800a200:	4808      	ldr	r0, [pc, #32]	@ (800a224 <USBD_LL_Init+0x94>)
 800a202:	f7fa fec2 	bl	8004f8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a206:	2240      	movs	r2, #64	@ 0x40
 800a208:	2100      	movs	r1, #0
 800a20a:	4806      	ldr	r0, [pc, #24]	@ (800a224 <USBD_LL_Init+0x94>)
 800a20c:	f7fa fe76 	bl	8004efc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a210:	2280      	movs	r2, #128	@ 0x80
 800a212:	2101      	movs	r1, #1
 800a214:	4803      	ldr	r0, [pc, #12]	@ (800a224 <USBD_LL_Init+0x94>)
 800a216:	f7fa fe71 	bl	8004efc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	2000198c 	.word	0x2000198c

0800a228 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f9 fd7c 	bl	8003d3c <HAL_PCD_Start>
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 f942 	bl	800a4d4 <USBD_Get_USB_Status>
 800a250:	4603      	mov	r3, r0
 800a252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a254:	7bbb      	ldrb	r3, [r7, #14]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b084      	sub	sp, #16
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	4608      	mov	r0, r1
 800a268:	4611      	mov	r1, r2
 800a26a:	461a      	mov	r2, r3
 800a26c:	4603      	mov	r3, r0
 800a26e:	70fb      	strb	r3, [r7, #3]
 800a270:	460b      	mov	r3, r1
 800a272:	70bb      	strb	r3, [r7, #2]
 800a274:	4613      	mov	r3, r2
 800a276:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a286:	78bb      	ldrb	r3, [r7, #2]
 800a288:	883a      	ldrh	r2, [r7, #0]
 800a28a:	78f9      	ldrb	r1, [r7, #3]
 800a28c:	f7fa fa50 	bl	8004730 <HAL_PCD_EP_Open>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f91c 	bl	800a4d4 <USBD_Get_USB_Status>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2c4:	78fa      	ldrb	r2, [r7, #3]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fa fa9b 	bl	8004804 <HAL_PCD_EP_Close>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f8fd 	bl	800a4d4 <USBD_Get_USB_Status>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	4611      	mov	r1, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f7fa fb53 	bl	80049b2 <HAL_PCD_EP_SetStall>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	4618      	mov	r0, r3
 800a314:	f000 f8de 	bl	800a4d4 <USBD_Get_USB_Status>
 800a318:	4603      	mov	r3, r0
 800a31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f7fa fb97 	bl	8004a78 <HAL_PCD_EP_ClrStall>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	4618      	mov	r0, r3
 800a352:	f000 f8bf 	bl	800a4d4 <USBD_Get_USB_Status>
 800a356:	4603      	mov	r3, r0
 800a358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a376:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	da0b      	bge.n	800a398 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a380:	78fb      	ldrb	r3, [r7, #3]
 800a382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	4613      	mov	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	440b      	add	r3, r1
 800a392:	3316      	adds	r3, #22
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	e00b      	b.n	800a3b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a39e:	68f9      	ldr	r1, [r7, #12]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a3ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3d6:	78fa      	ldrb	r2, [r7, #3]
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fa f984 	bl	80046e8 <HAL_PCD_SetAddress>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f874 	bl	800a4d4 <USBD_Get_USB_Status>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b086      	sub	sp, #24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	460b      	mov	r3, r1
 800a408:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a418:	7af9      	ldrb	r1, [r7, #11]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	f7fa fa8e 	bl	800493e <HAL_PCD_EP_Transmit>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 f853 	bl	800a4d4 <USBD_Get_USB_Status>
 800a42e:	4603      	mov	r3, r0
 800a430:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a432:	7dbb      	ldrb	r3, [r7, #22]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	607a      	str	r2, [r7, #4]
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	460b      	mov	r3, r1
 800a44a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a45a:	7af9      	ldrb	r1, [r7, #11]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	f7fa fa1a 	bl	8004898 <HAL_PCD_EP_Receive>
 800a464:	4603      	mov	r3, r0
 800a466:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f832 	bl	800a4d4 <USBD_Get_USB_Status>
 800a470:	4603      	mov	r3, r0
 800a472:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a474:	7dbb      	ldrb	r3, [r7, #22]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7fa fa3a 	bl	800490e <HAL_PCD_EP_GetRxCount>
 800a49a:	4603      	mov	r3, r0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4ac:	4b03      	ldr	r3, [pc, #12]	@ (800a4bc <USBD_static_malloc+0x18>)
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20001e70 	.word	0x20001e70

0800a4c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d817      	bhi.n	800a518 <USBD_Get_USB_Status+0x44>
 800a4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f0 <USBD_Get_USB_Status+0x1c>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a501 	.word	0x0800a501
 800a4f4:	0800a507 	.word	0x0800a507
 800a4f8:	0800a50d 	.word	0x0800a50d
 800a4fc:	0800a513 	.word	0x0800a513
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	73fb      	strb	r3, [r7, #15]
    break;
 800a504:	e00b      	b.n	800a51e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a506:	2303      	movs	r3, #3
 800a508:	73fb      	strb	r3, [r7, #15]
    break;
 800a50a:	e008      	b.n	800a51e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a50c:	2301      	movs	r3, #1
 800a50e:	73fb      	strb	r3, [r7, #15]
    break;
 800a510:	e005      	b.n	800a51e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a512:	2303      	movs	r3, #3
 800a514:	73fb      	strb	r3, [r7, #15]
    break;
 800a516:	e002      	b.n	800a51e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	73fb      	strb	r3, [r7, #15]
    break;
 800a51c:	bf00      	nop
  }
  return usb_status;
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <__cvt>:
 800a52c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	ec57 6b10 	vmov	r6, r7, d0
 800a534:	2f00      	cmp	r7, #0
 800a536:	460c      	mov	r4, r1
 800a538:	4619      	mov	r1, r3
 800a53a:	463b      	mov	r3, r7
 800a53c:	bfbb      	ittet	lt
 800a53e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a542:	461f      	movlt	r7, r3
 800a544:	2300      	movge	r3, #0
 800a546:	232d      	movlt	r3, #45	@ 0x2d
 800a548:	700b      	strb	r3, [r1, #0]
 800a54a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a54c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a550:	4691      	mov	r9, r2
 800a552:	f023 0820 	bic.w	r8, r3, #32
 800a556:	bfbc      	itt	lt
 800a558:	4632      	movlt	r2, r6
 800a55a:	4616      	movlt	r6, r2
 800a55c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a560:	d005      	beq.n	800a56e <__cvt+0x42>
 800a562:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a566:	d100      	bne.n	800a56a <__cvt+0x3e>
 800a568:	3401      	adds	r4, #1
 800a56a:	2102      	movs	r1, #2
 800a56c:	e000      	b.n	800a570 <__cvt+0x44>
 800a56e:	2103      	movs	r1, #3
 800a570:	ab03      	add	r3, sp, #12
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	ab02      	add	r3, sp, #8
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	ec47 6b10 	vmov	d0, r6, r7
 800a57c:	4653      	mov	r3, sl
 800a57e:	4622      	mov	r2, r4
 800a580:	f001 f8ce 	bl	800b720 <_dtoa_r>
 800a584:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a588:	4605      	mov	r5, r0
 800a58a:	d119      	bne.n	800a5c0 <__cvt+0x94>
 800a58c:	f019 0f01 	tst.w	r9, #1
 800a590:	d00e      	beq.n	800a5b0 <__cvt+0x84>
 800a592:	eb00 0904 	add.w	r9, r0, r4
 800a596:	2200      	movs	r2, #0
 800a598:	2300      	movs	r3, #0
 800a59a:	4630      	mov	r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	f7f6 fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5a2:	b108      	cbz	r0, 800a5a8 <__cvt+0x7c>
 800a5a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5a8:	2230      	movs	r2, #48	@ 0x30
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	454b      	cmp	r3, r9
 800a5ae:	d31e      	bcc.n	800a5ee <__cvt+0xc2>
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5b4:	1b5b      	subs	r3, r3, r5
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	6013      	str	r3, [r2, #0]
 800a5ba:	b004      	add	sp, #16
 800a5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5c4:	eb00 0904 	add.w	r9, r0, r4
 800a5c8:	d1e5      	bne.n	800a596 <__cvt+0x6a>
 800a5ca:	7803      	ldrb	r3, [r0, #0]
 800a5cc:	2b30      	cmp	r3, #48	@ 0x30
 800a5ce:	d10a      	bne.n	800a5e6 <__cvt+0xba>
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5dc:	b918      	cbnz	r0, 800a5e6 <__cvt+0xba>
 800a5de:	f1c4 0401 	rsb	r4, r4, #1
 800a5e2:	f8ca 4000 	str.w	r4, [sl]
 800a5e6:	f8da 3000 	ldr.w	r3, [sl]
 800a5ea:	4499      	add	r9, r3
 800a5ec:	e7d3      	b.n	800a596 <__cvt+0x6a>
 800a5ee:	1c59      	adds	r1, r3, #1
 800a5f0:	9103      	str	r1, [sp, #12]
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	e7d9      	b.n	800a5aa <__cvt+0x7e>

0800a5f6 <__exponent>:
 800a5f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	bfba      	itte	lt
 800a5fc:	4249      	neglt	r1, r1
 800a5fe:	232d      	movlt	r3, #45	@ 0x2d
 800a600:	232b      	movge	r3, #43	@ 0x2b
 800a602:	2909      	cmp	r1, #9
 800a604:	7002      	strb	r2, [r0, #0]
 800a606:	7043      	strb	r3, [r0, #1]
 800a608:	dd29      	ble.n	800a65e <__exponent+0x68>
 800a60a:	f10d 0307 	add.w	r3, sp, #7
 800a60e:	461d      	mov	r5, r3
 800a610:	270a      	movs	r7, #10
 800a612:	461a      	mov	r2, r3
 800a614:	fbb1 f6f7 	udiv	r6, r1, r7
 800a618:	fb07 1416 	mls	r4, r7, r6, r1
 800a61c:	3430      	adds	r4, #48	@ 0x30
 800a61e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a622:	460c      	mov	r4, r1
 800a624:	2c63      	cmp	r4, #99	@ 0x63
 800a626:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a62a:	4631      	mov	r1, r6
 800a62c:	dcf1      	bgt.n	800a612 <__exponent+0x1c>
 800a62e:	3130      	adds	r1, #48	@ 0x30
 800a630:	1e94      	subs	r4, r2, #2
 800a632:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a636:	1c41      	adds	r1, r0, #1
 800a638:	4623      	mov	r3, r4
 800a63a:	42ab      	cmp	r3, r5
 800a63c:	d30a      	bcc.n	800a654 <__exponent+0x5e>
 800a63e:	f10d 0309 	add.w	r3, sp, #9
 800a642:	1a9b      	subs	r3, r3, r2
 800a644:	42ac      	cmp	r4, r5
 800a646:	bf88      	it	hi
 800a648:	2300      	movhi	r3, #0
 800a64a:	3302      	adds	r3, #2
 800a64c:	4403      	add	r3, r0
 800a64e:	1a18      	subs	r0, r3, r0
 800a650:	b003      	add	sp, #12
 800a652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a654:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a658:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a65c:	e7ed      	b.n	800a63a <__exponent+0x44>
 800a65e:	2330      	movs	r3, #48	@ 0x30
 800a660:	3130      	adds	r1, #48	@ 0x30
 800a662:	7083      	strb	r3, [r0, #2]
 800a664:	70c1      	strb	r1, [r0, #3]
 800a666:	1d03      	adds	r3, r0, #4
 800a668:	e7f1      	b.n	800a64e <__exponent+0x58>
	...

0800a66c <_printf_float>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	b08d      	sub	sp, #52	@ 0x34
 800a672:	460c      	mov	r4, r1
 800a674:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a678:	4616      	mov	r6, r2
 800a67a:	461f      	mov	r7, r3
 800a67c:	4605      	mov	r5, r0
 800a67e:	f000 ff39 	bl	800b4f4 <_localeconv_r>
 800a682:	6803      	ldr	r3, [r0, #0]
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	4618      	mov	r0, r3
 800a688:	f7f5 fdfa 	bl	8000280 <strlen>
 800a68c:	2300      	movs	r3, #0
 800a68e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a690:	f8d8 3000 	ldr.w	r3, [r8]
 800a694:	9005      	str	r0, [sp, #20]
 800a696:	3307      	adds	r3, #7
 800a698:	f023 0307 	bic.w	r3, r3, #7
 800a69c:	f103 0208 	add.w	r2, r3, #8
 800a6a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a6a4:	f8d4 b000 	ldr.w	fp, [r4]
 800a6a8:	f8c8 2000 	str.w	r2, [r8]
 800a6ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a6b4:	9307      	str	r3, [sp, #28]
 800a6b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a6be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6c2:	4b9c      	ldr	r3, [pc, #624]	@ (800a934 <_printf_float+0x2c8>)
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6c8:	f7f6 fa38 	bl	8000b3c <__aeabi_dcmpun>
 800a6cc:	bb70      	cbnz	r0, 800a72c <_printf_float+0xc0>
 800a6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6d2:	4b98      	ldr	r3, [pc, #608]	@ (800a934 <_printf_float+0x2c8>)
 800a6d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6d8:	f7f6 fa12 	bl	8000b00 <__aeabi_dcmple>
 800a6dc:	bb30      	cbnz	r0, 800a72c <_printf_float+0xc0>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f6 fa01 	bl	8000aec <__aeabi_dcmplt>
 800a6ea:	b110      	cbz	r0, 800a6f2 <_printf_float+0x86>
 800a6ec:	232d      	movs	r3, #45	@ 0x2d
 800a6ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6f2:	4a91      	ldr	r2, [pc, #580]	@ (800a938 <_printf_float+0x2cc>)
 800a6f4:	4b91      	ldr	r3, [pc, #580]	@ (800a93c <_printf_float+0x2d0>)
 800a6f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a6fa:	bf8c      	ite	hi
 800a6fc:	4690      	movhi	r8, r2
 800a6fe:	4698      	movls	r8, r3
 800a700:	2303      	movs	r3, #3
 800a702:	6123      	str	r3, [r4, #16]
 800a704:	f02b 0304 	bic.w	r3, fp, #4
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	f04f 0900 	mov.w	r9, #0
 800a70e:	9700      	str	r7, [sp, #0]
 800a710:	4633      	mov	r3, r6
 800a712:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a714:	4621      	mov	r1, r4
 800a716:	4628      	mov	r0, r5
 800a718:	f000 f9d2 	bl	800aac0 <_printf_common>
 800a71c:	3001      	adds	r0, #1
 800a71e:	f040 808d 	bne.w	800a83c <_printf_float+0x1d0>
 800a722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a726:	b00d      	add	sp, #52	@ 0x34
 800a728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72c:	4642      	mov	r2, r8
 800a72e:	464b      	mov	r3, r9
 800a730:	4640      	mov	r0, r8
 800a732:	4649      	mov	r1, r9
 800a734:	f7f6 fa02 	bl	8000b3c <__aeabi_dcmpun>
 800a738:	b140      	cbz	r0, 800a74c <_printf_float+0xe0>
 800a73a:	464b      	mov	r3, r9
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bfbc      	itt	lt
 800a740:	232d      	movlt	r3, #45	@ 0x2d
 800a742:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a746:	4a7e      	ldr	r2, [pc, #504]	@ (800a940 <_printf_float+0x2d4>)
 800a748:	4b7e      	ldr	r3, [pc, #504]	@ (800a944 <_printf_float+0x2d8>)
 800a74a:	e7d4      	b.n	800a6f6 <_printf_float+0x8a>
 800a74c:	6863      	ldr	r3, [r4, #4]
 800a74e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a752:	9206      	str	r2, [sp, #24]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	d13b      	bne.n	800a7d0 <_printf_float+0x164>
 800a758:	2306      	movs	r3, #6
 800a75a:	6063      	str	r3, [r4, #4]
 800a75c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a760:	2300      	movs	r3, #0
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	9303      	str	r3, [sp, #12]
 800a766:	ab0a      	add	r3, sp, #40	@ 0x28
 800a768:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a76c:	ab09      	add	r3, sp, #36	@ 0x24
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	6861      	ldr	r1, [r4, #4]
 800a772:	ec49 8b10 	vmov	d0, r8, r9
 800a776:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a77a:	4628      	mov	r0, r5
 800a77c:	f7ff fed6 	bl	800a52c <__cvt>
 800a780:	9b06      	ldr	r3, [sp, #24]
 800a782:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a784:	2b47      	cmp	r3, #71	@ 0x47
 800a786:	4680      	mov	r8, r0
 800a788:	d129      	bne.n	800a7de <_printf_float+0x172>
 800a78a:	1cc8      	adds	r0, r1, #3
 800a78c:	db02      	blt.n	800a794 <_printf_float+0x128>
 800a78e:	6863      	ldr	r3, [r4, #4]
 800a790:	4299      	cmp	r1, r3
 800a792:	dd41      	ble.n	800a818 <_printf_float+0x1ac>
 800a794:	f1aa 0a02 	sub.w	sl, sl, #2
 800a798:	fa5f fa8a 	uxtb.w	sl, sl
 800a79c:	3901      	subs	r1, #1
 800a79e:	4652      	mov	r2, sl
 800a7a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a7a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7a6:	f7ff ff26 	bl	800a5f6 <__exponent>
 800a7aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7ac:	1813      	adds	r3, r2, r0
 800a7ae:	2a01      	cmp	r2, #1
 800a7b0:	4681      	mov	r9, r0
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	dc02      	bgt.n	800a7bc <_printf_float+0x150>
 800a7b6:	6822      	ldr	r2, [r4, #0]
 800a7b8:	07d2      	lsls	r2, r2, #31
 800a7ba:	d501      	bpl.n	800a7c0 <_printf_float+0x154>
 800a7bc:	3301      	adds	r3, #1
 800a7be:	6123      	str	r3, [r4, #16]
 800a7c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d0a2      	beq.n	800a70e <_printf_float+0xa2>
 800a7c8:	232d      	movs	r3, #45	@ 0x2d
 800a7ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ce:	e79e      	b.n	800a70e <_printf_float+0xa2>
 800a7d0:	9a06      	ldr	r2, [sp, #24]
 800a7d2:	2a47      	cmp	r2, #71	@ 0x47
 800a7d4:	d1c2      	bne.n	800a75c <_printf_float+0xf0>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1c0      	bne.n	800a75c <_printf_float+0xf0>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e7bd      	b.n	800a75a <_printf_float+0xee>
 800a7de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7e2:	d9db      	bls.n	800a79c <_printf_float+0x130>
 800a7e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a7e8:	d118      	bne.n	800a81c <_printf_float+0x1b0>
 800a7ea:	2900      	cmp	r1, #0
 800a7ec:	6863      	ldr	r3, [r4, #4]
 800a7ee:	dd0b      	ble.n	800a808 <_printf_float+0x19c>
 800a7f0:	6121      	str	r1, [r4, #16]
 800a7f2:	b913      	cbnz	r3, 800a7fa <_printf_float+0x18e>
 800a7f4:	6822      	ldr	r2, [r4, #0]
 800a7f6:	07d0      	lsls	r0, r2, #31
 800a7f8:	d502      	bpl.n	800a800 <_printf_float+0x194>
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	440b      	add	r3, r1
 800a7fe:	6123      	str	r3, [r4, #16]
 800a800:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a802:	f04f 0900 	mov.w	r9, #0
 800a806:	e7db      	b.n	800a7c0 <_printf_float+0x154>
 800a808:	b913      	cbnz	r3, 800a810 <_printf_float+0x1a4>
 800a80a:	6822      	ldr	r2, [r4, #0]
 800a80c:	07d2      	lsls	r2, r2, #31
 800a80e:	d501      	bpl.n	800a814 <_printf_float+0x1a8>
 800a810:	3302      	adds	r3, #2
 800a812:	e7f4      	b.n	800a7fe <_printf_float+0x192>
 800a814:	2301      	movs	r3, #1
 800a816:	e7f2      	b.n	800a7fe <_printf_float+0x192>
 800a818:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a81e:	4299      	cmp	r1, r3
 800a820:	db05      	blt.n	800a82e <_printf_float+0x1c2>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	6121      	str	r1, [r4, #16]
 800a826:	07d8      	lsls	r0, r3, #31
 800a828:	d5ea      	bpl.n	800a800 <_printf_float+0x194>
 800a82a:	1c4b      	adds	r3, r1, #1
 800a82c:	e7e7      	b.n	800a7fe <_printf_float+0x192>
 800a82e:	2900      	cmp	r1, #0
 800a830:	bfd4      	ite	le
 800a832:	f1c1 0202 	rsble	r2, r1, #2
 800a836:	2201      	movgt	r2, #1
 800a838:	4413      	add	r3, r2
 800a83a:	e7e0      	b.n	800a7fe <_printf_float+0x192>
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	055a      	lsls	r2, r3, #21
 800a840:	d407      	bmi.n	800a852 <_printf_float+0x1e6>
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	4642      	mov	r2, r8
 800a846:	4631      	mov	r1, r6
 800a848:	4628      	mov	r0, r5
 800a84a:	47b8      	blx	r7
 800a84c:	3001      	adds	r0, #1
 800a84e:	d12b      	bne.n	800a8a8 <_printf_float+0x23c>
 800a850:	e767      	b.n	800a722 <_printf_float+0xb6>
 800a852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a856:	f240 80dd 	bls.w	800aa14 <_printf_float+0x3a8>
 800a85a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a85e:	2200      	movs	r2, #0
 800a860:	2300      	movs	r3, #0
 800a862:	f7f6 f939 	bl	8000ad8 <__aeabi_dcmpeq>
 800a866:	2800      	cmp	r0, #0
 800a868:	d033      	beq.n	800a8d2 <_printf_float+0x266>
 800a86a:	4a37      	ldr	r2, [pc, #220]	@ (800a948 <_printf_float+0x2dc>)
 800a86c:	2301      	movs	r3, #1
 800a86e:	4631      	mov	r1, r6
 800a870:	4628      	mov	r0, r5
 800a872:	47b8      	blx	r7
 800a874:	3001      	adds	r0, #1
 800a876:	f43f af54 	beq.w	800a722 <_printf_float+0xb6>
 800a87a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a87e:	4543      	cmp	r3, r8
 800a880:	db02      	blt.n	800a888 <_printf_float+0x21c>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	07d8      	lsls	r0, r3, #31
 800a886:	d50f      	bpl.n	800a8a8 <_printf_float+0x23c>
 800a888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f af45 	beq.w	800a722 <_printf_float+0xb6>
 800a898:	f04f 0900 	mov.w	r9, #0
 800a89c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a8a0:	f104 0a1a 	add.w	sl, r4, #26
 800a8a4:	45c8      	cmp	r8, r9
 800a8a6:	dc09      	bgt.n	800a8bc <_printf_float+0x250>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	079b      	lsls	r3, r3, #30
 800a8ac:	f100 8103 	bmi.w	800aab6 <_printf_float+0x44a>
 800a8b0:	68e0      	ldr	r0, [r4, #12]
 800a8b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8b4:	4298      	cmp	r0, r3
 800a8b6:	bfb8      	it	lt
 800a8b8:	4618      	movlt	r0, r3
 800a8ba:	e734      	b.n	800a726 <_printf_float+0xba>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	4652      	mov	r2, sl
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	f43f af2b 	beq.w	800a722 <_printf_float+0xb6>
 800a8cc:	f109 0901 	add.w	r9, r9, #1
 800a8d0:	e7e8      	b.n	800a8a4 <_printf_float+0x238>
 800a8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dc39      	bgt.n	800a94c <_printf_float+0x2e0>
 800a8d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a948 <_printf_float+0x2dc>)
 800a8da:	2301      	movs	r3, #1
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b8      	blx	r7
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f43f af1d 	beq.w	800a722 <_printf_float+0xb6>
 800a8e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a8ec:	ea59 0303 	orrs.w	r3, r9, r3
 800a8f0:	d102      	bne.n	800a8f8 <_printf_float+0x28c>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	07d9      	lsls	r1, r3, #31
 800a8f6:	d5d7      	bpl.n	800a8a8 <_printf_float+0x23c>
 800a8f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	f43f af0d 	beq.w	800a722 <_printf_float+0xb6>
 800a908:	f04f 0a00 	mov.w	sl, #0
 800a90c:	f104 0b1a 	add.w	fp, r4, #26
 800a910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a912:	425b      	negs	r3, r3
 800a914:	4553      	cmp	r3, sl
 800a916:	dc01      	bgt.n	800a91c <_printf_float+0x2b0>
 800a918:	464b      	mov	r3, r9
 800a91a:	e793      	b.n	800a844 <_printf_float+0x1d8>
 800a91c:	2301      	movs	r3, #1
 800a91e:	465a      	mov	r2, fp
 800a920:	4631      	mov	r1, r6
 800a922:	4628      	mov	r0, r5
 800a924:	47b8      	blx	r7
 800a926:	3001      	adds	r0, #1
 800a928:	f43f aefb 	beq.w	800a722 <_printf_float+0xb6>
 800a92c:	f10a 0a01 	add.w	sl, sl, #1
 800a930:	e7ee      	b.n	800a910 <_printf_float+0x2a4>
 800a932:	bf00      	nop
 800a934:	7fefffff 	.word	0x7fefffff
 800a938:	0800ed38 	.word	0x0800ed38
 800a93c:	0800ed34 	.word	0x0800ed34
 800a940:	0800ed40 	.word	0x0800ed40
 800a944:	0800ed3c 	.word	0x0800ed3c
 800a948:	0800ed44 	.word	0x0800ed44
 800a94c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a94e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a952:	4553      	cmp	r3, sl
 800a954:	bfa8      	it	ge
 800a956:	4653      	movge	r3, sl
 800a958:	2b00      	cmp	r3, #0
 800a95a:	4699      	mov	r9, r3
 800a95c:	dc36      	bgt.n	800a9cc <_printf_float+0x360>
 800a95e:	f04f 0b00 	mov.w	fp, #0
 800a962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a966:	f104 021a 	add.w	r2, r4, #26
 800a96a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a96c:	9306      	str	r3, [sp, #24]
 800a96e:	eba3 0309 	sub.w	r3, r3, r9
 800a972:	455b      	cmp	r3, fp
 800a974:	dc31      	bgt.n	800a9da <_printf_float+0x36e>
 800a976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a978:	459a      	cmp	sl, r3
 800a97a:	dc3a      	bgt.n	800a9f2 <_printf_float+0x386>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	07da      	lsls	r2, r3, #31
 800a980:	d437      	bmi.n	800a9f2 <_printf_float+0x386>
 800a982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a984:	ebaa 0903 	sub.w	r9, sl, r3
 800a988:	9b06      	ldr	r3, [sp, #24]
 800a98a:	ebaa 0303 	sub.w	r3, sl, r3
 800a98e:	4599      	cmp	r9, r3
 800a990:	bfa8      	it	ge
 800a992:	4699      	movge	r9, r3
 800a994:	f1b9 0f00 	cmp.w	r9, #0
 800a998:	dc33      	bgt.n	800aa02 <_printf_float+0x396>
 800a99a:	f04f 0800 	mov.w	r8, #0
 800a99e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9a2:	f104 0b1a 	add.w	fp, r4, #26
 800a9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a9ac:	eba3 0309 	sub.w	r3, r3, r9
 800a9b0:	4543      	cmp	r3, r8
 800a9b2:	f77f af79 	ble.w	800a8a8 <_printf_float+0x23c>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	465a      	mov	r2, fp
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4628      	mov	r0, r5
 800a9be:	47b8      	blx	r7
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	f43f aeae 	beq.w	800a722 <_printf_float+0xb6>
 800a9c6:	f108 0801 	add.w	r8, r8, #1
 800a9ca:	e7ec      	b.n	800a9a6 <_printf_float+0x33a>
 800a9cc:	4642      	mov	r2, r8
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	47b8      	blx	r7
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d1c2      	bne.n	800a95e <_printf_float+0x2f2>
 800a9d8:	e6a3      	b.n	800a722 <_printf_float+0xb6>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	9206      	str	r2, [sp, #24]
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f43f ae9c 	beq.w	800a722 <_printf_float+0xb6>
 800a9ea:	9a06      	ldr	r2, [sp, #24]
 800a9ec:	f10b 0b01 	add.w	fp, fp, #1
 800a9f0:	e7bb      	b.n	800a96a <_printf_float+0x2fe>
 800a9f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	47b8      	blx	r7
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d1c0      	bne.n	800a982 <_printf_float+0x316>
 800aa00:	e68f      	b.n	800a722 <_printf_float+0xb6>
 800aa02:	9a06      	ldr	r2, [sp, #24]
 800aa04:	464b      	mov	r3, r9
 800aa06:	4442      	add	r2, r8
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b8      	blx	r7
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d1c3      	bne.n	800a99a <_printf_float+0x32e>
 800aa12:	e686      	b.n	800a722 <_printf_float+0xb6>
 800aa14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa18:	f1ba 0f01 	cmp.w	sl, #1
 800aa1c:	dc01      	bgt.n	800aa22 <_printf_float+0x3b6>
 800aa1e:	07db      	lsls	r3, r3, #31
 800aa20:	d536      	bpl.n	800aa90 <_printf_float+0x424>
 800aa22:	2301      	movs	r3, #1
 800aa24:	4642      	mov	r2, r8
 800aa26:	4631      	mov	r1, r6
 800aa28:	4628      	mov	r0, r5
 800aa2a:	47b8      	blx	r7
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	f43f ae78 	beq.w	800a722 <_printf_float+0xb6>
 800aa32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f ae70 	beq.w	800a722 <_printf_float+0xb6>
 800aa42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa46:	2200      	movs	r2, #0
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aa4e:	f7f6 f843 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa52:	b9c0      	cbnz	r0, 800aa86 <_printf_float+0x41a>
 800aa54:	4653      	mov	r3, sl
 800aa56:	f108 0201 	add.w	r2, r8, #1
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	d10c      	bne.n	800aa7e <_printf_float+0x412>
 800aa64:	e65d      	b.n	800a722 <_printf_float+0xb6>
 800aa66:	2301      	movs	r3, #1
 800aa68:	465a      	mov	r2, fp
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f ae56 	beq.w	800a722 <_printf_float+0xb6>
 800aa76:	f108 0801 	add.w	r8, r8, #1
 800aa7a:	45d0      	cmp	r8, sl
 800aa7c:	dbf3      	blt.n	800aa66 <_printf_float+0x3fa>
 800aa7e:	464b      	mov	r3, r9
 800aa80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa84:	e6df      	b.n	800a846 <_printf_float+0x1da>
 800aa86:	f04f 0800 	mov.w	r8, #0
 800aa8a:	f104 0b1a 	add.w	fp, r4, #26
 800aa8e:	e7f4      	b.n	800aa7a <_printf_float+0x40e>
 800aa90:	2301      	movs	r3, #1
 800aa92:	4642      	mov	r2, r8
 800aa94:	e7e1      	b.n	800aa5a <_printf_float+0x3ee>
 800aa96:	2301      	movs	r3, #1
 800aa98:	464a      	mov	r2, r9
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	47b8      	blx	r7
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f43f ae3e 	beq.w	800a722 <_printf_float+0xb6>
 800aaa6:	f108 0801 	add.w	r8, r8, #1
 800aaaa:	68e3      	ldr	r3, [r4, #12]
 800aaac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aaae:	1a5b      	subs	r3, r3, r1
 800aab0:	4543      	cmp	r3, r8
 800aab2:	dcf0      	bgt.n	800aa96 <_printf_float+0x42a>
 800aab4:	e6fc      	b.n	800a8b0 <_printf_float+0x244>
 800aab6:	f04f 0800 	mov.w	r8, #0
 800aaba:	f104 0919 	add.w	r9, r4, #25
 800aabe:	e7f4      	b.n	800aaaa <_printf_float+0x43e>

0800aac0 <_printf_common>:
 800aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac4:	4616      	mov	r6, r2
 800aac6:	4698      	mov	r8, r3
 800aac8:	688a      	ldr	r2, [r1, #8]
 800aaca:	690b      	ldr	r3, [r1, #16]
 800aacc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aad0:	4293      	cmp	r3, r2
 800aad2:	bfb8      	it	lt
 800aad4:	4613      	movlt	r3, r2
 800aad6:	6033      	str	r3, [r6, #0]
 800aad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aadc:	4607      	mov	r7, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	b10a      	cbz	r2, 800aae6 <_printf_common+0x26>
 800aae2:	3301      	adds	r3, #1
 800aae4:	6033      	str	r3, [r6, #0]
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	0699      	lsls	r1, r3, #26
 800aaea:	bf42      	ittt	mi
 800aaec:	6833      	ldrmi	r3, [r6, #0]
 800aaee:	3302      	addmi	r3, #2
 800aaf0:	6033      	strmi	r3, [r6, #0]
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	f015 0506 	ands.w	r5, r5, #6
 800aaf8:	d106      	bne.n	800ab08 <_printf_common+0x48>
 800aafa:	f104 0a19 	add.w	sl, r4, #25
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	6832      	ldr	r2, [r6, #0]
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dc26      	bgt.n	800ab56 <_printf_common+0x96>
 800ab08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab0c:	6822      	ldr	r2, [r4, #0]
 800ab0e:	3b00      	subs	r3, #0
 800ab10:	bf18      	it	ne
 800ab12:	2301      	movne	r3, #1
 800ab14:	0692      	lsls	r2, r2, #26
 800ab16:	d42b      	bmi.n	800ab70 <_printf_common+0xb0>
 800ab18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c8      	blx	r9
 800ab22:	3001      	adds	r0, #1
 800ab24:	d01e      	beq.n	800ab64 <_printf_common+0xa4>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	6922      	ldr	r2, [r4, #16]
 800ab2a:	f003 0306 	and.w	r3, r3, #6
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	bf02      	ittt	eq
 800ab32:	68e5      	ldreq	r5, [r4, #12]
 800ab34:	6833      	ldreq	r3, [r6, #0]
 800ab36:	1aed      	subeq	r5, r5, r3
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	bf0c      	ite	eq
 800ab3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab40:	2500      	movne	r5, #0
 800ab42:	4293      	cmp	r3, r2
 800ab44:	bfc4      	itt	gt
 800ab46:	1a9b      	subgt	r3, r3, r2
 800ab48:	18ed      	addgt	r5, r5, r3
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	341a      	adds	r4, #26
 800ab4e:	42b5      	cmp	r5, r6
 800ab50:	d11a      	bne.n	800ab88 <_printf_common+0xc8>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e008      	b.n	800ab68 <_printf_common+0xa8>
 800ab56:	2301      	movs	r3, #1
 800ab58:	4652      	mov	r2, sl
 800ab5a:	4641      	mov	r1, r8
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	47c8      	blx	r9
 800ab60:	3001      	adds	r0, #1
 800ab62:	d103      	bne.n	800ab6c <_printf_common+0xac>
 800ab64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6c:	3501      	adds	r5, #1
 800ab6e:	e7c6      	b.n	800aafe <_printf_common+0x3e>
 800ab70:	18e1      	adds	r1, r4, r3
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	2030      	movs	r0, #48	@ 0x30
 800ab76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab7a:	4422      	add	r2, r4
 800ab7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab84:	3302      	adds	r3, #2
 800ab86:	e7c7      	b.n	800ab18 <_printf_common+0x58>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	4641      	mov	r1, r8
 800ab8e:	4638      	mov	r0, r7
 800ab90:	47c8      	blx	r9
 800ab92:	3001      	adds	r0, #1
 800ab94:	d0e6      	beq.n	800ab64 <_printf_common+0xa4>
 800ab96:	3601      	adds	r6, #1
 800ab98:	e7d9      	b.n	800ab4e <_printf_common+0x8e>
	...

0800ab9c <_printf_i>:
 800ab9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	7e0f      	ldrb	r7, [r1, #24]
 800aba2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aba4:	2f78      	cmp	r7, #120	@ 0x78
 800aba6:	4691      	mov	r9, r2
 800aba8:	4680      	mov	r8, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	469a      	mov	sl, r3
 800abae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abb2:	d807      	bhi.n	800abc4 <_printf_i+0x28>
 800abb4:	2f62      	cmp	r7, #98	@ 0x62
 800abb6:	d80a      	bhi.n	800abce <_printf_i+0x32>
 800abb8:	2f00      	cmp	r7, #0
 800abba:	f000 80d1 	beq.w	800ad60 <_printf_i+0x1c4>
 800abbe:	2f58      	cmp	r7, #88	@ 0x58
 800abc0:	f000 80b8 	beq.w	800ad34 <_printf_i+0x198>
 800abc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800abcc:	e03a      	b.n	800ac44 <_printf_i+0xa8>
 800abce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800abd2:	2b15      	cmp	r3, #21
 800abd4:	d8f6      	bhi.n	800abc4 <_printf_i+0x28>
 800abd6:	a101      	add	r1, pc, #4	@ (adr r1, 800abdc <_printf_i+0x40>)
 800abd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abdc:	0800ac35 	.word	0x0800ac35
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800abc5 	.word	0x0800abc5
 800abe8:	0800abc5 	.word	0x0800abc5
 800abec:	0800abc5 	.word	0x0800abc5
 800abf0:	0800abc5 	.word	0x0800abc5
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800abc5 	.word	0x0800abc5
 800abfc:	0800abc5 	.word	0x0800abc5
 800ac00:	0800abc5 	.word	0x0800abc5
 800ac04:	0800abc5 	.word	0x0800abc5
 800ac08:	0800ad47 	.word	0x0800ad47
 800ac0c:	0800ac73 	.word	0x0800ac73
 800ac10:	0800ad01 	.word	0x0800ad01
 800ac14:	0800abc5 	.word	0x0800abc5
 800ac18:	0800abc5 	.word	0x0800abc5
 800ac1c:	0800ad69 	.word	0x0800ad69
 800ac20:	0800abc5 	.word	0x0800abc5
 800ac24:	0800ac73 	.word	0x0800ac73
 800ac28:	0800abc5 	.word	0x0800abc5
 800ac2c:	0800abc5 	.word	0x0800abc5
 800ac30:	0800ad09 	.word	0x0800ad09
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6032      	str	r2, [r6, #0]
 800ac3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac44:	2301      	movs	r3, #1
 800ac46:	e09c      	b.n	800ad82 <_printf_i+0x1e6>
 800ac48:	6833      	ldr	r3, [r6, #0]
 800ac4a:	6820      	ldr	r0, [r4, #0]
 800ac4c:	1d19      	adds	r1, r3, #4
 800ac4e:	6031      	str	r1, [r6, #0]
 800ac50:	0606      	lsls	r6, r0, #24
 800ac52:	d501      	bpl.n	800ac58 <_printf_i+0xbc>
 800ac54:	681d      	ldr	r5, [r3, #0]
 800ac56:	e003      	b.n	800ac60 <_printf_i+0xc4>
 800ac58:	0645      	lsls	r5, r0, #25
 800ac5a:	d5fb      	bpl.n	800ac54 <_printf_i+0xb8>
 800ac5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac60:	2d00      	cmp	r5, #0
 800ac62:	da03      	bge.n	800ac6c <_printf_i+0xd0>
 800ac64:	232d      	movs	r3, #45	@ 0x2d
 800ac66:	426d      	negs	r5, r5
 800ac68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac6c:	4858      	ldr	r0, [pc, #352]	@ (800add0 <_printf_i+0x234>)
 800ac6e:	230a      	movs	r3, #10
 800ac70:	e011      	b.n	800ac96 <_printf_i+0xfa>
 800ac72:	6821      	ldr	r1, [r4, #0]
 800ac74:	6833      	ldr	r3, [r6, #0]
 800ac76:	0608      	lsls	r0, r1, #24
 800ac78:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac7c:	d402      	bmi.n	800ac84 <_printf_i+0xe8>
 800ac7e:	0649      	lsls	r1, r1, #25
 800ac80:	bf48      	it	mi
 800ac82:	b2ad      	uxthmi	r5, r5
 800ac84:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac86:	4852      	ldr	r0, [pc, #328]	@ (800add0 <_printf_i+0x234>)
 800ac88:	6033      	str	r3, [r6, #0]
 800ac8a:	bf14      	ite	ne
 800ac8c:	230a      	movne	r3, #10
 800ac8e:	2308      	moveq	r3, #8
 800ac90:	2100      	movs	r1, #0
 800ac92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac96:	6866      	ldr	r6, [r4, #4]
 800ac98:	60a6      	str	r6, [r4, #8]
 800ac9a:	2e00      	cmp	r6, #0
 800ac9c:	db05      	blt.n	800acaa <_printf_i+0x10e>
 800ac9e:	6821      	ldr	r1, [r4, #0]
 800aca0:	432e      	orrs	r6, r5
 800aca2:	f021 0104 	bic.w	r1, r1, #4
 800aca6:	6021      	str	r1, [r4, #0]
 800aca8:	d04b      	beq.n	800ad42 <_printf_i+0x1a6>
 800acaa:	4616      	mov	r6, r2
 800acac:	fbb5 f1f3 	udiv	r1, r5, r3
 800acb0:	fb03 5711 	mls	r7, r3, r1, r5
 800acb4:	5dc7      	ldrb	r7, [r0, r7]
 800acb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acba:	462f      	mov	r7, r5
 800acbc:	42bb      	cmp	r3, r7
 800acbe:	460d      	mov	r5, r1
 800acc0:	d9f4      	bls.n	800acac <_printf_i+0x110>
 800acc2:	2b08      	cmp	r3, #8
 800acc4:	d10b      	bne.n	800acde <_printf_i+0x142>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	07df      	lsls	r7, r3, #31
 800acca:	d508      	bpl.n	800acde <_printf_i+0x142>
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	6861      	ldr	r1, [r4, #4]
 800acd0:	4299      	cmp	r1, r3
 800acd2:	bfde      	ittt	le
 800acd4:	2330      	movle	r3, #48	@ 0x30
 800acd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acda:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800acde:	1b92      	subs	r2, r2, r6
 800ace0:	6122      	str	r2, [r4, #16]
 800ace2:	f8cd a000 	str.w	sl, [sp]
 800ace6:	464b      	mov	r3, r9
 800ace8:	aa03      	add	r2, sp, #12
 800acea:	4621      	mov	r1, r4
 800acec:	4640      	mov	r0, r8
 800acee:	f7ff fee7 	bl	800aac0 <_printf_common>
 800acf2:	3001      	adds	r0, #1
 800acf4:	d14a      	bne.n	800ad8c <_printf_i+0x1f0>
 800acf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acfa:	b004      	add	sp, #16
 800acfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	f043 0320 	orr.w	r3, r3, #32
 800ad06:	6023      	str	r3, [r4, #0]
 800ad08:	4832      	ldr	r0, [pc, #200]	@ (800add4 <_printf_i+0x238>)
 800ad0a:	2778      	movs	r7, #120	@ 0x78
 800ad0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	6831      	ldr	r1, [r6, #0]
 800ad14:	061f      	lsls	r7, r3, #24
 800ad16:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad1a:	d402      	bmi.n	800ad22 <_printf_i+0x186>
 800ad1c:	065f      	lsls	r7, r3, #25
 800ad1e:	bf48      	it	mi
 800ad20:	b2ad      	uxthmi	r5, r5
 800ad22:	6031      	str	r1, [r6, #0]
 800ad24:	07d9      	lsls	r1, r3, #31
 800ad26:	bf44      	itt	mi
 800ad28:	f043 0320 	orrmi.w	r3, r3, #32
 800ad2c:	6023      	strmi	r3, [r4, #0]
 800ad2e:	b11d      	cbz	r5, 800ad38 <_printf_i+0x19c>
 800ad30:	2310      	movs	r3, #16
 800ad32:	e7ad      	b.n	800ac90 <_printf_i+0xf4>
 800ad34:	4826      	ldr	r0, [pc, #152]	@ (800add0 <_printf_i+0x234>)
 800ad36:	e7e9      	b.n	800ad0c <_printf_i+0x170>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	f023 0320 	bic.w	r3, r3, #32
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	e7f6      	b.n	800ad30 <_printf_i+0x194>
 800ad42:	4616      	mov	r6, r2
 800ad44:	e7bd      	b.n	800acc2 <_printf_i+0x126>
 800ad46:	6833      	ldr	r3, [r6, #0]
 800ad48:	6825      	ldr	r5, [r4, #0]
 800ad4a:	6961      	ldr	r1, [r4, #20]
 800ad4c:	1d18      	adds	r0, r3, #4
 800ad4e:	6030      	str	r0, [r6, #0]
 800ad50:	062e      	lsls	r6, r5, #24
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	d501      	bpl.n	800ad5a <_printf_i+0x1be>
 800ad56:	6019      	str	r1, [r3, #0]
 800ad58:	e002      	b.n	800ad60 <_printf_i+0x1c4>
 800ad5a:	0668      	lsls	r0, r5, #25
 800ad5c:	d5fb      	bpl.n	800ad56 <_printf_i+0x1ba>
 800ad5e:	8019      	strh	r1, [r3, #0]
 800ad60:	2300      	movs	r3, #0
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	4616      	mov	r6, r2
 800ad66:	e7bc      	b.n	800ace2 <_printf_i+0x146>
 800ad68:	6833      	ldr	r3, [r6, #0]
 800ad6a:	1d1a      	adds	r2, r3, #4
 800ad6c:	6032      	str	r2, [r6, #0]
 800ad6e:	681e      	ldr	r6, [r3, #0]
 800ad70:	6862      	ldr	r2, [r4, #4]
 800ad72:	2100      	movs	r1, #0
 800ad74:	4630      	mov	r0, r6
 800ad76:	f7f5 fa33 	bl	80001e0 <memchr>
 800ad7a:	b108      	cbz	r0, 800ad80 <_printf_i+0x1e4>
 800ad7c:	1b80      	subs	r0, r0, r6
 800ad7e:	6060      	str	r0, [r4, #4]
 800ad80:	6863      	ldr	r3, [r4, #4]
 800ad82:	6123      	str	r3, [r4, #16]
 800ad84:	2300      	movs	r3, #0
 800ad86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad8a:	e7aa      	b.n	800ace2 <_printf_i+0x146>
 800ad8c:	6923      	ldr	r3, [r4, #16]
 800ad8e:	4632      	mov	r2, r6
 800ad90:	4649      	mov	r1, r9
 800ad92:	4640      	mov	r0, r8
 800ad94:	47d0      	blx	sl
 800ad96:	3001      	adds	r0, #1
 800ad98:	d0ad      	beq.n	800acf6 <_printf_i+0x15a>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	079b      	lsls	r3, r3, #30
 800ad9e:	d413      	bmi.n	800adc8 <_printf_i+0x22c>
 800ada0:	68e0      	ldr	r0, [r4, #12]
 800ada2:	9b03      	ldr	r3, [sp, #12]
 800ada4:	4298      	cmp	r0, r3
 800ada6:	bfb8      	it	lt
 800ada8:	4618      	movlt	r0, r3
 800adaa:	e7a6      	b.n	800acfa <_printf_i+0x15e>
 800adac:	2301      	movs	r3, #1
 800adae:	4632      	mov	r2, r6
 800adb0:	4649      	mov	r1, r9
 800adb2:	4640      	mov	r0, r8
 800adb4:	47d0      	blx	sl
 800adb6:	3001      	adds	r0, #1
 800adb8:	d09d      	beq.n	800acf6 <_printf_i+0x15a>
 800adba:	3501      	adds	r5, #1
 800adbc:	68e3      	ldr	r3, [r4, #12]
 800adbe:	9903      	ldr	r1, [sp, #12]
 800adc0:	1a5b      	subs	r3, r3, r1
 800adc2:	42ab      	cmp	r3, r5
 800adc4:	dcf2      	bgt.n	800adac <_printf_i+0x210>
 800adc6:	e7eb      	b.n	800ada0 <_printf_i+0x204>
 800adc8:	2500      	movs	r5, #0
 800adca:	f104 0619 	add.w	r6, r4, #25
 800adce:	e7f5      	b.n	800adbc <_printf_i+0x220>
 800add0:	0800ed46 	.word	0x0800ed46
 800add4:	0800ed57 	.word	0x0800ed57

0800add8 <_scanf_float>:
 800add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	b087      	sub	sp, #28
 800adde:	4691      	mov	r9, r2
 800ade0:	9303      	str	r3, [sp, #12]
 800ade2:	688b      	ldr	r3, [r1, #8]
 800ade4:	1e5a      	subs	r2, r3, #1
 800ade6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800adea:	bf81      	itttt	hi
 800adec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800adf0:	eb03 0b05 	addhi.w	fp, r3, r5
 800adf4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800adf8:	608b      	strhi	r3, [r1, #8]
 800adfa:	680b      	ldr	r3, [r1, #0]
 800adfc:	460a      	mov	r2, r1
 800adfe:	f04f 0500 	mov.w	r5, #0
 800ae02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ae06:	f842 3b1c 	str.w	r3, [r2], #28
 800ae0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ae0e:	4680      	mov	r8, r0
 800ae10:	460c      	mov	r4, r1
 800ae12:	bf98      	it	ls
 800ae14:	f04f 0b00 	movls.w	fp, #0
 800ae18:	9201      	str	r2, [sp, #4]
 800ae1a:	4616      	mov	r6, r2
 800ae1c:	46aa      	mov	sl, r5
 800ae1e:	462f      	mov	r7, r5
 800ae20:	9502      	str	r5, [sp, #8]
 800ae22:	68a2      	ldr	r2, [r4, #8]
 800ae24:	b15a      	cbz	r2, 800ae3e <_scanf_float+0x66>
 800ae26:	f8d9 3000 	ldr.w	r3, [r9]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b4e      	cmp	r3, #78	@ 0x4e
 800ae2e:	d863      	bhi.n	800aef8 <_scanf_float+0x120>
 800ae30:	2b40      	cmp	r3, #64	@ 0x40
 800ae32:	d83b      	bhi.n	800aeac <_scanf_float+0xd4>
 800ae34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ae38:	b2c8      	uxtb	r0, r1
 800ae3a:	280e      	cmp	r0, #14
 800ae3c:	d939      	bls.n	800aeb2 <_scanf_float+0xda>
 800ae3e:	b11f      	cbz	r7, 800ae48 <_scanf_float+0x70>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ae4c:	f1ba 0f01 	cmp.w	sl, #1
 800ae50:	f200 8114 	bhi.w	800b07c <_scanf_float+0x2a4>
 800ae54:	9b01      	ldr	r3, [sp, #4]
 800ae56:	429e      	cmp	r6, r3
 800ae58:	f200 8105 	bhi.w	800b066 <_scanf_float+0x28e>
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	b007      	add	sp, #28
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae64:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ae68:	2a0d      	cmp	r2, #13
 800ae6a:	d8e8      	bhi.n	800ae3e <_scanf_float+0x66>
 800ae6c:	a101      	add	r1, pc, #4	@ (adr r1, 800ae74 <_scanf_float+0x9c>)
 800ae6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae72:	bf00      	nop
 800ae74:	0800afbd 	.word	0x0800afbd
 800ae78:	0800ae3f 	.word	0x0800ae3f
 800ae7c:	0800ae3f 	.word	0x0800ae3f
 800ae80:	0800ae3f 	.word	0x0800ae3f
 800ae84:	0800b019 	.word	0x0800b019
 800ae88:	0800aff3 	.word	0x0800aff3
 800ae8c:	0800ae3f 	.word	0x0800ae3f
 800ae90:	0800ae3f 	.word	0x0800ae3f
 800ae94:	0800afcb 	.word	0x0800afcb
 800ae98:	0800ae3f 	.word	0x0800ae3f
 800ae9c:	0800ae3f 	.word	0x0800ae3f
 800aea0:	0800ae3f 	.word	0x0800ae3f
 800aea4:	0800ae3f 	.word	0x0800ae3f
 800aea8:	0800af87 	.word	0x0800af87
 800aeac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aeb0:	e7da      	b.n	800ae68 <_scanf_float+0x90>
 800aeb2:	290e      	cmp	r1, #14
 800aeb4:	d8c3      	bhi.n	800ae3e <_scanf_float+0x66>
 800aeb6:	a001      	add	r0, pc, #4	@ (adr r0, 800aebc <_scanf_float+0xe4>)
 800aeb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aebc:	0800af77 	.word	0x0800af77
 800aec0:	0800ae3f 	.word	0x0800ae3f
 800aec4:	0800af77 	.word	0x0800af77
 800aec8:	0800b007 	.word	0x0800b007
 800aecc:	0800ae3f 	.word	0x0800ae3f
 800aed0:	0800af19 	.word	0x0800af19
 800aed4:	0800af5d 	.word	0x0800af5d
 800aed8:	0800af5d 	.word	0x0800af5d
 800aedc:	0800af5d 	.word	0x0800af5d
 800aee0:	0800af5d 	.word	0x0800af5d
 800aee4:	0800af5d 	.word	0x0800af5d
 800aee8:	0800af5d 	.word	0x0800af5d
 800aeec:	0800af5d 	.word	0x0800af5d
 800aef0:	0800af5d 	.word	0x0800af5d
 800aef4:	0800af5d 	.word	0x0800af5d
 800aef8:	2b6e      	cmp	r3, #110	@ 0x6e
 800aefa:	d809      	bhi.n	800af10 <_scanf_float+0x138>
 800aefc:	2b60      	cmp	r3, #96	@ 0x60
 800aefe:	d8b1      	bhi.n	800ae64 <_scanf_float+0x8c>
 800af00:	2b54      	cmp	r3, #84	@ 0x54
 800af02:	d07b      	beq.n	800affc <_scanf_float+0x224>
 800af04:	2b59      	cmp	r3, #89	@ 0x59
 800af06:	d19a      	bne.n	800ae3e <_scanf_float+0x66>
 800af08:	2d07      	cmp	r5, #7
 800af0a:	d198      	bne.n	800ae3e <_scanf_float+0x66>
 800af0c:	2508      	movs	r5, #8
 800af0e:	e02f      	b.n	800af70 <_scanf_float+0x198>
 800af10:	2b74      	cmp	r3, #116	@ 0x74
 800af12:	d073      	beq.n	800affc <_scanf_float+0x224>
 800af14:	2b79      	cmp	r3, #121	@ 0x79
 800af16:	e7f6      	b.n	800af06 <_scanf_float+0x12e>
 800af18:	6821      	ldr	r1, [r4, #0]
 800af1a:	05c8      	lsls	r0, r1, #23
 800af1c:	d51e      	bpl.n	800af5c <_scanf_float+0x184>
 800af1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800af22:	6021      	str	r1, [r4, #0]
 800af24:	3701      	adds	r7, #1
 800af26:	f1bb 0f00 	cmp.w	fp, #0
 800af2a:	d003      	beq.n	800af34 <_scanf_float+0x15c>
 800af2c:	3201      	adds	r2, #1
 800af2e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800af32:	60a2      	str	r2, [r4, #8]
 800af34:	68a3      	ldr	r3, [r4, #8]
 800af36:	3b01      	subs	r3, #1
 800af38:	60a3      	str	r3, [r4, #8]
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	3301      	adds	r3, #1
 800af3e:	6123      	str	r3, [r4, #16]
 800af40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af44:	3b01      	subs	r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	f8c9 3004 	str.w	r3, [r9, #4]
 800af4c:	f340 8082 	ble.w	800b054 <_scanf_float+0x27c>
 800af50:	f8d9 3000 	ldr.w	r3, [r9]
 800af54:	3301      	adds	r3, #1
 800af56:	f8c9 3000 	str.w	r3, [r9]
 800af5a:	e762      	b.n	800ae22 <_scanf_float+0x4a>
 800af5c:	eb1a 0105 	adds.w	r1, sl, r5
 800af60:	f47f af6d 	bne.w	800ae3e <_scanf_float+0x66>
 800af64:	6822      	ldr	r2, [r4, #0]
 800af66:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800af6a:	6022      	str	r2, [r4, #0]
 800af6c:	460d      	mov	r5, r1
 800af6e:	468a      	mov	sl, r1
 800af70:	f806 3b01 	strb.w	r3, [r6], #1
 800af74:	e7de      	b.n	800af34 <_scanf_float+0x15c>
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	0610      	lsls	r0, r2, #24
 800af7a:	f57f af60 	bpl.w	800ae3e <_scanf_float+0x66>
 800af7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	e7f4      	b.n	800af70 <_scanf_float+0x198>
 800af86:	f1ba 0f00 	cmp.w	sl, #0
 800af8a:	d10c      	bne.n	800afa6 <_scanf_float+0x1ce>
 800af8c:	b977      	cbnz	r7, 800afac <_scanf_float+0x1d4>
 800af8e:	6822      	ldr	r2, [r4, #0]
 800af90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af98:	d108      	bne.n	800afac <_scanf_float+0x1d4>
 800af9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af9e:	6022      	str	r2, [r4, #0]
 800afa0:	f04f 0a01 	mov.w	sl, #1
 800afa4:	e7e4      	b.n	800af70 <_scanf_float+0x198>
 800afa6:	f1ba 0f02 	cmp.w	sl, #2
 800afaa:	d050      	beq.n	800b04e <_scanf_float+0x276>
 800afac:	2d01      	cmp	r5, #1
 800afae:	d002      	beq.n	800afb6 <_scanf_float+0x1de>
 800afb0:	2d04      	cmp	r5, #4
 800afb2:	f47f af44 	bne.w	800ae3e <_scanf_float+0x66>
 800afb6:	3501      	adds	r5, #1
 800afb8:	b2ed      	uxtb	r5, r5
 800afba:	e7d9      	b.n	800af70 <_scanf_float+0x198>
 800afbc:	f1ba 0f01 	cmp.w	sl, #1
 800afc0:	f47f af3d 	bne.w	800ae3e <_scanf_float+0x66>
 800afc4:	f04f 0a02 	mov.w	sl, #2
 800afc8:	e7d2      	b.n	800af70 <_scanf_float+0x198>
 800afca:	b975      	cbnz	r5, 800afea <_scanf_float+0x212>
 800afcc:	2f00      	cmp	r7, #0
 800afce:	f47f af37 	bne.w	800ae40 <_scanf_float+0x68>
 800afd2:	6822      	ldr	r2, [r4, #0]
 800afd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800afd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800afdc:	f040 8103 	bne.w	800b1e6 <_scanf_float+0x40e>
 800afe0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800afe4:	6022      	str	r2, [r4, #0]
 800afe6:	2501      	movs	r5, #1
 800afe8:	e7c2      	b.n	800af70 <_scanf_float+0x198>
 800afea:	2d03      	cmp	r5, #3
 800afec:	d0e3      	beq.n	800afb6 <_scanf_float+0x1de>
 800afee:	2d05      	cmp	r5, #5
 800aff0:	e7df      	b.n	800afb2 <_scanf_float+0x1da>
 800aff2:	2d02      	cmp	r5, #2
 800aff4:	f47f af23 	bne.w	800ae3e <_scanf_float+0x66>
 800aff8:	2503      	movs	r5, #3
 800affa:	e7b9      	b.n	800af70 <_scanf_float+0x198>
 800affc:	2d06      	cmp	r5, #6
 800affe:	f47f af1e 	bne.w	800ae3e <_scanf_float+0x66>
 800b002:	2507      	movs	r5, #7
 800b004:	e7b4      	b.n	800af70 <_scanf_float+0x198>
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	0591      	lsls	r1, r2, #22
 800b00a:	f57f af18 	bpl.w	800ae3e <_scanf_float+0x66>
 800b00e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b012:	6022      	str	r2, [r4, #0]
 800b014:	9702      	str	r7, [sp, #8]
 800b016:	e7ab      	b.n	800af70 <_scanf_float+0x198>
 800b018:	6822      	ldr	r2, [r4, #0]
 800b01a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b01e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b022:	d005      	beq.n	800b030 <_scanf_float+0x258>
 800b024:	0550      	lsls	r0, r2, #21
 800b026:	f57f af0a 	bpl.w	800ae3e <_scanf_float+0x66>
 800b02a:	2f00      	cmp	r7, #0
 800b02c:	f000 80db 	beq.w	800b1e6 <_scanf_float+0x40e>
 800b030:	0591      	lsls	r1, r2, #22
 800b032:	bf58      	it	pl
 800b034:	9902      	ldrpl	r1, [sp, #8]
 800b036:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b03a:	bf58      	it	pl
 800b03c:	1a79      	subpl	r1, r7, r1
 800b03e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b042:	bf58      	it	pl
 800b044:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b048:	6022      	str	r2, [r4, #0]
 800b04a:	2700      	movs	r7, #0
 800b04c:	e790      	b.n	800af70 <_scanf_float+0x198>
 800b04e:	f04f 0a03 	mov.w	sl, #3
 800b052:	e78d      	b.n	800af70 <_scanf_float+0x198>
 800b054:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b058:	4649      	mov	r1, r9
 800b05a:	4640      	mov	r0, r8
 800b05c:	4798      	blx	r3
 800b05e:	2800      	cmp	r0, #0
 800b060:	f43f aedf 	beq.w	800ae22 <_scanf_float+0x4a>
 800b064:	e6eb      	b.n	800ae3e <_scanf_float+0x66>
 800b066:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b06a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b06e:	464a      	mov	r2, r9
 800b070:	4640      	mov	r0, r8
 800b072:	4798      	blx	r3
 800b074:	6923      	ldr	r3, [r4, #16]
 800b076:	3b01      	subs	r3, #1
 800b078:	6123      	str	r3, [r4, #16]
 800b07a:	e6eb      	b.n	800ae54 <_scanf_float+0x7c>
 800b07c:	1e6b      	subs	r3, r5, #1
 800b07e:	2b06      	cmp	r3, #6
 800b080:	d824      	bhi.n	800b0cc <_scanf_float+0x2f4>
 800b082:	2d02      	cmp	r5, #2
 800b084:	d836      	bhi.n	800b0f4 <_scanf_float+0x31c>
 800b086:	9b01      	ldr	r3, [sp, #4]
 800b088:	429e      	cmp	r6, r3
 800b08a:	f67f aee7 	bls.w	800ae5c <_scanf_float+0x84>
 800b08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b096:	464a      	mov	r2, r9
 800b098:	4640      	mov	r0, r8
 800b09a:	4798      	blx	r3
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	6123      	str	r3, [r4, #16]
 800b0a2:	e7f0      	b.n	800b086 <_scanf_float+0x2ae>
 800b0a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b0ac:	464a      	mov	r2, r9
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	4798      	blx	r3
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b0bc:	fa5f fa8a 	uxtb.w	sl, sl
 800b0c0:	f1ba 0f02 	cmp.w	sl, #2
 800b0c4:	d1ee      	bne.n	800b0a4 <_scanf_float+0x2cc>
 800b0c6:	3d03      	subs	r5, #3
 800b0c8:	b2ed      	uxtb	r5, r5
 800b0ca:	1b76      	subs	r6, r6, r5
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	05da      	lsls	r2, r3, #23
 800b0d0:	d530      	bpl.n	800b134 <_scanf_float+0x35c>
 800b0d2:	055b      	lsls	r3, r3, #21
 800b0d4:	d511      	bpl.n	800b0fa <_scanf_float+0x322>
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	429e      	cmp	r6, r3
 800b0da:	f67f aebf 	bls.w	800ae5c <_scanf_float+0x84>
 800b0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0e6:	464a      	mov	r2, r9
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	4798      	blx	r3
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	6123      	str	r3, [r4, #16]
 800b0f2:	e7f0      	b.n	800b0d6 <_scanf_float+0x2fe>
 800b0f4:	46aa      	mov	sl, r5
 800b0f6:	46b3      	mov	fp, r6
 800b0f8:	e7de      	b.n	800b0b8 <_scanf_float+0x2e0>
 800b0fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0fe:	6923      	ldr	r3, [r4, #16]
 800b100:	2965      	cmp	r1, #101	@ 0x65
 800b102:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b106:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b10a:	6123      	str	r3, [r4, #16]
 800b10c:	d00c      	beq.n	800b128 <_scanf_float+0x350>
 800b10e:	2945      	cmp	r1, #69	@ 0x45
 800b110:	d00a      	beq.n	800b128 <_scanf_float+0x350>
 800b112:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b116:	464a      	mov	r2, r9
 800b118:	4640      	mov	r0, r8
 800b11a:	4798      	blx	r3
 800b11c:	6923      	ldr	r3, [r4, #16]
 800b11e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b122:	3b01      	subs	r3, #1
 800b124:	1eb5      	subs	r5, r6, #2
 800b126:	6123      	str	r3, [r4, #16]
 800b128:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b12c:	464a      	mov	r2, r9
 800b12e:	4640      	mov	r0, r8
 800b130:	4798      	blx	r3
 800b132:	462e      	mov	r6, r5
 800b134:	6822      	ldr	r2, [r4, #0]
 800b136:	f012 0210 	ands.w	r2, r2, #16
 800b13a:	d001      	beq.n	800b140 <_scanf_float+0x368>
 800b13c:	2000      	movs	r0, #0
 800b13e:	e68e      	b.n	800ae5e <_scanf_float+0x86>
 800b140:	7032      	strb	r2, [r6, #0]
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b14c:	d125      	bne.n	800b19a <_scanf_float+0x3c2>
 800b14e:	9b02      	ldr	r3, [sp, #8]
 800b150:	429f      	cmp	r7, r3
 800b152:	d00a      	beq.n	800b16a <_scanf_float+0x392>
 800b154:	1bda      	subs	r2, r3, r7
 800b156:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b15a:	429e      	cmp	r6, r3
 800b15c:	bf28      	it	cs
 800b15e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b162:	4922      	ldr	r1, [pc, #136]	@ (800b1ec <_scanf_float+0x414>)
 800b164:	4630      	mov	r0, r6
 800b166:	f000 f93d 	bl	800b3e4 <siprintf>
 800b16a:	9901      	ldr	r1, [sp, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	4640      	mov	r0, r8
 800b170:	f002 fc52 	bl	800da18 <_strtod_r>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	6821      	ldr	r1, [r4, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f011 0f02 	tst.w	r1, #2
 800b17e:	ec57 6b10 	vmov	r6, r7, d0
 800b182:	f103 0204 	add.w	r2, r3, #4
 800b186:	d015      	beq.n	800b1b4 <_scanf_float+0x3dc>
 800b188:	9903      	ldr	r1, [sp, #12]
 800b18a:	600a      	str	r2, [r1, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	e9c3 6700 	strd	r6, r7, [r3]
 800b192:	68e3      	ldr	r3, [r4, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	60e3      	str	r3, [r4, #12]
 800b198:	e7d0      	b.n	800b13c <_scanf_float+0x364>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d0e4      	beq.n	800b16a <_scanf_float+0x392>
 800b1a0:	9905      	ldr	r1, [sp, #20]
 800b1a2:	230a      	movs	r3, #10
 800b1a4:	3101      	adds	r1, #1
 800b1a6:	4640      	mov	r0, r8
 800b1a8:	f002 fcb6 	bl	800db18 <_strtol_r>
 800b1ac:	9b04      	ldr	r3, [sp, #16]
 800b1ae:	9e05      	ldr	r6, [sp, #20]
 800b1b0:	1ac2      	subs	r2, r0, r3
 800b1b2:	e7d0      	b.n	800b156 <_scanf_float+0x37e>
 800b1b4:	f011 0f04 	tst.w	r1, #4
 800b1b8:	9903      	ldr	r1, [sp, #12]
 800b1ba:	600a      	str	r2, [r1, #0]
 800b1bc:	d1e6      	bne.n	800b18c <_scanf_float+0x3b4>
 800b1be:	681d      	ldr	r5, [r3, #0]
 800b1c0:	4632      	mov	r2, r6
 800b1c2:	463b      	mov	r3, r7
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 fcb8 	bl	8000b3c <__aeabi_dcmpun>
 800b1cc:	b128      	cbz	r0, 800b1da <_scanf_float+0x402>
 800b1ce:	4808      	ldr	r0, [pc, #32]	@ (800b1f0 <_scanf_float+0x418>)
 800b1d0:	f000 fa16 	bl	800b600 <nanf>
 800b1d4:	ed85 0a00 	vstr	s0, [r5]
 800b1d8:	e7db      	b.n	800b192 <_scanf_float+0x3ba>
 800b1da:	4630      	mov	r0, r6
 800b1dc:	4639      	mov	r1, r7
 800b1de:	f7f5 fd0b 	bl	8000bf8 <__aeabi_d2f>
 800b1e2:	6028      	str	r0, [r5, #0]
 800b1e4:	e7d5      	b.n	800b192 <_scanf_float+0x3ba>
 800b1e6:	2700      	movs	r7, #0
 800b1e8:	e62e      	b.n	800ae48 <_scanf_float+0x70>
 800b1ea:	bf00      	nop
 800b1ec:	0800ed68 	.word	0x0800ed68
 800b1f0:	0800eea9 	.word	0x0800eea9

0800b1f4 <std>:
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	b510      	push	{r4, lr}
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b202:	6083      	str	r3, [r0, #8]
 800b204:	8181      	strh	r1, [r0, #12]
 800b206:	6643      	str	r3, [r0, #100]	@ 0x64
 800b208:	81c2      	strh	r2, [r0, #14]
 800b20a:	6183      	str	r3, [r0, #24]
 800b20c:	4619      	mov	r1, r3
 800b20e:	2208      	movs	r2, #8
 800b210:	305c      	adds	r0, #92	@ 0x5c
 800b212:	f000 f966 	bl	800b4e2 <memset>
 800b216:	4b0d      	ldr	r3, [pc, #52]	@ (800b24c <std+0x58>)
 800b218:	6263      	str	r3, [r4, #36]	@ 0x24
 800b21a:	4b0d      	ldr	r3, [pc, #52]	@ (800b250 <std+0x5c>)
 800b21c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b21e:	4b0d      	ldr	r3, [pc, #52]	@ (800b254 <std+0x60>)
 800b220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b222:	4b0d      	ldr	r3, [pc, #52]	@ (800b258 <std+0x64>)
 800b224:	6323      	str	r3, [r4, #48]	@ 0x30
 800b226:	4b0d      	ldr	r3, [pc, #52]	@ (800b25c <std+0x68>)
 800b228:	6224      	str	r4, [r4, #32]
 800b22a:	429c      	cmp	r4, r3
 800b22c:	d006      	beq.n	800b23c <std+0x48>
 800b22e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b232:	4294      	cmp	r4, r2
 800b234:	d002      	beq.n	800b23c <std+0x48>
 800b236:	33d0      	adds	r3, #208	@ 0xd0
 800b238:	429c      	cmp	r4, r3
 800b23a:	d105      	bne.n	800b248 <std+0x54>
 800b23c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b244:	f000 b9ca 	b.w	800b5dc <__retarget_lock_init_recursive>
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	bf00      	nop
 800b24c:	0800b429 	.word	0x0800b429
 800b250:	0800b44b 	.word	0x0800b44b
 800b254:	0800b483 	.word	0x0800b483
 800b258:	0800b4a7 	.word	0x0800b4a7
 800b25c:	20002090 	.word	0x20002090

0800b260 <stdio_exit_handler>:
 800b260:	4a02      	ldr	r2, [pc, #8]	@ (800b26c <stdio_exit_handler+0xc>)
 800b262:	4903      	ldr	r1, [pc, #12]	@ (800b270 <stdio_exit_handler+0x10>)
 800b264:	4803      	ldr	r0, [pc, #12]	@ (800b274 <stdio_exit_handler+0x14>)
 800b266:	f000 b869 	b.w	800b33c <_fwalk_sglue>
 800b26a:	bf00      	nop
 800b26c:	20000124 	.word	0x20000124
 800b270:	0800ded5 	.word	0x0800ded5
 800b274:	20000134 	.word	0x20000134

0800b278 <cleanup_stdio>:
 800b278:	6841      	ldr	r1, [r0, #4]
 800b27a:	4b0c      	ldr	r3, [pc, #48]	@ (800b2ac <cleanup_stdio+0x34>)
 800b27c:	4299      	cmp	r1, r3
 800b27e:	b510      	push	{r4, lr}
 800b280:	4604      	mov	r4, r0
 800b282:	d001      	beq.n	800b288 <cleanup_stdio+0x10>
 800b284:	f002 fe26 	bl	800ded4 <_fflush_r>
 800b288:	68a1      	ldr	r1, [r4, #8]
 800b28a:	4b09      	ldr	r3, [pc, #36]	@ (800b2b0 <cleanup_stdio+0x38>)
 800b28c:	4299      	cmp	r1, r3
 800b28e:	d002      	beq.n	800b296 <cleanup_stdio+0x1e>
 800b290:	4620      	mov	r0, r4
 800b292:	f002 fe1f 	bl	800ded4 <_fflush_r>
 800b296:	68e1      	ldr	r1, [r4, #12]
 800b298:	4b06      	ldr	r3, [pc, #24]	@ (800b2b4 <cleanup_stdio+0x3c>)
 800b29a:	4299      	cmp	r1, r3
 800b29c:	d004      	beq.n	800b2a8 <cleanup_stdio+0x30>
 800b29e:	4620      	mov	r0, r4
 800b2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a4:	f002 be16 	b.w	800ded4 <_fflush_r>
 800b2a8:	bd10      	pop	{r4, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20002090 	.word	0x20002090
 800b2b0:	200020f8 	.word	0x200020f8
 800b2b4:	20002160 	.word	0x20002160

0800b2b8 <global_stdio_init.part.0>:
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e8 <global_stdio_init.part.0+0x30>)
 800b2bc:	4c0b      	ldr	r4, [pc, #44]	@ (800b2ec <global_stdio_init.part.0+0x34>)
 800b2be:	4a0c      	ldr	r2, [pc, #48]	@ (800b2f0 <global_stdio_init.part.0+0x38>)
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2104      	movs	r1, #4
 800b2c8:	f7ff ff94 	bl	800b1f4 <std>
 800b2cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	2109      	movs	r1, #9
 800b2d4:	f7ff ff8e 	bl	800b1f4 <std>
 800b2d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2dc:	2202      	movs	r2, #2
 800b2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e2:	2112      	movs	r1, #18
 800b2e4:	f7ff bf86 	b.w	800b1f4 <std>
 800b2e8:	200021c8 	.word	0x200021c8
 800b2ec:	20002090 	.word	0x20002090
 800b2f0:	0800b261 	.word	0x0800b261

0800b2f4 <__sfp_lock_acquire>:
 800b2f4:	4801      	ldr	r0, [pc, #4]	@ (800b2fc <__sfp_lock_acquire+0x8>)
 800b2f6:	f000 b972 	b.w	800b5de <__retarget_lock_acquire_recursive>
 800b2fa:	bf00      	nop
 800b2fc:	200021d1 	.word	0x200021d1

0800b300 <__sfp_lock_release>:
 800b300:	4801      	ldr	r0, [pc, #4]	@ (800b308 <__sfp_lock_release+0x8>)
 800b302:	f000 b96d 	b.w	800b5e0 <__retarget_lock_release_recursive>
 800b306:	bf00      	nop
 800b308:	200021d1 	.word	0x200021d1

0800b30c <__sinit>:
 800b30c:	b510      	push	{r4, lr}
 800b30e:	4604      	mov	r4, r0
 800b310:	f7ff fff0 	bl	800b2f4 <__sfp_lock_acquire>
 800b314:	6a23      	ldr	r3, [r4, #32]
 800b316:	b11b      	cbz	r3, 800b320 <__sinit+0x14>
 800b318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b31c:	f7ff bff0 	b.w	800b300 <__sfp_lock_release>
 800b320:	4b04      	ldr	r3, [pc, #16]	@ (800b334 <__sinit+0x28>)
 800b322:	6223      	str	r3, [r4, #32]
 800b324:	4b04      	ldr	r3, [pc, #16]	@ (800b338 <__sinit+0x2c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1f5      	bne.n	800b318 <__sinit+0xc>
 800b32c:	f7ff ffc4 	bl	800b2b8 <global_stdio_init.part.0>
 800b330:	e7f2      	b.n	800b318 <__sinit+0xc>
 800b332:	bf00      	nop
 800b334:	0800b279 	.word	0x0800b279
 800b338:	200021c8 	.word	0x200021c8

0800b33c <_fwalk_sglue>:
 800b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b340:	4607      	mov	r7, r0
 800b342:	4688      	mov	r8, r1
 800b344:	4614      	mov	r4, r2
 800b346:	2600      	movs	r6, #0
 800b348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b34c:	f1b9 0901 	subs.w	r9, r9, #1
 800b350:	d505      	bpl.n	800b35e <_fwalk_sglue+0x22>
 800b352:	6824      	ldr	r4, [r4, #0]
 800b354:	2c00      	cmp	r4, #0
 800b356:	d1f7      	bne.n	800b348 <_fwalk_sglue+0xc>
 800b358:	4630      	mov	r0, r6
 800b35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b35e:	89ab      	ldrh	r3, [r5, #12]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d907      	bls.n	800b374 <_fwalk_sglue+0x38>
 800b364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b368:	3301      	adds	r3, #1
 800b36a:	d003      	beq.n	800b374 <_fwalk_sglue+0x38>
 800b36c:	4629      	mov	r1, r5
 800b36e:	4638      	mov	r0, r7
 800b370:	47c0      	blx	r8
 800b372:	4306      	orrs	r6, r0
 800b374:	3568      	adds	r5, #104	@ 0x68
 800b376:	e7e9      	b.n	800b34c <_fwalk_sglue+0x10>

0800b378 <sniprintf>:
 800b378:	b40c      	push	{r2, r3}
 800b37a:	b530      	push	{r4, r5, lr}
 800b37c:	4b18      	ldr	r3, [pc, #96]	@ (800b3e0 <sniprintf+0x68>)
 800b37e:	1e0c      	subs	r4, r1, #0
 800b380:	681d      	ldr	r5, [r3, #0]
 800b382:	b09d      	sub	sp, #116	@ 0x74
 800b384:	da08      	bge.n	800b398 <sniprintf+0x20>
 800b386:	238b      	movs	r3, #139	@ 0x8b
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b38e:	b01d      	add	sp, #116	@ 0x74
 800b390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b394:	b002      	add	sp, #8
 800b396:	4770      	bx	lr
 800b398:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b39c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b3a0:	f04f 0300 	mov.w	r3, #0
 800b3a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b3a6:	bf14      	ite	ne
 800b3a8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b3ac:	4623      	moveq	r3, r4
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	9307      	str	r3, [sp, #28]
 800b3b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3b6:	9002      	str	r0, [sp, #8]
 800b3b8:	9006      	str	r0, [sp, #24]
 800b3ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b3be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b3c0:	ab21      	add	r3, sp, #132	@ 0x84
 800b3c2:	a902      	add	r1, sp, #8
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	f002 fc04 	bl	800dbd4 <_svfiprintf_r>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	bfbc      	itt	lt
 800b3d0:	238b      	movlt	r3, #139	@ 0x8b
 800b3d2:	602b      	strlt	r3, [r5, #0]
 800b3d4:	2c00      	cmp	r4, #0
 800b3d6:	d0da      	beq.n	800b38e <sniprintf+0x16>
 800b3d8:	9b02      	ldr	r3, [sp, #8]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
 800b3de:	e7d6      	b.n	800b38e <sniprintf+0x16>
 800b3e0:	20000130 	.word	0x20000130

0800b3e4 <siprintf>:
 800b3e4:	b40e      	push	{r1, r2, r3}
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	b09d      	sub	sp, #116	@ 0x74
 800b3ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b3ec:	9002      	str	r0, [sp, #8]
 800b3ee:	9006      	str	r0, [sp, #24]
 800b3f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b3f4:	480a      	ldr	r0, [pc, #40]	@ (800b420 <siprintf+0x3c>)
 800b3f6:	9107      	str	r1, [sp, #28]
 800b3f8:	9104      	str	r1, [sp, #16]
 800b3fa:	490a      	ldr	r1, [pc, #40]	@ (800b424 <siprintf+0x40>)
 800b3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b400:	9105      	str	r1, [sp, #20]
 800b402:	2400      	movs	r4, #0
 800b404:	a902      	add	r1, sp, #8
 800b406:	6800      	ldr	r0, [r0, #0]
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b40c:	f002 fbe2 	bl	800dbd4 <_svfiprintf_r>
 800b410:	9b02      	ldr	r3, [sp, #8]
 800b412:	701c      	strb	r4, [r3, #0]
 800b414:	b01d      	add	sp, #116	@ 0x74
 800b416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b41a:	b003      	add	sp, #12
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	20000130 	.word	0x20000130
 800b424:	ffff0208 	.word	0xffff0208

0800b428 <__sread>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	460c      	mov	r4, r1
 800b42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b430:	f000 f886 	bl	800b540 <_read_r>
 800b434:	2800      	cmp	r0, #0
 800b436:	bfab      	itete	ge
 800b438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b43a:	89a3      	ldrhlt	r3, [r4, #12]
 800b43c:	181b      	addge	r3, r3, r0
 800b43e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b442:	bfac      	ite	ge
 800b444:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b446:	81a3      	strhlt	r3, [r4, #12]
 800b448:	bd10      	pop	{r4, pc}

0800b44a <__swrite>:
 800b44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44e:	461f      	mov	r7, r3
 800b450:	898b      	ldrh	r3, [r1, #12]
 800b452:	05db      	lsls	r3, r3, #23
 800b454:	4605      	mov	r5, r0
 800b456:	460c      	mov	r4, r1
 800b458:	4616      	mov	r6, r2
 800b45a:	d505      	bpl.n	800b468 <__swrite+0x1e>
 800b45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b460:	2302      	movs	r3, #2
 800b462:	2200      	movs	r2, #0
 800b464:	f000 f85a 	bl	800b51c <_lseek_r>
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b46e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b472:	81a3      	strh	r3, [r4, #12]
 800b474:	4632      	mov	r2, r6
 800b476:	463b      	mov	r3, r7
 800b478:	4628      	mov	r0, r5
 800b47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b47e:	f000 b871 	b.w	800b564 <_write_r>

0800b482 <__sseek>:
 800b482:	b510      	push	{r4, lr}
 800b484:	460c      	mov	r4, r1
 800b486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48a:	f000 f847 	bl	800b51c <_lseek_r>
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	bf15      	itete	ne
 800b494:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b49a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b49e:	81a3      	strheq	r3, [r4, #12]
 800b4a0:	bf18      	it	ne
 800b4a2:	81a3      	strhne	r3, [r4, #12]
 800b4a4:	bd10      	pop	{r4, pc}

0800b4a6 <__sclose>:
 800b4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4aa:	f000 b827 	b.w	800b4fc <_close_r>

0800b4ae <memmove>:
 800b4ae:	4288      	cmp	r0, r1
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	eb01 0402 	add.w	r4, r1, r2
 800b4b6:	d902      	bls.n	800b4be <memmove+0x10>
 800b4b8:	4284      	cmp	r4, r0
 800b4ba:	4623      	mov	r3, r4
 800b4bc:	d807      	bhi.n	800b4ce <memmove+0x20>
 800b4be:	1e43      	subs	r3, r0, #1
 800b4c0:	42a1      	cmp	r1, r4
 800b4c2:	d008      	beq.n	800b4d6 <memmove+0x28>
 800b4c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4cc:	e7f8      	b.n	800b4c0 <memmove+0x12>
 800b4ce:	4402      	add	r2, r0
 800b4d0:	4601      	mov	r1, r0
 800b4d2:	428a      	cmp	r2, r1
 800b4d4:	d100      	bne.n	800b4d8 <memmove+0x2a>
 800b4d6:	bd10      	pop	{r4, pc}
 800b4d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4e0:	e7f7      	b.n	800b4d2 <memmove+0x24>

0800b4e2 <memset>:
 800b4e2:	4402      	add	r2, r0
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d100      	bne.n	800b4ec <memset+0xa>
 800b4ea:	4770      	bx	lr
 800b4ec:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f0:	e7f9      	b.n	800b4e6 <memset+0x4>
	...

0800b4f4 <_localeconv_r>:
 800b4f4:	4800      	ldr	r0, [pc, #0]	@ (800b4f8 <_localeconv_r+0x4>)
 800b4f6:	4770      	bx	lr
 800b4f8:	20000270 	.word	0x20000270

0800b4fc <_close_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d06      	ldr	r5, [pc, #24]	@ (800b518 <_close_r+0x1c>)
 800b500:	2300      	movs	r3, #0
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	f7f6 fe74 	bl	80021f4 <_close>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_close_r+0x1a>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_close_r+0x1a>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	200021cc 	.word	0x200021cc

0800b51c <_lseek_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d07      	ldr	r5, [pc, #28]	@ (800b53c <_lseek_r+0x20>)
 800b520:	4604      	mov	r4, r0
 800b522:	4608      	mov	r0, r1
 800b524:	4611      	mov	r1, r2
 800b526:	2200      	movs	r2, #0
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f7f6 fe89 	bl	8002242 <_lseek>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_lseek_r+0x1e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_lseek_r+0x1e>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	200021cc 	.word	0x200021cc

0800b540 <_read_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	@ (800b560 <_read_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f6 fe17 	bl	8002182 <_read>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_read_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_read_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	200021cc 	.word	0x200021cc

0800b564 <_write_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d07      	ldr	r5, [pc, #28]	@ (800b584 <_write_r+0x20>)
 800b568:	4604      	mov	r4, r0
 800b56a:	4608      	mov	r0, r1
 800b56c:	4611      	mov	r1, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	602a      	str	r2, [r5, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	f7f6 fe22 	bl	80021bc <_write>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_write_r+0x1e>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_write_r+0x1e>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	200021cc 	.word	0x200021cc

0800b588 <__errno>:
 800b588:	4b01      	ldr	r3, [pc, #4]	@ (800b590 <__errno+0x8>)
 800b58a:	6818      	ldr	r0, [r3, #0]
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20000130 	.word	0x20000130

0800b594 <__libc_init_array>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	4d0d      	ldr	r5, [pc, #52]	@ (800b5cc <__libc_init_array+0x38>)
 800b598:	4c0d      	ldr	r4, [pc, #52]	@ (800b5d0 <__libc_init_array+0x3c>)
 800b59a:	1b64      	subs	r4, r4, r5
 800b59c:	10a4      	asrs	r4, r4, #2
 800b59e:	2600      	movs	r6, #0
 800b5a0:	42a6      	cmp	r6, r4
 800b5a2:	d109      	bne.n	800b5b8 <__libc_init_array+0x24>
 800b5a4:	4d0b      	ldr	r5, [pc, #44]	@ (800b5d4 <__libc_init_array+0x40>)
 800b5a6:	4c0c      	ldr	r4, [pc, #48]	@ (800b5d8 <__libc_init_array+0x44>)
 800b5a8:	f003 fb5c 	bl	800ec64 <_init>
 800b5ac:	1b64      	subs	r4, r4, r5
 800b5ae:	10a4      	asrs	r4, r4, #2
 800b5b0:	2600      	movs	r6, #0
 800b5b2:	42a6      	cmp	r6, r4
 800b5b4:	d105      	bne.n	800b5c2 <__libc_init_array+0x2e>
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}
 800b5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5bc:	4798      	blx	r3
 800b5be:	3601      	adds	r6, #1
 800b5c0:	e7ee      	b.n	800b5a0 <__libc_init_array+0xc>
 800b5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c6:	4798      	blx	r3
 800b5c8:	3601      	adds	r6, #1
 800b5ca:	e7f2      	b.n	800b5b2 <__libc_init_array+0x1e>
 800b5cc:	0800f164 	.word	0x0800f164
 800b5d0:	0800f164 	.word	0x0800f164
 800b5d4:	0800f164 	.word	0x0800f164
 800b5d8:	0800f168 	.word	0x0800f168

0800b5dc <__retarget_lock_init_recursive>:
 800b5dc:	4770      	bx	lr

0800b5de <__retarget_lock_acquire_recursive>:
 800b5de:	4770      	bx	lr

0800b5e0 <__retarget_lock_release_recursive>:
 800b5e0:	4770      	bx	lr

0800b5e2 <memcpy>:
 800b5e2:	440a      	add	r2, r1
 800b5e4:	4291      	cmp	r1, r2
 800b5e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b5ea:	d100      	bne.n	800b5ee <memcpy+0xc>
 800b5ec:	4770      	bx	lr
 800b5ee:	b510      	push	{r4, lr}
 800b5f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5f8:	4291      	cmp	r1, r2
 800b5fa:	d1f9      	bne.n	800b5f0 <memcpy+0xe>
 800b5fc:	bd10      	pop	{r4, pc}
	...

0800b600 <nanf>:
 800b600:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b608 <nanf+0x8>
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	7fc00000 	.word	0x7fc00000

0800b60c <quorem>:
 800b60c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b610:	6903      	ldr	r3, [r0, #16]
 800b612:	690c      	ldr	r4, [r1, #16]
 800b614:	42a3      	cmp	r3, r4
 800b616:	4607      	mov	r7, r0
 800b618:	db7e      	blt.n	800b718 <quorem+0x10c>
 800b61a:	3c01      	subs	r4, #1
 800b61c:	f101 0814 	add.w	r8, r1, #20
 800b620:	00a3      	lsls	r3, r4, #2
 800b622:	f100 0514 	add.w	r5, r0, #20
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b62c:	9301      	str	r3, [sp, #4]
 800b62e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b636:	3301      	adds	r3, #1
 800b638:	429a      	cmp	r2, r3
 800b63a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b63e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b642:	d32e      	bcc.n	800b6a2 <quorem+0x96>
 800b644:	f04f 0a00 	mov.w	sl, #0
 800b648:	46c4      	mov	ip, r8
 800b64a:	46ae      	mov	lr, r5
 800b64c:	46d3      	mov	fp, sl
 800b64e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b652:	b298      	uxth	r0, r3
 800b654:	fb06 a000 	mla	r0, r6, r0, sl
 800b658:	0c02      	lsrs	r2, r0, #16
 800b65a:	0c1b      	lsrs	r3, r3, #16
 800b65c:	fb06 2303 	mla	r3, r6, r3, r2
 800b660:	f8de 2000 	ldr.w	r2, [lr]
 800b664:	b280      	uxth	r0, r0
 800b666:	b292      	uxth	r2, r2
 800b668:	1a12      	subs	r2, r2, r0
 800b66a:	445a      	add	r2, fp
 800b66c:	f8de 0000 	ldr.w	r0, [lr]
 800b670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b674:	b29b      	uxth	r3, r3
 800b676:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b67a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b67e:	b292      	uxth	r2, r2
 800b680:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b684:	45e1      	cmp	r9, ip
 800b686:	f84e 2b04 	str.w	r2, [lr], #4
 800b68a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b68e:	d2de      	bcs.n	800b64e <quorem+0x42>
 800b690:	9b00      	ldr	r3, [sp, #0]
 800b692:	58eb      	ldr	r3, [r5, r3]
 800b694:	b92b      	cbnz	r3, 800b6a2 <quorem+0x96>
 800b696:	9b01      	ldr	r3, [sp, #4]
 800b698:	3b04      	subs	r3, #4
 800b69a:	429d      	cmp	r5, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	d32f      	bcc.n	800b700 <quorem+0xf4>
 800b6a0:	613c      	str	r4, [r7, #16]
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f001 f9c8 	bl	800ca38 <__mcmp>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	db25      	blt.n	800b6f8 <quorem+0xec>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6b4:	f8d1 c000 	ldr.w	ip, [r1]
 800b6b8:	fa1f fe82 	uxth.w	lr, r2
 800b6bc:	fa1f f38c 	uxth.w	r3, ip
 800b6c0:	eba3 030e 	sub.w	r3, r3, lr
 800b6c4:	4403      	add	r3, r0
 800b6c6:	0c12      	lsrs	r2, r2, #16
 800b6c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b6cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6d6:	45c1      	cmp	r9, r8
 800b6d8:	f841 3b04 	str.w	r3, [r1], #4
 800b6dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6e0:	d2e6      	bcs.n	800b6b0 <quorem+0xa4>
 800b6e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ea:	b922      	cbnz	r2, 800b6f6 <quorem+0xea>
 800b6ec:	3b04      	subs	r3, #4
 800b6ee:	429d      	cmp	r5, r3
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	d30b      	bcc.n	800b70c <quorem+0x100>
 800b6f4:	613c      	str	r4, [r7, #16]
 800b6f6:	3601      	adds	r6, #1
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	b003      	add	sp, #12
 800b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b700:	6812      	ldr	r2, [r2, #0]
 800b702:	3b04      	subs	r3, #4
 800b704:	2a00      	cmp	r2, #0
 800b706:	d1cb      	bne.n	800b6a0 <quorem+0x94>
 800b708:	3c01      	subs	r4, #1
 800b70a:	e7c6      	b.n	800b69a <quorem+0x8e>
 800b70c:	6812      	ldr	r2, [r2, #0]
 800b70e:	3b04      	subs	r3, #4
 800b710:	2a00      	cmp	r2, #0
 800b712:	d1ef      	bne.n	800b6f4 <quorem+0xe8>
 800b714:	3c01      	subs	r4, #1
 800b716:	e7ea      	b.n	800b6ee <quorem+0xe2>
 800b718:	2000      	movs	r0, #0
 800b71a:	e7ee      	b.n	800b6fa <quorem+0xee>
 800b71c:	0000      	movs	r0, r0
	...

0800b720 <_dtoa_r>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	69c7      	ldr	r7, [r0, #28]
 800b726:	b097      	sub	sp, #92	@ 0x5c
 800b728:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b72c:	ec55 4b10 	vmov	r4, r5, d0
 800b730:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b732:	9107      	str	r1, [sp, #28]
 800b734:	4681      	mov	r9, r0
 800b736:	920c      	str	r2, [sp, #48]	@ 0x30
 800b738:	9311      	str	r3, [sp, #68]	@ 0x44
 800b73a:	b97f      	cbnz	r7, 800b75c <_dtoa_r+0x3c>
 800b73c:	2010      	movs	r0, #16
 800b73e:	f000 fe09 	bl	800c354 <malloc>
 800b742:	4602      	mov	r2, r0
 800b744:	f8c9 001c 	str.w	r0, [r9, #28]
 800b748:	b920      	cbnz	r0, 800b754 <_dtoa_r+0x34>
 800b74a:	4ba9      	ldr	r3, [pc, #676]	@ (800b9f0 <_dtoa_r+0x2d0>)
 800b74c:	21ef      	movs	r1, #239	@ 0xef
 800b74e:	48a9      	ldr	r0, [pc, #676]	@ (800b9f4 <_dtoa_r+0x2d4>)
 800b750:	f002 fc12 	bl	800df78 <__assert_func>
 800b754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b758:	6007      	str	r7, [r0, #0]
 800b75a:	60c7      	str	r7, [r0, #12]
 800b75c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b760:	6819      	ldr	r1, [r3, #0]
 800b762:	b159      	cbz	r1, 800b77c <_dtoa_r+0x5c>
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	604a      	str	r2, [r1, #4]
 800b768:	2301      	movs	r3, #1
 800b76a:	4093      	lsls	r3, r2
 800b76c:	608b      	str	r3, [r1, #8]
 800b76e:	4648      	mov	r0, r9
 800b770:	f000 fee6 	bl	800c540 <_Bfree>
 800b774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	1e2b      	subs	r3, r5, #0
 800b77e:	bfb9      	ittee	lt
 800b780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b784:	9305      	strlt	r3, [sp, #20]
 800b786:	2300      	movge	r3, #0
 800b788:	6033      	strge	r3, [r6, #0]
 800b78a:	9f05      	ldr	r7, [sp, #20]
 800b78c:	4b9a      	ldr	r3, [pc, #616]	@ (800b9f8 <_dtoa_r+0x2d8>)
 800b78e:	bfbc      	itt	lt
 800b790:	2201      	movlt	r2, #1
 800b792:	6032      	strlt	r2, [r6, #0]
 800b794:	43bb      	bics	r3, r7
 800b796:	d112      	bne.n	800b7be <_dtoa_r+0x9e>
 800b798:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b79a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7a4:	4323      	orrs	r3, r4
 800b7a6:	f000 855a 	beq.w	800c25e <_dtoa_r+0xb3e>
 800b7aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ba0c <_dtoa_r+0x2ec>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 855c 	beq.w	800c26e <_dtoa_r+0xb4e>
 800b7b6:	f10a 0303 	add.w	r3, sl, #3
 800b7ba:	f000 bd56 	b.w	800c26a <_dtoa_r+0xb4a>
 800b7be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	ec51 0b17 	vmov	r0, r1, d7
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b7ce:	f7f5 f983 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	b158      	cbz	r0, 800b7ee <_dtoa_r+0xce>
 800b7d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b7d8:	2301      	movs	r3, #1
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7de:	b113      	cbz	r3, 800b7e6 <_dtoa_r+0xc6>
 800b7e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b7e2:	4b86      	ldr	r3, [pc, #536]	@ (800b9fc <_dtoa_r+0x2dc>)
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ba10 <_dtoa_r+0x2f0>
 800b7ea:	f000 bd40 	b.w	800c26e <_dtoa_r+0xb4e>
 800b7ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b7f2:	aa14      	add	r2, sp, #80	@ 0x50
 800b7f4:	a915      	add	r1, sp, #84	@ 0x54
 800b7f6:	4648      	mov	r0, r9
 800b7f8:	f001 fa3e 	bl	800cc78 <__d2b>
 800b7fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b800:	9002      	str	r0, [sp, #8]
 800b802:	2e00      	cmp	r6, #0
 800b804:	d078      	beq.n	800b8f8 <_dtoa_r+0x1d8>
 800b806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b808:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b80c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b81c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b820:	4619      	mov	r1, r3
 800b822:	2200      	movs	r2, #0
 800b824:	4b76      	ldr	r3, [pc, #472]	@ (800ba00 <_dtoa_r+0x2e0>)
 800b826:	f7f4 fd37 	bl	8000298 <__aeabi_dsub>
 800b82a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b9d8 <_dtoa_r+0x2b8>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f7f4 feea 	bl	8000608 <__aeabi_dmul>
 800b834:	a36a      	add	r3, pc, #424	@ (adr r3, 800b9e0 <_dtoa_r+0x2c0>)
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f7f4 fd2f 	bl	800029c <__adddf3>
 800b83e:	4604      	mov	r4, r0
 800b840:	4630      	mov	r0, r6
 800b842:	460d      	mov	r5, r1
 800b844:	f7f4 fe76 	bl	8000534 <__aeabi_i2d>
 800b848:	a367      	add	r3, pc, #412	@ (adr r3, 800b9e8 <_dtoa_r+0x2c8>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f7f4 fedb 	bl	8000608 <__aeabi_dmul>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f4 fd1f 	bl	800029c <__adddf3>
 800b85e:	4604      	mov	r4, r0
 800b860:	460d      	mov	r5, r1
 800b862:	f7f5 f981 	bl	8000b68 <__aeabi_d2iz>
 800b866:	2200      	movs	r2, #0
 800b868:	4607      	mov	r7, r0
 800b86a:	2300      	movs	r3, #0
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f5 f93c 	bl	8000aec <__aeabi_dcmplt>
 800b874:	b140      	cbz	r0, 800b888 <_dtoa_r+0x168>
 800b876:	4638      	mov	r0, r7
 800b878:	f7f4 fe5c 	bl	8000534 <__aeabi_i2d>
 800b87c:	4622      	mov	r2, r4
 800b87e:	462b      	mov	r3, r5
 800b880:	f7f5 f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b884:	b900      	cbnz	r0, 800b888 <_dtoa_r+0x168>
 800b886:	3f01      	subs	r7, #1
 800b888:	2f16      	cmp	r7, #22
 800b88a:	d852      	bhi.n	800b932 <_dtoa_r+0x212>
 800b88c:	4b5d      	ldr	r3, [pc, #372]	@ (800ba04 <_dtoa_r+0x2e4>)
 800b88e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b89a:	f7f5 f927 	bl	8000aec <__aeabi_dcmplt>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d049      	beq.n	800b936 <_dtoa_r+0x216>
 800b8a2:	3f01      	subs	r7, #1
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8aa:	1b9b      	subs	r3, r3, r6
 800b8ac:	1e5a      	subs	r2, r3, #1
 800b8ae:	bf45      	ittet	mi
 800b8b0:	f1c3 0301 	rsbmi	r3, r3, #1
 800b8b4:	9300      	strmi	r3, [sp, #0]
 800b8b6:	2300      	movpl	r3, #0
 800b8b8:	2300      	movmi	r3, #0
 800b8ba:	9206      	str	r2, [sp, #24]
 800b8bc:	bf54      	ite	pl
 800b8be:	9300      	strpl	r3, [sp, #0]
 800b8c0:	9306      	strmi	r3, [sp, #24]
 800b8c2:	2f00      	cmp	r7, #0
 800b8c4:	db39      	blt.n	800b93a <_dtoa_r+0x21a>
 800b8c6:	9b06      	ldr	r3, [sp, #24]
 800b8c8:	970d      	str	r7, [sp, #52]	@ 0x34
 800b8ca:	443b      	add	r3, r7
 800b8cc:	9306      	str	r3, [sp, #24]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9308      	str	r3, [sp, #32]
 800b8d2:	9b07      	ldr	r3, [sp, #28]
 800b8d4:	2b09      	cmp	r3, #9
 800b8d6:	d863      	bhi.n	800b9a0 <_dtoa_r+0x280>
 800b8d8:	2b05      	cmp	r3, #5
 800b8da:	bfc4      	itt	gt
 800b8dc:	3b04      	subgt	r3, #4
 800b8de:	9307      	strgt	r3, [sp, #28]
 800b8e0:	9b07      	ldr	r3, [sp, #28]
 800b8e2:	f1a3 0302 	sub.w	r3, r3, #2
 800b8e6:	bfcc      	ite	gt
 800b8e8:	2400      	movgt	r4, #0
 800b8ea:	2401      	movle	r4, #1
 800b8ec:	2b03      	cmp	r3, #3
 800b8ee:	d863      	bhi.n	800b9b8 <_dtoa_r+0x298>
 800b8f0:	e8df f003 	tbb	[pc, r3]
 800b8f4:	2b375452 	.word	0x2b375452
 800b8f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b8fc:	441e      	add	r6, r3
 800b8fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b902:	2b20      	cmp	r3, #32
 800b904:	bfc1      	itttt	gt
 800b906:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b90a:	409f      	lslgt	r7, r3
 800b90c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b910:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b914:	bfd6      	itet	le
 800b916:	f1c3 0320 	rsble	r3, r3, #32
 800b91a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b91e:	fa04 f003 	lslle.w	r0, r4, r3
 800b922:	f7f4 fdf7 	bl	8000514 <__aeabi_ui2d>
 800b926:	2201      	movs	r2, #1
 800b928:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b92c:	3e01      	subs	r6, #1
 800b92e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b930:	e776      	b.n	800b820 <_dtoa_r+0x100>
 800b932:	2301      	movs	r3, #1
 800b934:	e7b7      	b.n	800b8a6 <_dtoa_r+0x186>
 800b936:	9010      	str	r0, [sp, #64]	@ 0x40
 800b938:	e7b6      	b.n	800b8a8 <_dtoa_r+0x188>
 800b93a:	9b00      	ldr	r3, [sp, #0]
 800b93c:	1bdb      	subs	r3, r3, r7
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	427b      	negs	r3, r7
 800b942:	9308      	str	r3, [sp, #32]
 800b944:	2300      	movs	r3, #0
 800b946:	930d      	str	r3, [sp, #52]	@ 0x34
 800b948:	e7c3      	b.n	800b8d2 <_dtoa_r+0x1b2>
 800b94a:	2301      	movs	r3, #1
 800b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b950:	eb07 0b03 	add.w	fp, r7, r3
 800b954:	f10b 0301 	add.w	r3, fp, #1
 800b958:	2b01      	cmp	r3, #1
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	bfb8      	it	lt
 800b95e:	2301      	movlt	r3, #1
 800b960:	e006      	b.n	800b970 <_dtoa_r+0x250>
 800b962:	2301      	movs	r3, #1
 800b964:	9309      	str	r3, [sp, #36]	@ 0x24
 800b966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b968:	2b00      	cmp	r3, #0
 800b96a:	dd28      	ble.n	800b9be <_dtoa_r+0x29e>
 800b96c:	469b      	mov	fp, r3
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b974:	2100      	movs	r1, #0
 800b976:	2204      	movs	r2, #4
 800b978:	f102 0514 	add.w	r5, r2, #20
 800b97c:	429d      	cmp	r5, r3
 800b97e:	d926      	bls.n	800b9ce <_dtoa_r+0x2ae>
 800b980:	6041      	str	r1, [r0, #4]
 800b982:	4648      	mov	r0, r9
 800b984:	f000 fd9c 	bl	800c4c0 <_Balloc>
 800b988:	4682      	mov	sl, r0
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d142      	bne.n	800ba14 <_dtoa_r+0x2f4>
 800b98e:	4b1e      	ldr	r3, [pc, #120]	@ (800ba08 <_dtoa_r+0x2e8>)
 800b990:	4602      	mov	r2, r0
 800b992:	f240 11af 	movw	r1, #431	@ 0x1af
 800b996:	e6da      	b.n	800b74e <_dtoa_r+0x2e>
 800b998:	2300      	movs	r3, #0
 800b99a:	e7e3      	b.n	800b964 <_dtoa_r+0x244>
 800b99c:	2300      	movs	r3, #0
 800b99e:	e7d5      	b.n	800b94c <_dtoa_r+0x22c>
 800b9a0:	2401      	movs	r4, #1
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9307      	str	r3, [sp, #28]
 800b9a6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b9a8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8cd b00c 	str.w	fp, [sp, #12]
 800b9b2:	2312      	movs	r3, #18
 800b9b4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b9b6:	e7db      	b.n	800b970 <_dtoa_r+0x250>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9bc:	e7f4      	b.n	800b9a8 <_dtoa_r+0x288>
 800b9be:	f04f 0b01 	mov.w	fp, #1
 800b9c2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b9c6:	465b      	mov	r3, fp
 800b9c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b9cc:	e7d0      	b.n	800b970 <_dtoa_r+0x250>
 800b9ce:	3101      	adds	r1, #1
 800b9d0:	0052      	lsls	r2, r2, #1
 800b9d2:	e7d1      	b.n	800b978 <_dtoa_r+0x258>
 800b9d4:	f3af 8000 	nop.w
 800b9d8:	636f4361 	.word	0x636f4361
 800b9dc:	3fd287a7 	.word	0x3fd287a7
 800b9e0:	8b60c8b3 	.word	0x8b60c8b3
 800b9e4:	3fc68a28 	.word	0x3fc68a28
 800b9e8:	509f79fb 	.word	0x509f79fb
 800b9ec:	3fd34413 	.word	0x3fd34413
 800b9f0:	0800ed7a 	.word	0x0800ed7a
 800b9f4:	0800ed91 	.word	0x0800ed91
 800b9f8:	7ff00000 	.word	0x7ff00000
 800b9fc:	0800ed45 	.word	0x0800ed45
 800ba00:	3ff80000 	.word	0x3ff80000
 800ba04:	0800ef40 	.word	0x0800ef40
 800ba08:	0800ede9 	.word	0x0800ede9
 800ba0c:	0800ed76 	.word	0x0800ed76
 800ba10:	0800ed44 	.word	0x0800ed44
 800ba14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba18:	6018      	str	r0, [r3, #0]
 800ba1a:	9b03      	ldr	r3, [sp, #12]
 800ba1c:	2b0e      	cmp	r3, #14
 800ba1e:	f200 80a1 	bhi.w	800bb64 <_dtoa_r+0x444>
 800ba22:	2c00      	cmp	r4, #0
 800ba24:	f000 809e 	beq.w	800bb64 <_dtoa_r+0x444>
 800ba28:	2f00      	cmp	r7, #0
 800ba2a:	dd33      	ble.n	800ba94 <_dtoa_r+0x374>
 800ba2c:	4b9c      	ldr	r3, [pc, #624]	@ (800bca0 <_dtoa_r+0x580>)
 800ba2e:	f007 020f 	and.w	r2, r7, #15
 800ba32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba36:	ed93 7b00 	vldr	d7, [r3]
 800ba3a:	05f8      	lsls	r0, r7, #23
 800ba3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ba40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba44:	d516      	bpl.n	800ba74 <_dtoa_r+0x354>
 800ba46:	4b97      	ldr	r3, [pc, #604]	@ (800bca4 <_dtoa_r+0x584>)
 800ba48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba50:	f7f4 ff04 	bl	800085c <__aeabi_ddiv>
 800ba54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba58:	f004 040f 	and.w	r4, r4, #15
 800ba5c:	2603      	movs	r6, #3
 800ba5e:	4d91      	ldr	r5, [pc, #580]	@ (800bca4 <_dtoa_r+0x584>)
 800ba60:	b954      	cbnz	r4, 800ba78 <_dtoa_r+0x358>
 800ba62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ba66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba6a:	f7f4 fef7 	bl	800085c <__aeabi_ddiv>
 800ba6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba72:	e028      	b.n	800bac6 <_dtoa_r+0x3a6>
 800ba74:	2602      	movs	r6, #2
 800ba76:	e7f2      	b.n	800ba5e <_dtoa_r+0x33e>
 800ba78:	07e1      	lsls	r1, r4, #31
 800ba7a:	d508      	bpl.n	800ba8e <_dtoa_r+0x36e>
 800ba7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ba80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba84:	f7f4 fdc0 	bl	8000608 <__aeabi_dmul>
 800ba88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	1064      	asrs	r4, r4, #1
 800ba90:	3508      	adds	r5, #8
 800ba92:	e7e5      	b.n	800ba60 <_dtoa_r+0x340>
 800ba94:	f000 80af 	beq.w	800bbf6 <_dtoa_r+0x4d6>
 800ba98:	427c      	negs	r4, r7
 800ba9a:	4b81      	ldr	r3, [pc, #516]	@ (800bca0 <_dtoa_r+0x580>)
 800ba9c:	4d81      	ldr	r5, [pc, #516]	@ (800bca4 <_dtoa_r+0x584>)
 800ba9e:	f004 020f 	and.w	r2, r4, #15
 800baa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800baae:	f7f4 fdab 	bl	8000608 <__aeabi_dmul>
 800bab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bab6:	1124      	asrs	r4, r4, #4
 800bab8:	2300      	movs	r3, #0
 800baba:	2602      	movs	r6, #2
 800babc:	2c00      	cmp	r4, #0
 800babe:	f040 808f 	bne.w	800bbe0 <_dtoa_r+0x4c0>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1d3      	bne.n	800ba6e <_dtoa_r+0x34e>
 800bac6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bac8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 8094 	beq.w	800bbfa <_dtoa_r+0x4da>
 800bad2:	4b75      	ldr	r3, [pc, #468]	@ (800bca8 <_dtoa_r+0x588>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f5 f807 	bl	8000aec <__aeabi_dcmplt>
 800bade:	2800      	cmp	r0, #0
 800bae0:	f000 808b 	beq.w	800bbfa <_dtoa_r+0x4da>
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 8087 	beq.w	800bbfa <_dtoa_r+0x4da>
 800baec:	f1bb 0f00 	cmp.w	fp, #0
 800baf0:	dd34      	ble.n	800bb5c <_dtoa_r+0x43c>
 800baf2:	4620      	mov	r0, r4
 800baf4:	4b6d      	ldr	r3, [pc, #436]	@ (800bcac <_dtoa_r+0x58c>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 fd85 	bl	8000608 <__aeabi_dmul>
 800bafe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb02:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800bb06:	3601      	adds	r6, #1
 800bb08:	465c      	mov	r4, fp
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7f4 fd12 	bl	8000534 <__aeabi_i2d>
 800bb10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb14:	f7f4 fd78 	bl	8000608 <__aeabi_dmul>
 800bb18:	4b65      	ldr	r3, [pc, #404]	@ (800bcb0 <_dtoa_r+0x590>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f7f4 fbbe 	bl	800029c <__adddf3>
 800bb20:	4605      	mov	r5, r0
 800bb22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb26:	2c00      	cmp	r4, #0
 800bb28:	d16a      	bne.n	800bc00 <_dtoa_r+0x4e0>
 800bb2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb2e:	4b61      	ldr	r3, [pc, #388]	@ (800bcb4 <_dtoa_r+0x594>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	f7f4 fbb1 	bl	8000298 <__aeabi_dsub>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4633      	mov	r3, r6
 800bb42:	f7f4 fff1 	bl	8000b28 <__aeabi_dcmpgt>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	f040 8298 	bne.w	800c07c <_dtoa_r+0x95c>
 800bb4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb50:	462a      	mov	r2, r5
 800bb52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb56:	f7f4 ffc9 	bl	8000aec <__aeabi_dcmplt>
 800bb5a:	bb38      	cbnz	r0, 800bbac <_dtoa_r+0x48c>
 800bb5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bb60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f2c0 8157 	blt.w	800be1a <_dtoa_r+0x6fa>
 800bb6c:	2f0e      	cmp	r7, #14
 800bb6e:	f300 8154 	bgt.w	800be1a <_dtoa_r+0x6fa>
 800bb72:	4b4b      	ldr	r3, [pc, #300]	@ (800bca0 <_dtoa_r+0x580>)
 800bb74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb78:	ed93 7b00 	vldr	d7, [r3]
 800bb7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	ed8d 7b00 	vstr	d7, [sp]
 800bb84:	f280 80e5 	bge.w	800bd52 <_dtoa_r+0x632>
 800bb88:	9b03      	ldr	r3, [sp, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f300 80e1 	bgt.w	800bd52 <_dtoa_r+0x632>
 800bb90:	d10c      	bne.n	800bbac <_dtoa_r+0x48c>
 800bb92:	4b48      	ldr	r3, [pc, #288]	@ (800bcb4 <_dtoa_r+0x594>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	ec51 0b17 	vmov	r0, r1, d7
 800bb9a:	f7f4 fd35 	bl	8000608 <__aeabi_dmul>
 800bb9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba2:	f7f4 ffb7 	bl	8000b14 <__aeabi_dcmpge>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f000 8266 	beq.w	800c078 <_dtoa_r+0x958>
 800bbac:	2400      	movs	r4, #0
 800bbae:	4625      	mov	r5, r4
 800bbb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbb2:	4656      	mov	r6, sl
 800bbb4:	ea6f 0803 	mvn.w	r8, r3
 800bbb8:	2700      	movs	r7, #0
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4648      	mov	r0, r9
 800bbbe:	f000 fcbf 	bl	800c540 <_Bfree>
 800bbc2:	2d00      	cmp	r5, #0
 800bbc4:	f000 80bd 	beq.w	800bd42 <_dtoa_r+0x622>
 800bbc8:	b12f      	cbz	r7, 800bbd6 <_dtoa_r+0x4b6>
 800bbca:	42af      	cmp	r7, r5
 800bbcc:	d003      	beq.n	800bbd6 <_dtoa_r+0x4b6>
 800bbce:	4639      	mov	r1, r7
 800bbd0:	4648      	mov	r0, r9
 800bbd2:	f000 fcb5 	bl	800c540 <_Bfree>
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	4648      	mov	r0, r9
 800bbda:	f000 fcb1 	bl	800c540 <_Bfree>
 800bbde:	e0b0      	b.n	800bd42 <_dtoa_r+0x622>
 800bbe0:	07e2      	lsls	r2, r4, #31
 800bbe2:	d505      	bpl.n	800bbf0 <_dtoa_r+0x4d0>
 800bbe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbe8:	f7f4 fd0e 	bl	8000608 <__aeabi_dmul>
 800bbec:	3601      	adds	r6, #1
 800bbee:	2301      	movs	r3, #1
 800bbf0:	1064      	asrs	r4, r4, #1
 800bbf2:	3508      	adds	r5, #8
 800bbf4:	e762      	b.n	800babc <_dtoa_r+0x39c>
 800bbf6:	2602      	movs	r6, #2
 800bbf8:	e765      	b.n	800bac6 <_dtoa_r+0x3a6>
 800bbfa:	9c03      	ldr	r4, [sp, #12]
 800bbfc:	46b8      	mov	r8, r7
 800bbfe:	e784      	b.n	800bb0a <_dtoa_r+0x3ea>
 800bc00:	4b27      	ldr	r3, [pc, #156]	@ (800bca0 <_dtoa_r+0x580>)
 800bc02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc0c:	4454      	add	r4, sl
 800bc0e:	2900      	cmp	r1, #0
 800bc10:	d054      	beq.n	800bcbc <_dtoa_r+0x59c>
 800bc12:	4929      	ldr	r1, [pc, #164]	@ (800bcb8 <_dtoa_r+0x598>)
 800bc14:	2000      	movs	r0, #0
 800bc16:	f7f4 fe21 	bl	800085c <__aeabi_ddiv>
 800bc1a:	4633      	mov	r3, r6
 800bc1c:	462a      	mov	r2, r5
 800bc1e:	f7f4 fb3b 	bl	8000298 <__aeabi_dsub>
 800bc22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc26:	4656      	mov	r6, sl
 800bc28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc2c:	f7f4 ff9c 	bl	8000b68 <__aeabi_d2iz>
 800bc30:	4605      	mov	r5, r0
 800bc32:	f7f4 fc7f 	bl	8000534 <__aeabi_i2d>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc3e:	f7f4 fb2b 	bl	8000298 <__aeabi_dsub>
 800bc42:	3530      	adds	r5, #48	@ 0x30
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc4c:	f806 5b01 	strb.w	r5, [r6], #1
 800bc50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc54:	f7f4 ff4a 	bl	8000aec <__aeabi_dcmplt>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d172      	bne.n	800bd42 <_dtoa_r+0x622>
 800bc5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc60:	4911      	ldr	r1, [pc, #68]	@ (800bca8 <_dtoa_r+0x588>)
 800bc62:	2000      	movs	r0, #0
 800bc64:	f7f4 fb18 	bl	8000298 <__aeabi_dsub>
 800bc68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc6c:	f7f4 ff3e 	bl	8000aec <__aeabi_dcmplt>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	f040 80b4 	bne.w	800bdde <_dtoa_r+0x6be>
 800bc76:	42a6      	cmp	r6, r4
 800bc78:	f43f af70 	beq.w	800bb5c <_dtoa_r+0x43c>
 800bc7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bc80:	4b0a      	ldr	r3, [pc, #40]	@ (800bcac <_dtoa_r+0x58c>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	f7f4 fcc0 	bl	8000608 <__aeabi_dmul>
 800bc88:	4b08      	ldr	r3, [pc, #32]	@ (800bcac <_dtoa_r+0x58c>)
 800bc8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc8e:	2200      	movs	r2, #0
 800bc90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc94:	f7f4 fcb8 	bl	8000608 <__aeabi_dmul>
 800bc98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc9c:	e7c4      	b.n	800bc28 <_dtoa_r+0x508>
 800bc9e:	bf00      	nop
 800bca0:	0800ef40 	.word	0x0800ef40
 800bca4:	0800ef18 	.word	0x0800ef18
 800bca8:	3ff00000 	.word	0x3ff00000
 800bcac:	40240000 	.word	0x40240000
 800bcb0:	401c0000 	.word	0x401c0000
 800bcb4:	40140000 	.word	0x40140000
 800bcb8:	3fe00000 	.word	0x3fe00000
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f7f4 fca2 	bl	8000608 <__aeabi_dmul>
 800bcc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bcc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bcca:	4656      	mov	r6, sl
 800bccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcd0:	f7f4 ff4a 	bl	8000b68 <__aeabi_d2iz>
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	f7f4 fc2d 	bl	8000534 <__aeabi_i2d>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bce2:	f7f4 fad9 	bl	8000298 <__aeabi_dsub>
 800bce6:	3530      	adds	r5, #48	@ 0x30
 800bce8:	f806 5b01 	strb.w	r5, [r6], #1
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	42a6      	cmp	r6, r4
 800bcf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcf6:	f04f 0200 	mov.w	r2, #0
 800bcfa:	d124      	bne.n	800bd46 <_dtoa_r+0x626>
 800bcfc:	4baf      	ldr	r3, [pc, #700]	@ (800bfbc <_dtoa_r+0x89c>)
 800bcfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bd02:	f7f4 facb 	bl	800029c <__adddf3>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd0e:	f7f4 ff0b 	bl	8000b28 <__aeabi_dcmpgt>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d163      	bne.n	800bdde <_dtoa_r+0x6be>
 800bd16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd1a:	49a8      	ldr	r1, [pc, #672]	@ (800bfbc <_dtoa_r+0x89c>)
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	f7f4 fabb 	bl	8000298 <__aeabi_dsub>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd2a:	f7f4 fedf 	bl	8000aec <__aeabi_dcmplt>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	f43f af14 	beq.w	800bb5c <_dtoa_r+0x43c>
 800bd34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bd36:	1e73      	subs	r3, r6, #1
 800bd38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd3e:	2b30      	cmp	r3, #48	@ 0x30
 800bd40:	d0f8      	beq.n	800bd34 <_dtoa_r+0x614>
 800bd42:	4647      	mov	r7, r8
 800bd44:	e03b      	b.n	800bdbe <_dtoa_r+0x69e>
 800bd46:	4b9e      	ldr	r3, [pc, #632]	@ (800bfc0 <_dtoa_r+0x8a0>)
 800bd48:	f7f4 fc5e 	bl	8000608 <__aeabi_dmul>
 800bd4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd50:	e7bc      	b.n	800bccc <_dtoa_r+0x5ac>
 800bd52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bd56:	4656      	mov	r6, sl
 800bd58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fd7c 	bl	800085c <__aeabi_ddiv>
 800bd64:	f7f4 ff00 	bl	8000b68 <__aeabi_d2iz>
 800bd68:	4680      	mov	r8, r0
 800bd6a:	f7f4 fbe3 	bl	8000534 <__aeabi_i2d>
 800bd6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd72:	f7f4 fc49 	bl	8000608 <__aeabi_dmul>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd82:	f7f4 fa89 	bl	8000298 <__aeabi_dsub>
 800bd86:	f806 4b01 	strb.w	r4, [r6], #1
 800bd8a:	9d03      	ldr	r5, [sp, #12]
 800bd8c:	eba6 040a 	sub.w	r4, r6, sl
 800bd90:	42a5      	cmp	r5, r4
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	d133      	bne.n	800be00 <_dtoa_r+0x6e0>
 800bd98:	f7f4 fa80 	bl	800029c <__adddf3>
 800bd9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bda0:	4604      	mov	r4, r0
 800bda2:	460d      	mov	r5, r1
 800bda4:	f7f4 fec0 	bl	8000b28 <__aeabi_dcmpgt>
 800bda8:	b9c0      	cbnz	r0, 800bddc <_dtoa_r+0x6bc>
 800bdaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	f7f4 fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdb6:	b110      	cbz	r0, 800bdbe <_dtoa_r+0x69e>
 800bdb8:	f018 0f01 	tst.w	r8, #1
 800bdbc:	d10e      	bne.n	800bddc <_dtoa_r+0x6bc>
 800bdbe:	9902      	ldr	r1, [sp, #8]
 800bdc0:	4648      	mov	r0, r9
 800bdc2:	f000 fbbd 	bl	800c540 <_Bfree>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	7033      	strb	r3, [r6, #0]
 800bdca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdcc:	3701      	adds	r7, #1
 800bdce:	601f      	str	r7, [r3, #0]
 800bdd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 824b 	beq.w	800c26e <_dtoa_r+0xb4e>
 800bdd8:	601e      	str	r6, [r3, #0]
 800bdda:	e248      	b.n	800c26e <_dtoa_r+0xb4e>
 800bddc:	46b8      	mov	r8, r7
 800bdde:	4633      	mov	r3, r6
 800bde0:	461e      	mov	r6, r3
 800bde2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bde6:	2a39      	cmp	r2, #57	@ 0x39
 800bde8:	d106      	bne.n	800bdf8 <_dtoa_r+0x6d8>
 800bdea:	459a      	cmp	sl, r3
 800bdec:	d1f8      	bne.n	800bde0 <_dtoa_r+0x6c0>
 800bdee:	2230      	movs	r2, #48	@ 0x30
 800bdf0:	f108 0801 	add.w	r8, r8, #1
 800bdf4:	f88a 2000 	strb.w	r2, [sl]
 800bdf8:	781a      	ldrb	r2, [r3, #0]
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	e7a0      	b.n	800bd42 <_dtoa_r+0x622>
 800be00:	4b6f      	ldr	r3, [pc, #444]	@ (800bfc0 <_dtoa_r+0x8a0>)
 800be02:	2200      	movs	r2, #0
 800be04:	f7f4 fc00 	bl	8000608 <__aeabi_dmul>
 800be08:	2200      	movs	r2, #0
 800be0a:	2300      	movs	r3, #0
 800be0c:	4604      	mov	r4, r0
 800be0e:	460d      	mov	r5, r1
 800be10:	f7f4 fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 800be14:	2800      	cmp	r0, #0
 800be16:	d09f      	beq.n	800bd58 <_dtoa_r+0x638>
 800be18:	e7d1      	b.n	800bdbe <_dtoa_r+0x69e>
 800be1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be1c:	2a00      	cmp	r2, #0
 800be1e:	f000 80ea 	beq.w	800bff6 <_dtoa_r+0x8d6>
 800be22:	9a07      	ldr	r2, [sp, #28]
 800be24:	2a01      	cmp	r2, #1
 800be26:	f300 80cd 	bgt.w	800bfc4 <_dtoa_r+0x8a4>
 800be2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800be2c:	2a00      	cmp	r2, #0
 800be2e:	f000 80c1 	beq.w	800bfb4 <_dtoa_r+0x894>
 800be32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be36:	9c08      	ldr	r4, [sp, #32]
 800be38:	9e00      	ldr	r6, [sp, #0]
 800be3a:	9a00      	ldr	r2, [sp, #0]
 800be3c:	441a      	add	r2, r3
 800be3e:	9200      	str	r2, [sp, #0]
 800be40:	9a06      	ldr	r2, [sp, #24]
 800be42:	2101      	movs	r1, #1
 800be44:	441a      	add	r2, r3
 800be46:	4648      	mov	r0, r9
 800be48:	9206      	str	r2, [sp, #24]
 800be4a:	f000 fc77 	bl	800c73c <__i2b>
 800be4e:	4605      	mov	r5, r0
 800be50:	b166      	cbz	r6, 800be6c <_dtoa_r+0x74c>
 800be52:	9b06      	ldr	r3, [sp, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd09      	ble.n	800be6c <_dtoa_r+0x74c>
 800be58:	42b3      	cmp	r3, r6
 800be5a:	9a00      	ldr	r2, [sp, #0]
 800be5c:	bfa8      	it	ge
 800be5e:	4633      	movge	r3, r6
 800be60:	1ad2      	subs	r2, r2, r3
 800be62:	9200      	str	r2, [sp, #0]
 800be64:	9a06      	ldr	r2, [sp, #24]
 800be66:	1af6      	subs	r6, r6, r3
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	9306      	str	r3, [sp, #24]
 800be6c:	9b08      	ldr	r3, [sp, #32]
 800be6e:	b30b      	cbz	r3, 800beb4 <_dtoa_r+0x794>
 800be70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be72:	2b00      	cmp	r3, #0
 800be74:	f000 80c6 	beq.w	800c004 <_dtoa_r+0x8e4>
 800be78:	2c00      	cmp	r4, #0
 800be7a:	f000 80c0 	beq.w	800bffe <_dtoa_r+0x8de>
 800be7e:	4629      	mov	r1, r5
 800be80:	4622      	mov	r2, r4
 800be82:	4648      	mov	r0, r9
 800be84:	f000 fd12 	bl	800c8ac <__pow5mult>
 800be88:	9a02      	ldr	r2, [sp, #8]
 800be8a:	4601      	mov	r1, r0
 800be8c:	4605      	mov	r5, r0
 800be8e:	4648      	mov	r0, r9
 800be90:	f000 fc6a 	bl	800c768 <__multiply>
 800be94:	9902      	ldr	r1, [sp, #8]
 800be96:	4680      	mov	r8, r0
 800be98:	4648      	mov	r0, r9
 800be9a:	f000 fb51 	bl	800c540 <_Bfree>
 800be9e:	9b08      	ldr	r3, [sp, #32]
 800bea0:	1b1b      	subs	r3, r3, r4
 800bea2:	9308      	str	r3, [sp, #32]
 800bea4:	f000 80b1 	beq.w	800c00a <_dtoa_r+0x8ea>
 800bea8:	9a08      	ldr	r2, [sp, #32]
 800beaa:	4641      	mov	r1, r8
 800beac:	4648      	mov	r0, r9
 800beae:	f000 fcfd 	bl	800c8ac <__pow5mult>
 800beb2:	9002      	str	r0, [sp, #8]
 800beb4:	2101      	movs	r1, #1
 800beb6:	4648      	mov	r0, r9
 800beb8:	f000 fc40 	bl	800c73c <__i2b>
 800bebc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bebe:	4604      	mov	r4, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 81d8 	beq.w	800c276 <_dtoa_r+0xb56>
 800bec6:	461a      	mov	r2, r3
 800bec8:	4601      	mov	r1, r0
 800beca:	4648      	mov	r0, r9
 800becc:	f000 fcee 	bl	800c8ac <__pow5mult>
 800bed0:	9b07      	ldr	r3, [sp, #28]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	4604      	mov	r4, r0
 800bed6:	f300 809f 	bgt.w	800c018 <_dtoa_r+0x8f8>
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f040 8097 	bne.w	800c010 <_dtoa_r+0x8f0>
 800bee2:	9b05      	ldr	r3, [sp, #20]
 800bee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 8093 	bne.w	800c014 <_dtoa_r+0x8f4>
 800beee:	9b05      	ldr	r3, [sp, #20]
 800bef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bef4:	0d1b      	lsrs	r3, r3, #20
 800bef6:	051b      	lsls	r3, r3, #20
 800bef8:	b133      	cbz	r3, 800bf08 <_dtoa_r+0x7e8>
 800befa:	9b00      	ldr	r3, [sp, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	9b06      	ldr	r3, [sp, #24]
 800bf02:	3301      	adds	r3, #1
 800bf04:	9306      	str	r3, [sp, #24]
 800bf06:	2301      	movs	r3, #1
 800bf08:	9308      	str	r3, [sp, #32]
 800bf0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 81b8 	beq.w	800c282 <_dtoa_r+0xb62>
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf18:	6918      	ldr	r0, [r3, #16]
 800bf1a:	f000 fbc3 	bl	800c6a4 <__hi0bits>
 800bf1e:	f1c0 0020 	rsb	r0, r0, #32
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	4418      	add	r0, r3
 800bf26:	f010 001f 	ands.w	r0, r0, #31
 800bf2a:	f000 8082 	beq.w	800c032 <_dtoa_r+0x912>
 800bf2e:	f1c0 0320 	rsb	r3, r0, #32
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	dd73      	ble.n	800c01e <_dtoa_r+0x8fe>
 800bf36:	9b00      	ldr	r3, [sp, #0]
 800bf38:	f1c0 001c 	rsb	r0, r0, #28
 800bf3c:	4403      	add	r3, r0
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	9b06      	ldr	r3, [sp, #24]
 800bf42:	4403      	add	r3, r0
 800bf44:	4406      	add	r6, r0
 800bf46:	9306      	str	r3, [sp, #24]
 800bf48:	9b00      	ldr	r3, [sp, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	dd05      	ble.n	800bf5a <_dtoa_r+0x83a>
 800bf4e:	9902      	ldr	r1, [sp, #8]
 800bf50:	461a      	mov	r2, r3
 800bf52:	4648      	mov	r0, r9
 800bf54:	f000 fd04 	bl	800c960 <__lshift>
 800bf58:	9002      	str	r0, [sp, #8]
 800bf5a:	9b06      	ldr	r3, [sp, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dd05      	ble.n	800bf6c <_dtoa_r+0x84c>
 800bf60:	4621      	mov	r1, r4
 800bf62:	461a      	mov	r2, r3
 800bf64:	4648      	mov	r0, r9
 800bf66:	f000 fcfb 	bl	800c960 <__lshift>
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d061      	beq.n	800c036 <_dtoa_r+0x916>
 800bf72:	9802      	ldr	r0, [sp, #8]
 800bf74:	4621      	mov	r1, r4
 800bf76:	f000 fd5f 	bl	800ca38 <__mcmp>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	da5b      	bge.n	800c036 <_dtoa_r+0x916>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	9902      	ldr	r1, [sp, #8]
 800bf82:	220a      	movs	r2, #10
 800bf84:	4648      	mov	r0, r9
 800bf86:	f000 fafd 	bl	800c584 <__multadd>
 800bf8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf8c:	9002      	str	r0, [sp, #8]
 800bf8e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 8177 	beq.w	800c286 <_dtoa_r+0xb66>
 800bf98:	4629      	mov	r1, r5
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	220a      	movs	r2, #10
 800bf9e:	4648      	mov	r0, r9
 800bfa0:	f000 faf0 	bl	800c584 <__multadd>
 800bfa4:	f1bb 0f00 	cmp.w	fp, #0
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	dc6f      	bgt.n	800c08c <_dtoa_r+0x96c>
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	dc49      	bgt.n	800c046 <_dtoa_r+0x926>
 800bfb2:	e06b      	b.n	800c08c <_dtoa_r+0x96c>
 800bfb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bfb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bfba:	e73c      	b.n	800be36 <_dtoa_r+0x716>
 800bfbc:	3fe00000 	.word	0x3fe00000
 800bfc0:	40240000 	.word	0x40240000
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	1e5c      	subs	r4, r3, #1
 800bfc8:	9b08      	ldr	r3, [sp, #32]
 800bfca:	42a3      	cmp	r3, r4
 800bfcc:	db09      	blt.n	800bfe2 <_dtoa_r+0x8c2>
 800bfce:	1b1c      	subs	r4, r3, r4
 800bfd0:	9b03      	ldr	r3, [sp, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f6bf af30 	bge.w	800be38 <_dtoa_r+0x718>
 800bfd8:	9b00      	ldr	r3, [sp, #0]
 800bfda:	9a03      	ldr	r2, [sp, #12]
 800bfdc:	1a9e      	subs	r6, r3, r2
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e72b      	b.n	800be3a <_dtoa_r+0x71a>
 800bfe2:	9b08      	ldr	r3, [sp, #32]
 800bfe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bfe6:	9408      	str	r4, [sp, #32]
 800bfe8:	1ae3      	subs	r3, r4, r3
 800bfea:	441a      	add	r2, r3
 800bfec:	9e00      	ldr	r6, [sp, #0]
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	920d      	str	r2, [sp, #52]	@ 0x34
 800bff2:	2400      	movs	r4, #0
 800bff4:	e721      	b.n	800be3a <_dtoa_r+0x71a>
 800bff6:	9c08      	ldr	r4, [sp, #32]
 800bff8:	9e00      	ldr	r6, [sp, #0]
 800bffa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bffc:	e728      	b.n	800be50 <_dtoa_r+0x730>
 800bffe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c002:	e751      	b.n	800bea8 <_dtoa_r+0x788>
 800c004:	9a08      	ldr	r2, [sp, #32]
 800c006:	9902      	ldr	r1, [sp, #8]
 800c008:	e750      	b.n	800beac <_dtoa_r+0x78c>
 800c00a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c00e:	e751      	b.n	800beb4 <_dtoa_r+0x794>
 800c010:	2300      	movs	r3, #0
 800c012:	e779      	b.n	800bf08 <_dtoa_r+0x7e8>
 800c014:	9b04      	ldr	r3, [sp, #16]
 800c016:	e777      	b.n	800bf08 <_dtoa_r+0x7e8>
 800c018:	2300      	movs	r3, #0
 800c01a:	9308      	str	r3, [sp, #32]
 800c01c:	e779      	b.n	800bf12 <_dtoa_r+0x7f2>
 800c01e:	d093      	beq.n	800bf48 <_dtoa_r+0x828>
 800c020:	9a00      	ldr	r2, [sp, #0]
 800c022:	331c      	adds	r3, #28
 800c024:	441a      	add	r2, r3
 800c026:	9200      	str	r2, [sp, #0]
 800c028:	9a06      	ldr	r2, [sp, #24]
 800c02a:	441a      	add	r2, r3
 800c02c:	441e      	add	r6, r3
 800c02e:	9206      	str	r2, [sp, #24]
 800c030:	e78a      	b.n	800bf48 <_dtoa_r+0x828>
 800c032:	4603      	mov	r3, r0
 800c034:	e7f4      	b.n	800c020 <_dtoa_r+0x900>
 800c036:	9b03      	ldr	r3, [sp, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	46b8      	mov	r8, r7
 800c03c:	dc20      	bgt.n	800c080 <_dtoa_r+0x960>
 800c03e:	469b      	mov	fp, r3
 800c040:	9b07      	ldr	r3, [sp, #28]
 800c042:	2b02      	cmp	r3, #2
 800c044:	dd1e      	ble.n	800c084 <_dtoa_r+0x964>
 800c046:	f1bb 0f00 	cmp.w	fp, #0
 800c04a:	f47f adb1 	bne.w	800bbb0 <_dtoa_r+0x490>
 800c04e:	4621      	mov	r1, r4
 800c050:	465b      	mov	r3, fp
 800c052:	2205      	movs	r2, #5
 800c054:	4648      	mov	r0, r9
 800c056:	f000 fa95 	bl	800c584 <__multadd>
 800c05a:	4601      	mov	r1, r0
 800c05c:	4604      	mov	r4, r0
 800c05e:	9802      	ldr	r0, [sp, #8]
 800c060:	f000 fcea 	bl	800ca38 <__mcmp>
 800c064:	2800      	cmp	r0, #0
 800c066:	f77f ada3 	ble.w	800bbb0 <_dtoa_r+0x490>
 800c06a:	4656      	mov	r6, sl
 800c06c:	2331      	movs	r3, #49	@ 0x31
 800c06e:	f806 3b01 	strb.w	r3, [r6], #1
 800c072:	f108 0801 	add.w	r8, r8, #1
 800c076:	e59f      	b.n	800bbb8 <_dtoa_r+0x498>
 800c078:	9c03      	ldr	r4, [sp, #12]
 800c07a:	46b8      	mov	r8, r7
 800c07c:	4625      	mov	r5, r4
 800c07e:	e7f4      	b.n	800c06a <_dtoa_r+0x94a>
 800c080:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 8101 	beq.w	800c28e <_dtoa_r+0xb6e>
 800c08c:	2e00      	cmp	r6, #0
 800c08e:	dd05      	ble.n	800c09c <_dtoa_r+0x97c>
 800c090:	4629      	mov	r1, r5
 800c092:	4632      	mov	r2, r6
 800c094:	4648      	mov	r0, r9
 800c096:	f000 fc63 	bl	800c960 <__lshift>
 800c09a:	4605      	mov	r5, r0
 800c09c:	9b08      	ldr	r3, [sp, #32]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d05c      	beq.n	800c15c <_dtoa_r+0xa3c>
 800c0a2:	6869      	ldr	r1, [r5, #4]
 800c0a4:	4648      	mov	r0, r9
 800c0a6:	f000 fa0b 	bl	800c4c0 <_Balloc>
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	b928      	cbnz	r0, 800c0ba <_dtoa_r+0x99a>
 800c0ae:	4b82      	ldr	r3, [pc, #520]	@ (800c2b8 <_dtoa_r+0xb98>)
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c0b6:	f7ff bb4a 	b.w	800b74e <_dtoa_r+0x2e>
 800c0ba:	692a      	ldr	r2, [r5, #16]
 800c0bc:	3202      	adds	r2, #2
 800c0be:	0092      	lsls	r2, r2, #2
 800c0c0:	f105 010c 	add.w	r1, r5, #12
 800c0c4:	300c      	adds	r0, #12
 800c0c6:	f7ff fa8c 	bl	800b5e2 <memcpy>
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	4631      	mov	r1, r6
 800c0ce:	4648      	mov	r0, r9
 800c0d0:	f000 fc46 	bl	800c960 <__lshift>
 800c0d4:	f10a 0301 	add.w	r3, sl, #1
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	eb0a 030b 	add.w	r3, sl, fp
 800c0de:	9308      	str	r3, [sp, #32]
 800c0e0:	9b04      	ldr	r3, [sp, #16]
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	462f      	mov	r7, r5
 800c0e8:	9306      	str	r3, [sp, #24]
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	9802      	ldr	r0, [sp, #8]
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c0f6:	f7ff fa89 	bl	800b60c <quorem>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	3330      	adds	r3, #48	@ 0x30
 800c0fe:	9003      	str	r0, [sp, #12]
 800c100:	4639      	mov	r1, r7
 800c102:	9802      	ldr	r0, [sp, #8]
 800c104:	9309      	str	r3, [sp, #36]	@ 0x24
 800c106:	f000 fc97 	bl	800ca38 <__mcmp>
 800c10a:	462a      	mov	r2, r5
 800c10c:	9004      	str	r0, [sp, #16]
 800c10e:	4621      	mov	r1, r4
 800c110:	4648      	mov	r0, r9
 800c112:	f000 fcad 	bl	800ca70 <__mdiff>
 800c116:	68c2      	ldr	r2, [r0, #12]
 800c118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c11a:	4606      	mov	r6, r0
 800c11c:	bb02      	cbnz	r2, 800c160 <_dtoa_r+0xa40>
 800c11e:	4601      	mov	r1, r0
 800c120:	9802      	ldr	r0, [sp, #8]
 800c122:	f000 fc89 	bl	800ca38 <__mcmp>
 800c126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c128:	4602      	mov	r2, r0
 800c12a:	4631      	mov	r1, r6
 800c12c:	4648      	mov	r0, r9
 800c12e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c130:	9309      	str	r3, [sp, #36]	@ 0x24
 800c132:	f000 fa05 	bl	800c540 <_Bfree>
 800c136:	9b07      	ldr	r3, [sp, #28]
 800c138:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c13a:	9e00      	ldr	r6, [sp, #0]
 800c13c:	ea42 0103 	orr.w	r1, r2, r3
 800c140:	9b06      	ldr	r3, [sp, #24]
 800c142:	4319      	orrs	r1, r3
 800c144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c146:	d10d      	bne.n	800c164 <_dtoa_r+0xa44>
 800c148:	2b39      	cmp	r3, #57	@ 0x39
 800c14a:	d027      	beq.n	800c19c <_dtoa_r+0xa7c>
 800c14c:	9a04      	ldr	r2, [sp, #16]
 800c14e:	2a00      	cmp	r2, #0
 800c150:	dd01      	ble.n	800c156 <_dtoa_r+0xa36>
 800c152:	9b03      	ldr	r3, [sp, #12]
 800c154:	3331      	adds	r3, #49	@ 0x31
 800c156:	f88b 3000 	strb.w	r3, [fp]
 800c15a:	e52e      	b.n	800bbba <_dtoa_r+0x49a>
 800c15c:	4628      	mov	r0, r5
 800c15e:	e7b9      	b.n	800c0d4 <_dtoa_r+0x9b4>
 800c160:	2201      	movs	r2, #1
 800c162:	e7e2      	b.n	800c12a <_dtoa_r+0xa0a>
 800c164:	9904      	ldr	r1, [sp, #16]
 800c166:	2900      	cmp	r1, #0
 800c168:	db04      	blt.n	800c174 <_dtoa_r+0xa54>
 800c16a:	9807      	ldr	r0, [sp, #28]
 800c16c:	4301      	orrs	r1, r0
 800c16e:	9806      	ldr	r0, [sp, #24]
 800c170:	4301      	orrs	r1, r0
 800c172:	d120      	bne.n	800c1b6 <_dtoa_r+0xa96>
 800c174:	2a00      	cmp	r2, #0
 800c176:	ddee      	ble.n	800c156 <_dtoa_r+0xa36>
 800c178:	9902      	ldr	r1, [sp, #8]
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	2201      	movs	r2, #1
 800c17e:	4648      	mov	r0, r9
 800c180:	f000 fbee 	bl	800c960 <__lshift>
 800c184:	4621      	mov	r1, r4
 800c186:	9002      	str	r0, [sp, #8]
 800c188:	f000 fc56 	bl	800ca38 <__mcmp>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	9b00      	ldr	r3, [sp, #0]
 800c190:	dc02      	bgt.n	800c198 <_dtoa_r+0xa78>
 800c192:	d1e0      	bne.n	800c156 <_dtoa_r+0xa36>
 800c194:	07da      	lsls	r2, r3, #31
 800c196:	d5de      	bpl.n	800c156 <_dtoa_r+0xa36>
 800c198:	2b39      	cmp	r3, #57	@ 0x39
 800c19a:	d1da      	bne.n	800c152 <_dtoa_r+0xa32>
 800c19c:	2339      	movs	r3, #57	@ 0x39
 800c19e:	f88b 3000 	strb.w	r3, [fp]
 800c1a2:	4633      	mov	r3, r6
 800c1a4:	461e      	mov	r6, r3
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1ac:	2a39      	cmp	r2, #57	@ 0x39
 800c1ae:	d04e      	beq.n	800c24e <_dtoa_r+0xb2e>
 800c1b0:	3201      	adds	r2, #1
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	e501      	b.n	800bbba <_dtoa_r+0x49a>
 800c1b6:	2a00      	cmp	r2, #0
 800c1b8:	dd03      	ble.n	800c1c2 <_dtoa_r+0xaa2>
 800c1ba:	2b39      	cmp	r3, #57	@ 0x39
 800c1bc:	d0ee      	beq.n	800c19c <_dtoa_r+0xa7c>
 800c1be:	3301      	adds	r3, #1
 800c1c0:	e7c9      	b.n	800c156 <_dtoa_r+0xa36>
 800c1c2:	9a00      	ldr	r2, [sp, #0]
 800c1c4:	9908      	ldr	r1, [sp, #32]
 800c1c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c1ca:	428a      	cmp	r2, r1
 800c1cc:	d028      	beq.n	800c220 <_dtoa_r+0xb00>
 800c1ce:	9902      	ldr	r1, [sp, #8]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	220a      	movs	r2, #10
 800c1d4:	4648      	mov	r0, r9
 800c1d6:	f000 f9d5 	bl	800c584 <__multadd>
 800c1da:	42af      	cmp	r7, r5
 800c1dc:	9002      	str	r0, [sp, #8]
 800c1de:	f04f 0300 	mov.w	r3, #0
 800c1e2:	f04f 020a 	mov.w	r2, #10
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	4648      	mov	r0, r9
 800c1ea:	d107      	bne.n	800c1fc <_dtoa_r+0xadc>
 800c1ec:	f000 f9ca 	bl	800c584 <__multadd>
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	9b00      	ldr	r3, [sp, #0]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	e777      	b.n	800c0ec <_dtoa_r+0x9cc>
 800c1fc:	f000 f9c2 	bl	800c584 <__multadd>
 800c200:	4629      	mov	r1, r5
 800c202:	4607      	mov	r7, r0
 800c204:	2300      	movs	r3, #0
 800c206:	220a      	movs	r2, #10
 800c208:	4648      	mov	r0, r9
 800c20a:	f000 f9bb 	bl	800c584 <__multadd>
 800c20e:	4605      	mov	r5, r0
 800c210:	e7f0      	b.n	800c1f4 <_dtoa_r+0xad4>
 800c212:	f1bb 0f00 	cmp.w	fp, #0
 800c216:	bfcc      	ite	gt
 800c218:	465e      	movgt	r6, fp
 800c21a:	2601      	movle	r6, #1
 800c21c:	4456      	add	r6, sl
 800c21e:	2700      	movs	r7, #0
 800c220:	9902      	ldr	r1, [sp, #8]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	2201      	movs	r2, #1
 800c226:	4648      	mov	r0, r9
 800c228:	f000 fb9a 	bl	800c960 <__lshift>
 800c22c:	4621      	mov	r1, r4
 800c22e:	9002      	str	r0, [sp, #8]
 800c230:	f000 fc02 	bl	800ca38 <__mcmp>
 800c234:	2800      	cmp	r0, #0
 800c236:	dcb4      	bgt.n	800c1a2 <_dtoa_r+0xa82>
 800c238:	d102      	bne.n	800c240 <_dtoa_r+0xb20>
 800c23a:	9b00      	ldr	r3, [sp, #0]
 800c23c:	07db      	lsls	r3, r3, #31
 800c23e:	d4b0      	bmi.n	800c1a2 <_dtoa_r+0xa82>
 800c240:	4633      	mov	r3, r6
 800c242:	461e      	mov	r6, r3
 800c244:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c248:	2a30      	cmp	r2, #48	@ 0x30
 800c24a:	d0fa      	beq.n	800c242 <_dtoa_r+0xb22>
 800c24c:	e4b5      	b.n	800bbba <_dtoa_r+0x49a>
 800c24e:	459a      	cmp	sl, r3
 800c250:	d1a8      	bne.n	800c1a4 <_dtoa_r+0xa84>
 800c252:	2331      	movs	r3, #49	@ 0x31
 800c254:	f108 0801 	add.w	r8, r8, #1
 800c258:	f88a 3000 	strb.w	r3, [sl]
 800c25c:	e4ad      	b.n	800bbba <_dtoa_r+0x49a>
 800c25e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c260:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c2bc <_dtoa_r+0xb9c>
 800c264:	b11b      	cbz	r3, 800c26e <_dtoa_r+0xb4e>
 800c266:	f10a 0308 	add.w	r3, sl, #8
 800c26a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c26c:	6013      	str	r3, [r2, #0]
 800c26e:	4650      	mov	r0, sl
 800c270:	b017      	add	sp, #92	@ 0x5c
 800c272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c276:	9b07      	ldr	r3, [sp, #28]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	f77f ae2e 	ble.w	800beda <_dtoa_r+0x7ba>
 800c27e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c280:	9308      	str	r3, [sp, #32]
 800c282:	2001      	movs	r0, #1
 800c284:	e64d      	b.n	800bf22 <_dtoa_r+0x802>
 800c286:	f1bb 0f00 	cmp.w	fp, #0
 800c28a:	f77f aed9 	ble.w	800c040 <_dtoa_r+0x920>
 800c28e:	4656      	mov	r6, sl
 800c290:	9802      	ldr	r0, [sp, #8]
 800c292:	4621      	mov	r1, r4
 800c294:	f7ff f9ba 	bl	800b60c <quorem>
 800c298:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c29c:	f806 3b01 	strb.w	r3, [r6], #1
 800c2a0:	eba6 020a 	sub.w	r2, r6, sl
 800c2a4:	4593      	cmp	fp, r2
 800c2a6:	ddb4      	ble.n	800c212 <_dtoa_r+0xaf2>
 800c2a8:	9902      	ldr	r1, [sp, #8]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	4648      	mov	r0, r9
 800c2b0:	f000 f968 	bl	800c584 <__multadd>
 800c2b4:	9002      	str	r0, [sp, #8]
 800c2b6:	e7eb      	b.n	800c290 <_dtoa_r+0xb70>
 800c2b8:	0800ede9 	.word	0x0800ede9
 800c2bc:	0800ed6d 	.word	0x0800ed6d

0800c2c0 <_free_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	d041      	beq.n	800c34c <_free_r+0x8c>
 800c2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2cc:	1f0c      	subs	r4, r1, #4
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfb8      	it	lt
 800c2d2:	18e4      	addlt	r4, r4, r3
 800c2d4:	f000 f8e8 	bl	800c4a8 <__malloc_lock>
 800c2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c350 <_free_r+0x90>)
 800c2da:	6813      	ldr	r3, [r2, #0]
 800c2dc:	b933      	cbnz	r3, 800c2ec <_free_r+0x2c>
 800c2de:	6063      	str	r3, [r4, #4]
 800c2e0:	6014      	str	r4, [r2, #0]
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e8:	f000 b8e4 	b.w	800c4b4 <__malloc_unlock>
 800c2ec:	42a3      	cmp	r3, r4
 800c2ee:	d908      	bls.n	800c302 <_free_r+0x42>
 800c2f0:	6820      	ldr	r0, [r4, #0]
 800c2f2:	1821      	adds	r1, r4, r0
 800c2f4:	428b      	cmp	r3, r1
 800c2f6:	bf01      	itttt	eq
 800c2f8:	6819      	ldreq	r1, [r3, #0]
 800c2fa:	685b      	ldreq	r3, [r3, #4]
 800c2fc:	1809      	addeq	r1, r1, r0
 800c2fe:	6021      	streq	r1, [r4, #0]
 800c300:	e7ed      	b.n	800c2de <_free_r+0x1e>
 800c302:	461a      	mov	r2, r3
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	b10b      	cbz	r3, 800c30c <_free_r+0x4c>
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d9fa      	bls.n	800c302 <_free_r+0x42>
 800c30c:	6811      	ldr	r1, [r2, #0]
 800c30e:	1850      	adds	r0, r2, r1
 800c310:	42a0      	cmp	r0, r4
 800c312:	d10b      	bne.n	800c32c <_free_r+0x6c>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	4401      	add	r1, r0
 800c318:	1850      	adds	r0, r2, r1
 800c31a:	4283      	cmp	r3, r0
 800c31c:	6011      	str	r1, [r2, #0]
 800c31e:	d1e0      	bne.n	800c2e2 <_free_r+0x22>
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	6053      	str	r3, [r2, #4]
 800c326:	4408      	add	r0, r1
 800c328:	6010      	str	r0, [r2, #0]
 800c32a:	e7da      	b.n	800c2e2 <_free_r+0x22>
 800c32c:	d902      	bls.n	800c334 <_free_r+0x74>
 800c32e:	230c      	movs	r3, #12
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	e7d6      	b.n	800c2e2 <_free_r+0x22>
 800c334:	6820      	ldr	r0, [r4, #0]
 800c336:	1821      	adds	r1, r4, r0
 800c338:	428b      	cmp	r3, r1
 800c33a:	bf04      	itt	eq
 800c33c:	6819      	ldreq	r1, [r3, #0]
 800c33e:	685b      	ldreq	r3, [r3, #4]
 800c340:	6063      	str	r3, [r4, #4]
 800c342:	bf04      	itt	eq
 800c344:	1809      	addeq	r1, r1, r0
 800c346:	6021      	streq	r1, [r4, #0]
 800c348:	6054      	str	r4, [r2, #4]
 800c34a:	e7ca      	b.n	800c2e2 <_free_r+0x22>
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	bf00      	nop
 800c350:	200021d8 	.word	0x200021d8

0800c354 <malloc>:
 800c354:	4b02      	ldr	r3, [pc, #8]	@ (800c360 <malloc+0xc>)
 800c356:	4601      	mov	r1, r0
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	f000 b825 	b.w	800c3a8 <_malloc_r>
 800c35e:	bf00      	nop
 800c360:	20000130 	.word	0x20000130

0800c364 <sbrk_aligned>:
 800c364:	b570      	push	{r4, r5, r6, lr}
 800c366:	4e0f      	ldr	r6, [pc, #60]	@ (800c3a4 <sbrk_aligned+0x40>)
 800c368:	460c      	mov	r4, r1
 800c36a:	6831      	ldr	r1, [r6, #0]
 800c36c:	4605      	mov	r5, r0
 800c36e:	b911      	cbnz	r1, 800c376 <sbrk_aligned+0x12>
 800c370:	f001 fdea 	bl	800df48 <_sbrk_r>
 800c374:	6030      	str	r0, [r6, #0]
 800c376:	4621      	mov	r1, r4
 800c378:	4628      	mov	r0, r5
 800c37a:	f001 fde5 	bl	800df48 <_sbrk_r>
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	d103      	bne.n	800c38a <sbrk_aligned+0x26>
 800c382:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c386:	4620      	mov	r0, r4
 800c388:	bd70      	pop	{r4, r5, r6, pc}
 800c38a:	1cc4      	adds	r4, r0, #3
 800c38c:	f024 0403 	bic.w	r4, r4, #3
 800c390:	42a0      	cmp	r0, r4
 800c392:	d0f8      	beq.n	800c386 <sbrk_aligned+0x22>
 800c394:	1a21      	subs	r1, r4, r0
 800c396:	4628      	mov	r0, r5
 800c398:	f001 fdd6 	bl	800df48 <_sbrk_r>
 800c39c:	3001      	adds	r0, #1
 800c39e:	d1f2      	bne.n	800c386 <sbrk_aligned+0x22>
 800c3a0:	e7ef      	b.n	800c382 <sbrk_aligned+0x1e>
 800c3a2:	bf00      	nop
 800c3a4:	200021d4 	.word	0x200021d4

0800c3a8 <_malloc_r>:
 800c3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ac:	1ccd      	adds	r5, r1, #3
 800c3ae:	f025 0503 	bic.w	r5, r5, #3
 800c3b2:	3508      	adds	r5, #8
 800c3b4:	2d0c      	cmp	r5, #12
 800c3b6:	bf38      	it	cc
 800c3b8:	250c      	movcc	r5, #12
 800c3ba:	2d00      	cmp	r5, #0
 800c3bc:	4606      	mov	r6, r0
 800c3be:	db01      	blt.n	800c3c4 <_malloc_r+0x1c>
 800c3c0:	42a9      	cmp	r1, r5
 800c3c2:	d904      	bls.n	800c3ce <_malloc_r+0x26>
 800c3c4:	230c      	movs	r3, #12
 800c3c6:	6033      	str	r3, [r6, #0]
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4a4 <_malloc_r+0xfc>
 800c3d2:	f000 f869 	bl	800c4a8 <__malloc_lock>
 800c3d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c3da:	461c      	mov	r4, r3
 800c3dc:	bb44      	cbnz	r4, 800c430 <_malloc_r+0x88>
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f7ff ffbf 	bl	800c364 <sbrk_aligned>
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	d158      	bne.n	800c49e <_malloc_r+0xf6>
 800c3ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c3f0:	4627      	mov	r7, r4
 800c3f2:	2f00      	cmp	r7, #0
 800c3f4:	d143      	bne.n	800c47e <_malloc_r+0xd6>
 800c3f6:	2c00      	cmp	r4, #0
 800c3f8:	d04b      	beq.n	800c492 <_malloc_r+0xea>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	4630      	mov	r0, r6
 800c400:	eb04 0903 	add.w	r9, r4, r3
 800c404:	f001 fda0 	bl	800df48 <_sbrk_r>
 800c408:	4581      	cmp	r9, r0
 800c40a:	d142      	bne.n	800c492 <_malloc_r+0xea>
 800c40c:	6821      	ldr	r1, [r4, #0]
 800c40e:	1a6d      	subs	r5, r5, r1
 800c410:	4629      	mov	r1, r5
 800c412:	4630      	mov	r0, r6
 800c414:	f7ff ffa6 	bl	800c364 <sbrk_aligned>
 800c418:	3001      	adds	r0, #1
 800c41a:	d03a      	beq.n	800c492 <_malloc_r+0xea>
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	442b      	add	r3, r5
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	f8d8 3000 	ldr.w	r3, [r8]
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	bb62      	cbnz	r2, 800c484 <_malloc_r+0xdc>
 800c42a:	f8c8 7000 	str.w	r7, [r8]
 800c42e:	e00f      	b.n	800c450 <_malloc_r+0xa8>
 800c430:	6822      	ldr	r2, [r4, #0]
 800c432:	1b52      	subs	r2, r2, r5
 800c434:	d420      	bmi.n	800c478 <_malloc_r+0xd0>
 800c436:	2a0b      	cmp	r2, #11
 800c438:	d917      	bls.n	800c46a <_malloc_r+0xc2>
 800c43a:	1961      	adds	r1, r4, r5
 800c43c:	42a3      	cmp	r3, r4
 800c43e:	6025      	str	r5, [r4, #0]
 800c440:	bf18      	it	ne
 800c442:	6059      	strne	r1, [r3, #4]
 800c444:	6863      	ldr	r3, [r4, #4]
 800c446:	bf08      	it	eq
 800c448:	f8c8 1000 	streq.w	r1, [r8]
 800c44c:	5162      	str	r2, [r4, r5]
 800c44e:	604b      	str	r3, [r1, #4]
 800c450:	4630      	mov	r0, r6
 800c452:	f000 f82f 	bl	800c4b4 <__malloc_unlock>
 800c456:	f104 000b 	add.w	r0, r4, #11
 800c45a:	1d23      	adds	r3, r4, #4
 800c45c:	f020 0007 	bic.w	r0, r0, #7
 800c460:	1ac2      	subs	r2, r0, r3
 800c462:	bf1c      	itt	ne
 800c464:	1a1b      	subne	r3, r3, r0
 800c466:	50a3      	strne	r3, [r4, r2]
 800c468:	e7af      	b.n	800c3ca <_malloc_r+0x22>
 800c46a:	6862      	ldr	r2, [r4, #4]
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	bf0c      	ite	eq
 800c470:	f8c8 2000 	streq.w	r2, [r8]
 800c474:	605a      	strne	r2, [r3, #4]
 800c476:	e7eb      	b.n	800c450 <_malloc_r+0xa8>
 800c478:	4623      	mov	r3, r4
 800c47a:	6864      	ldr	r4, [r4, #4]
 800c47c:	e7ae      	b.n	800c3dc <_malloc_r+0x34>
 800c47e:	463c      	mov	r4, r7
 800c480:	687f      	ldr	r7, [r7, #4]
 800c482:	e7b6      	b.n	800c3f2 <_malloc_r+0x4a>
 800c484:	461a      	mov	r2, r3
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d1fb      	bne.n	800c484 <_malloc_r+0xdc>
 800c48c:	2300      	movs	r3, #0
 800c48e:	6053      	str	r3, [r2, #4]
 800c490:	e7de      	b.n	800c450 <_malloc_r+0xa8>
 800c492:	230c      	movs	r3, #12
 800c494:	6033      	str	r3, [r6, #0]
 800c496:	4630      	mov	r0, r6
 800c498:	f000 f80c 	bl	800c4b4 <__malloc_unlock>
 800c49c:	e794      	b.n	800c3c8 <_malloc_r+0x20>
 800c49e:	6005      	str	r5, [r0, #0]
 800c4a0:	e7d6      	b.n	800c450 <_malloc_r+0xa8>
 800c4a2:	bf00      	nop
 800c4a4:	200021d8 	.word	0x200021d8

0800c4a8 <__malloc_lock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	@ (800c4b0 <__malloc_lock+0x8>)
 800c4aa:	f7ff b898 	b.w	800b5de <__retarget_lock_acquire_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	200021d0 	.word	0x200021d0

0800c4b4 <__malloc_unlock>:
 800c4b4:	4801      	ldr	r0, [pc, #4]	@ (800c4bc <__malloc_unlock+0x8>)
 800c4b6:	f7ff b893 	b.w	800b5e0 <__retarget_lock_release_recursive>
 800c4ba:	bf00      	nop
 800c4bc:	200021d0 	.word	0x200021d0

0800c4c0 <_Balloc>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	69c6      	ldr	r6, [r0, #28]
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	b976      	cbnz	r6, 800c4e8 <_Balloc+0x28>
 800c4ca:	2010      	movs	r0, #16
 800c4cc:	f7ff ff42 	bl	800c354 <malloc>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	61e0      	str	r0, [r4, #28]
 800c4d4:	b920      	cbnz	r0, 800c4e0 <_Balloc+0x20>
 800c4d6:	4b18      	ldr	r3, [pc, #96]	@ (800c538 <_Balloc+0x78>)
 800c4d8:	4818      	ldr	r0, [pc, #96]	@ (800c53c <_Balloc+0x7c>)
 800c4da:	216b      	movs	r1, #107	@ 0x6b
 800c4dc:	f001 fd4c 	bl	800df78 <__assert_func>
 800c4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4e4:	6006      	str	r6, [r0, #0]
 800c4e6:	60c6      	str	r6, [r0, #12]
 800c4e8:	69e6      	ldr	r6, [r4, #28]
 800c4ea:	68f3      	ldr	r3, [r6, #12]
 800c4ec:	b183      	cbz	r3, 800c510 <_Balloc+0x50>
 800c4ee:	69e3      	ldr	r3, [r4, #28]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4f6:	b9b8      	cbnz	r0, 800c528 <_Balloc+0x68>
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	fa01 f605 	lsl.w	r6, r1, r5
 800c4fe:	1d72      	adds	r2, r6, #5
 800c500:	0092      	lsls	r2, r2, #2
 800c502:	4620      	mov	r0, r4
 800c504:	f001 fd56 	bl	800dfb4 <_calloc_r>
 800c508:	b160      	cbz	r0, 800c524 <_Balloc+0x64>
 800c50a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c50e:	e00e      	b.n	800c52e <_Balloc+0x6e>
 800c510:	2221      	movs	r2, #33	@ 0x21
 800c512:	2104      	movs	r1, #4
 800c514:	4620      	mov	r0, r4
 800c516:	f001 fd4d 	bl	800dfb4 <_calloc_r>
 800c51a:	69e3      	ldr	r3, [r4, #28]
 800c51c:	60f0      	str	r0, [r6, #12]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e4      	bne.n	800c4ee <_Balloc+0x2e>
 800c524:	2000      	movs	r0, #0
 800c526:	bd70      	pop	{r4, r5, r6, pc}
 800c528:	6802      	ldr	r2, [r0, #0]
 800c52a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c52e:	2300      	movs	r3, #0
 800c530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c534:	e7f7      	b.n	800c526 <_Balloc+0x66>
 800c536:	bf00      	nop
 800c538:	0800ed7a 	.word	0x0800ed7a
 800c53c:	0800edfa 	.word	0x0800edfa

0800c540 <_Bfree>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	69c6      	ldr	r6, [r0, #28]
 800c544:	4605      	mov	r5, r0
 800c546:	460c      	mov	r4, r1
 800c548:	b976      	cbnz	r6, 800c568 <_Bfree+0x28>
 800c54a:	2010      	movs	r0, #16
 800c54c:	f7ff ff02 	bl	800c354 <malloc>
 800c550:	4602      	mov	r2, r0
 800c552:	61e8      	str	r0, [r5, #28]
 800c554:	b920      	cbnz	r0, 800c560 <_Bfree+0x20>
 800c556:	4b09      	ldr	r3, [pc, #36]	@ (800c57c <_Bfree+0x3c>)
 800c558:	4809      	ldr	r0, [pc, #36]	@ (800c580 <_Bfree+0x40>)
 800c55a:	218f      	movs	r1, #143	@ 0x8f
 800c55c:	f001 fd0c 	bl	800df78 <__assert_func>
 800c560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c564:	6006      	str	r6, [r0, #0]
 800c566:	60c6      	str	r6, [r0, #12]
 800c568:	b13c      	cbz	r4, 800c57a <_Bfree+0x3a>
 800c56a:	69eb      	ldr	r3, [r5, #28]
 800c56c:	6862      	ldr	r2, [r4, #4]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c574:	6021      	str	r1, [r4, #0]
 800c576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	0800ed7a 	.word	0x0800ed7a
 800c580:	0800edfa 	.word	0x0800edfa

0800c584 <__multadd>:
 800c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c588:	690d      	ldr	r5, [r1, #16]
 800c58a:	4607      	mov	r7, r0
 800c58c:	460c      	mov	r4, r1
 800c58e:	461e      	mov	r6, r3
 800c590:	f101 0c14 	add.w	ip, r1, #20
 800c594:	2000      	movs	r0, #0
 800c596:	f8dc 3000 	ldr.w	r3, [ip]
 800c59a:	b299      	uxth	r1, r3
 800c59c:	fb02 6101 	mla	r1, r2, r1, r6
 800c5a0:	0c1e      	lsrs	r6, r3, #16
 800c5a2:	0c0b      	lsrs	r3, r1, #16
 800c5a4:	fb02 3306 	mla	r3, r2, r6, r3
 800c5a8:	b289      	uxth	r1, r1
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5b0:	4285      	cmp	r5, r0
 800c5b2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5ba:	dcec      	bgt.n	800c596 <__multadd+0x12>
 800c5bc:	b30e      	cbz	r6, 800c602 <__multadd+0x7e>
 800c5be:	68a3      	ldr	r3, [r4, #8]
 800c5c0:	42ab      	cmp	r3, r5
 800c5c2:	dc19      	bgt.n	800c5f8 <__multadd+0x74>
 800c5c4:	6861      	ldr	r1, [r4, #4]
 800c5c6:	4638      	mov	r0, r7
 800c5c8:	3101      	adds	r1, #1
 800c5ca:	f7ff ff79 	bl	800c4c0 <_Balloc>
 800c5ce:	4680      	mov	r8, r0
 800c5d0:	b928      	cbnz	r0, 800c5de <__multadd+0x5a>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c608 <__multadd+0x84>)
 800c5d6:	480d      	ldr	r0, [pc, #52]	@ (800c60c <__multadd+0x88>)
 800c5d8:	21ba      	movs	r1, #186	@ 0xba
 800c5da:	f001 fccd 	bl	800df78 <__assert_func>
 800c5de:	6922      	ldr	r2, [r4, #16]
 800c5e0:	3202      	adds	r2, #2
 800c5e2:	f104 010c 	add.w	r1, r4, #12
 800c5e6:	0092      	lsls	r2, r2, #2
 800c5e8:	300c      	adds	r0, #12
 800c5ea:	f7fe fffa 	bl	800b5e2 <memcpy>
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	4638      	mov	r0, r7
 800c5f2:	f7ff ffa5 	bl	800c540 <_Bfree>
 800c5f6:	4644      	mov	r4, r8
 800c5f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5fc:	3501      	adds	r5, #1
 800c5fe:	615e      	str	r6, [r3, #20]
 800c600:	6125      	str	r5, [r4, #16]
 800c602:	4620      	mov	r0, r4
 800c604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c608:	0800ede9 	.word	0x0800ede9
 800c60c:	0800edfa 	.word	0x0800edfa

0800c610 <__s2b>:
 800c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c614:	460c      	mov	r4, r1
 800c616:	4615      	mov	r5, r2
 800c618:	461f      	mov	r7, r3
 800c61a:	2209      	movs	r2, #9
 800c61c:	3308      	adds	r3, #8
 800c61e:	4606      	mov	r6, r0
 800c620:	fb93 f3f2 	sdiv	r3, r3, r2
 800c624:	2100      	movs	r1, #0
 800c626:	2201      	movs	r2, #1
 800c628:	429a      	cmp	r2, r3
 800c62a:	db09      	blt.n	800c640 <__s2b+0x30>
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7ff ff47 	bl	800c4c0 <_Balloc>
 800c632:	b940      	cbnz	r0, 800c646 <__s2b+0x36>
 800c634:	4602      	mov	r2, r0
 800c636:	4b19      	ldr	r3, [pc, #100]	@ (800c69c <__s2b+0x8c>)
 800c638:	4819      	ldr	r0, [pc, #100]	@ (800c6a0 <__s2b+0x90>)
 800c63a:	21d3      	movs	r1, #211	@ 0xd3
 800c63c:	f001 fc9c 	bl	800df78 <__assert_func>
 800c640:	0052      	lsls	r2, r2, #1
 800c642:	3101      	adds	r1, #1
 800c644:	e7f0      	b.n	800c628 <__s2b+0x18>
 800c646:	9b08      	ldr	r3, [sp, #32]
 800c648:	6143      	str	r3, [r0, #20]
 800c64a:	2d09      	cmp	r5, #9
 800c64c:	f04f 0301 	mov.w	r3, #1
 800c650:	6103      	str	r3, [r0, #16]
 800c652:	dd16      	ble.n	800c682 <__s2b+0x72>
 800c654:	f104 0909 	add.w	r9, r4, #9
 800c658:	46c8      	mov	r8, r9
 800c65a:	442c      	add	r4, r5
 800c65c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c660:	4601      	mov	r1, r0
 800c662:	3b30      	subs	r3, #48	@ 0x30
 800c664:	220a      	movs	r2, #10
 800c666:	4630      	mov	r0, r6
 800c668:	f7ff ff8c 	bl	800c584 <__multadd>
 800c66c:	45a0      	cmp	r8, r4
 800c66e:	d1f5      	bne.n	800c65c <__s2b+0x4c>
 800c670:	f1a5 0408 	sub.w	r4, r5, #8
 800c674:	444c      	add	r4, r9
 800c676:	1b2d      	subs	r5, r5, r4
 800c678:	1963      	adds	r3, r4, r5
 800c67a:	42bb      	cmp	r3, r7
 800c67c:	db04      	blt.n	800c688 <__s2b+0x78>
 800c67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c682:	340a      	adds	r4, #10
 800c684:	2509      	movs	r5, #9
 800c686:	e7f6      	b.n	800c676 <__s2b+0x66>
 800c688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c68c:	4601      	mov	r1, r0
 800c68e:	3b30      	subs	r3, #48	@ 0x30
 800c690:	220a      	movs	r2, #10
 800c692:	4630      	mov	r0, r6
 800c694:	f7ff ff76 	bl	800c584 <__multadd>
 800c698:	e7ee      	b.n	800c678 <__s2b+0x68>
 800c69a:	bf00      	nop
 800c69c:	0800ede9 	.word	0x0800ede9
 800c6a0:	0800edfa 	.word	0x0800edfa

0800c6a4 <__hi0bits>:
 800c6a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	bf36      	itet	cc
 800c6ac:	0403      	lslcc	r3, r0, #16
 800c6ae:	2000      	movcs	r0, #0
 800c6b0:	2010      	movcc	r0, #16
 800c6b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6b6:	bf3c      	itt	cc
 800c6b8:	021b      	lslcc	r3, r3, #8
 800c6ba:	3008      	addcc	r0, #8
 800c6bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6c0:	bf3c      	itt	cc
 800c6c2:	011b      	lslcc	r3, r3, #4
 800c6c4:	3004      	addcc	r0, #4
 800c6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ca:	bf3c      	itt	cc
 800c6cc:	009b      	lslcc	r3, r3, #2
 800c6ce:	3002      	addcc	r0, #2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	db05      	blt.n	800c6e0 <__hi0bits+0x3c>
 800c6d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6d8:	f100 0001 	add.w	r0, r0, #1
 800c6dc:	bf08      	it	eq
 800c6de:	2020      	moveq	r0, #32
 800c6e0:	4770      	bx	lr

0800c6e2 <__lo0bits>:
 800c6e2:	6803      	ldr	r3, [r0, #0]
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	f013 0007 	ands.w	r0, r3, #7
 800c6ea:	d00b      	beq.n	800c704 <__lo0bits+0x22>
 800c6ec:	07d9      	lsls	r1, r3, #31
 800c6ee:	d421      	bmi.n	800c734 <__lo0bits+0x52>
 800c6f0:	0798      	lsls	r0, r3, #30
 800c6f2:	bf49      	itett	mi
 800c6f4:	085b      	lsrmi	r3, r3, #1
 800c6f6:	089b      	lsrpl	r3, r3, #2
 800c6f8:	2001      	movmi	r0, #1
 800c6fa:	6013      	strmi	r3, [r2, #0]
 800c6fc:	bf5c      	itt	pl
 800c6fe:	6013      	strpl	r3, [r2, #0]
 800c700:	2002      	movpl	r0, #2
 800c702:	4770      	bx	lr
 800c704:	b299      	uxth	r1, r3
 800c706:	b909      	cbnz	r1, 800c70c <__lo0bits+0x2a>
 800c708:	0c1b      	lsrs	r3, r3, #16
 800c70a:	2010      	movs	r0, #16
 800c70c:	b2d9      	uxtb	r1, r3
 800c70e:	b909      	cbnz	r1, 800c714 <__lo0bits+0x32>
 800c710:	3008      	adds	r0, #8
 800c712:	0a1b      	lsrs	r3, r3, #8
 800c714:	0719      	lsls	r1, r3, #28
 800c716:	bf04      	itt	eq
 800c718:	091b      	lsreq	r3, r3, #4
 800c71a:	3004      	addeq	r0, #4
 800c71c:	0799      	lsls	r1, r3, #30
 800c71e:	bf04      	itt	eq
 800c720:	089b      	lsreq	r3, r3, #2
 800c722:	3002      	addeq	r0, #2
 800c724:	07d9      	lsls	r1, r3, #31
 800c726:	d403      	bmi.n	800c730 <__lo0bits+0x4e>
 800c728:	085b      	lsrs	r3, r3, #1
 800c72a:	f100 0001 	add.w	r0, r0, #1
 800c72e:	d003      	beq.n	800c738 <__lo0bits+0x56>
 800c730:	6013      	str	r3, [r2, #0]
 800c732:	4770      	bx	lr
 800c734:	2000      	movs	r0, #0
 800c736:	4770      	bx	lr
 800c738:	2020      	movs	r0, #32
 800c73a:	4770      	bx	lr

0800c73c <__i2b>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	460c      	mov	r4, r1
 800c740:	2101      	movs	r1, #1
 800c742:	f7ff febd 	bl	800c4c0 <_Balloc>
 800c746:	4602      	mov	r2, r0
 800c748:	b928      	cbnz	r0, 800c756 <__i2b+0x1a>
 800c74a:	4b05      	ldr	r3, [pc, #20]	@ (800c760 <__i2b+0x24>)
 800c74c:	4805      	ldr	r0, [pc, #20]	@ (800c764 <__i2b+0x28>)
 800c74e:	f240 1145 	movw	r1, #325	@ 0x145
 800c752:	f001 fc11 	bl	800df78 <__assert_func>
 800c756:	2301      	movs	r3, #1
 800c758:	6144      	str	r4, [r0, #20]
 800c75a:	6103      	str	r3, [r0, #16]
 800c75c:	bd10      	pop	{r4, pc}
 800c75e:	bf00      	nop
 800c760:	0800ede9 	.word	0x0800ede9
 800c764:	0800edfa 	.word	0x0800edfa

0800c768 <__multiply>:
 800c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	4617      	mov	r7, r2
 800c76e:	690a      	ldr	r2, [r1, #16]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	429a      	cmp	r2, r3
 800c774:	bfa8      	it	ge
 800c776:	463b      	movge	r3, r7
 800c778:	4689      	mov	r9, r1
 800c77a:	bfa4      	itt	ge
 800c77c:	460f      	movge	r7, r1
 800c77e:	4699      	movge	r9, r3
 800c780:	693d      	ldr	r5, [r7, #16]
 800c782:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	eb05 060a 	add.w	r6, r5, sl
 800c78e:	42b3      	cmp	r3, r6
 800c790:	b085      	sub	sp, #20
 800c792:	bfb8      	it	lt
 800c794:	3101      	addlt	r1, #1
 800c796:	f7ff fe93 	bl	800c4c0 <_Balloc>
 800c79a:	b930      	cbnz	r0, 800c7aa <__multiply+0x42>
 800c79c:	4602      	mov	r2, r0
 800c79e:	4b41      	ldr	r3, [pc, #260]	@ (800c8a4 <__multiply+0x13c>)
 800c7a0:	4841      	ldr	r0, [pc, #260]	@ (800c8a8 <__multiply+0x140>)
 800c7a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7a6:	f001 fbe7 	bl	800df78 <__assert_func>
 800c7aa:	f100 0414 	add.w	r4, r0, #20
 800c7ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c7b2:	4623      	mov	r3, r4
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	4573      	cmp	r3, lr
 800c7b8:	d320      	bcc.n	800c7fc <__multiply+0x94>
 800c7ba:	f107 0814 	add.w	r8, r7, #20
 800c7be:	f109 0114 	add.w	r1, r9, #20
 800c7c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c7c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c7ca:	9302      	str	r3, [sp, #8]
 800c7cc:	1beb      	subs	r3, r5, r7
 800c7ce:	3b15      	subs	r3, #21
 800c7d0:	f023 0303 	bic.w	r3, r3, #3
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	3715      	adds	r7, #21
 800c7d8:	42bd      	cmp	r5, r7
 800c7da:	bf38      	it	cc
 800c7dc:	2304      	movcc	r3, #4
 800c7de:	9301      	str	r3, [sp, #4]
 800c7e0:	9b02      	ldr	r3, [sp, #8]
 800c7e2:	9103      	str	r1, [sp, #12]
 800c7e4:	428b      	cmp	r3, r1
 800c7e6:	d80c      	bhi.n	800c802 <__multiply+0x9a>
 800c7e8:	2e00      	cmp	r6, #0
 800c7ea:	dd03      	ble.n	800c7f4 <__multiply+0x8c>
 800c7ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d055      	beq.n	800c8a0 <__multiply+0x138>
 800c7f4:	6106      	str	r6, [r0, #16]
 800c7f6:	b005      	add	sp, #20
 800c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fc:	f843 2b04 	str.w	r2, [r3], #4
 800c800:	e7d9      	b.n	800c7b6 <__multiply+0x4e>
 800c802:	f8b1 a000 	ldrh.w	sl, [r1]
 800c806:	f1ba 0f00 	cmp.w	sl, #0
 800c80a:	d01f      	beq.n	800c84c <__multiply+0xe4>
 800c80c:	46c4      	mov	ip, r8
 800c80e:	46a1      	mov	r9, r4
 800c810:	2700      	movs	r7, #0
 800c812:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c816:	f8d9 3000 	ldr.w	r3, [r9]
 800c81a:	fa1f fb82 	uxth.w	fp, r2
 800c81e:	b29b      	uxth	r3, r3
 800c820:	fb0a 330b 	mla	r3, sl, fp, r3
 800c824:	443b      	add	r3, r7
 800c826:	f8d9 7000 	ldr.w	r7, [r9]
 800c82a:	0c12      	lsrs	r2, r2, #16
 800c82c:	0c3f      	lsrs	r7, r7, #16
 800c82e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c832:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c836:	b29b      	uxth	r3, r3
 800c838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c83c:	4565      	cmp	r5, ip
 800c83e:	f849 3b04 	str.w	r3, [r9], #4
 800c842:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c846:	d8e4      	bhi.n	800c812 <__multiply+0xaa>
 800c848:	9b01      	ldr	r3, [sp, #4]
 800c84a:	50e7      	str	r7, [r4, r3]
 800c84c:	9b03      	ldr	r3, [sp, #12]
 800c84e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c852:	3104      	adds	r1, #4
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	d020      	beq.n	800c89c <__multiply+0x134>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	4647      	mov	r7, r8
 800c85e:	46a4      	mov	ip, r4
 800c860:	f04f 0a00 	mov.w	sl, #0
 800c864:	f8b7 b000 	ldrh.w	fp, [r7]
 800c868:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c86c:	fb09 220b 	mla	r2, r9, fp, r2
 800c870:	4452      	add	r2, sl
 800c872:	b29b      	uxth	r3, r3
 800c874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c878:	f84c 3b04 	str.w	r3, [ip], #4
 800c87c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c884:	f8bc 3000 	ldrh.w	r3, [ip]
 800c888:	fb09 330a 	mla	r3, r9, sl, r3
 800c88c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c890:	42bd      	cmp	r5, r7
 800c892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c896:	d8e5      	bhi.n	800c864 <__multiply+0xfc>
 800c898:	9a01      	ldr	r2, [sp, #4]
 800c89a:	50a3      	str	r3, [r4, r2]
 800c89c:	3404      	adds	r4, #4
 800c89e:	e79f      	b.n	800c7e0 <__multiply+0x78>
 800c8a0:	3e01      	subs	r6, #1
 800c8a2:	e7a1      	b.n	800c7e8 <__multiply+0x80>
 800c8a4:	0800ede9 	.word	0x0800ede9
 800c8a8:	0800edfa 	.word	0x0800edfa

0800c8ac <__pow5mult>:
 800c8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b0:	4615      	mov	r5, r2
 800c8b2:	f012 0203 	ands.w	r2, r2, #3
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	460e      	mov	r6, r1
 800c8ba:	d007      	beq.n	800c8cc <__pow5mult+0x20>
 800c8bc:	4c25      	ldr	r4, [pc, #148]	@ (800c954 <__pow5mult+0xa8>)
 800c8be:	3a01      	subs	r2, #1
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8c6:	f7ff fe5d 	bl	800c584 <__multadd>
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	10ad      	asrs	r5, r5, #2
 800c8ce:	d03d      	beq.n	800c94c <__pow5mult+0xa0>
 800c8d0:	69fc      	ldr	r4, [r7, #28]
 800c8d2:	b97c      	cbnz	r4, 800c8f4 <__pow5mult+0x48>
 800c8d4:	2010      	movs	r0, #16
 800c8d6:	f7ff fd3d 	bl	800c354 <malloc>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	61f8      	str	r0, [r7, #28]
 800c8de:	b928      	cbnz	r0, 800c8ec <__pow5mult+0x40>
 800c8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c958 <__pow5mult+0xac>)
 800c8e2:	481e      	ldr	r0, [pc, #120]	@ (800c95c <__pow5mult+0xb0>)
 800c8e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c8e8:	f001 fb46 	bl	800df78 <__assert_func>
 800c8ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8f0:	6004      	str	r4, [r0, #0]
 800c8f2:	60c4      	str	r4, [r0, #12]
 800c8f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c8f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8fc:	b94c      	cbnz	r4, 800c912 <__pow5mult+0x66>
 800c8fe:	f240 2171 	movw	r1, #625	@ 0x271
 800c902:	4638      	mov	r0, r7
 800c904:	f7ff ff1a 	bl	800c73c <__i2b>
 800c908:	2300      	movs	r3, #0
 800c90a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c90e:	4604      	mov	r4, r0
 800c910:	6003      	str	r3, [r0, #0]
 800c912:	f04f 0900 	mov.w	r9, #0
 800c916:	07eb      	lsls	r3, r5, #31
 800c918:	d50a      	bpl.n	800c930 <__pow5mult+0x84>
 800c91a:	4631      	mov	r1, r6
 800c91c:	4622      	mov	r2, r4
 800c91e:	4638      	mov	r0, r7
 800c920:	f7ff ff22 	bl	800c768 <__multiply>
 800c924:	4631      	mov	r1, r6
 800c926:	4680      	mov	r8, r0
 800c928:	4638      	mov	r0, r7
 800c92a:	f7ff fe09 	bl	800c540 <_Bfree>
 800c92e:	4646      	mov	r6, r8
 800c930:	106d      	asrs	r5, r5, #1
 800c932:	d00b      	beq.n	800c94c <__pow5mult+0xa0>
 800c934:	6820      	ldr	r0, [r4, #0]
 800c936:	b938      	cbnz	r0, 800c948 <__pow5mult+0x9c>
 800c938:	4622      	mov	r2, r4
 800c93a:	4621      	mov	r1, r4
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff ff13 	bl	800c768 <__multiply>
 800c942:	6020      	str	r0, [r4, #0]
 800c944:	f8c0 9000 	str.w	r9, [r0]
 800c948:	4604      	mov	r4, r0
 800c94a:	e7e4      	b.n	800c916 <__pow5mult+0x6a>
 800c94c:	4630      	mov	r0, r6
 800c94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c952:	bf00      	nop
 800c954:	0800ef0c 	.word	0x0800ef0c
 800c958:	0800ed7a 	.word	0x0800ed7a
 800c95c:	0800edfa 	.word	0x0800edfa

0800c960 <__lshift>:
 800c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c964:	460c      	mov	r4, r1
 800c966:	6849      	ldr	r1, [r1, #4]
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c96e:	68a3      	ldr	r3, [r4, #8]
 800c970:	4607      	mov	r7, r0
 800c972:	4691      	mov	r9, r2
 800c974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c978:	f108 0601 	add.w	r6, r8, #1
 800c97c:	42b3      	cmp	r3, r6
 800c97e:	db0b      	blt.n	800c998 <__lshift+0x38>
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff fd9d 	bl	800c4c0 <_Balloc>
 800c986:	4605      	mov	r5, r0
 800c988:	b948      	cbnz	r0, 800c99e <__lshift+0x3e>
 800c98a:	4602      	mov	r2, r0
 800c98c:	4b28      	ldr	r3, [pc, #160]	@ (800ca30 <__lshift+0xd0>)
 800c98e:	4829      	ldr	r0, [pc, #164]	@ (800ca34 <__lshift+0xd4>)
 800c990:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c994:	f001 faf0 	bl	800df78 <__assert_func>
 800c998:	3101      	adds	r1, #1
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	e7ee      	b.n	800c97c <__lshift+0x1c>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f100 0114 	add.w	r1, r0, #20
 800c9a4:	f100 0210 	add.w	r2, r0, #16
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	4553      	cmp	r3, sl
 800c9ac:	db33      	blt.n	800ca16 <__lshift+0xb6>
 800c9ae:	6920      	ldr	r0, [r4, #16]
 800c9b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9b4:	f104 0314 	add.w	r3, r4, #20
 800c9b8:	f019 091f 	ands.w	r9, r9, #31
 800c9bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9c4:	d02b      	beq.n	800ca1e <__lshift+0xbe>
 800c9c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c9ca:	468a      	mov	sl, r1
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	fa00 f009 	lsl.w	r0, r0, r9
 800c9d4:	4310      	orrs	r0, r2
 800c9d6:	f84a 0b04 	str.w	r0, [sl], #4
 800c9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9de:	459c      	cmp	ip, r3
 800c9e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9e4:	d8f3      	bhi.n	800c9ce <__lshift+0x6e>
 800c9e6:	ebac 0304 	sub.w	r3, ip, r4
 800c9ea:	3b15      	subs	r3, #21
 800c9ec:	f023 0303 	bic.w	r3, r3, #3
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	f104 0015 	add.w	r0, r4, #21
 800c9f6:	4560      	cmp	r0, ip
 800c9f8:	bf88      	it	hi
 800c9fa:	2304      	movhi	r3, #4
 800c9fc:	50ca      	str	r2, [r1, r3]
 800c9fe:	b10a      	cbz	r2, 800ca04 <__lshift+0xa4>
 800ca00:	f108 0602 	add.w	r6, r8, #2
 800ca04:	3e01      	subs	r6, #1
 800ca06:	4638      	mov	r0, r7
 800ca08:	612e      	str	r6, [r5, #16]
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	f7ff fd98 	bl	800c540 <_Bfree>
 800ca10:	4628      	mov	r0, r5
 800ca12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca16:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	e7c5      	b.n	800c9aa <__lshift+0x4a>
 800ca1e:	3904      	subs	r1, #4
 800ca20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca24:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca28:	459c      	cmp	ip, r3
 800ca2a:	d8f9      	bhi.n	800ca20 <__lshift+0xc0>
 800ca2c:	e7ea      	b.n	800ca04 <__lshift+0xa4>
 800ca2e:	bf00      	nop
 800ca30:	0800ede9 	.word	0x0800ede9
 800ca34:	0800edfa 	.word	0x0800edfa

0800ca38 <__mcmp>:
 800ca38:	690a      	ldr	r2, [r1, #16]
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	6900      	ldr	r0, [r0, #16]
 800ca3e:	1a80      	subs	r0, r0, r2
 800ca40:	b530      	push	{r4, r5, lr}
 800ca42:	d10e      	bne.n	800ca62 <__mcmp+0x2a>
 800ca44:	3314      	adds	r3, #20
 800ca46:	3114      	adds	r1, #20
 800ca48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca58:	4295      	cmp	r5, r2
 800ca5a:	d003      	beq.n	800ca64 <__mcmp+0x2c>
 800ca5c:	d205      	bcs.n	800ca6a <__mcmp+0x32>
 800ca5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca62:	bd30      	pop	{r4, r5, pc}
 800ca64:	42a3      	cmp	r3, r4
 800ca66:	d3f3      	bcc.n	800ca50 <__mcmp+0x18>
 800ca68:	e7fb      	b.n	800ca62 <__mcmp+0x2a>
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	e7f9      	b.n	800ca62 <__mcmp+0x2a>
	...

0800ca70 <__mdiff>:
 800ca70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca74:	4689      	mov	r9, r1
 800ca76:	4606      	mov	r6, r0
 800ca78:	4611      	mov	r1, r2
 800ca7a:	4648      	mov	r0, r9
 800ca7c:	4614      	mov	r4, r2
 800ca7e:	f7ff ffdb 	bl	800ca38 <__mcmp>
 800ca82:	1e05      	subs	r5, r0, #0
 800ca84:	d112      	bne.n	800caac <__mdiff+0x3c>
 800ca86:	4629      	mov	r1, r5
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f7ff fd19 	bl	800c4c0 <_Balloc>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	b928      	cbnz	r0, 800ca9e <__mdiff+0x2e>
 800ca92:	4b3f      	ldr	r3, [pc, #252]	@ (800cb90 <__mdiff+0x120>)
 800ca94:	f240 2137 	movw	r1, #567	@ 0x237
 800ca98:	483e      	ldr	r0, [pc, #248]	@ (800cb94 <__mdiff+0x124>)
 800ca9a:	f001 fa6d 	bl	800df78 <__assert_func>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caa4:	4610      	mov	r0, r2
 800caa6:	b003      	add	sp, #12
 800caa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caac:	bfbc      	itt	lt
 800caae:	464b      	movlt	r3, r9
 800cab0:	46a1      	movlt	r9, r4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cab8:	bfba      	itte	lt
 800caba:	461c      	movlt	r4, r3
 800cabc:	2501      	movlt	r5, #1
 800cabe:	2500      	movge	r5, #0
 800cac0:	f7ff fcfe 	bl	800c4c0 <_Balloc>
 800cac4:	4602      	mov	r2, r0
 800cac6:	b918      	cbnz	r0, 800cad0 <__mdiff+0x60>
 800cac8:	4b31      	ldr	r3, [pc, #196]	@ (800cb90 <__mdiff+0x120>)
 800caca:	f240 2145 	movw	r1, #581	@ 0x245
 800cace:	e7e3      	b.n	800ca98 <__mdiff+0x28>
 800cad0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cad4:	6926      	ldr	r6, [r4, #16]
 800cad6:	60c5      	str	r5, [r0, #12]
 800cad8:	f109 0310 	add.w	r3, r9, #16
 800cadc:	f109 0514 	add.w	r5, r9, #20
 800cae0:	f104 0e14 	add.w	lr, r4, #20
 800cae4:	f100 0b14 	add.w	fp, r0, #20
 800cae8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800caec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	46d9      	mov	r9, fp
 800caf4:	f04f 0c00 	mov.w	ip, #0
 800caf8:	9b01      	ldr	r3, [sp, #4]
 800cafa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cafe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb02:	9301      	str	r3, [sp, #4]
 800cb04:	fa1f f38a 	uxth.w	r3, sl
 800cb08:	4619      	mov	r1, r3
 800cb0a:	b283      	uxth	r3, r0
 800cb0c:	1acb      	subs	r3, r1, r3
 800cb0e:	0c00      	lsrs	r0, r0, #16
 800cb10:	4463      	add	r3, ip
 800cb12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb20:	4576      	cmp	r6, lr
 800cb22:	f849 3b04 	str.w	r3, [r9], #4
 800cb26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb2a:	d8e5      	bhi.n	800caf8 <__mdiff+0x88>
 800cb2c:	1b33      	subs	r3, r6, r4
 800cb2e:	3b15      	subs	r3, #21
 800cb30:	f023 0303 	bic.w	r3, r3, #3
 800cb34:	3415      	adds	r4, #21
 800cb36:	3304      	adds	r3, #4
 800cb38:	42a6      	cmp	r6, r4
 800cb3a:	bf38      	it	cc
 800cb3c:	2304      	movcc	r3, #4
 800cb3e:	441d      	add	r5, r3
 800cb40:	445b      	add	r3, fp
 800cb42:	461e      	mov	r6, r3
 800cb44:	462c      	mov	r4, r5
 800cb46:	4544      	cmp	r4, r8
 800cb48:	d30e      	bcc.n	800cb68 <__mdiff+0xf8>
 800cb4a:	f108 0103 	add.w	r1, r8, #3
 800cb4e:	1b49      	subs	r1, r1, r5
 800cb50:	f021 0103 	bic.w	r1, r1, #3
 800cb54:	3d03      	subs	r5, #3
 800cb56:	45a8      	cmp	r8, r5
 800cb58:	bf38      	it	cc
 800cb5a:	2100      	movcc	r1, #0
 800cb5c:	440b      	add	r3, r1
 800cb5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb62:	b191      	cbz	r1, 800cb8a <__mdiff+0x11a>
 800cb64:	6117      	str	r7, [r2, #16]
 800cb66:	e79d      	b.n	800caa4 <__mdiff+0x34>
 800cb68:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb6c:	46e6      	mov	lr, ip
 800cb6e:	0c08      	lsrs	r0, r1, #16
 800cb70:	fa1c fc81 	uxtah	ip, ip, r1
 800cb74:	4471      	add	r1, lr
 800cb76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb7a:	b289      	uxth	r1, r1
 800cb7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb80:	f846 1b04 	str.w	r1, [r6], #4
 800cb84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb88:	e7dd      	b.n	800cb46 <__mdiff+0xd6>
 800cb8a:	3f01      	subs	r7, #1
 800cb8c:	e7e7      	b.n	800cb5e <__mdiff+0xee>
 800cb8e:	bf00      	nop
 800cb90:	0800ede9 	.word	0x0800ede9
 800cb94:	0800edfa 	.word	0x0800edfa

0800cb98 <__ulp>:
 800cb98:	b082      	sub	sp, #8
 800cb9a:	ed8d 0b00 	vstr	d0, [sp]
 800cb9e:	9a01      	ldr	r2, [sp, #4]
 800cba0:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe0 <__ulp+0x48>)
 800cba2:	4013      	ands	r3, r2
 800cba4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	dc08      	bgt.n	800cbbe <__ulp+0x26>
 800cbac:	425b      	negs	r3, r3
 800cbae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cbb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cbb6:	da04      	bge.n	800cbc2 <__ulp+0x2a>
 800cbb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cbbc:	4113      	asrs	r3, r2
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	e008      	b.n	800cbd4 <__ulp+0x3c>
 800cbc2:	f1a2 0314 	sub.w	r3, r2, #20
 800cbc6:	2b1e      	cmp	r3, #30
 800cbc8:	bfda      	itte	le
 800cbca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cbce:	40da      	lsrle	r2, r3
 800cbd0:	2201      	movgt	r2, #1
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	ec41 0b10 	vmov	d0, r0, r1
 800cbdc:	b002      	add	sp, #8
 800cbde:	4770      	bx	lr
 800cbe0:	7ff00000 	.word	0x7ff00000

0800cbe4 <__b2d>:
 800cbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe8:	6906      	ldr	r6, [r0, #16]
 800cbea:	f100 0814 	add.w	r8, r0, #20
 800cbee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cbf2:	1f37      	subs	r7, r6, #4
 800cbf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	f7ff fd53 	bl	800c6a4 <__hi0bits>
 800cbfe:	f1c0 0320 	rsb	r3, r0, #32
 800cc02:	280a      	cmp	r0, #10
 800cc04:	600b      	str	r3, [r1, #0]
 800cc06:	491b      	ldr	r1, [pc, #108]	@ (800cc74 <__b2d+0x90>)
 800cc08:	dc15      	bgt.n	800cc36 <__b2d+0x52>
 800cc0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cc0e:	fa22 f30c 	lsr.w	r3, r2, ip
 800cc12:	45b8      	cmp	r8, r7
 800cc14:	ea43 0501 	orr.w	r5, r3, r1
 800cc18:	bf34      	ite	cc
 800cc1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc1e:	2300      	movcs	r3, #0
 800cc20:	3015      	adds	r0, #21
 800cc22:	fa02 f000 	lsl.w	r0, r2, r0
 800cc26:	fa23 f30c 	lsr.w	r3, r3, ip
 800cc2a:	4303      	orrs	r3, r0
 800cc2c:	461c      	mov	r4, r3
 800cc2e:	ec45 4b10 	vmov	d0, r4, r5
 800cc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc36:	45b8      	cmp	r8, r7
 800cc38:	bf3a      	itte	cc
 800cc3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc3e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cc42:	2300      	movcs	r3, #0
 800cc44:	380b      	subs	r0, #11
 800cc46:	d012      	beq.n	800cc6e <__b2d+0x8a>
 800cc48:	f1c0 0120 	rsb	r1, r0, #32
 800cc4c:	fa23 f401 	lsr.w	r4, r3, r1
 800cc50:	4082      	lsls	r2, r0
 800cc52:	4322      	orrs	r2, r4
 800cc54:	4547      	cmp	r7, r8
 800cc56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cc5a:	bf8c      	ite	hi
 800cc5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc60:	2200      	movls	r2, #0
 800cc62:	4083      	lsls	r3, r0
 800cc64:	40ca      	lsrs	r2, r1
 800cc66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	e7de      	b.n	800cc2c <__b2d+0x48>
 800cc6e:	ea42 0501 	orr.w	r5, r2, r1
 800cc72:	e7db      	b.n	800cc2c <__b2d+0x48>
 800cc74:	3ff00000 	.word	0x3ff00000

0800cc78 <__d2b>:
 800cc78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc7c:	460f      	mov	r7, r1
 800cc7e:	2101      	movs	r1, #1
 800cc80:	ec59 8b10 	vmov	r8, r9, d0
 800cc84:	4616      	mov	r6, r2
 800cc86:	f7ff fc1b 	bl	800c4c0 <_Balloc>
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	b930      	cbnz	r0, 800cc9c <__d2b+0x24>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	4b23      	ldr	r3, [pc, #140]	@ (800cd20 <__d2b+0xa8>)
 800cc92:	4824      	ldr	r0, [pc, #144]	@ (800cd24 <__d2b+0xac>)
 800cc94:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc98:	f001 f96e 	bl	800df78 <__assert_func>
 800cc9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cca4:	b10d      	cbz	r5, 800ccaa <__d2b+0x32>
 800cca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccaa:	9301      	str	r3, [sp, #4]
 800ccac:	f1b8 0300 	subs.w	r3, r8, #0
 800ccb0:	d023      	beq.n	800ccfa <__d2b+0x82>
 800ccb2:	4668      	mov	r0, sp
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	f7ff fd14 	bl	800c6e2 <__lo0bits>
 800ccba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ccbe:	b1d0      	cbz	r0, 800ccf6 <__d2b+0x7e>
 800ccc0:	f1c0 0320 	rsb	r3, r0, #32
 800ccc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc8:	430b      	orrs	r3, r1
 800ccca:	40c2      	lsrs	r2, r0
 800cccc:	6163      	str	r3, [r4, #20]
 800ccce:	9201      	str	r2, [sp, #4]
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	61a3      	str	r3, [r4, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bf0c      	ite	eq
 800ccd8:	2201      	moveq	r2, #1
 800ccda:	2202      	movne	r2, #2
 800ccdc:	6122      	str	r2, [r4, #16]
 800ccde:	b1a5      	cbz	r5, 800cd0a <__d2b+0x92>
 800cce0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cce4:	4405      	add	r5, r0
 800cce6:	603d      	str	r5, [r7, #0]
 800cce8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ccec:	6030      	str	r0, [r6, #0]
 800ccee:	4620      	mov	r0, r4
 800ccf0:	b003      	add	sp, #12
 800ccf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccf6:	6161      	str	r1, [r4, #20]
 800ccf8:	e7ea      	b.n	800ccd0 <__d2b+0x58>
 800ccfa:	a801      	add	r0, sp, #4
 800ccfc:	f7ff fcf1 	bl	800c6e2 <__lo0bits>
 800cd00:	9b01      	ldr	r3, [sp, #4]
 800cd02:	6163      	str	r3, [r4, #20]
 800cd04:	3020      	adds	r0, #32
 800cd06:	2201      	movs	r2, #1
 800cd08:	e7e8      	b.n	800ccdc <__d2b+0x64>
 800cd0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd12:	6038      	str	r0, [r7, #0]
 800cd14:	6918      	ldr	r0, [r3, #16]
 800cd16:	f7ff fcc5 	bl	800c6a4 <__hi0bits>
 800cd1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd1e:	e7e5      	b.n	800ccec <__d2b+0x74>
 800cd20:	0800ede9 	.word	0x0800ede9
 800cd24:	0800edfa 	.word	0x0800edfa

0800cd28 <__ratio>:
 800cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	e9cd 1000 	strd	r1, r0, [sp]
 800cd32:	a902      	add	r1, sp, #8
 800cd34:	f7ff ff56 	bl	800cbe4 <__b2d>
 800cd38:	9800      	ldr	r0, [sp, #0]
 800cd3a:	a903      	add	r1, sp, #12
 800cd3c:	ec55 4b10 	vmov	r4, r5, d0
 800cd40:	f7ff ff50 	bl	800cbe4 <__b2d>
 800cd44:	9b01      	ldr	r3, [sp, #4]
 800cd46:	6919      	ldr	r1, [r3, #16]
 800cd48:	9b00      	ldr	r3, [sp, #0]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	1ac9      	subs	r1, r1, r3
 800cd4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cd52:	1a9b      	subs	r3, r3, r2
 800cd54:	ec5b ab10 	vmov	sl, fp, d0
 800cd58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	bfce      	itee	gt
 800cd60:	462a      	movgt	r2, r5
 800cd62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd66:	465a      	movle	r2, fp
 800cd68:	462f      	mov	r7, r5
 800cd6a:	46d9      	mov	r9, fp
 800cd6c:	bfcc      	ite	gt
 800cd6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cd76:	464b      	mov	r3, r9
 800cd78:	4652      	mov	r2, sl
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	f7f3 fd6d 	bl	800085c <__aeabi_ddiv>
 800cd82:	ec41 0b10 	vmov	d0, r0, r1
 800cd86:	b005      	add	sp, #20
 800cd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd8c <__copybits>:
 800cd8c:	3901      	subs	r1, #1
 800cd8e:	b570      	push	{r4, r5, r6, lr}
 800cd90:	1149      	asrs	r1, r1, #5
 800cd92:	6914      	ldr	r4, [r2, #16]
 800cd94:	3101      	adds	r1, #1
 800cd96:	f102 0314 	add.w	r3, r2, #20
 800cd9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cda2:	1f05      	subs	r5, r0, #4
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	d30c      	bcc.n	800cdc2 <__copybits+0x36>
 800cda8:	1aa3      	subs	r3, r4, r2
 800cdaa:	3b11      	subs	r3, #17
 800cdac:	f023 0303 	bic.w	r3, r3, #3
 800cdb0:	3211      	adds	r2, #17
 800cdb2:	42a2      	cmp	r2, r4
 800cdb4:	bf88      	it	hi
 800cdb6:	2300      	movhi	r3, #0
 800cdb8:	4418      	add	r0, r3
 800cdba:	2300      	movs	r3, #0
 800cdbc:	4288      	cmp	r0, r1
 800cdbe:	d305      	bcc.n	800cdcc <__copybits+0x40>
 800cdc0:	bd70      	pop	{r4, r5, r6, pc}
 800cdc2:	f853 6b04 	ldr.w	r6, [r3], #4
 800cdc6:	f845 6f04 	str.w	r6, [r5, #4]!
 800cdca:	e7eb      	b.n	800cda4 <__copybits+0x18>
 800cdcc:	f840 3b04 	str.w	r3, [r0], #4
 800cdd0:	e7f4      	b.n	800cdbc <__copybits+0x30>

0800cdd2 <__any_on>:
 800cdd2:	f100 0214 	add.w	r2, r0, #20
 800cdd6:	6900      	ldr	r0, [r0, #16]
 800cdd8:	114b      	asrs	r3, r1, #5
 800cdda:	4298      	cmp	r0, r3
 800cddc:	b510      	push	{r4, lr}
 800cdde:	db11      	blt.n	800ce04 <__any_on+0x32>
 800cde0:	dd0a      	ble.n	800cdf8 <__any_on+0x26>
 800cde2:	f011 011f 	ands.w	r1, r1, #31
 800cde6:	d007      	beq.n	800cdf8 <__any_on+0x26>
 800cde8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdec:	fa24 f001 	lsr.w	r0, r4, r1
 800cdf0:	fa00 f101 	lsl.w	r1, r0, r1
 800cdf4:	428c      	cmp	r4, r1
 800cdf6:	d10b      	bne.n	800ce10 <__any_on+0x3e>
 800cdf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d803      	bhi.n	800ce08 <__any_on+0x36>
 800ce00:	2000      	movs	r0, #0
 800ce02:	bd10      	pop	{r4, pc}
 800ce04:	4603      	mov	r3, r0
 800ce06:	e7f7      	b.n	800cdf8 <__any_on+0x26>
 800ce08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce0c:	2900      	cmp	r1, #0
 800ce0e:	d0f5      	beq.n	800cdfc <__any_on+0x2a>
 800ce10:	2001      	movs	r0, #1
 800ce12:	e7f6      	b.n	800ce02 <__any_on+0x30>

0800ce14 <sulp>:
 800ce14:	b570      	push	{r4, r5, r6, lr}
 800ce16:	4604      	mov	r4, r0
 800ce18:	460d      	mov	r5, r1
 800ce1a:	ec45 4b10 	vmov	d0, r4, r5
 800ce1e:	4616      	mov	r6, r2
 800ce20:	f7ff feba 	bl	800cb98 <__ulp>
 800ce24:	ec51 0b10 	vmov	r0, r1, d0
 800ce28:	b17e      	cbz	r6, 800ce4a <sulp+0x36>
 800ce2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dd09      	ble.n	800ce4a <sulp+0x36>
 800ce36:	051b      	lsls	r3, r3, #20
 800ce38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ce3c:	2400      	movs	r4, #0
 800ce3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ce42:	4622      	mov	r2, r4
 800ce44:	462b      	mov	r3, r5
 800ce46:	f7f3 fbdf 	bl	8000608 <__aeabi_dmul>
 800ce4a:	ec41 0b10 	vmov	d0, r0, r1
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}

0800ce50 <_strtod_l>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	b09f      	sub	sp, #124	@ 0x7c
 800ce56:	460c      	mov	r4, r1
 800ce58:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ce5e:	9005      	str	r0, [sp, #20]
 800ce60:	f04f 0a00 	mov.w	sl, #0
 800ce64:	f04f 0b00 	mov.w	fp, #0
 800ce68:	460a      	mov	r2, r1
 800ce6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce6c:	7811      	ldrb	r1, [r2, #0]
 800ce6e:	292b      	cmp	r1, #43	@ 0x2b
 800ce70:	d04a      	beq.n	800cf08 <_strtod_l+0xb8>
 800ce72:	d838      	bhi.n	800cee6 <_strtod_l+0x96>
 800ce74:	290d      	cmp	r1, #13
 800ce76:	d832      	bhi.n	800cede <_strtod_l+0x8e>
 800ce78:	2908      	cmp	r1, #8
 800ce7a:	d832      	bhi.n	800cee2 <_strtod_l+0x92>
 800ce7c:	2900      	cmp	r1, #0
 800ce7e:	d03b      	beq.n	800cef8 <_strtod_l+0xa8>
 800ce80:	2200      	movs	r2, #0
 800ce82:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ce86:	782a      	ldrb	r2, [r5, #0]
 800ce88:	2a30      	cmp	r2, #48	@ 0x30
 800ce8a:	f040 80b2 	bne.w	800cff2 <_strtod_l+0x1a2>
 800ce8e:	786a      	ldrb	r2, [r5, #1]
 800ce90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce94:	2a58      	cmp	r2, #88	@ 0x58
 800ce96:	d16e      	bne.n	800cf76 <_strtod_l+0x126>
 800ce98:	9302      	str	r3, [sp, #8]
 800ce9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	4a8f      	ldr	r2, [pc, #572]	@ (800d0e0 <_strtod_l+0x290>)
 800cea4:	9805      	ldr	r0, [sp, #20]
 800cea6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cea8:	a919      	add	r1, sp, #100	@ 0x64
 800ceaa:	f001 f8ff 	bl	800e0ac <__gethex>
 800ceae:	f010 060f 	ands.w	r6, r0, #15
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	d005      	beq.n	800cec2 <_strtod_l+0x72>
 800ceb6:	2e06      	cmp	r6, #6
 800ceb8:	d128      	bne.n	800cf0c <_strtod_l+0xbc>
 800ceba:	3501      	adds	r5, #1
 800cebc:	2300      	movs	r3, #0
 800cebe:	9519      	str	r5, [sp, #100]	@ 0x64
 800cec0:	930e      	str	r3, [sp, #56]	@ 0x38
 800cec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f040 858e 	bne.w	800d9e6 <_strtod_l+0xb96>
 800ceca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cecc:	b1cb      	cbz	r3, 800cf02 <_strtod_l+0xb2>
 800cece:	4652      	mov	r2, sl
 800ced0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ced4:	ec43 2b10 	vmov	d0, r2, r3
 800ced8:	b01f      	add	sp, #124	@ 0x7c
 800ceda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cede:	2920      	cmp	r1, #32
 800cee0:	d1ce      	bne.n	800ce80 <_strtod_l+0x30>
 800cee2:	3201      	adds	r2, #1
 800cee4:	e7c1      	b.n	800ce6a <_strtod_l+0x1a>
 800cee6:	292d      	cmp	r1, #45	@ 0x2d
 800cee8:	d1ca      	bne.n	800ce80 <_strtod_l+0x30>
 800ceea:	2101      	movs	r1, #1
 800ceec:	910e      	str	r1, [sp, #56]	@ 0x38
 800ceee:	1c51      	adds	r1, r2, #1
 800cef0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cef2:	7852      	ldrb	r2, [r2, #1]
 800cef4:	2a00      	cmp	r2, #0
 800cef6:	d1c5      	bne.n	800ce84 <_strtod_l+0x34>
 800cef8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cefa:	9419      	str	r4, [sp, #100]	@ 0x64
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f040 8570 	bne.w	800d9e2 <_strtod_l+0xb92>
 800cf02:	4652      	mov	r2, sl
 800cf04:	465b      	mov	r3, fp
 800cf06:	e7e5      	b.n	800ced4 <_strtod_l+0x84>
 800cf08:	2100      	movs	r1, #0
 800cf0a:	e7ef      	b.n	800ceec <_strtod_l+0x9c>
 800cf0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf0e:	b13a      	cbz	r2, 800cf20 <_strtod_l+0xd0>
 800cf10:	2135      	movs	r1, #53	@ 0x35
 800cf12:	a81c      	add	r0, sp, #112	@ 0x70
 800cf14:	f7ff ff3a 	bl	800cd8c <__copybits>
 800cf18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf1a:	9805      	ldr	r0, [sp, #20]
 800cf1c:	f7ff fb10 	bl	800c540 <_Bfree>
 800cf20:	3e01      	subs	r6, #1
 800cf22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cf24:	2e04      	cmp	r6, #4
 800cf26:	d806      	bhi.n	800cf36 <_strtod_l+0xe6>
 800cf28:	e8df f006 	tbb	[pc, r6]
 800cf2c:	201d0314 	.word	0x201d0314
 800cf30:	14          	.byte	0x14
 800cf31:	00          	.byte	0x00
 800cf32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cf36:	05e1      	lsls	r1, r4, #23
 800cf38:	bf48      	it	mi
 800cf3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cf3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf42:	0d1b      	lsrs	r3, r3, #20
 800cf44:	051b      	lsls	r3, r3, #20
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1bb      	bne.n	800cec2 <_strtod_l+0x72>
 800cf4a:	f7fe fb1d 	bl	800b588 <__errno>
 800cf4e:	2322      	movs	r3, #34	@ 0x22
 800cf50:	6003      	str	r3, [r0, #0]
 800cf52:	e7b6      	b.n	800cec2 <_strtod_l+0x72>
 800cf54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cf58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cf5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cf60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf64:	e7e7      	b.n	800cf36 <_strtod_l+0xe6>
 800cf66:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d0e8 <_strtod_l+0x298>
 800cf6a:	e7e4      	b.n	800cf36 <_strtod_l+0xe6>
 800cf6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cf70:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cf74:	e7df      	b.n	800cf36 <_strtod_l+0xe6>
 800cf76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf7c:	785b      	ldrb	r3, [r3, #1]
 800cf7e:	2b30      	cmp	r3, #48	@ 0x30
 800cf80:	d0f9      	beq.n	800cf76 <_strtod_l+0x126>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d09d      	beq.n	800cec2 <_strtod_l+0x72>
 800cf86:	2301      	movs	r3, #1
 800cf88:	2700      	movs	r7, #0
 800cf8a:	9308      	str	r3, [sp, #32]
 800cf8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf8e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf90:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cf92:	46b9      	mov	r9, r7
 800cf94:	220a      	movs	r2, #10
 800cf96:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cf98:	7805      	ldrb	r5, [r0, #0]
 800cf9a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cf9e:	b2d9      	uxtb	r1, r3
 800cfa0:	2909      	cmp	r1, #9
 800cfa2:	d928      	bls.n	800cff6 <_strtod_l+0x1a6>
 800cfa4:	494f      	ldr	r1, [pc, #316]	@ (800d0e4 <_strtod_l+0x294>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f000 ffbc 	bl	800df24 <strncmp>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d032      	beq.n	800d016 <_strtod_l+0x1c6>
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cfb6:	464d      	mov	r5, r9
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2a65      	cmp	r2, #101	@ 0x65
 800cfbc:	d001      	beq.n	800cfc2 <_strtod_l+0x172>
 800cfbe:	2a45      	cmp	r2, #69	@ 0x45
 800cfc0:	d114      	bne.n	800cfec <_strtod_l+0x19c>
 800cfc2:	b91d      	cbnz	r5, 800cfcc <_strtod_l+0x17c>
 800cfc4:	9a08      	ldr	r2, [sp, #32]
 800cfc6:	4302      	orrs	r2, r0
 800cfc8:	d096      	beq.n	800cef8 <_strtod_l+0xa8>
 800cfca:	2500      	movs	r5, #0
 800cfcc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cfce:	1c62      	adds	r2, r4, #1
 800cfd0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfd2:	7862      	ldrb	r2, [r4, #1]
 800cfd4:	2a2b      	cmp	r2, #43	@ 0x2b
 800cfd6:	d07a      	beq.n	800d0ce <_strtod_l+0x27e>
 800cfd8:	2a2d      	cmp	r2, #45	@ 0x2d
 800cfda:	d07e      	beq.n	800d0da <_strtod_l+0x28a>
 800cfdc:	f04f 0c00 	mov.w	ip, #0
 800cfe0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cfe4:	2909      	cmp	r1, #9
 800cfe6:	f240 8085 	bls.w	800d0f4 <_strtod_l+0x2a4>
 800cfea:	9419      	str	r4, [sp, #100]	@ 0x64
 800cfec:	f04f 0800 	mov.w	r8, #0
 800cff0:	e0a5      	b.n	800d13e <_strtod_l+0x2ee>
 800cff2:	2300      	movs	r3, #0
 800cff4:	e7c8      	b.n	800cf88 <_strtod_l+0x138>
 800cff6:	f1b9 0f08 	cmp.w	r9, #8
 800cffa:	bfd8      	it	le
 800cffc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cffe:	f100 0001 	add.w	r0, r0, #1
 800d002:	bfda      	itte	le
 800d004:	fb02 3301 	mlale	r3, r2, r1, r3
 800d008:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d00a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d00e:	f109 0901 	add.w	r9, r9, #1
 800d012:	9019      	str	r0, [sp, #100]	@ 0x64
 800d014:	e7bf      	b.n	800cf96 <_strtod_l+0x146>
 800d016:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d018:	1c5a      	adds	r2, r3, #1
 800d01a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d01c:	785a      	ldrb	r2, [r3, #1]
 800d01e:	f1b9 0f00 	cmp.w	r9, #0
 800d022:	d03b      	beq.n	800d09c <_strtod_l+0x24c>
 800d024:	900a      	str	r0, [sp, #40]	@ 0x28
 800d026:	464d      	mov	r5, r9
 800d028:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d02c:	2b09      	cmp	r3, #9
 800d02e:	d912      	bls.n	800d056 <_strtod_l+0x206>
 800d030:	2301      	movs	r3, #1
 800d032:	e7c2      	b.n	800cfba <_strtod_l+0x16a>
 800d034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	9219      	str	r2, [sp, #100]	@ 0x64
 800d03a:	785a      	ldrb	r2, [r3, #1]
 800d03c:	3001      	adds	r0, #1
 800d03e:	2a30      	cmp	r2, #48	@ 0x30
 800d040:	d0f8      	beq.n	800d034 <_strtod_l+0x1e4>
 800d042:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d046:	2b08      	cmp	r3, #8
 800d048:	f200 84d2 	bhi.w	800d9f0 <_strtod_l+0xba0>
 800d04c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d04e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d050:	2000      	movs	r0, #0
 800d052:	930c      	str	r3, [sp, #48]	@ 0x30
 800d054:	4605      	mov	r5, r0
 800d056:	3a30      	subs	r2, #48	@ 0x30
 800d058:	f100 0301 	add.w	r3, r0, #1
 800d05c:	d018      	beq.n	800d090 <_strtod_l+0x240>
 800d05e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d060:	4419      	add	r1, r3
 800d062:	910a      	str	r1, [sp, #40]	@ 0x28
 800d064:	462e      	mov	r6, r5
 800d066:	f04f 0e0a 	mov.w	lr, #10
 800d06a:	1c71      	adds	r1, r6, #1
 800d06c:	eba1 0c05 	sub.w	ip, r1, r5
 800d070:	4563      	cmp	r3, ip
 800d072:	dc15      	bgt.n	800d0a0 <_strtod_l+0x250>
 800d074:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d078:	182b      	adds	r3, r5, r0
 800d07a:	2b08      	cmp	r3, #8
 800d07c:	f105 0501 	add.w	r5, r5, #1
 800d080:	4405      	add	r5, r0
 800d082:	dc1a      	bgt.n	800d0ba <_strtod_l+0x26a>
 800d084:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d086:	230a      	movs	r3, #10
 800d088:	fb03 2301 	mla	r3, r3, r1, r2
 800d08c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d08e:	2300      	movs	r3, #0
 800d090:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d092:	1c51      	adds	r1, r2, #1
 800d094:	9119      	str	r1, [sp, #100]	@ 0x64
 800d096:	7852      	ldrb	r2, [r2, #1]
 800d098:	4618      	mov	r0, r3
 800d09a:	e7c5      	b.n	800d028 <_strtod_l+0x1d8>
 800d09c:	4648      	mov	r0, r9
 800d09e:	e7ce      	b.n	800d03e <_strtod_l+0x1ee>
 800d0a0:	2e08      	cmp	r6, #8
 800d0a2:	dc05      	bgt.n	800d0b0 <_strtod_l+0x260>
 800d0a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d0a6:	fb0e f606 	mul.w	r6, lr, r6
 800d0aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d0ac:	460e      	mov	r6, r1
 800d0ae:	e7dc      	b.n	800d06a <_strtod_l+0x21a>
 800d0b0:	2910      	cmp	r1, #16
 800d0b2:	bfd8      	it	le
 800d0b4:	fb0e f707 	mulle.w	r7, lr, r7
 800d0b8:	e7f8      	b.n	800d0ac <_strtod_l+0x25c>
 800d0ba:	2b0f      	cmp	r3, #15
 800d0bc:	bfdc      	itt	le
 800d0be:	230a      	movle	r3, #10
 800d0c0:	fb03 2707 	mlale	r7, r3, r7, r2
 800d0c4:	e7e3      	b.n	800d08e <_strtod_l+0x23e>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e77a      	b.n	800cfc4 <_strtod_l+0x174>
 800d0ce:	f04f 0c00 	mov.w	ip, #0
 800d0d2:	1ca2      	adds	r2, r4, #2
 800d0d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0d6:	78a2      	ldrb	r2, [r4, #2]
 800d0d8:	e782      	b.n	800cfe0 <_strtod_l+0x190>
 800d0da:	f04f 0c01 	mov.w	ip, #1
 800d0de:	e7f8      	b.n	800d0d2 <_strtod_l+0x282>
 800d0e0:	0800f01c 	.word	0x0800f01c
 800d0e4:	0800ee53 	.word	0x0800ee53
 800d0e8:	7ff00000 	.word	0x7ff00000
 800d0ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d0ee:	1c51      	adds	r1, r2, #1
 800d0f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0f2:	7852      	ldrb	r2, [r2, #1]
 800d0f4:	2a30      	cmp	r2, #48	@ 0x30
 800d0f6:	d0f9      	beq.n	800d0ec <_strtod_l+0x29c>
 800d0f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d0fc:	2908      	cmp	r1, #8
 800d0fe:	f63f af75 	bhi.w	800cfec <_strtod_l+0x19c>
 800d102:	3a30      	subs	r2, #48	@ 0x30
 800d104:	9209      	str	r2, [sp, #36]	@ 0x24
 800d106:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d108:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d10a:	f04f 080a 	mov.w	r8, #10
 800d10e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d110:	1c56      	adds	r6, r2, #1
 800d112:	9619      	str	r6, [sp, #100]	@ 0x64
 800d114:	7852      	ldrb	r2, [r2, #1]
 800d116:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d11a:	f1be 0f09 	cmp.w	lr, #9
 800d11e:	d939      	bls.n	800d194 <_strtod_l+0x344>
 800d120:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d122:	1a76      	subs	r6, r6, r1
 800d124:	2e08      	cmp	r6, #8
 800d126:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d12a:	dc03      	bgt.n	800d134 <_strtod_l+0x2e4>
 800d12c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d12e:	4588      	cmp	r8, r1
 800d130:	bfa8      	it	ge
 800d132:	4688      	movge	r8, r1
 800d134:	f1bc 0f00 	cmp.w	ip, #0
 800d138:	d001      	beq.n	800d13e <_strtod_l+0x2ee>
 800d13a:	f1c8 0800 	rsb	r8, r8, #0
 800d13e:	2d00      	cmp	r5, #0
 800d140:	d14e      	bne.n	800d1e0 <_strtod_l+0x390>
 800d142:	9908      	ldr	r1, [sp, #32]
 800d144:	4308      	orrs	r0, r1
 800d146:	f47f aebc 	bne.w	800cec2 <_strtod_l+0x72>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f47f aed4 	bne.w	800cef8 <_strtod_l+0xa8>
 800d150:	2a69      	cmp	r2, #105	@ 0x69
 800d152:	d028      	beq.n	800d1a6 <_strtod_l+0x356>
 800d154:	dc25      	bgt.n	800d1a2 <_strtod_l+0x352>
 800d156:	2a49      	cmp	r2, #73	@ 0x49
 800d158:	d025      	beq.n	800d1a6 <_strtod_l+0x356>
 800d15a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d15c:	f47f aecc 	bne.w	800cef8 <_strtod_l+0xa8>
 800d160:	499a      	ldr	r1, [pc, #616]	@ (800d3cc <_strtod_l+0x57c>)
 800d162:	a819      	add	r0, sp, #100	@ 0x64
 800d164:	f001 f9c4 	bl	800e4f0 <__match>
 800d168:	2800      	cmp	r0, #0
 800d16a:	f43f aec5 	beq.w	800cef8 <_strtod_l+0xa8>
 800d16e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b28      	cmp	r3, #40	@ 0x28
 800d174:	d12e      	bne.n	800d1d4 <_strtod_l+0x384>
 800d176:	4996      	ldr	r1, [pc, #600]	@ (800d3d0 <_strtod_l+0x580>)
 800d178:	aa1c      	add	r2, sp, #112	@ 0x70
 800d17a:	a819      	add	r0, sp, #100	@ 0x64
 800d17c:	f001 f9cc 	bl	800e518 <__hexnan>
 800d180:	2805      	cmp	r0, #5
 800d182:	d127      	bne.n	800d1d4 <_strtod_l+0x384>
 800d184:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d186:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d18a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d18e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d192:	e696      	b.n	800cec2 <_strtod_l+0x72>
 800d194:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d196:	fb08 2101 	mla	r1, r8, r1, r2
 800d19a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d19e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1a0:	e7b5      	b.n	800d10e <_strtod_l+0x2be>
 800d1a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800d1a4:	e7da      	b.n	800d15c <_strtod_l+0x30c>
 800d1a6:	498b      	ldr	r1, [pc, #556]	@ (800d3d4 <_strtod_l+0x584>)
 800d1a8:	a819      	add	r0, sp, #100	@ 0x64
 800d1aa:	f001 f9a1 	bl	800e4f0 <__match>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	f43f aea2 	beq.w	800cef8 <_strtod_l+0xa8>
 800d1b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1b6:	4988      	ldr	r1, [pc, #544]	@ (800d3d8 <_strtod_l+0x588>)
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	a819      	add	r0, sp, #100	@ 0x64
 800d1bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1be:	f001 f997 	bl	800e4f0 <__match>
 800d1c2:	b910      	cbnz	r0, 800d1ca <_strtod_l+0x37a>
 800d1c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d3e8 <_strtod_l+0x598>
 800d1ce:	f04f 0a00 	mov.w	sl, #0
 800d1d2:	e676      	b.n	800cec2 <_strtod_l+0x72>
 800d1d4:	4881      	ldr	r0, [pc, #516]	@ (800d3dc <_strtod_l+0x58c>)
 800d1d6:	f000 fec7 	bl	800df68 <nan>
 800d1da:	ec5b ab10 	vmov	sl, fp, d0
 800d1de:	e670      	b.n	800cec2 <_strtod_l+0x72>
 800d1e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d1e4:	eba8 0303 	sub.w	r3, r8, r3
 800d1e8:	f1b9 0f00 	cmp.w	r9, #0
 800d1ec:	bf08      	it	eq
 800d1ee:	46a9      	moveq	r9, r5
 800d1f0:	2d10      	cmp	r5, #16
 800d1f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1f4:	462c      	mov	r4, r5
 800d1f6:	bfa8      	it	ge
 800d1f8:	2410      	movge	r4, #16
 800d1fa:	f7f3 f98b 	bl	8000514 <__aeabi_ui2d>
 800d1fe:	2d09      	cmp	r5, #9
 800d200:	4682      	mov	sl, r0
 800d202:	468b      	mov	fp, r1
 800d204:	dc13      	bgt.n	800d22e <_strtod_l+0x3de>
 800d206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f43f ae5a 	beq.w	800cec2 <_strtod_l+0x72>
 800d20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d210:	dd78      	ble.n	800d304 <_strtod_l+0x4b4>
 800d212:	2b16      	cmp	r3, #22
 800d214:	dc5f      	bgt.n	800d2d6 <_strtod_l+0x486>
 800d216:	4972      	ldr	r1, [pc, #456]	@ (800d3e0 <_strtod_l+0x590>)
 800d218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d220:	4652      	mov	r2, sl
 800d222:	465b      	mov	r3, fp
 800d224:	f7f3 f9f0 	bl	8000608 <__aeabi_dmul>
 800d228:	4682      	mov	sl, r0
 800d22a:	468b      	mov	fp, r1
 800d22c:	e649      	b.n	800cec2 <_strtod_l+0x72>
 800d22e:	4b6c      	ldr	r3, [pc, #432]	@ (800d3e0 <_strtod_l+0x590>)
 800d230:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d234:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d238:	f7f3 f9e6 	bl	8000608 <__aeabi_dmul>
 800d23c:	4682      	mov	sl, r0
 800d23e:	4638      	mov	r0, r7
 800d240:	468b      	mov	fp, r1
 800d242:	f7f3 f967 	bl	8000514 <__aeabi_ui2d>
 800d246:	4602      	mov	r2, r0
 800d248:	460b      	mov	r3, r1
 800d24a:	4650      	mov	r0, sl
 800d24c:	4659      	mov	r1, fp
 800d24e:	f7f3 f825 	bl	800029c <__adddf3>
 800d252:	2d0f      	cmp	r5, #15
 800d254:	4682      	mov	sl, r0
 800d256:	468b      	mov	fp, r1
 800d258:	ddd5      	ble.n	800d206 <_strtod_l+0x3b6>
 800d25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d25c:	1b2c      	subs	r4, r5, r4
 800d25e:	441c      	add	r4, r3
 800d260:	2c00      	cmp	r4, #0
 800d262:	f340 8093 	ble.w	800d38c <_strtod_l+0x53c>
 800d266:	f014 030f 	ands.w	r3, r4, #15
 800d26a:	d00a      	beq.n	800d282 <_strtod_l+0x432>
 800d26c:	495c      	ldr	r1, [pc, #368]	@ (800d3e0 <_strtod_l+0x590>)
 800d26e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d272:	4652      	mov	r2, sl
 800d274:	465b      	mov	r3, fp
 800d276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d27a:	f7f3 f9c5 	bl	8000608 <__aeabi_dmul>
 800d27e:	4682      	mov	sl, r0
 800d280:	468b      	mov	fp, r1
 800d282:	f034 040f 	bics.w	r4, r4, #15
 800d286:	d073      	beq.n	800d370 <_strtod_l+0x520>
 800d288:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d28c:	dd49      	ble.n	800d322 <_strtod_l+0x4d2>
 800d28e:	2400      	movs	r4, #0
 800d290:	46a0      	mov	r8, r4
 800d292:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d294:	46a1      	mov	r9, r4
 800d296:	9a05      	ldr	r2, [sp, #20]
 800d298:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d3e8 <_strtod_l+0x598>
 800d29c:	2322      	movs	r3, #34	@ 0x22
 800d29e:	6013      	str	r3, [r2, #0]
 800d2a0:	f04f 0a00 	mov.w	sl, #0
 800d2a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f43f ae0b 	beq.w	800cec2 <_strtod_l+0x72>
 800d2ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2ae:	9805      	ldr	r0, [sp, #20]
 800d2b0:	f7ff f946 	bl	800c540 <_Bfree>
 800d2b4:	9805      	ldr	r0, [sp, #20]
 800d2b6:	4649      	mov	r1, r9
 800d2b8:	f7ff f942 	bl	800c540 <_Bfree>
 800d2bc:	9805      	ldr	r0, [sp, #20]
 800d2be:	4641      	mov	r1, r8
 800d2c0:	f7ff f93e 	bl	800c540 <_Bfree>
 800d2c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2c6:	9805      	ldr	r0, [sp, #20]
 800d2c8:	f7ff f93a 	bl	800c540 <_Bfree>
 800d2cc:	9805      	ldr	r0, [sp, #20]
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	f7ff f936 	bl	800c540 <_Bfree>
 800d2d4:	e5f5      	b.n	800cec2 <_strtod_l+0x72>
 800d2d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	dbbc      	blt.n	800d25a <_strtod_l+0x40a>
 800d2e0:	4c3f      	ldr	r4, [pc, #252]	@ (800d3e0 <_strtod_l+0x590>)
 800d2e2:	f1c5 050f 	rsb	r5, r5, #15
 800d2e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d2ea:	4652      	mov	r2, sl
 800d2ec:	465b      	mov	r3, fp
 800d2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2f2:	f7f3 f989 	bl	8000608 <__aeabi_dmul>
 800d2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f8:	1b5d      	subs	r5, r3, r5
 800d2fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d2fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d302:	e78f      	b.n	800d224 <_strtod_l+0x3d4>
 800d304:	3316      	adds	r3, #22
 800d306:	dba8      	blt.n	800d25a <_strtod_l+0x40a>
 800d308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d30a:	eba3 0808 	sub.w	r8, r3, r8
 800d30e:	4b34      	ldr	r3, [pc, #208]	@ (800d3e0 <_strtod_l+0x590>)
 800d310:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d314:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d318:	4650      	mov	r0, sl
 800d31a:	4659      	mov	r1, fp
 800d31c:	f7f3 fa9e 	bl	800085c <__aeabi_ddiv>
 800d320:	e782      	b.n	800d228 <_strtod_l+0x3d8>
 800d322:	2300      	movs	r3, #0
 800d324:	4f2f      	ldr	r7, [pc, #188]	@ (800d3e4 <_strtod_l+0x594>)
 800d326:	1124      	asrs	r4, r4, #4
 800d328:	4650      	mov	r0, sl
 800d32a:	4659      	mov	r1, fp
 800d32c:	461e      	mov	r6, r3
 800d32e:	2c01      	cmp	r4, #1
 800d330:	dc21      	bgt.n	800d376 <_strtod_l+0x526>
 800d332:	b10b      	cbz	r3, 800d338 <_strtod_l+0x4e8>
 800d334:	4682      	mov	sl, r0
 800d336:	468b      	mov	fp, r1
 800d338:	492a      	ldr	r1, [pc, #168]	@ (800d3e4 <_strtod_l+0x594>)
 800d33a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d33e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d342:	4652      	mov	r2, sl
 800d344:	465b      	mov	r3, fp
 800d346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d34a:	f7f3 f95d 	bl	8000608 <__aeabi_dmul>
 800d34e:	4b26      	ldr	r3, [pc, #152]	@ (800d3e8 <_strtod_l+0x598>)
 800d350:	460a      	mov	r2, r1
 800d352:	400b      	ands	r3, r1
 800d354:	4925      	ldr	r1, [pc, #148]	@ (800d3ec <_strtod_l+0x59c>)
 800d356:	428b      	cmp	r3, r1
 800d358:	4682      	mov	sl, r0
 800d35a:	d898      	bhi.n	800d28e <_strtod_l+0x43e>
 800d35c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d360:	428b      	cmp	r3, r1
 800d362:	bf86      	itte	hi
 800d364:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d3f0 <_strtod_l+0x5a0>
 800d368:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d36c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d370:	2300      	movs	r3, #0
 800d372:	9308      	str	r3, [sp, #32]
 800d374:	e076      	b.n	800d464 <_strtod_l+0x614>
 800d376:	07e2      	lsls	r2, r4, #31
 800d378:	d504      	bpl.n	800d384 <_strtod_l+0x534>
 800d37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d37e:	f7f3 f943 	bl	8000608 <__aeabi_dmul>
 800d382:	2301      	movs	r3, #1
 800d384:	3601      	adds	r6, #1
 800d386:	1064      	asrs	r4, r4, #1
 800d388:	3708      	adds	r7, #8
 800d38a:	e7d0      	b.n	800d32e <_strtod_l+0x4de>
 800d38c:	d0f0      	beq.n	800d370 <_strtod_l+0x520>
 800d38e:	4264      	negs	r4, r4
 800d390:	f014 020f 	ands.w	r2, r4, #15
 800d394:	d00a      	beq.n	800d3ac <_strtod_l+0x55c>
 800d396:	4b12      	ldr	r3, [pc, #72]	@ (800d3e0 <_strtod_l+0x590>)
 800d398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d39c:	4650      	mov	r0, sl
 800d39e:	4659      	mov	r1, fp
 800d3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a4:	f7f3 fa5a 	bl	800085c <__aeabi_ddiv>
 800d3a8:	4682      	mov	sl, r0
 800d3aa:	468b      	mov	fp, r1
 800d3ac:	1124      	asrs	r4, r4, #4
 800d3ae:	d0df      	beq.n	800d370 <_strtod_l+0x520>
 800d3b0:	2c1f      	cmp	r4, #31
 800d3b2:	dd1f      	ble.n	800d3f4 <_strtod_l+0x5a4>
 800d3b4:	2400      	movs	r4, #0
 800d3b6:	46a0      	mov	r8, r4
 800d3b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d3ba:	46a1      	mov	r9, r4
 800d3bc:	9a05      	ldr	r2, [sp, #20]
 800d3be:	2322      	movs	r3, #34	@ 0x22
 800d3c0:	f04f 0a00 	mov.w	sl, #0
 800d3c4:	f04f 0b00 	mov.w	fp, #0
 800d3c8:	6013      	str	r3, [r2, #0]
 800d3ca:	e76b      	b.n	800d2a4 <_strtod_l+0x454>
 800d3cc:	0800ed41 	.word	0x0800ed41
 800d3d0:	0800f008 	.word	0x0800f008
 800d3d4:	0800ed39 	.word	0x0800ed39
 800d3d8:	0800ed70 	.word	0x0800ed70
 800d3dc:	0800eea9 	.word	0x0800eea9
 800d3e0:	0800ef40 	.word	0x0800ef40
 800d3e4:	0800ef18 	.word	0x0800ef18
 800d3e8:	7ff00000 	.word	0x7ff00000
 800d3ec:	7ca00000 	.word	0x7ca00000
 800d3f0:	7fefffff 	.word	0x7fefffff
 800d3f4:	f014 0310 	ands.w	r3, r4, #16
 800d3f8:	bf18      	it	ne
 800d3fa:	236a      	movne	r3, #106	@ 0x6a
 800d3fc:	4ea9      	ldr	r6, [pc, #676]	@ (800d6a4 <_strtod_l+0x854>)
 800d3fe:	9308      	str	r3, [sp, #32]
 800d400:	4650      	mov	r0, sl
 800d402:	4659      	mov	r1, fp
 800d404:	2300      	movs	r3, #0
 800d406:	07e7      	lsls	r7, r4, #31
 800d408:	d504      	bpl.n	800d414 <_strtod_l+0x5c4>
 800d40a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d40e:	f7f3 f8fb 	bl	8000608 <__aeabi_dmul>
 800d412:	2301      	movs	r3, #1
 800d414:	1064      	asrs	r4, r4, #1
 800d416:	f106 0608 	add.w	r6, r6, #8
 800d41a:	d1f4      	bne.n	800d406 <_strtod_l+0x5b6>
 800d41c:	b10b      	cbz	r3, 800d422 <_strtod_l+0x5d2>
 800d41e:	4682      	mov	sl, r0
 800d420:	468b      	mov	fp, r1
 800d422:	9b08      	ldr	r3, [sp, #32]
 800d424:	b1b3      	cbz	r3, 800d454 <_strtod_l+0x604>
 800d426:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d42a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d42e:	2b00      	cmp	r3, #0
 800d430:	4659      	mov	r1, fp
 800d432:	dd0f      	ble.n	800d454 <_strtod_l+0x604>
 800d434:	2b1f      	cmp	r3, #31
 800d436:	dd56      	ble.n	800d4e6 <_strtod_l+0x696>
 800d438:	2b34      	cmp	r3, #52	@ 0x34
 800d43a:	bfde      	ittt	le
 800d43c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d440:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d444:	4093      	lslle	r3, r2
 800d446:	f04f 0a00 	mov.w	sl, #0
 800d44a:	bfcc      	ite	gt
 800d44c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d450:	ea03 0b01 	andle.w	fp, r3, r1
 800d454:	2200      	movs	r2, #0
 800d456:	2300      	movs	r3, #0
 800d458:	4650      	mov	r0, sl
 800d45a:	4659      	mov	r1, fp
 800d45c:	f7f3 fb3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d460:	2800      	cmp	r0, #0
 800d462:	d1a7      	bne.n	800d3b4 <_strtod_l+0x564>
 800d464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d46a:	9805      	ldr	r0, [sp, #20]
 800d46c:	462b      	mov	r3, r5
 800d46e:	464a      	mov	r2, r9
 800d470:	f7ff f8ce 	bl	800c610 <__s2b>
 800d474:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d476:	2800      	cmp	r0, #0
 800d478:	f43f af09 	beq.w	800d28e <_strtod_l+0x43e>
 800d47c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d47e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d480:	2a00      	cmp	r2, #0
 800d482:	eba3 0308 	sub.w	r3, r3, r8
 800d486:	bfa8      	it	ge
 800d488:	2300      	movge	r3, #0
 800d48a:	9312      	str	r3, [sp, #72]	@ 0x48
 800d48c:	2400      	movs	r4, #0
 800d48e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d492:	9316      	str	r3, [sp, #88]	@ 0x58
 800d494:	46a0      	mov	r8, r4
 800d496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d498:	9805      	ldr	r0, [sp, #20]
 800d49a:	6859      	ldr	r1, [r3, #4]
 800d49c:	f7ff f810 	bl	800c4c0 <_Balloc>
 800d4a0:	4681      	mov	r9, r0
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	f43f aef7 	beq.w	800d296 <_strtod_l+0x446>
 800d4a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4aa:	691a      	ldr	r2, [r3, #16]
 800d4ac:	3202      	adds	r2, #2
 800d4ae:	f103 010c 	add.w	r1, r3, #12
 800d4b2:	0092      	lsls	r2, r2, #2
 800d4b4:	300c      	adds	r0, #12
 800d4b6:	f7fe f894 	bl	800b5e2 <memcpy>
 800d4ba:	ec4b ab10 	vmov	d0, sl, fp
 800d4be:	9805      	ldr	r0, [sp, #20]
 800d4c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800d4c2:	a91b      	add	r1, sp, #108	@ 0x6c
 800d4c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d4c8:	f7ff fbd6 	bl	800cc78 <__d2b>
 800d4cc:	901a      	str	r0, [sp, #104]	@ 0x68
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f43f aee1 	beq.w	800d296 <_strtod_l+0x446>
 800d4d4:	9805      	ldr	r0, [sp, #20]
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	f7ff f930 	bl	800c73c <__i2b>
 800d4dc:	4680      	mov	r8, r0
 800d4de:	b948      	cbnz	r0, 800d4f4 <_strtod_l+0x6a4>
 800d4e0:	f04f 0800 	mov.w	r8, #0
 800d4e4:	e6d7      	b.n	800d296 <_strtod_l+0x446>
 800d4e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ee:	ea03 0a0a 	and.w	sl, r3, sl
 800d4f2:	e7af      	b.n	800d454 <_strtod_l+0x604>
 800d4f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d4f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d4f8:	2d00      	cmp	r5, #0
 800d4fa:	bfab      	itete	ge
 800d4fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d4fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d500:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d502:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d504:	bfac      	ite	ge
 800d506:	18ef      	addge	r7, r5, r3
 800d508:	1b5e      	sublt	r6, r3, r5
 800d50a:	9b08      	ldr	r3, [sp, #32]
 800d50c:	1aed      	subs	r5, r5, r3
 800d50e:	4415      	add	r5, r2
 800d510:	4b65      	ldr	r3, [pc, #404]	@ (800d6a8 <_strtod_l+0x858>)
 800d512:	3d01      	subs	r5, #1
 800d514:	429d      	cmp	r5, r3
 800d516:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d51a:	da50      	bge.n	800d5be <_strtod_l+0x76e>
 800d51c:	1b5b      	subs	r3, r3, r5
 800d51e:	2b1f      	cmp	r3, #31
 800d520:	eba2 0203 	sub.w	r2, r2, r3
 800d524:	f04f 0101 	mov.w	r1, #1
 800d528:	dc3d      	bgt.n	800d5a6 <_strtod_l+0x756>
 800d52a:	fa01 f303 	lsl.w	r3, r1, r3
 800d52e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d530:	2300      	movs	r3, #0
 800d532:	9310      	str	r3, [sp, #64]	@ 0x40
 800d534:	18bd      	adds	r5, r7, r2
 800d536:	9b08      	ldr	r3, [sp, #32]
 800d538:	42af      	cmp	r7, r5
 800d53a:	4416      	add	r6, r2
 800d53c:	441e      	add	r6, r3
 800d53e:	463b      	mov	r3, r7
 800d540:	bfa8      	it	ge
 800d542:	462b      	movge	r3, r5
 800d544:	42b3      	cmp	r3, r6
 800d546:	bfa8      	it	ge
 800d548:	4633      	movge	r3, r6
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	bfc2      	ittt	gt
 800d54e:	1aed      	subgt	r5, r5, r3
 800d550:	1af6      	subgt	r6, r6, r3
 800d552:	1aff      	subgt	r7, r7, r3
 800d554:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d556:	2b00      	cmp	r3, #0
 800d558:	dd16      	ble.n	800d588 <_strtod_l+0x738>
 800d55a:	4641      	mov	r1, r8
 800d55c:	9805      	ldr	r0, [sp, #20]
 800d55e:	461a      	mov	r2, r3
 800d560:	f7ff f9a4 	bl	800c8ac <__pow5mult>
 800d564:	4680      	mov	r8, r0
 800d566:	2800      	cmp	r0, #0
 800d568:	d0ba      	beq.n	800d4e0 <_strtod_l+0x690>
 800d56a:	4601      	mov	r1, r0
 800d56c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d56e:	9805      	ldr	r0, [sp, #20]
 800d570:	f7ff f8fa 	bl	800c768 <__multiply>
 800d574:	900a      	str	r0, [sp, #40]	@ 0x28
 800d576:	2800      	cmp	r0, #0
 800d578:	f43f ae8d 	beq.w	800d296 <_strtod_l+0x446>
 800d57c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d57e:	9805      	ldr	r0, [sp, #20]
 800d580:	f7fe ffde 	bl	800c540 <_Bfree>
 800d584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d586:	931a      	str	r3, [sp, #104]	@ 0x68
 800d588:	2d00      	cmp	r5, #0
 800d58a:	dc1d      	bgt.n	800d5c8 <_strtod_l+0x778>
 800d58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58e:	2b00      	cmp	r3, #0
 800d590:	dd23      	ble.n	800d5da <_strtod_l+0x78a>
 800d592:	4649      	mov	r1, r9
 800d594:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d596:	9805      	ldr	r0, [sp, #20]
 800d598:	f7ff f988 	bl	800c8ac <__pow5mult>
 800d59c:	4681      	mov	r9, r0
 800d59e:	b9e0      	cbnz	r0, 800d5da <_strtod_l+0x78a>
 800d5a0:	f04f 0900 	mov.w	r9, #0
 800d5a4:	e677      	b.n	800d296 <_strtod_l+0x446>
 800d5a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d5aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d5ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d5b2:	35e2      	adds	r5, #226	@ 0xe2
 800d5b4:	fa01 f305 	lsl.w	r3, r1, r5
 800d5b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d5bc:	e7ba      	b.n	800d534 <_strtod_l+0x6e4>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5c6:	e7b5      	b.n	800d534 <_strtod_l+0x6e4>
 800d5c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5ca:	9805      	ldr	r0, [sp, #20]
 800d5cc:	462a      	mov	r2, r5
 800d5ce:	f7ff f9c7 	bl	800c960 <__lshift>
 800d5d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d1d9      	bne.n	800d58c <_strtod_l+0x73c>
 800d5d8:	e65d      	b.n	800d296 <_strtod_l+0x446>
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	dd07      	ble.n	800d5ee <_strtod_l+0x79e>
 800d5de:	4649      	mov	r1, r9
 800d5e0:	9805      	ldr	r0, [sp, #20]
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	f7ff f9bc 	bl	800c960 <__lshift>
 800d5e8:	4681      	mov	r9, r0
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d0d8      	beq.n	800d5a0 <_strtod_l+0x750>
 800d5ee:	2f00      	cmp	r7, #0
 800d5f0:	dd08      	ble.n	800d604 <_strtod_l+0x7b4>
 800d5f2:	4641      	mov	r1, r8
 800d5f4:	9805      	ldr	r0, [sp, #20]
 800d5f6:	463a      	mov	r2, r7
 800d5f8:	f7ff f9b2 	bl	800c960 <__lshift>
 800d5fc:	4680      	mov	r8, r0
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f43f ae49 	beq.w	800d296 <_strtod_l+0x446>
 800d604:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d606:	9805      	ldr	r0, [sp, #20]
 800d608:	464a      	mov	r2, r9
 800d60a:	f7ff fa31 	bl	800ca70 <__mdiff>
 800d60e:	4604      	mov	r4, r0
 800d610:	2800      	cmp	r0, #0
 800d612:	f43f ae40 	beq.w	800d296 <_strtod_l+0x446>
 800d616:	68c3      	ldr	r3, [r0, #12]
 800d618:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d61a:	2300      	movs	r3, #0
 800d61c:	60c3      	str	r3, [r0, #12]
 800d61e:	4641      	mov	r1, r8
 800d620:	f7ff fa0a 	bl	800ca38 <__mcmp>
 800d624:	2800      	cmp	r0, #0
 800d626:	da45      	bge.n	800d6b4 <_strtod_l+0x864>
 800d628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d62a:	ea53 030a 	orrs.w	r3, r3, sl
 800d62e:	d16b      	bne.n	800d708 <_strtod_l+0x8b8>
 800d630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d634:	2b00      	cmp	r3, #0
 800d636:	d167      	bne.n	800d708 <_strtod_l+0x8b8>
 800d638:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d63c:	0d1b      	lsrs	r3, r3, #20
 800d63e:	051b      	lsls	r3, r3, #20
 800d640:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d644:	d960      	bls.n	800d708 <_strtod_l+0x8b8>
 800d646:	6963      	ldr	r3, [r4, #20]
 800d648:	b913      	cbnz	r3, 800d650 <_strtod_l+0x800>
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	dd5b      	ble.n	800d708 <_strtod_l+0x8b8>
 800d650:	4621      	mov	r1, r4
 800d652:	2201      	movs	r2, #1
 800d654:	9805      	ldr	r0, [sp, #20]
 800d656:	f7ff f983 	bl	800c960 <__lshift>
 800d65a:	4641      	mov	r1, r8
 800d65c:	4604      	mov	r4, r0
 800d65e:	f7ff f9eb 	bl	800ca38 <__mcmp>
 800d662:	2800      	cmp	r0, #0
 800d664:	dd50      	ble.n	800d708 <_strtod_l+0x8b8>
 800d666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d66a:	9a08      	ldr	r2, [sp, #32]
 800d66c:	0d1b      	lsrs	r3, r3, #20
 800d66e:	051b      	lsls	r3, r3, #20
 800d670:	2a00      	cmp	r2, #0
 800d672:	d06a      	beq.n	800d74a <_strtod_l+0x8fa>
 800d674:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d678:	d867      	bhi.n	800d74a <_strtod_l+0x8fa>
 800d67a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d67e:	f67f ae9d 	bls.w	800d3bc <_strtod_l+0x56c>
 800d682:	4b0a      	ldr	r3, [pc, #40]	@ (800d6ac <_strtod_l+0x85c>)
 800d684:	4650      	mov	r0, sl
 800d686:	4659      	mov	r1, fp
 800d688:	2200      	movs	r2, #0
 800d68a:	f7f2 ffbd 	bl	8000608 <__aeabi_dmul>
 800d68e:	4b08      	ldr	r3, [pc, #32]	@ (800d6b0 <_strtod_l+0x860>)
 800d690:	400b      	ands	r3, r1
 800d692:	4682      	mov	sl, r0
 800d694:	468b      	mov	fp, r1
 800d696:	2b00      	cmp	r3, #0
 800d698:	f47f ae08 	bne.w	800d2ac <_strtod_l+0x45c>
 800d69c:	9a05      	ldr	r2, [sp, #20]
 800d69e:	2322      	movs	r3, #34	@ 0x22
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	e603      	b.n	800d2ac <_strtod_l+0x45c>
 800d6a4:	0800f030 	.word	0x0800f030
 800d6a8:	fffffc02 	.word	0xfffffc02
 800d6ac:	39500000 	.word	0x39500000
 800d6b0:	7ff00000 	.word	0x7ff00000
 800d6b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d6b8:	d165      	bne.n	800d786 <_strtod_l+0x936>
 800d6ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d6bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6c0:	b35a      	cbz	r2, 800d71a <_strtod_l+0x8ca>
 800d6c2:	4a9f      	ldr	r2, [pc, #636]	@ (800d940 <_strtod_l+0xaf0>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d12b      	bne.n	800d720 <_strtod_l+0x8d0>
 800d6c8:	9b08      	ldr	r3, [sp, #32]
 800d6ca:	4651      	mov	r1, sl
 800d6cc:	b303      	cbz	r3, 800d710 <_strtod_l+0x8c0>
 800d6ce:	4b9d      	ldr	r3, [pc, #628]	@ (800d944 <_strtod_l+0xaf4>)
 800d6d0:	465a      	mov	r2, fp
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d6d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6dc:	d81b      	bhi.n	800d716 <_strtod_l+0x8c6>
 800d6de:	0d1b      	lsrs	r3, r3, #20
 800d6e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e8:	4299      	cmp	r1, r3
 800d6ea:	d119      	bne.n	800d720 <_strtod_l+0x8d0>
 800d6ec:	4b96      	ldr	r3, [pc, #600]	@ (800d948 <_strtod_l+0xaf8>)
 800d6ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d102      	bne.n	800d6fa <_strtod_l+0x8aa>
 800d6f4:	3101      	adds	r1, #1
 800d6f6:	f43f adce 	beq.w	800d296 <_strtod_l+0x446>
 800d6fa:	4b92      	ldr	r3, [pc, #584]	@ (800d944 <_strtod_l+0xaf4>)
 800d6fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6fe:	401a      	ands	r2, r3
 800d700:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d704:	f04f 0a00 	mov.w	sl, #0
 800d708:	9b08      	ldr	r3, [sp, #32]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1b9      	bne.n	800d682 <_strtod_l+0x832>
 800d70e:	e5cd      	b.n	800d2ac <_strtod_l+0x45c>
 800d710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d714:	e7e8      	b.n	800d6e8 <_strtod_l+0x898>
 800d716:	4613      	mov	r3, r2
 800d718:	e7e6      	b.n	800d6e8 <_strtod_l+0x898>
 800d71a:	ea53 030a 	orrs.w	r3, r3, sl
 800d71e:	d0a2      	beq.n	800d666 <_strtod_l+0x816>
 800d720:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d722:	b1db      	cbz	r3, 800d75c <_strtod_l+0x90c>
 800d724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d726:	4213      	tst	r3, r2
 800d728:	d0ee      	beq.n	800d708 <_strtod_l+0x8b8>
 800d72a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d72c:	9a08      	ldr	r2, [sp, #32]
 800d72e:	4650      	mov	r0, sl
 800d730:	4659      	mov	r1, fp
 800d732:	b1bb      	cbz	r3, 800d764 <_strtod_l+0x914>
 800d734:	f7ff fb6e 	bl	800ce14 <sulp>
 800d738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d73c:	ec53 2b10 	vmov	r2, r3, d0
 800d740:	f7f2 fdac 	bl	800029c <__adddf3>
 800d744:	4682      	mov	sl, r0
 800d746:	468b      	mov	fp, r1
 800d748:	e7de      	b.n	800d708 <_strtod_l+0x8b8>
 800d74a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d74e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d752:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d756:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d75a:	e7d5      	b.n	800d708 <_strtod_l+0x8b8>
 800d75c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d75e:	ea13 0f0a 	tst.w	r3, sl
 800d762:	e7e1      	b.n	800d728 <_strtod_l+0x8d8>
 800d764:	f7ff fb56 	bl	800ce14 <sulp>
 800d768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d76c:	ec53 2b10 	vmov	r2, r3, d0
 800d770:	f7f2 fd92 	bl	8000298 <__aeabi_dsub>
 800d774:	2200      	movs	r2, #0
 800d776:	2300      	movs	r3, #0
 800d778:	4682      	mov	sl, r0
 800d77a:	468b      	mov	fp, r1
 800d77c:	f7f3 f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800d780:	2800      	cmp	r0, #0
 800d782:	d0c1      	beq.n	800d708 <_strtod_l+0x8b8>
 800d784:	e61a      	b.n	800d3bc <_strtod_l+0x56c>
 800d786:	4641      	mov	r1, r8
 800d788:	4620      	mov	r0, r4
 800d78a:	f7ff facd 	bl	800cd28 <__ratio>
 800d78e:	ec57 6b10 	vmov	r6, r7, d0
 800d792:	2200      	movs	r2, #0
 800d794:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d798:	4630      	mov	r0, r6
 800d79a:	4639      	mov	r1, r7
 800d79c:	f7f3 f9b0 	bl	8000b00 <__aeabi_dcmple>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d06f      	beq.n	800d884 <_strtod_l+0xa34>
 800d7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d17a      	bne.n	800d8a0 <_strtod_l+0xa50>
 800d7aa:	f1ba 0f00 	cmp.w	sl, #0
 800d7ae:	d158      	bne.n	800d862 <_strtod_l+0xa12>
 800d7b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d15a      	bne.n	800d870 <_strtod_l+0xa20>
 800d7ba:	4b64      	ldr	r3, [pc, #400]	@ (800d94c <_strtod_l+0xafc>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	4630      	mov	r0, r6
 800d7c0:	4639      	mov	r1, r7
 800d7c2:	f7f3 f993 	bl	8000aec <__aeabi_dcmplt>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d159      	bne.n	800d87e <_strtod_l+0xa2e>
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	4b60      	ldr	r3, [pc, #384]	@ (800d950 <_strtod_l+0xb00>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f7f2 ff19 	bl	8000608 <__aeabi_dmul>
 800d7d6:	4606      	mov	r6, r0
 800d7d8:	460f      	mov	r7, r1
 800d7da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d7de:	9606      	str	r6, [sp, #24]
 800d7e0:	9307      	str	r3, [sp, #28]
 800d7e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7e6:	4d57      	ldr	r5, [pc, #348]	@ (800d944 <_strtod_l+0xaf4>)
 800d7e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7ee:	401d      	ands	r5, r3
 800d7f0:	4b58      	ldr	r3, [pc, #352]	@ (800d954 <_strtod_l+0xb04>)
 800d7f2:	429d      	cmp	r5, r3
 800d7f4:	f040 80b2 	bne.w	800d95c <_strtod_l+0xb0c>
 800d7f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d7fe:	ec4b ab10 	vmov	d0, sl, fp
 800d802:	f7ff f9c9 	bl	800cb98 <__ulp>
 800d806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d80a:	ec51 0b10 	vmov	r0, r1, d0
 800d80e:	f7f2 fefb 	bl	8000608 <__aeabi_dmul>
 800d812:	4652      	mov	r2, sl
 800d814:	465b      	mov	r3, fp
 800d816:	f7f2 fd41 	bl	800029c <__adddf3>
 800d81a:	460b      	mov	r3, r1
 800d81c:	4949      	ldr	r1, [pc, #292]	@ (800d944 <_strtod_l+0xaf4>)
 800d81e:	4a4e      	ldr	r2, [pc, #312]	@ (800d958 <_strtod_l+0xb08>)
 800d820:	4019      	ands	r1, r3
 800d822:	4291      	cmp	r1, r2
 800d824:	4682      	mov	sl, r0
 800d826:	d942      	bls.n	800d8ae <_strtod_l+0xa5e>
 800d828:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d82a:	4b47      	ldr	r3, [pc, #284]	@ (800d948 <_strtod_l+0xaf8>)
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d103      	bne.n	800d838 <_strtod_l+0x9e8>
 800d830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d832:	3301      	adds	r3, #1
 800d834:	f43f ad2f 	beq.w	800d296 <_strtod_l+0x446>
 800d838:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d948 <_strtod_l+0xaf8>
 800d83c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d842:	9805      	ldr	r0, [sp, #20]
 800d844:	f7fe fe7c 	bl	800c540 <_Bfree>
 800d848:	9805      	ldr	r0, [sp, #20]
 800d84a:	4649      	mov	r1, r9
 800d84c:	f7fe fe78 	bl	800c540 <_Bfree>
 800d850:	9805      	ldr	r0, [sp, #20]
 800d852:	4641      	mov	r1, r8
 800d854:	f7fe fe74 	bl	800c540 <_Bfree>
 800d858:	9805      	ldr	r0, [sp, #20]
 800d85a:	4621      	mov	r1, r4
 800d85c:	f7fe fe70 	bl	800c540 <_Bfree>
 800d860:	e619      	b.n	800d496 <_strtod_l+0x646>
 800d862:	f1ba 0f01 	cmp.w	sl, #1
 800d866:	d103      	bne.n	800d870 <_strtod_l+0xa20>
 800d868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f43f ada6 	beq.w	800d3bc <_strtod_l+0x56c>
 800d870:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d920 <_strtod_l+0xad0>
 800d874:	4f35      	ldr	r7, [pc, #212]	@ (800d94c <_strtod_l+0xafc>)
 800d876:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d87a:	2600      	movs	r6, #0
 800d87c:	e7b1      	b.n	800d7e2 <_strtod_l+0x992>
 800d87e:	4f34      	ldr	r7, [pc, #208]	@ (800d950 <_strtod_l+0xb00>)
 800d880:	2600      	movs	r6, #0
 800d882:	e7aa      	b.n	800d7da <_strtod_l+0x98a>
 800d884:	4b32      	ldr	r3, [pc, #200]	@ (800d950 <_strtod_l+0xb00>)
 800d886:	4630      	mov	r0, r6
 800d888:	4639      	mov	r1, r7
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f2 febc 	bl	8000608 <__aeabi_dmul>
 800d890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d892:	4606      	mov	r6, r0
 800d894:	460f      	mov	r7, r1
 800d896:	2b00      	cmp	r3, #0
 800d898:	d09f      	beq.n	800d7da <_strtod_l+0x98a>
 800d89a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d89e:	e7a0      	b.n	800d7e2 <_strtod_l+0x992>
 800d8a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d928 <_strtod_l+0xad8>
 800d8a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8a8:	ec57 6b17 	vmov	r6, r7, d7
 800d8ac:	e799      	b.n	800d7e2 <_strtod_l+0x992>
 800d8ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d8b2:	9b08      	ldr	r3, [sp, #32]
 800d8b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1c1      	bne.n	800d840 <_strtod_l+0x9f0>
 800d8bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8c0:	0d1b      	lsrs	r3, r3, #20
 800d8c2:	051b      	lsls	r3, r3, #20
 800d8c4:	429d      	cmp	r5, r3
 800d8c6:	d1bb      	bne.n	800d840 <_strtod_l+0x9f0>
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f3 f9fc 	bl	8000cc8 <__aeabi_d2lz>
 800d8d0:	f7f2 fe6c 	bl	80005ac <__aeabi_l2d>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	4630      	mov	r0, r6
 800d8da:	4639      	mov	r1, r7
 800d8dc:	f7f2 fcdc 	bl	8000298 <__aeabi_dsub>
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d8e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ee:	ea46 060a 	orr.w	r6, r6, sl
 800d8f2:	431e      	orrs	r6, r3
 800d8f4:	d06f      	beq.n	800d9d6 <_strtod_l+0xb86>
 800d8f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d930 <_strtod_l+0xae0>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	f7f3 f8f6 	bl	8000aec <__aeabi_dcmplt>
 800d900:	2800      	cmp	r0, #0
 800d902:	f47f acd3 	bne.w	800d2ac <_strtod_l+0x45c>
 800d906:	a30c      	add	r3, pc, #48	@ (adr r3, 800d938 <_strtod_l+0xae8>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d910:	f7f3 f90a 	bl	8000b28 <__aeabi_dcmpgt>
 800d914:	2800      	cmp	r0, #0
 800d916:	d093      	beq.n	800d840 <_strtod_l+0x9f0>
 800d918:	e4c8      	b.n	800d2ac <_strtod_l+0x45c>
 800d91a:	bf00      	nop
 800d91c:	f3af 8000 	nop.w
 800d920:	00000000 	.word	0x00000000
 800d924:	bff00000 	.word	0xbff00000
 800d928:	00000000 	.word	0x00000000
 800d92c:	3ff00000 	.word	0x3ff00000
 800d930:	94a03595 	.word	0x94a03595
 800d934:	3fdfffff 	.word	0x3fdfffff
 800d938:	35afe535 	.word	0x35afe535
 800d93c:	3fe00000 	.word	0x3fe00000
 800d940:	000fffff 	.word	0x000fffff
 800d944:	7ff00000 	.word	0x7ff00000
 800d948:	7fefffff 	.word	0x7fefffff
 800d94c:	3ff00000 	.word	0x3ff00000
 800d950:	3fe00000 	.word	0x3fe00000
 800d954:	7fe00000 	.word	0x7fe00000
 800d958:	7c9fffff 	.word	0x7c9fffff
 800d95c:	9b08      	ldr	r3, [sp, #32]
 800d95e:	b323      	cbz	r3, 800d9aa <_strtod_l+0xb5a>
 800d960:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d964:	d821      	bhi.n	800d9aa <_strtod_l+0xb5a>
 800d966:	a328      	add	r3, pc, #160	@ (adr r3, 800da08 <_strtod_l+0xbb8>)
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	4630      	mov	r0, r6
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f3 f8c6 	bl	8000b00 <__aeabi_dcmple>
 800d974:	b1a0      	cbz	r0, 800d9a0 <_strtod_l+0xb50>
 800d976:	4639      	mov	r1, r7
 800d978:	4630      	mov	r0, r6
 800d97a:	f7f3 f91d 	bl	8000bb8 <__aeabi_d2uiz>
 800d97e:	2801      	cmp	r0, #1
 800d980:	bf38      	it	cc
 800d982:	2001      	movcc	r0, #1
 800d984:	f7f2 fdc6 	bl	8000514 <__aeabi_ui2d>
 800d988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d98a:	4606      	mov	r6, r0
 800d98c:	460f      	mov	r7, r1
 800d98e:	b9fb      	cbnz	r3, 800d9d0 <_strtod_l+0xb80>
 800d990:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d994:	9014      	str	r0, [sp, #80]	@ 0x50
 800d996:	9315      	str	r3, [sp, #84]	@ 0x54
 800d998:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d99c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d9a6:	1b5b      	subs	r3, r3, r5
 800d9a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d9aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d9ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d9b2:	f7ff f8f1 	bl	800cb98 <__ulp>
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	ec53 2b10 	vmov	r2, r3, d0
 800d9bc:	4659      	mov	r1, fp
 800d9be:	f7f2 fe23 	bl	8000608 <__aeabi_dmul>
 800d9c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d9c6:	f7f2 fc69 	bl	800029c <__adddf3>
 800d9ca:	4682      	mov	sl, r0
 800d9cc:	468b      	mov	fp, r1
 800d9ce:	e770      	b.n	800d8b2 <_strtod_l+0xa62>
 800d9d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d9d4:	e7e0      	b.n	800d998 <_strtod_l+0xb48>
 800d9d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800da10 <_strtod_l+0xbc0>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f3 f886 	bl	8000aec <__aeabi_dcmplt>
 800d9e0:	e798      	b.n	800d914 <_strtod_l+0xac4>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d9e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9ea:	6013      	str	r3, [r2, #0]
 800d9ec:	f7ff ba6d 	b.w	800ceca <_strtod_l+0x7a>
 800d9f0:	2a65      	cmp	r2, #101	@ 0x65
 800d9f2:	f43f ab68 	beq.w	800d0c6 <_strtod_l+0x276>
 800d9f6:	2a45      	cmp	r2, #69	@ 0x45
 800d9f8:	f43f ab65 	beq.w	800d0c6 <_strtod_l+0x276>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	f7ff bba0 	b.w	800d142 <_strtod_l+0x2f2>
 800da02:	bf00      	nop
 800da04:	f3af 8000 	nop.w
 800da08:	ffc00000 	.word	0xffc00000
 800da0c:	41dfffff 	.word	0x41dfffff
 800da10:	94a03595 	.word	0x94a03595
 800da14:	3fcfffff 	.word	0x3fcfffff

0800da18 <_strtod_r>:
 800da18:	4b01      	ldr	r3, [pc, #4]	@ (800da20 <_strtod_r+0x8>)
 800da1a:	f7ff ba19 	b.w	800ce50 <_strtod_l>
 800da1e:	bf00      	nop
 800da20:	20000180 	.word	0x20000180

0800da24 <_strtol_l.isra.0>:
 800da24:	2b24      	cmp	r3, #36	@ 0x24
 800da26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da2a:	4686      	mov	lr, r0
 800da2c:	4690      	mov	r8, r2
 800da2e:	d801      	bhi.n	800da34 <_strtol_l.isra.0+0x10>
 800da30:	2b01      	cmp	r3, #1
 800da32:	d106      	bne.n	800da42 <_strtol_l.isra.0+0x1e>
 800da34:	f7fd fda8 	bl	800b588 <__errno>
 800da38:	2316      	movs	r3, #22
 800da3a:	6003      	str	r3, [r0, #0]
 800da3c:	2000      	movs	r0, #0
 800da3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da42:	4834      	ldr	r0, [pc, #208]	@ (800db14 <_strtol_l.isra.0+0xf0>)
 800da44:	460d      	mov	r5, r1
 800da46:	462a      	mov	r2, r5
 800da48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da4c:	5d06      	ldrb	r6, [r0, r4]
 800da4e:	f016 0608 	ands.w	r6, r6, #8
 800da52:	d1f8      	bne.n	800da46 <_strtol_l.isra.0+0x22>
 800da54:	2c2d      	cmp	r4, #45	@ 0x2d
 800da56:	d110      	bne.n	800da7a <_strtol_l.isra.0+0x56>
 800da58:	782c      	ldrb	r4, [r5, #0]
 800da5a:	2601      	movs	r6, #1
 800da5c:	1c95      	adds	r5, r2, #2
 800da5e:	f033 0210 	bics.w	r2, r3, #16
 800da62:	d115      	bne.n	800da90 <_strtol_l.isra.0+0x6c>
 800da64:	2c30      	cmp	r4, #48	@ 0x30
 800da66:	d10d      	bne.n	800da84 <_strtol_l.isra.0+0x60>
 800da68:	782a      	ldrb	r2, [r5, #0]
 800da6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800da6e:	2a58      	cmp	r2, #88	@ 0x58
 800da70:	d108      	bne.n	800da84 <_strtol_l.isra.0+0x60>
 800da72:	786c      	ldrb	r4, [r5, #1]
 800da74:	3502      	adds	r5, #2
 800da76:	2310      	movs	r3, #16
 800da78:	e00a      	b.n	800da90 <_strtol_l.isra.0+0x6c>
 800da7a:	2c2b      	cmp	r4, #43	@ 0x2b
 800da7c:	bf04      	itt	eq
 800da7e:	782c      	ldrbeq	r4, [r5, #0]
 800da80:	1c95      	addeq	r5, r2, #2
 800da82:	e7ec      	b.n	800da5e <_strtol_l.isra.0+0x3a>
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1f6      	bne.n	800da76 <_strtol_l.isra.0+0x52>
 800da88:	2c30      	cmp	r4, #48	@ 0x30
 800da8a:	bf14      	ite	ne
 800da8c:	230a      	movne	r3, #10
 800da8e:	2308      	moveq	r3, #8
 800da90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800da94:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800da98:	2200      	movs	r2, #0
 800da9a:	fbbc f9f3 	udiv	r9, ip, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	fb03 ca19 	mls	sl, r3, r9, ip
 800daa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800daa8:	2f09      	cmp	r7, #9
 800daaa:	d80f      	bhi.n	800dacc <_strtol_l.isra.0+0xa8>
 800daac:	463c      	mov	r4, r7
 800daae:	42a3      	cmp	r3, r4
 800dab0:	dd1b      	ble.n	800daea <_strtol_l.isra.0+0xc6>
 800dab2:	1c57      	adds	r7, r2, #1
 800dab4:	d007      	beq.n	800dac6 <_strtol_l.isra.0+0xa2>
 800dab6:	4581      	cmp	r9, r0
 800dab8:	d314      	bcc.n	800dae4 <_strtol_l.isra.0+0xc0>
 800daba:	d101      	bne.n	800dac0 <_strtol_l.isra.0+0x9c>
 800dabc:	45a2      	cmp	sl, r4
 800dabe:	db11      	blt.n	800dae4 <_strtol_l.isra.0+0xc0>
 800dac0:	fb00 4003 	mla	r0, r0, r3, r4
 800dac4:	2201      	movs	r2, #1
 800dac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800daca:	e7eb      	b.n	800daa4 <_strtol_l.isra.0+0x80>
 800dacc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dad0:	2f19      	cmp	r7, #25
 800dad2:	d801      	bhi.n	800dad8 <_strtol_l.isra.0+0xb4>
 800dad4:	3c37      	subs	r4, #55	@ 0x37
 800dad6:	e7ea      	b.n	800daae <_strtol_l.isra.0+0x8a>
 800dad8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dadc:	2f19      	cmp	r7, #25
 800dade:	d804      	bhi.n	800daea <_strtol_l.isra.0+0xc6>
 800dae0:	3c57      	subs	r4, #87	@ 0x57
 800dae2:	e7e4      	b.n	800daae <_strtol_l.isra.0+0x8a>
 800dae4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dae8:	e7ed      	b.n	800dac6 <_strtol_l.isra.0+0xa2>
 800daea:	1c53      	adds	r3, r2, #1
 800daec:	d108      	bne.n	800db00 <_strtol_l.isra.0+0xdc>
 800daee:	2322      	movs	r3, #34	@ 0x22
 800daf0:	f8ce 3000 	str.w	r3, [lr]
 800daf4:	4660      	mov	r0, ip
 800daf6:	f1b8 0f00 	cmp.w	r8, #0
 800dafa:	d0a0      	beq.n	800da3e <_strtol_l.isra.0+0x1a>
 800dafc:	1e69      	subs	r1, r5, #1
 800dafe:	e006      	b.n	800db0e <_strtol_l.isra.0+0xea>
 800db00:	b106      	cbz	r6, 800db04 <_strtol_l.isra.0+0xe0>
 800db02:	4240      	negs	r0, r0
 800db04:	f1b8 0f00 	cmp.w	r8, #0
 800db08:	d099      	beq.n	800da3e <_strtol_l.isra.0+0x1a>
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	d1f6      	bne.n	800dafc <_strtol_l.isra.0+0xd8>
 800db0e:	f8c8 1000 	str.w	r1, [r8]
 800db12:	e794      	b.n	800da3e <_strtol_l.isra.0+0x1a>
 800db14:	0800f059 	.word	0x0800f059

0800db18 <_strtol_r>:
 800db18:	f7ff bf84 	b.w	800da24 <_strtol_l.isra.0>

0800db1c <__ssputs_r>:
 800db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	688e      	ldr	r6, [r1, #8]
 800db22:	461f      	mov	r7, r3
 800db24:	42be      	cmp	r6, r7
 800db26:	680b      	ldr	r3, [r1, #0]
 800db28:	4682      	mov	sl, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	4690      	mov	r8, r2
 800db2e:	d82d      	bhi.n	800db8c <__ssputs_r+0x70>
 800db30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db38:	d026      	beq.n	800db88 <__ssputs_r+0x6c>
 800db3a:	6965      	ldr	r5, [r4, #20]
 800db3c:	6909      	ldr	r1, [r1, #16]
 800db3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db42:	eba3 0901 	sub.w	r9, r3, r1
 800db46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db4a:	1c7b      	adds	r3, r7, #1
 800db4c:	444b      	add	r3, r9
 800db4e:	106d      	asrs	r5, r5, #1
 800db50:	429d      	cmp	r5, r3
 800db52:	bf38      	it	cc
 800db54:	461d      	movcc	r5, r3
 800db56:	0553      	lsls	r3, r2, #21
 800db58:	d527      	bpl.n	800dbaa <__ssputs_r+0x8e>
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7fe fc24 	bl	800c3a8 <_malloc_r>
 800db60:	4606      	mov	r6, r0
 800db62:	b360      	cbz	r0, 800dbbe <__ssputs_r+0xa2>
 800db64:	6921      	ldr	r1, [r4, #16]
 800db66:	464a      	mov	r2, r9
 800db68:	f7fd fd3b 	bl	800b5e2 <memcpy>
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db76:	81a3      	strh	r3, [r4, #12]
 800db78:	6126      	str	r6, [r4, #16]
 800db7a:	6165      	str	r5, [r4, #20]
 800db7c:	444e      	add	r6, r9
 800db7e:	eba5 0509 	sub.w	r5, r5, r9
 800db82:	6026      	str	r6, [r4, #0]
 800db84:	60a5      	str	r5, [r4, #8]
 800db86:	463e      	mov	r6, r7
 800db88:	42be      	cmp	r6, r7
 800db8a:	d900      	bls.n	800db8e <__ssputs_r+0x72>
 800db8c:	463e      	mov	r6, r7
 800db8e:	6820      	ldr	r0, [r4, #0]
 800db90:	4632      	mov	r2, r6
 800db92:	4641      	mov	r1, r8
 800db94:	f7fd fc8b 	bl	800b4ae <memmove>
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	1b9b      	subs	r3, r3, r6
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	4433      	add	r3, r6
 800dba2:	6023      	str	r3, [r4, #0]
 800dba4:	2000      	movs	r0, #0
 800dba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbaa:	462a      	mov	r2, r5
 800dbac:	f000 fd61 	bl	800e672 <_realloc_r>
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d1e0      	bne.n	800db78 <__ssputs_r+0x5c>
 800dbb6:	6921      	ldr	r1, [r4, #16]
 800dbb8:	4650      	mov	r0, sl
 800dbba:	f7fe fb81 	bl	800c2c0 <_free_r>
 800dbbe:	230c      	movs	r3, #12
 800dbc0:	f8ca 3000 	str.w	r3, [sl]
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbd0:	e7e9      	b.n	800dba6 <__ssputs_r+0x8a>
	...

0800dbd4 <_svfiprintf_r>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	4698      	mov	r8, r3
 800dbda:	898b      	ldrh	r3, [r1, #12]
 800dbdc:	061b      	lsls	r3, r3, #24
 800dbde:	b09d      	sub	sp, #116	@ 0x74
 800dbe0:	4607      	mov	r7, r0
 800dbe2:	460d      	mov	r5, r1
 800dbe4:	4614      	mov	r4, r2
 800dbe6:	d510      	bpl.n	800dc0a <_svfiprintf_r+0x36>
 800dbe8:	690b      	ldr	r3, [r1, #16]
 800dbea:	b973      	cbnz	r3, 800dc0a <_svfiprintf_r+0x36>
 800dbec:	2140      	movs	r1, #64	@ 0x40
 800dbee:	f7fe fbdb 	bl	800c3a8 <_malloc_r>
 800dbf2:	6028      	str	r0, [r5, #0]
 800dbf4:	6128      	str	r0, [r5, #16]
 800dbf6:	b930      	cbnz	r0, 800dc06 <_svfiprintf_r+0x32>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc00:	b01d      	add	sp, #116	@ 0x74
 800dc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc06:	2340      	movs	r3, #64	@ 0x40
 800dc08:	616b      	str	r3, [r5, #20]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc0e:	2320      	movs	r3, #32
 800dc10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc14:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc18:	2330      	movs	r3, #48	@ 0x30
 800dc1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ddb8 <_svfiprintf_r+0x1e4>
 800dc1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc22:	f04f 0901 	mov.w	r9, #1
 800dc26:	4623      	mov	r3, r4
 800dc28:	469a      	mov	sl, r3
 800dc2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc2e:	b10a      	cbz	r2, 800dc34 <_svfiprintf_r+0x60>
 800dc30:	2a25      	cmp	r2, #37	@ 0x25
 800dc32:	d1f9      	bne.n	800dc28 <_svfiprintf_r+0x54>
 800dc34:	ebba 0b04 	subs.w	fp, sl, r4
 800dc38:	d00b      	beq.n	800dc52 <_svfiprintf_r+0x7e>
 800dc3a:	465b      	mov	r3, fp
 800dc3c:	4622      	mov	r2, r4
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4638      	mov	r0, r7
 800dc42:	f7ff ff6b 	bl	800db1c <__ssputs_r>
 800dc46:	3001      	adds	r0, #1
 800dc48:	f000 80a7 	beq.w	800dd9a <_svfiprintf_r+0x1c6>
 800dc4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc4e:	445a      	add	r2, fp
 800dc50:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc52:	f89a 3000 	ldrb.w	r3, [sl]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f000 809f 	beq.w	800dd9a <_svfiprintf_r+0x1c6>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc66:	f10a 0a01 	add.w	sl, sl, #1
 800dc6a:	9304      	str	r3, [sp, #16]
 800dc6c:	9307      	str	r3, [sp, #28]
 800dc6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc72:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc74:	4654      	mov	r4, sl
 800dc76:	2205      	movs	r2, #5
 800dc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc7c:	484e      	ldr	r0, [pc, #312]	@ (800ddb8 <_svfiprintf_r+0x1e4>)
 800dc7e:	f7f2 faaf 	bl	80001e0 <memchr>
 800dc82:	9a04      	ldr	r2, [sp, #16]
 800dc84:	b9d8      	cbnz	r0, 800dcbe <_svfiprintf_r+0xea>
 800dc86:	06d0      	lsls	r0, r2, #27
 800dc88:	bf44      	itt	mi
 800dc8a:	2320      	movmi	r3, #32
 800dc8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc90:	0711      	lsls	r1, r2, #28
 800dc92:	bf44      	itt	mi
 800dc94:	232b      	movmi	r3, #43	@ 0x2b
 800dc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dca0:	d015      	beq.n	800dcce <_svfiprintf_r+0xfa>
 800dca2:	9a07      	ldr	r2, [sp, #28]
 800dca4:	4654      	mov	r4, sl
 800dca6:	2000      	movs	r0, #0
 800dca8:	f04f 0c0a 	mov.w	ip, #10
 800dcac:	4621      	mov	r1, r4
 800dcae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcb2:	3b30      	subs	r3, #48	@ 0x30
 800dcb4:	2b09      	cmp	r3, #9
 800dcb6:	d94b      	bls.n	800dd50 <_svfiprintf_r+0x17c>
 800dcb8:	b1b0      	cbz	r0, 800dce8 <_svfiprintf_r+0x114>
 800dcba:	9207      	str	r2, [sp, #28]
 800dcbc:	e014      	b.n	800dce8 <_svfiprintf_r+0x114>
 800dcbe:	eba0 0308 	sub.w	r3, r0, r8
 800dcc2:	fa09 f303 	lsl.w	r3, r9, r3
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	46a2      	mov	sl, r4
 800dccc:	e7d2      	b.n	800dc74 <_svfiprintf_r+0xa0>
 800dcce:	9b03      	ldr	r3, [sp, #12]
 800dcd0:	1d19      	adds	r1, r3, #4
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	9103      	str	r1, [sp, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfbb      	ittet	lt
 800dcda:	425b      	neglt	r3, r3
 800dcdc:	f042 0202 	orrlt.w	r2, r2, #2
 800dce0:	9307      	strge	r3, [sp, #28]
 800dce2:	9307      	strlt	r3, [sp, #28]
 800dce4:	bfb8      	it	lt
 800dce6:	9204      	strlt	r2, [sp, #16]
 800dce8:	7823      	ldrb	r3, [r4, #0]
 800dcea:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcec:	d10a      	bne.n	800dd04 <_svfiprintf_r+0x130>
 800dcee:	7863      	ldrb	r3, [r4, #1]
 800dcf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcf2:	d132      	bne.n	800dd5a <_svfiprintf_r+0x186>
 800dcf4:	9b03      	ldr	r3, [sp, #12]
 800dcf6:	1d1a      	adds	r2, r3, #4
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	9203      	str	r2, [sp, #12]
 800dcfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd00:	3402      	adds	r4, #2
 800dd02:	9305      	str	r3, [sp, #20]
 800dd04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ddc8 <_svfiprintf_r+0x1f4>
 800dd08:	7821      	ldrb	r1, [r4, #0]
 800dd0a:	2203      	movs	r2, #3
 800dd0c:	4650      	mov	r0, sl
 800dd0e:	f7f2 fa67 	bl	80001e0 <memchr>
 800dd12:	b138      	cbz	r0, 800dd24 <_svfiprintf_r+0x150>
 800dd14:	9b04      	ldr	r3, [sp, #16]
 800dd16:	eba0 000a 	sub.w	r0, r0, sl
 800dd1a:	2240      	movs	r2, #64	@ 0x40
 800dd1c:	4082      	lsls	r2, r0
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	3401      	adds	r4, #1
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd28:	4824      	ldr	r0, [pc, #144]	@ (800ddbc <_svfiprintf_r+0x1e8>)
 800dd2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd2e:	2206      	movs	r2, #6
 800dd30:	f7f2 fa56 	bl	80001e0 <memchr>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d036      	beq.n	800dda6 <_svfiprintf_r+0x1d2>
 800dd38:	4b21      	ldr	r3, [pc, #132]	@ (800ddc0 <_svfiprintf_r+0x1ec>)
 800dd3a:	bb1b      	cbnz	r3, 800dd84 <_svfiprintf_r+0x1b0>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	3307      	adds	r3, #7
 800dd40:	f023 0307 	bic.w	r3, r3, #7
 800dd44:	3308      	adds	r3, #8
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	4433      	add	r3, r6
 800dd4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd4e:	e76a      	b.n	800dc26 <_svfiprintf_r+0x52>
 800dd50:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd54:	460c      	mov	r4, r1
 800dd56:	2001      	movs	r0, #1
 800dd58:	e7a8      	b.n	800dcac <_svfiprintf_r+0xd8>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	3401      	adds	r4, #1
 800dd5e:	9305      	str	r3, [sp, #20]
 800dd60:	4619      	mov	r1, r3
 800dd62:	f04f 0c0a 	mov.w	ip, #10
 800dd66:	4620      	mov	r0, r4
 800dd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd6c:	3a30      	subs	r2, #48	@ 0x30
 800dd6e:	2a09      	cmp	r2, #9
 800dd70:	d903      	bls.n	800dd7a <_svfiprintf_r+0x1a6>
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0c6      	beq.n	800dd04 <_svfiprintf_r+0x130>
 800dd76:	9105      	str	r1, [sp, #20]
 800dd78:	e7c4      	b.n	800dd04 <_svfiprintf_r+0x130>
 800dd7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd7e:	4604      	mov	r4, r0
 800dd80:	2301      	movs	r3, #1
 800dd82:	e7f0      	b.n	800dd66 <_svfiprintf_r+0x192>
 800dd84:	ab03      	add	r3, sp, #12
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	462a      	mov	r2, r5
 800dd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc4 <_svfiprintf_r+0x1f0>)
 800dd8c:	a904      	add	r1, sp, #16
 800dd8e:	4638      	mov	r0, r7
 800dd90:	f7fc fc6c 	bl	800a66c <_printf_float>
 800dd94:	1c42      	adds	r2, r0, #1
 800dd96:	4606      	mov	r6, r0
 800dd98:	d1d6      	bne.n	800dd48 <_svfiprintf_r+0x174>
 800dd9a:	89ab      	ldrh	r3, [r5, #12]
 800dd9c:	065b      	lsls	r3, r3, #25
 800dd9e:	f53f af2d 	bmi.w	800dbfc <_svfiprintf_r+0x28>
 800dda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dda4:	e72c      	b.n	800dc00 <_svfiprintf_r+0x2c>
 800dda6:	ab03      	add	r3, sp, #12
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	462a      	mov	r2, r5
 800ddac:	4b05      	ldr	r3, [pc, #20]	@ (800ddc4 <_svfiprintf_r+0x1f0>)
 800ddae:	a904      	add	r1, sp, #16
 800ddb0:	4638      	mov	r0, r7
 800ddb2:	f7fc fef3 	bl	800ab9c <_printf_i>
 800ddb6:	e7ed      	b.n	800dd94 <_svfiprintf_r+0x1c0>
 800ddb8:	0800ee55 	.word	0x0800ee55
 800ddbc:	0800ee5f 	.word	0x0800ee5f
 800ddc0:	0800a66d 	.word	0x0800a66d
 800ddc4:	0800db1d 	.word	0x0800db1d
 800ddc8:	0800ee5b 	.word	0x0800ee5b

0800ddcc <__sflush_r>:
 800ddcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd4:	0716      	lsls	r6, r2, #28
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	460c      	mov	r4, r1
 800ddda:	d454      	bmi.n	800de86 <__sflush_r+0xba>
 800dddc:	684b      	ldr	r3, [r1, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dc02      	bgt.n	800dde8 <__sflush_r+0x1c>
 800dde2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd48      	ble.n	800de7a <__sflush_r+0xae>
 800dde8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddea:	2e00      	cmp	r6, #0
 800ddec:	d045      	beq.n	800de7a <__sflush_r+0xae>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddf4:	682f      	ldr	r7, [r5, #0]
 800ddf6:	6a21      	ldr	r1, [r4, #32]
 800ddf8:	602b      	str	r3, [r5, #0]
 800ddfa:	d030      	beq.n	800de5e <__sflush_r+0x92>
 800ddfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	0759      	lsls	r1, r3, #29
 800de02:	d505      	bpl.n	800de10 <__sflush_r+0x44>
 800de04:	6863      	ldr	r3, [r4, #4]
 800de06:	1ad2      	subs	r2, r2, r3
 800de08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de0a:	b10b      	cbz	r3, 800de10 <__sflush_r+0x44>
 800de0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de0e:	1ad2      	subs	r2, r2, r3
 800de10:	2300      	movs	r3, #0
 800de12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de14:	6a21      	ldr	r1, [r4, #32]
 800de16:	4628      	mov	r0, r5
 800de18:	47b0      	blx	r6
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	d106      	bne.n	800de2e <__sflush_r+0x62>
 800de20:	6829      	ldr	r1, [r5, #0]
 800de22:	291d      	cmp	r1, #29
 800de24:	d82b      	bhi.n	800de7e <__sflush_r+0xb2>
 800de26:	4a2a      	ldr	r2, [pc, #168]	@ (800ded0 <__sflush_r+0x104>)
 800de28:	40ca      	lsrs	r2, r1
 800de2a:	07d6      	lsls	r6, r2, #31
 800de2c:	d527      	bpl.n	800de7e <__sflush_r+0xb2>
 800de2e:	2200      	movs	r2, #0
 800de30:	6062      	str	r2, [r4, #4]
 800de32:	04d9      	lsls	r1, r3, #19
 800de34:	6922      	ldr	r2, [r4, #16]
 800de36:	6022      	str	r2, [r4, #0]
 800de38:	d504      	bpl.n	800de44 <__sflush_r+0x78>
 800de3a:	1c42      	adds	r2, r0, #1
 800de3c:	d101      	bne.n	800de42 <__sflush_r+0x76>
 800de3e:	682b      	ldr	r3, [r5, #0]
 800de40:	b903      	cbnz	r3, 800de44 <__sflush_r+0x78>
 800de42:	6560      	str	r0, [r4, #84]	@ 0x54
 800de44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de46:	602f      	str	r7, [r5, #0]
 800de48:	b1b9      	cbz	r1, 800de7a <__sflush_r+0xae>
 800de4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de4e:	4299      	cmp	r1, r3
 800de50:	d002      	beq.n	800de58 <__sflush_r+0x8c>
 800de52:	4628      	mov	r0, r5
 800de54:	f7fe fa34 	bl	800c2c0 <_free_r>
 800de58:	2300      	movs	r3, #0
 800de5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800de5c:	e00d      	b.n	800de7a <__sflush_r+0xae>
 800de5e:	2301      	movs	r3, #1
 800de60:	4628      	mov	r0, r5
 800de62:	47b0      	blx	r6
 800de64:	4602      	mov	r2, r0
 800de66:	1c50      	adds	r0, r2, #1
 800de68:	d1c9      	bne.n	800ddfe <__sflush_r+0x32>
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d0c6      	beq.n	800ddfe <__sflush_r+0x32>
 800de70:	2b1d      	cmp	r3, #29
 800de72:	d001      	beq.n	800de78 <__sflush_r+0xac>
 800de74:	2b16      	cmp	r3, #22
 800de76:	d11e      	bne.n	800deb6 <__sflush_r+0xea>
 800de78:	602f      	str	r7, [r5, #0]
 800de7a:	2000      	movs	r0, #0
 800de7c:	e022      	b.n	800dec4 <__sflush_r+0xf8>
 800de7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de82:	b21b      	sxth	r3, r3
 800de84:	e01b      	b.n	800debe <__sflush_r+0xf2>
 800de86:	690f      	ldr	r7, [r1, #16]
 800de88:	2f00      	cmp	r7, #0
 800de8a:	d0f6      	beq.n	800de7a <__sflush_r+0xae>
 800de8c:	0793      	lsls	r3, r2, #30
 800de8e:	680e      	ldr	r6, [r1, #0]
 800de90:	bf08      	it	eq
 800de92:	694b      	ldreq	r3, [r1, #20]
 800de94:	600f      	str	r7, [r1, #0]
 800de96:	bf18      	it	ne
 800de98:	2300      	movne	r3, #0
 800de9a:	eba6 0807 	sub.w	r8, r6, r7
 800de9e:	608b      	str	r3, [r1, #8]
 800dea0:	f1b8 0f00 	cmp.w	r8, #0
 800dea4:	dde9      	ble.n	800de7a <__sflush_r+0xae>
 800dea6:	6a21      	ldr	r1, [r4, #32]
 800dea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800deaa:	4643      	mov	r3, r8
 800deac:	463a      	mov	r2, r7
 800deae:	4628      	mov	r0, r5
 800deb0:	47b0      	blx	r6
 800deb2:	2800      	cmp	r0, #0
 800deb4:	dc08      	bgt.n	800dec8 <__sflush_r+0xfc>
 800deb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800debe:	81a3      	strh	r3, [r4, #12]
 800dec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec8:	4407      	add	r7, r0
 800deca:	eba8 0800 	sub.w	r8, r8, r0
 800dece:	e7e7      	b.n	800dea0 <__sflush_r+0xd4>
 800ded0:	20400001 	.word	0x20400001

0800ded4 <_fflush_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	690b      	ldr	r3, [r1, #16]
 800ded8:	4605      	mov	r5, r0
 800deda:	460c      	mov	r4, r1
 800dedc:	b913      	cbnz	r3, 800dee4 <_fflush_r+0x10>
 800dede:	2500      	movs	r5, #0
 800dee0:	4628      	mov	r0, r5
 800dee2:	bd38      	pop	{r3, r4, r5, pc}
 800dee4:	b118      	cbz	r0, 800deee <_fflush_r+0x1a>
 800dee6:	6a03      	ldr	r3, [r0, #32]
 800dee8:	b90b      	cbnz	r3, 800deee <_fflush_r+0x1a>
 800deea:	f7fd fa0f 	bl	800b30c <__sinit>
 800deee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0f3      	beq.n	800dede <_fflush_r+0xa>
 800def6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800def8:	07d0      	lsls	r0, r2, #31
 800defa:	d404      	bmi.n	800df06 <_fflush_r+0x32>
 800defc:	0599      	lsls	r1, r3, #22
 800defe:	d402      	bmi.n	800df06 <_fflush_r+0x32>
 800df00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df02:	f7fd fb6c 	bl	800b5de <__retarget_lock_acquire_recursive>
 800df06:	4628      	mov	r0, r5
 800df08:	4621      	mov	r1, r4
 800df0a:	f7ff ff5f 	bl	800ddcc <__sflush_r>
 800df0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df10:	07da      	lsls	r2, r3, #31
 800df12:	4605      	mov	r5, r0
 800df14:	d4e4      	bmi.n	800dee0 <_fflush_r+0xc>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	059b      	lsls	r3, r3, #22
 800df1a:	d4e1      	bmi.n	800dee0 <_fflush_r+0xc>
 800df1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df1e:	f7fd fb5f 	bl	800b5e0 <__retarget_lock_release_recursive>
 800df22:	e7dd      	b.n	800dee0 <_fflush_r+0xc>

0800df24 <strncmp>:
 800df24:	b510      	push	{r4, lr}
 800df26:	b16a      	cbz	r2, 800df44 <strncmp+0x20>
 800df28:	3901      	subs	r1, #1
 800df2a:	1884      	adds	r4, r0, r2
 800df2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df34:	429a      	cmp	r2, r3
 800df36:	d103      	bne.n	800df40 <strncmp+0x1c>
 800df38:	42a0      	cmp	r0, r4
 800df3a:	d001      	beq.n	800df40 <strncmp+0x1c>
 800df3c:	2a00      	cmp	r2, #0
 800df3e:	d1f5      	bne.n	800df2c <strncmp+0x8>
 800df40:	1ad0      	subs	r0, r2, r3
 800df42:	bd10      	pop	{r4, pc}
 800df44:	4610      	mov	r0, r2
 800df46:	e7fc      	b.n	800df42 <strncmp+0x1e>

0800df48 <_sbrk_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4d06      	ldr	r5, [pc, #24]	@ (800df64 <_sbrk_r+0x1c>)
 800df4c:	2300      	movs	r3, #0
 800df4e:	4604      	mov	r4, r0
 800df50:	4608      	mov	r0, r1
 800df52:	602b      	str	r3, [r5, #0]
 800df54:	f7f4 f982 	bl	800225c <_sbrk>
 800df58:	1c43      	adds	r3, r0, #1
 800df5a:	d102      	bne.n	800df62 <_sbrk_r+0x1a>
 800df5c:	682b      	ldr	r3, [r5, #0]
 800df5e:	b103      	cbz	r3, 800df62 <_sbrk_r+0x1a>
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	bd38      	pop	{r3, r4, r5, pc}
 800df64:	200021cc 	.word	0x200021cc

0800df68 <nan>:
 800df68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800df70 <nan+0x8>
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	00000000 	.word	0x00000000
 800df74:	7ff80000 	.word	0x7ff80000

0800df78 <__assert_func>:
 800df78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df7a:	4614      	mov	r4, r2
 800df7c:	461a      	mov	r2, r3
 800df7e:	4b09      	ldr	r3, [pc, #36]	@ (800dfa4 <__assert_func+0x2c>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4605      	mov	r5, r0
 800df84:	68d8      	ldr	r0, [r3, #12]
 800df86:	b14c      	cbz	r4, 800df9c <__assert_func+0x24>
 800df88:	4b07      	ldr	r3, [pc, #28]	@ (800dfa8 <__assert_func+0x30>)
 800df8a:	9100      	str	r1, [sp, #0]
 800df8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df90:	4906      	ldr	r1, [pc, #24]	@ (800dfac <__assert_func+0x34>)
 800df92:	462b      	mov	r3, r5
 800df94:	f000 fba8 	bl	800e6e8 <fiprintf>
 800df98:	f000 fbb8 	bl	800e70c <abort>
 800df9c:	4b04      	ldr	r3, [pc, #16]	@ (800dfb0 <__assert_func+0x38>)
 800df9e:	461c      	mov	r4, r3
 800dfa0:	e7f3      	b.n	800df8a <__assert_func+0x12>
 800dfa2:	bf00      	nop
 800dfa4:	20000130 	.word	0x20000130
 800dfa8:	0800ee6e 	.word	0x0800ee6e
 800dfac:	0800ee7b 	.word	0x0800ee7b
 800dfb0:	0800eea9 	.word	0x0800eea9

0800dfb4 <_calloc_r>:
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	fba1 5402 	umull	r5, r4, r1, r2
 800dfba:	b934      	cbnz	r4, 800dfca <_calloc_r+0x16>
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	f7fe f9f3 	bl	800c3a8 <_malloc_r>
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	b928      	cbnz	r0, 800dfd2 <_calloc_r+0x1e>
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	bd70      	pop	{r4, r5, r6, pc}
 800dfca:	220c      	movs	r2, #12
 800dfcc:	6002      	str	r2, [r0, #0]
 800dfce:	2600      	movs	r6, #0
 800dfd0:	e7f9      	b.n	800dfc6 <_calloc_r+0x12>
 800dfd2:	462a      	mov	r2, r5
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	f7fd fa84 	bl	800b4e2 <memset>
 800dfda:	e7f4      	b.n	800dfc6 <_calloc_r+0x12>

0800dfdc <rshift>:
 800dfdc:	6903      	ldr	r3, [r0, #16]
 800dfde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dfe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dfea:	f100 0414 	add.w	r4, r0, #20
 800dfee:	dd45      	ble.n	800e07c <rshift+0xa0>
 800dff0:	f011 011f 	ands.w	r1, r1, #31
 800dff4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dff8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dffc:	d10c      	bne.n	800e018 <rshift+0x3c>
 800dffe:	f100 0710 	add.w	r7, r0, #16
 800e002:	4629      	mov	r1, r5
 800e004:	42b1      	cmp	r1, r6
 800e006:	d334      	bcc.n	800e072 <rshift+0x96>
 800e008:	1a9b      	subs	r3, r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	1eea      	subs	r2, r5, #3
 800e00e:	4296      	cmp	r6, r2
 800e010:	bf38      	it	cc
 800e012:	2300      	movcc	r3, #0
 800e014:	4423      	add	r3, r4
 800e016:	e015      	b.n	800e044 <rshift+0x68>
 800e018:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e01c:	f1c1 0820 	rsb	r8, r1, #32
 800e020:	40cf      	lsrs	r7, r1
 800e022:	f105 0e04 	add.w	lr, r5, #4
 800e026:	46a1      	mov	r9, r4
 800e028:	4576      	cmp	r6, lr
 800e02a:	46f4      	mov	ip, lr
 800e02c:	d815      	bhi.n	800e05a <rshift+0x7e>
 800e02e:	1a9a      	subs	r2, r3, r2
 800e030:	0092      	lsls	r2, r2, #2
 800e032:	3a04      	subs	r2, #4
 800e034:	3501      	adds	r5, #1
 800e036:	42ae      	cmp	r6, r5
 800e038:	bf38      	it	cc
 800e03a:	2200      	movcc	r2, #0
 800e03c:	18a3      	adds	r3, r4, r2
 800e03e:	50a7      	str	r7, [r4, r2]
 800e040:	b107      	cbz	r7, 800e044 <rshift+0x68>
 800e042:	3304      	adds	r3, #4
 800e044:	1b1a      	subs	r2, r3, r4
 800e046:	42a3      	cmp	r3, r4
 800e048:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e04c:	bf08      	it	eq
 800e04e:	2300      	moveq	r3, #0
 800e050:	6102      	str	r2, [r0, #16]
 800e052:	bf08      	it	eq
 800e054:	6143      	streq	r3, [r0, #20]
 800e056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e05a:	f8dc c000 	ldr.w	ip, [ip]
 800e05e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e062:	ea4c 0707 	orr.w	r7, ip, r7
 800e066:	f849 7b04 	str.w	r7, [r9], #4
 800e06a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e06e:	40cf      	lsrs	r7, r1
 800e070:	e7da      	b.n	800e028 <rshift+0x4c>
 800e072:	f851 cb04 	ldr.w	ip, [r1], #4
 800e076:	f847 cf04 	str.w	ip, [r7, #4]!
 800e07a:	e7c3      	b.n	800e004 <rshift+0x28>
 800e07c:	4623      	mov	r3, r4
 800e07e:	e7e1      	b.n	800e044 <rshift+0x68>

0800e080 <__hexdig_fun>:
 800e080:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e084:	2b09      	cmp	r3, #9
 800e086:	d802      	bhi.n	800e08e <__hexdig_fun+0xe>
 800e088:	3820      	subs	r0, #32
 800e08a:	b2c0      	uxtb	r0, r0
 800e08c:	4770      	bx	lr
 800e08e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e092:	2b05      	cmp	r3, #5
 800e094:	d801      	bhi.n	800e09a <__hexdig_fun+0x1a>
 800e096:	3847      	subs	r0, #71	@ 0x47
 800e098:	e7f7      	b.n	800e08a <__hexdig_fun+0xa>
 800e09a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	d801      	bhi.n	800e0a6 <__hexdig_fun+0x26>
 800e0a2:	3827      	subs	r0, #39	@ 0x27
 800e0a4:	e7f1      	b.n	800e08a <__hexdig_fun+0xa>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	4770      	bx	lr
	...

0800e0ac <__gethex>:
 800e0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b0:	b085      	sub	sp, #20
 800e0b2:	468a      	mov	sl, r1
 800e0b4:	9302      	str	r3, [sp, #8]
 800e0b6:	680b      	ldr	r3, [r1, #0]
 800e0b8:	9001      	str	r0, [sp, #4]
 800e0ba:	4690      	mov	r8, r2
 800e0bc:	1c9c      	adds	r4, r3, #2
 800e0be:	46a1      	mov	r9, r4
 800e0c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e0c4:	2830      	cmp	r0, #48	@ 0x30
 800e0c6:	d0fa      	beq.n	800e0be <__gethex+0x12>
 800e0c8:	eba9 0303 	sub.w	r3, r9, r3
 800e0cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800e0d0:	f7ff ffd6 	bl	800e080 <__hexdig_fun>
 800e0d4:	4605      	mov	r5, r0
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d168      	bne.n	800e1ac <__gethex+0x100>
 800e0da:	49a0      	ldr	r1, [pc, #640]	@ (800e35c <__gethex+0x2b0>)
 800e0dc:	2201      	movs	r2, #1
 800e0de:	4648      	mov	r0, r9
 800e0e0:	f7ff ff20 	bl	800df24 <strncmp>
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d167      	bne.n	800e1ba <__gethex+0x10e>
 800e0ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e0ee:	4626      	mov	r6, r4
 800e0f0:	f7ff ffc6 	bl	800e080 <__hexdig_fun>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d062      	beq.n	800e1be <__gethex+0x112>
 800e0f8:	4623      	mov	r3, r4
 800e0fa:	7818      	ldrb	r0, [r3, #0]
 800e0fc:	2830      	cmp	r0, #48	@ 0x30
 800e0fe:	4699      	mov	r9, r3
 800e100:	f103 0301 	add.w	r3, r3, #1
 800e104:	d0f9      	beq.n	800e0fa <__gethex+0x4e>
 800e106:	f7ff ffbb 	bl	800e080 <__hexdig_fun>
 800e10a:	fab0 f580 	clz	r5, r0
 800e10e:	096d      	lsrs	r5, r5, #5
 800e110:	f04f 0b01 	mov.w	fp, #1
 800e114:	464a      	mov	r2, r9
 800e116:	4616      	mov	r6, r2
 800e118:	3201      	adds	r2, #1
 800e11a:	7830      	ldrb	r0, [r6, #0]
 800e11c:	f7ff ffb0 	bl	800e080 <__hexdig_fun>
 800e120:	2800      	cmp	r0, #0
 800e122:	d1f8      	bne.n	800e116 <__gethex+0x6a>
 800e124:	498d      	ldr	r1, [pc, #564]	@ (800e35c <__gethex+0x2b0>)
 800e126:	2201      	movs	r2, #1
 800e128:	4630      	mov	r0, r6
 800e12a:	f7ff fefb 	bl	800df24 <strncmp>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d13f      	bne.n	800e1b2 <__gethex+0x106>
 800e132:	b944      	cbnz	r4, 800e146 <__gethex+0x9a>
 800e134:	1c74      	adds	r4, r6, #1
 800e136:	4622      	mov	r2, r4
 800e138:	4616      	mov	r6, r2
 800e13a:	3201      	adds	r2, #1
 800e13c:	7830      	ldrb	r0, [r6, #0]
 800e13e:	f7ff ff9f 	bl	800e080 <__hexdig_fun>
 800e142:	2800      	cmp	r0, #0
 800e144:	d1f8      	bne.n	800e138 <__gethex+0x8c>
 800e146:	1ba4      	subs	r4, r4, r6
 800e148:	00a7      	lsls	r7, r4, #2
 800e14a:	7833      	ldrb	r3, [r6, #0]
 800e14c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e150:	2b50      	cmp	r3, #80	@ 0x50
 800e152:	d13e      	bne.n	800e1d2 <__gethex+0x126>
 800e154:	7873      	ldrb	r3, [r6, #1]
 800e156:	2b2b      	cmp	r3, #43	@ 0x2b
 800e158:	d033      	beq.n	800e1c2 <__gethex+0x116>
 800e15a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e15c:	d034      	beq.n	800e1c8 <__gethex+0x11c>
 800e15e:	1c71      	adds	r1, r6, #1
 800e160:	2400      	movs	r4, #0
 800e162:	7808      	ldrb	r0, [r1, #0]
 800e164:	f7ff ff8c 	bl	800e080 <__hexdig_fun>
 800e168:	1e43      	subs	r3, r0, #1
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b18      	cmp	r3, #24
 800e16e:	d830      	bhi.n	800e1d2 <__gethex+0x126>
 800e170:	f1a0 0210 	sub.w	r2, r0, #16
 800e174:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e178:	f7ff ff82 	bl	800e080 <__hexdig_fun>
 800e17c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800e180:	fa5f fc8c 	uxtb.w	ip, ip
 800e184:	f1bc 0f18 	cmp.w	ip, #24
 800e188:	f04f 030a 	mov.w	r3, #10
 800e18c:	d91e      	bls.n	800e1cc <__gethex+0x120>
 800e18e:	b104      	cbz	r4, 800e192 <__gethex+0xe6>
 800e190:	4252      	negs	r2, r2
 800e192:	4417      	add	r7, r2
 800e194:	f8ca 1000 	str.w	r1, [sl]
 800e198:	b1ed      	cbz	r5, 800e1d6 <__gethex+0x12a>
 800e19a:	f1bb 0f00 	cmp.w	fp, #0
 800e19e:	bf0c      	ite	eq
 800e1a0:	2506      	moveq	r5, #6
 800e1a2:	2500      	movne	r5, #0
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	b005      	add	sp, #20
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	2500      	movs	r5, #0
 800e1ae:	462c      	mov	r4, r5
 800e1b0:	e7b0      	b.n	800e114 <__gethex+0x68>
 800e1b2:	2c00      	cmp	r4, #0
 800e1b4:	d1c7      	bne.n	800e146 <__gethex+0x9a>
 800e1b6:	4627      	mov	r7, r4
 800e1b8:	e7c7      	b.n	800e14a <__gethex+0x9e>
 800e1ba:	464e      	mov	r6, r9
 800e1bc:	462f      	mov	r7, r5
 800e1be:	2501      	movs	r5, #1
 800e1c0:	e7c3      	b.n	800e14a <__gethex+0x9e>
 800e1c2:	2400      	movs	r4, #0
 800e1c4:	1cb1      	adds	r1, r6, #2
 800e1c6:	e7cc      	b.n	800e162 <__gethex+0xb6>
 800e1c8:	2401      	movs	r4, #1
 800e1ca:	e7fb      	b.n	800e1c4 <__gethex+0x118>
 800e1cc:	fb03 0002 	mla	r0, r3, r2, r0
 800e1d0:	e7ce      	b.n	800e170 <__gethex+0xc4>
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	e7de      	b.n	800e194 <__gethex+0xe8>
 800e1d6:	eba6 0309 	sub.w	r3, r6, r9
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	4629      	mov	r1, r5
 800e1de:	2b07      	cmp	r3, #7
 800e1e0:	dc0a      	bgt.n	800e1f8 <__gethex+0x14c>
 800e1e2:	9801      	ldr	r0, [sp, #4]
 800e1e4:	f7fe f96c 	bl	800c4c0 <_Balloc>
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	b940      	cbnz	r0, 800e1fe <__gethex+0x152>
 800e1ec:	4b5c      	ldr	r3, [pc, #368]	@ (800e360 <__gethex+0x2b4>)
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	21e4      	movs	r1, #228	@ 0xe4
 800e1f2:	485c      	ldr	r0, [pc, #368]	@ (800e364 <__gethex+0x2b8>)
 800e1f4:	f7ff fec0 	bl	800df78 <__assert_func>
 800e1f8:	3101      	adds	r1, #1
 800e1fa:	105b      	asrs	r3, r3, #1
 800e1fc:	e7ef      	b.n	800e1de <__gethex+0x132>
 800e1fe:	f100 0a14 	add.w	sl, r0, #20
 800e202:	2300      	movs	r3, #0
 800e204:	4655      	mov	r5, sl
 800e206:	469b      	mov	fp, r3
 800e208:	45b1      	cmp	r9, r6
 800e20a:	d337      	bcc.n	800e27c <__gethex+0x1d0>
 800e20c:	f845 bb04 	str.w	fp, [r5], #4
 800e210:	eba5 050a 	sub.w	r5, r5, sl
 800e214:	10ad      	asrs	r5, r5, #2
 800e216:	6125      	str	r5, [r4, #16]
 800e218:	4658      	mov	r0, fp
 800e21a:	f7fe fa43 	bl	800c6a4 <__hi0bits>
 800e21e:	016d      	lsls	r5, r5, #5
 800e220:	f8d8 6000 	ldr.w	r6, [r8]
 800e224:	1a2d      	subs	r5, r5, r0
 800e226:	42b5      	cmp	r5, r6
 800e228:	dd54      	ble.n	800e2d4 <__gethex+0x228>
 800e22a:	1bad      	subs	r5, r5, r6
 800e22c:	4629      	mov	r1, r5
 800e22e:	4620      	mov	r0, r4
 800e230:	f7fe fdcf 	bl	800cdd2 <__any_on>
 800e234:	4681      	mov	r9, r0
 800e236:	b178      	cbz	r0, 800e258 <__gethex+0x1ac>
 800e238:	1e6b      	subs	r3, r5, #1
 800e23a:	1159      	asrs	r1, r3, #5
 800e23c:	f003 021f 	and.w	r2, r3, #31
 800e240:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e244:	f04f 0901 	mov.w	r9, #1
 800e248:	fa09 f202 	lsl.w	r2, r9, r2
 800e24c:	420a      	tst	r2, r1
 800e24e:	d003      	beq.n	800e258 <__gethex+0x1ac>
 800e250:	454b      	cmp	r3, r9
 800e252:	dc36      	bgt.n	800e2c2 <__gethex+0x216>
 800e254:	f04f 0902 	mov.w	r9, #2
 800e258:	4629      	mov	r1, r5
 800e25a:	4620      	mov	r0, r4
 800e25c:	f7ff febe 	bl	800dfdc <rshift>
 800e260:	442f      	add	r7, r5
 800e262:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e266:	42bb      	cmp	r3, r7
 800e268:	da42      	bge.n	800e2f0 <__gethex+0x244>
 800e26a:	9801      	ldr	r0, [sp, #4]
 800e26c:	4621      	mov	r1, r4
 800e26e:	f7fe f967 	bl	800c540 <_Bfree>
 800e272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e274:	2300      	movs	r3, #0
 800e276:	6013      	str	r3, [r2, #0]
 800e278:	25a3      	movs	r5, #163	@ 0xa3
 800e27a:	e793      	b.n	800e1a4 <__gethex+0xf8>
 800e27c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e280:	2a2e      	cmp	r2, #46	@ 0x2e
 800e282:	d012      	beq.n	800e2aa <__gethex+0x1fe>
 800e284:	2b20      	cmp	r3, #32
 800e286:	d104      	bne.n	800e292 <__gethex+0x1e6>
 800e288:	f845 bb04 	str.w	fp, [r5], #4
 800e28c:	f04f 0b00 	mov.w	fp, #0
 800e290:	465b      	mov	r3, fp
 800e292:	7830      	ldrb	r0, [r6, #0]
 800e294:	9303      	str	r3, [sp, #12]
 800e296:	f7ff fef3 	bl	800e080 <__hexdig_fun>
 800e29a:	9b03      	ldr	r3, [sp, #12]
 800e29c:	f000 000f 	and.w	r0, r0, #15
 800e2a0:	4098      	lsls	r0, r3
 800e2a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	e7ae      	b.n	800e208 <__gethex+0x15c>
 800e2aa:	45b1      	cmp	r9, r6
 800e2ac:	d8ea      	bhi.n	800e284 <__gethex+0x1d8>
 800e2ae:	492b      	ldr	r1, [pc, #172]	@ (800e35c <__gethex+0x2b0>)
 800e2b0:	9303      	str	r3, [sp, #12]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f7ff fe35 	bl	800df24 <strncmp>
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d1e1      	bne.n	800e284 <__gethex+0x1d8>
 800e2c0:	e7a2      	b.n	800e208 <__gethex+0x15c>
 800e2c2:	1ea9      	subs	r1, r5, #2
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f7fe fd84 	bl	800cdd2 <__any_on>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d0c2      	beq.n	800e254 <__gethex+0x1a8>
 800e2ce:	f04f 0903 	mov.w	r9, #3
 800e2d2:	e7c1      	b.n	800e258 <__gethex+0x1ac>
 800e2d4:	da09      	bge.n	800e2ea <__gethex+0x23e>
 800e2d6:	1b75      	subs	r5, r6, r5
 800e2d8:	4621      	mov	r1, r4
 800e2da:	9801      	ldr	r0, [sp, #4]
 800e2dc:	462a      	mov	r2, r5
 800e2de:	f7fe fb3f 	bl	800c960 <__lshift>
 800e2e2:	1b7f      	subs	r7, r7, r5
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	f100 0a14 	add.w	sl, r0, #20
 800e2ea:	f04f 0900 	mov.w	r9, #0
 800e2ee:	e7b8      	b.n	800e262 <__gethex+0x1b6>
 800e2f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e2f4:	42bd      	cmp	r5, r7
 800e2f6:	dd6f      	ble.n	800e3d8 <__gethex+0x32c>
 800e2f8:	1bed      	subs	r5, r5, r7
 800e2fa:	42ae      	cmp	r6, r5
 800e2fc:	dc34      	bgt.n	800e368 <__gethex+0x2bc>
 800e2fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e302:	2b02      	cmp	r3, #2
 800e304:	d022      	beq.n	800e34c <__gethex+0x2a0>
 800e306:	2b03      	cmp	r3, #3
 800e308:	d024      	beq.n	800e354 <__gethex+0x2a8>
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d115      	bne.n	800e33a <__gethex+0x28e>
 800e30e:	42ae      	cmp	r6, r5
 800e310:	d113      	bne.n	800e33a <__gethex+0x28e>
 800e312:	2e01      	cmp	r6, #1
 800e314:	d10b      	bne.n	800e32e <__gethex+0x282>
 800e316:	9a02      	ldr	r2, [sp, #8]
 800e318:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e31c:	6013      	str	r3, [r2, #0]
 800e31e:	2301      	movs	r3, #1
 800e320:	6123      	str	r3, [r4, #16]
 800e322:	f8ca 3000 	str.w	r3, [sl]
 800e326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e328:	2562      	movs	r5, #98	@ 0x62
 800e32a:	601c      	str	r4, [r3, #0]
 800e32c:	e73a      	b.n	800e1a4 <__gethex+0xf8>
 800e32e:	1e71      	subs	r1, r6, #1
 800e330:	4620      	mov	r0, r4
 800e332:	f7fe fd4e 	bl	800cdd2 <__any_on>
 800e336:	2800      	cmp	r0, #0
 800e338:	d1ed      	bne.n	800e316 <__gethex+0x26a>
 800e33a:	9801      	ldr	r0, [sp, #4]
 800e33c:	4621      	mov	r1, r4
 800e33e:	f7fe f8ff 	bl	800c540 <_Bfree>
 800e342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e344:	2300      	movs	r3, #0
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	2550      	movs	r5, #80	@ 0x50
 800e34a:	e72b      	b.n	800e1a4 <__gethex+0xf8>
 800e34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1f3      	bne.n	800e33a <__gethex+0x28e>
 800e352:	e7e0      	b.n	800e316 <__gethex+0x26a>
 800e354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1dd      	bne.n	800e316 <__gethex+0x26a>
 800e35a:	e7ee      	b.n	800e33a <__gethex+0x28e>
 800e35c:	0800ee53 	.word	0x0800ee53
 800e360:	0800ede9 	.word	0x0800ede9
 800e364:	0800eeaa 	.word	0x0800eeaa
 800e368:	1e6f      	subs	r7, r5, #1
 800e36a:	f1b9 0f00 	cmp.w	r9, #0
 800e36e:	d130      	bne.n	800e3d2 <__gethex+0x326>
 800e370:	b127      	cbz	r7, 800e37c <__gethex+0x2d0>
 800e372:	4639      	mov	r1, r7
 800e374:	4620      	mov	r0, r4
 800e376:	f7fe fd2c 	bl	800cdd2 <__any_on>
 800e37a:	4681      	mov	r9, r0
 800e37c:	117a      	asrs	r2, r7, #5
 800e37e:	2301      	movs	r3, #1
 800e380:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e384:	f007 071f 	and.w	r7, r7, #31
 800e388:	40bb      	lsls	r3, r7
 800e38a:	4213      	tst	r3, r2
 800e38c:	4629      	mov	r1, r5
 800e38e:	4620      	mov	r0, r4
 800e390:	bf18      	it	ne
 800e392:	f049 0902 	orrne.w	r9, r9, #2
 800e396:	f7ff fe21 	bl	800dfdc <rshift>
 800e39a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e39e:	1b76      	subs	r6, r6, r5
 800e3a0:	2502      	movs	r5, #2
 800e3a2:	f1b9 0f00 	cmp.w	r9, #0
 800e3a6:	d047      	beq.n	800e438 <__gethex+0x38c>
 800e3a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d015      	beq.n	800e3dc <__gethex+0x330>
 800e3b0:	2b03      	cmp	r3, #3
 800e3b2:	d017      	beq.n	800e3e4 <__gethex+0x338>
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d109      	bne.n	800e3cc <__gethex+0x320>
 800e3b8:	f019 0f02 	tst.w	r9, #2
 800e3bc:	d006      	beq.n	800e3cc <__gethex+0x320>
 800e3be:	f8da 3000 	ldr.w	r3, [sl]
 800e3c2:	ea49 0903 	orr.w	r9, r9, r3
 800e3c6:	f019 0f01 	tst.w	r9, #1
 800e3ca:	d10e      	bne.n	800e3ea <__gethex+0x33e>
 800e3cc:	f045 0510 	orr.w	r5, r5, #16
 800e3d0:	e032      	b.n	800e438 <__gethex+0x38c>
 800e3d2:	f04f 0901 	mov.w	r9, #1
 800e3d6:	e7d1      	b.n	800e37c <__gethex+0x2d0>
 800e3d8:	2501      	movs	r5, #1
 800e3da:	e7e2      	b.n	800e3a2 <__gethex+0x2f6>
 800e3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3de:	f1c3 0301 	rsb	r3, r3, #1
 800e3e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d0f0      	beq.n	800e3cc <__gethex+0x320>
 800e3ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e3ee:	f104 0314 	add.w	r3, r4, #20
 800e3f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e3f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e3fa:	f04f 0c00 	mov.w	ip, #0
 800e3fe:	4618      	mov	r0, r3
 800e400:	f853 2b04 	ldr.w	r2, [r3], #4
 800e404:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e408:	d01b      	beq.n	800e442 <__gethex+0x396>
 800e40a:	3201      	adds	r2, #1
 800e40c:	6002      	str	r2, [r0, #0]
 800e40e:	2d02      	cmp	r5, #2
 800e410:	f104 0314 	add.w	r3, r4, #20
 800e414:	d13c      	bne.n	800e490 <__gethex+0x3e4>
 800e416:	f8d8 2000 	ldr.w	r2, [r8]
 800e41a:	3a01      	subs	r2, #1
 800e41c:	42b2      	cmp	r2, r6
 800e41e:	d109      	bne.n	800e434 <__gethex+0x388>
 800e420:	1171      	asrs	r1, r6, #5
 800e422:	2201      	movs	r2, #1
 800e424:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e428:	f006 061f 	and.w	r6, r6, #31
 800e42c:	fa02 f606 	lsl.w	r6, r2, r6
 800e430:	421e      	tst	r6, r3
 800e432:	d13a      	bne.n	800e4aa <__gethex+0x3fe>
 800e434:	f045 0520 	orr.w	r5, r5, #32
 800e438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e43a:	601c      	str	r4, [r3, #0]
 800e43c:	9b02      	ldr	r3, [sp, #8]
 800e43e:	601f      	str	r7, [r3, #0]
 800e440:	e6b0      	b.n	800e1a4 <__gethex+0xf8>
 800e442:	4299      	cmp	r1, r3
 800e444:	f843 cc04 	str.w	ip, [r3, #-4]
 800e448:	d8d9      	bhi.n	800e3fe <__gethex+0x352>
 800e44a:	68a3      	ldr	r3, [r4, #8]
 800e44c:	459b      	cmp	fp, r3
 800e44e:	db17      	blt.n	800e480 <__gethex+0x3d4>
 800e450:	6861      	ldr	r1, [r4, #4]
 800e452:	9801      	ldr	r0, [sp, #4]
 800e454:	3101      	adds	r1, #1
 800e456:	f7fe f833 	bl	800c4c0 <_Balloc>
 800e45a:	4681      	mov	r9, r0
 800e45c:	b918      	cbnz	r0, 800e466 <__gethex+0x3ba>
 800e45e:	4b1a      	ldr	r3, [pc, #104]	@ (800e4c8 <__gethex+0x41c>)
 800e460:	4602      	mov	r2, r0
 800e462:	2184      	movs	r1, #132	@ 0x84
 800e464:	e6c5      	b.n	800e1f2 <__gethex+0x146>
 800e466:	6922      	ldr	r2, [r4, #16]
 800e468:	3202      	adds	r2, #2
 800e46a:	f104 010c 	add.w	r1, r4, #12
 800e46e:	0092      	lsls	r2, r2, #2
 800e470:	300c      	adds	r0, #12
 800e472:	f7fd f8b6 	bl	800b5e2 <memcpy>
 800e476:	4621      	mov	r1, r4
 800e478:	9801      	ldr	r0, [sp, #4]
 800e47a:	f7fe f861 	bl	800c540 <_Bfree>
 800e47e:	464c      	mov	r4, r9
 800e480:	6923      	ldr	r3, [r4, #16]
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e488:	6122      	str	r2, [r4, #16]
 800e48a:	2201      	movs	r2, #1
 800e48c:	615a      	str	r2, [r3, #20]
 800e48e:	e7be      	b.n	800e40e <__gethex+0x362>
 800e490:	6922      	ldr	r2, [r4, #16]
 800e492:	455a      	cmp	r2, fp
 800e494:	dd0b      	ble.n	800e4ae <__gethex+0x402>
 800e496:	2101      	movs	r1, #1
 800e498:	4620      	mov	r0, r4
 800e49a:	f7ff fd9f 	bl	800dfdc <rshift>
 800e49e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4a2:	3701      	adds	r7, #1
 800e4a4:	42bb      	cmp	r3, r7
 800e4a6:	f6ff aee0 	blt.w	800e26a <__gethex+0x1be>
 800e4aa:	2501      	movs	r5, #1
 800e4ac:	e7c2      	b.n	800e434 <__gethex+0x388>
 800e4ae:	f016 061f 	ands.w	r6, r6, #31
 800e4b2:	d0fa      	beq.n	800e4aa <__gethex+0x3fe>
 800e4b4:	4453      	add	r3, sl
 800e4b6:	f1c6 0620 	rsb	r6, r6, #32
 800e4ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e4be:	f7fe f8f1 	bl	800c6a4 <__hi0bits>
 800e4c2:	42b0      	cmp	r0, r6
 800e4c4:	dbe7      	blt.n	800e496 <__gethex+0x3ea>
 800e4c6:	e7f0      	b.n	800e4aa <__gethex+0x3fe>
 800e4c8:	0800ede9 	.word	0x0800ede9

0800e4cc <L_shift>:
 800e4cc:	f1c2 0208 	rsb	r2, r2, #8
 800e4d0:	0092      	lsls	r2, r2, #2
 800e4d2:	b570      	push	{r4, r5, r6, lr}
 800e4d4:	f1c2 0620 	rsb	r6, r2, #32
 800e4d8:	6843      	ldr	r3, [r0, #4]
 800e4da:	6804      	ldr	r4, [r0, #0]
 800e4dc:	fa03 f506 	lsl.w	r5, r3, r6
 800e4e0:	432c      	orrs	r4, r5
 800e4e2:	40d3      	lsrs	r3, r2
 800e4e4:	6004      	str	r4, [r0, #0]
 800e4e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e4ea:	4288      	cmp	r0, r1
 800e4ec:	d3f4      	bcc.n	800e4d8 <L_shift+0xc>
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}

0800e4f0 <__match>:
 800e4f0:	b530      	push	{r4, r5, lr}
 800e4f2:	6803      	ldr	r3, [r0, #0]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4fa:	b914      	cbnz	r4, 800e502 <__match+0x12>
 800e4fc:	6003      	str	r3, [r0, #0]
 800e4fe:	2001      	movs	r0, #1
 800e500:	bd30      	pop	{r4, r5, pc}
 800e502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e506:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e50a:	2d19      	cmp	r5, #25
 800e50c:	bf98      	it	ls
 800e50e:	3220      	addls	r2, #32
 800e510:	42a2      	cmp	r2, r4
 800e512:	d0f0      	beq.n	800e4f6 <__match+0x6>
 800e514:	2000      	movs	r0, #0
 800e516:	e7f3      	b.n	800e500 <__match+0x10>

0800e518 <__hexnan>:
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	680b      	ldr	r3, [r1, #0]
 800e51e:	6801      	ldr	r1, [r0, #0]
 800e520:	115e      	asrs	r6, r3, #5
 800e522:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e526:	f013 031f 	ands.w	r3, r3, #31
 800e52a:	b087      	sub	sp, #28
 800e52c:	bf18      	it	ne
 800e52e:	3604      	addne	r6, #4
 800e530:	2500      	movs	r5, #0
 800e532:	1f37      	subs	r7, r6, #4
 800e534:	4682      	mov	sl, r0
 800e536:	4690      	mov	r8, r2
 800e538:	9301      	str	r3, [sp, #4]
 800e53a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e53e:	46b9      	mov	r9, r7
 800e540:	463c      	mov	r4, r7
 800e542:	9502      	str	r5, [sp, #8]
 800e544:	46ab      	mov	fp, r5
 800e546:	784a      	ldrb	r2, [r1, #1]
 800e548:	1c4b      	adds	r3, r1, #1
 800e54a:	9303      	str	r3, [sp, #12]
 800e54c:	b342      	cbz	r2, 800e5a0 <__hexnan+0x88>
 800e54e:	4610      	mov	r0, r2
 800e550:	9105      	str	r1, [sp, #20]
 800e552:	9204      	str	r2, [sp, #16]
 800e554:	f7ff fd94 	bl	800e080 <__hexdig_fun>
 800e558:	2800      	cmp	r0, #0
 800e55a:	d151      	bne.n	800e600 <__hexnan+0xe8>
 800e55c:	9a04      	ldr	r2, [sp, #16]
 800e55e:	9905      	ldr	r1, [sp, #20]
 800e560:	2a20      	cmp	r2, #32
 800e562:	d818      	bhi.n	800e596 <__hexnan+0x7e>
 800e564:	9b02      	ldr	r3, [sp, #8]
 800e566:	459b      	cmp	fp, r3
 800e568:	dd13      	ble.n	800e592 <__hexnan+0x7a>
 800e56a:	454c      	cmp	r4, r9
 800e56c:	d206      	bcs.n	800e57c <__hexnan+0x64>
 800e56e:	2d07      	cmp	r5, #7
 800e570:	dc04      	bgt.n	800e57c <__hexnan+0x64>
 800e572:	462a      	mov	r2, r5
 800e574:	4649      	mov	r1, r9
 800e576:	4620      	mov	r0, r4
 800e578:	f7ff ffa8 	bl	800e4cc <L_shift>
 800e57c:	4544      	cmp	r4, r8
 800e57e:	d952      	bls.n	800e626 <__hexnan+0x10e>
 800e580:	2300      	movs	r3, #0
 800e582:	f1a4 0904 	sub.w	r9, r4, #4
 800e586:	f844 3c04 	str.w	r3, [r4, #-4]
 800e58a:	f8cd b008 	str.w	fp, [sp, #8]
 800e58e:	464c      	mov	r4, r9
 800e590:	461d      	mov	r5, r3
 800e592:	9903      	ldr	r1, [sp, #12]
 800e594:	e7d7      	b.n	800e546 <__hexnan+0x2e>
 800e596:	2a29      	cmp	r2, #41	@ 0x29
 800e598:	d157      	bne.n	800e64a <__hexnan+0x132>
 800e59a:	3102      	adds	r1, #2
 800e59c:	f8ca 1000 	str.w	r1, [sl]
 800e5a0:	f1bb 0f00 	cmp.w	fp, #0
 800e5a4:	d051      	beq.n	800e64a <__hexnan+0x132>
 800e5a6:	454c      	cmp	r4, r9
 800e5a8:	d206      	bcs.n	800e5b8 <__hexnan+0xa0>
 800e5aa:	2d07      	cmp	r5, #7
 800e5ac:	dc04      	bgt.n	800e5b8 <__hexnan+0xa0>
 800e5ae:	462a      	mov	r2, r5
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f7ff ff8a 	bl	800e4cc <L_shift>
 800e5b8:	4544      	cmp	r4, r8
 800e5ba:	d936      	bls.n	800e62a <__hexnan+0x112>
 800e5bc:	f1a8 0204 	sub.w	r2, r8, #4
 800e5c0:	4623      	mov	r3, r4
 800e5c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e5ca:	429f      	cmp	r7, r3
 800e5cc:	d2f9      	bcs.n	800e5c2 <__hexnan+0xaa>
 800e5ce:	1b3b      	subs	r3, r7, r4
 800e5d0:	f023 0303 	bic.w	r3, r3, #3
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	3401      	adds	r4, #1
 800e5d8:	3e03      	subs	r6, #3
 800e5da:	42b4      	cmp	r4, r6
 800e5dc:	bf88      	it	hi
 800e5de:	2304      	movhi	r3, #4
 800e5e0:	4443      	add	r3, r8
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f843 2b04 	str.w	r2, [r3], #4
 800e5e8:	429f      	cmp	r7, r3
 800e5ea:	d2fb      	bcs.n	800e5e4 <__hexnan+0xcc>
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	b91b      	cbnz	r3, 800e5f8 <__hexnan+0xe0>
 800e5f0:	4547      	cmp	r7, r8
 800e5f2:	d128      	bne.n	800e646 <__hexnan+0x12e>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	603b      	str	r3, [r7, #0]
 800e5f8:	2005      	movs	r0, #5
 800e5fa:	b007      	add	sp, #28
 800e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e600:	3501      	adds	r5, #1
 800e602:	2d08      	cmp	r5, #8
 800e604:	f10b 0b01 	add.w	fp, fp, #1
 800e608:	dd06      	ble.n	800e618 <__hexnan+0x100>
 800e60a:	4544      	cmp	r4, r8
 800e60c:	d9c1      	bls.n	800e592 <__hexnan+0x7a>
 800e60e:	2300      	movs	r3, #0
 800e610:	f844 3c04 	str.w	r3, [r4, #-4]
 800e614:	2501      	movs	r5, #1
 800e616:	3c04      	subs	r4, #4
 800e618:	6822      	ldr	r2, [r4, #0]
 800e61a:	f000 000f 	and.w	r0, r0, #15
 800e61e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e622:	6020      	str	r0, [r4, #0]
 800e624:	e7b5      	b.n	800e592 <__hexnan+0x7a>
 800e626:	2508      	movs	r5, #8
 800e628:	e7b3      	b.n	800e592 <__hexnan+0x7a>
 800e62a:	9b01      	ldr	r3, [sp, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d0dd      	beq.n	800e5ec <__hexnan+0xd4>
 800e630:	f1c3 0320 	rsb	r3, r3, #32
 800e634:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e638:	40da      	lsrs	r2, r3
 800e63a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e63e:	4013      	ands	r3, r2
 800e640:	f846 3c04 	str.w	r3, [r6, #-4]
 800e644:	e7d2      	b.n	800e5ec <__hexnan+0xd4>
 800e646:	3f04      	subs	r7, #4
 800e648:	e7d0      	b.n	800e5ec <__hexnan+0xd4>
 800e64a:	2004      	movs	r0, #4
 800e64c:	e7d5      	b.n	800e5fa <__hexnan+0xe2>

0800e64e <__ascii_mbtowc>:
 800e64e:	b082      	sub	sp, #8
 800e650:	b901      	cbnz	r1, 800e654 <__ascii_mbtowc+0x6>
 800e652:	a901      	add	r1, sp, #4
 800e654:	b142      	cbz	r2, 800e668 <__ascii_mbtowc+0x1a>
 800e656:	b14b      	cbz	r3, 800e66c <__ascii_mbtowc+0x1e>
 800e658:	7813      	ldrb	r3, [r2, #0]
 800e65a:	600b      	str	r3, [r1, #0]
 800e65c:	7812      	ldrb	r2, [r2, #0]
 800e65e:	1e10      	subs	r0, r2, #0
 800e660:	bf18      	it	ne
 800e662:	2001      	movne	r0, #1
 800e664:	b002      	add	sp, #8
 800e666:	4770      	bx	lr
 800e668:	4610      	mov	r0, r2
 800e66a:	e7fb      	b.n	800e664 <__ascii_mbtowc+0x16>
 800e66c:	f06f 0001 	mvn.w	r0, #1
 800e670:	e7f8      	b.n	800e664 <__ascii_mbtowc+0x16>

0800e672 <_realloc_r>:
 800e672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e676:	4607      	mov	r7, r0
 800e678:	4614      	mov	r4, r2
 800e67a:	460d      	mov	r5, r1
 800e67c:	b921      	cbnz	r1, 800e688 <_realloc_r+0x16>
 800e67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e682:	4611      	mov	r1, r2
 800e684:	f7fd be90 	b.w	800c3a8 <_malloc_r>
 800e688:	b92a      	cbnz	r2, 800e696 <_realloc_r+0x24>
 800e68a:	f7fd fe19 	bl	800c2c0 <_free_r>
 800e68e:	4625      	mov	r5, r4
 800e690:	4628      	mov	r0, r5
 800e692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e696:	f000 f840 	bl	800e71a <_malloc_usable_size_r>
 800e69a:	4284      	cmp	r4, r0
 800e69c:	4606      	mov	r6, r0
 800e69e:	d802      	bhi.n	800e6a6 <_realloc_r+0x34>
 800e6a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e6a4:	d8f4      	bhi.n	800e690 <_realloc_r+0x1e>
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f7fd fe7d 	bl	800c3a8 <_malloc_r>
 800e6ae:	4680      	mov	r8, r0
 800e6b0:	b908      	cbnz	r0, 800e6b6 <_realloc_r+0x44>
 800e6b2:	4645      	mov	r5, r8
 800e6b4:	e7ec      	b.n	800e690 <_realloc_r+0x1e>
 800e6b6:	42b4      	cmp	r4, r6
 800e6b8:	4622      	mov	r2, r4
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	bf28      	it	cs
 800e6be:	4632      	movcs	r2, r6
 800e6c0:	f7fc ff8f 	bl	800b5e2 <memcpy>
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	f7fd fdfa 	bl	800c2c0 <_free_r>
 800e6cc:	e7f1      	b.n	800e6b2 <_realloc_r+0x40>

0800e6ce <__ascii_wctomb>:
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	4608      	mov	r0, r1
 800e6d2:	b141      	cbz	r1, 800e6e6 <__ascii_wctomb+0x18>
 800e6d4:	2aff      	cmp	r2, #255	@ 0xff
 800e6d6:	d904      	bls.n	800e6e2 <__ascii_wctomb+0x14>
 800e6d8:	228a      	movs	r2, #138	@ 0x8a
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6e0:	4770      	bx	lr
 800e6e2:	700a      	strb	r2, [r1, #0]
 800e6e4:	2001      	movs	r0, #1
 800e6e6:	4770      	bx	lr

0800e6e8 <fiprintf>:
 800e6e8:	b40e      	push	{r1, r2, r3}
 800e6ea:	b503      	push	{r0, r1, lr}
 800e6ec:	4601      	mov	r1, r0
 800e6ee:	ab03      	add	r3, sp, #12
 800e6f0:	4805      	ldr	r0, [pc, #20]	@ (800e708 <fiprintf+0x20>)
 800e6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6f6:	6800      	ldr	r0, [r0, #0]
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	f000 f83f 	bl	800e77c <_vfiprintf_r>
 800e6fe:	b002      	add	sp, #8
 800e700:	f85d eb04 	ldr.w	lr, [sp], #4
 800e704:	b003      	add	sp, #12
 800e706:	4770      	bx	lr
 800e708:	20000130 	.word	0x20000130

0800e70c <abort>:
 800e70c:	b508      	push	{r3, lr}
 800e70e:	2006      	movs	r0, #6
 800e710:	f000 fa08 	bl	800eb24 <raise>
 800e714:	2001      	movs	r0, #1
 800e716:	f7f3 fd29 	bl	800216c <_exit>

0800e71a <_malloc_usable_size_r>:
 800e71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e71e:	1f18      	subs	r0, r3, #4
 800e720:	2b00      	cmp	r3, #0
 800e722:	bfbc      	itt	lt
 800e724:	580b      	ldrlt	r3, [r1, r0]
 800e726:	18c0      	addlt	r0, r0, r3
 800e728:	4770      	bx	lr

0800e72a <__sfputc_r>:
 800e72a:	6893      	ldr	r3, [r2, #8]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	2b00      	cmp	r3, #0
 800e730:	b410      	push	{r4}
 800e732:	6093      	str	r3, [r2, #8]
 800e734:	da08      	bge.n	800e748 <__sfputc_r+0x1e>
 800e736:	6994      	ldr	r4, [r2, #24]
 800e738:	42a3      	cmp	r3, r4
 800e73a:	db01      	blt.n	800e740 <__sfputc_r+0x16>
 800e73c:	290a      	cmp	r1, #10
 800e73e:	d103      	bne.n	800e748 <__sfputc_r+0x1e>
 800e740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e744:	f000 b932 	b.w	800e9ac <__swbuf_r>
 800e748:	6813      	ldr	r3, [r2, #0]
 800e74a:	1c58      	adds	r0, r3, #1
 800e74c:	6010      	str	r0, [r2, #0]
 800e74e:	7019      	strb	r1, [r3, #0]
 800e750:	4608      	mov	r0, r1
 800e752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <__sfputs_r>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	4606      	mov	r6, r0
 800e75c:	460f      	mov	r7, r1
 800e75e:	4614      	mov	r4, r2
 800e760:	18d5      	adds	r5, r2, r3
 800e762:	42ac      	cmp	r4, r5
 800e764:	d101      	bne.n	800e76a <__sfputs_r+0x12>
 800e766:	2000      	movs	r0, #0
 800e768:	e007      	b.n	800e77a <__sfputs_r+0x22>
 800e76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76e:	463a      	mov	r2, r7
 800e770:	4630      	mov	r0, r6
 800e772:	f7ff ffda 	bl	800e72a <__sfputc_r>
 800e776:	1c43      	adds	r3, r0, #1
 800e778:	d1f3      	bne.n	800e762 <__sfputs_r+0xa>
 800e77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e77c <_vfiprintf_r>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	460d      	mov	r5, r1
 800e782:	b09d      	sub	sp, #116	@ 0x74
 800e784:	4614      	mov	r4, r2
 800e786:	4698      	mov	r8, r3
 800e788:	4606      	mov	r6, r0
 800e78a:	b118      	cbz	r0, 800e794 <_vfiprintf_r+0x18>
 800e78c:	6a03      	ldr	r3, [r0, #32]
 800e78e:	b90b      	cbnz	r3, 800e794 <_vfiprintf_r+0x18>
 800e790:	f7fc fdbc 	bl	800b30c <__sinit>
 800e794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e796:	07d9      	lsls	r1, r3, #31
 800e798:	d405      	bmi.n	800e7a6 <_vfiprintf_r+0x2a>
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	059a      	lsls	r2, r3, #22
 800e79e:	d402      	bmi.n	800e7a6 <_vfiprintf_r+0x2a>
 800e7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7a2:	f7fc ff1c 	bl	800b5de <__retarget_lock_acquire_recursive>
 800e7a6:	89ab      	ldrh	r3, [r5, #12]
 800e7a8:	071b      	lsls	r3, r3, #28
 800e7aa:	d501      	bpl.n	800e7b0 <_vfiprintf_r+0x34>
 800e7ac:	692b      	ldr	r3, [r5, #16]
 800e7ae:	b99b      	cbnz	r3, 800e7d8 <_vfiprintf_r+0x5c>
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f000 f938 	bl	800ea28 <__swsetup_r>
 800e7b8:	b170      	cbz	r0, 800e7d8 <_vfiprintf_r+0x5c>
 800e7ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7bc:	07dc      	lsls	r4, r3, #31
 800e7be:	d504      	bpl.n	800e7ca <_vfiprintf_r+0x4e>
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7c4:	b01d      	add	sp, #116	@ 0x74
 800e7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ca:	89ab      	ldrh	r3, [r5, #12]
 800e7cc:	0598      	lsls	r0, r3, #22
 800e7ce:	d4f7      	bmi.n	800e7c0 <_vfiprintf_r+0x44>
 800e7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7d2:	f7fc ff05 	bl	800b5e0 <__retarget_lock_release_recursive>
 800e7d6:	e7f3      	b.n	800e7c0 <_vfiprintf_r+0x44>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7dc:	2320      	movs	r3, #32
 800e7de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7e6:	2330      	movs	r3, #48	@ 0x30
 800e7e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e998 <_vfiprintf_r+0x21c>
 800e7ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7f0:	f04f 0901 	mov.w	r9, #1
 800e7f4:	4623      	mov	r3, r4
 800e7f6:	469a      	mov	sl, r3
 800e7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7fc:	b10a      	cbz	r2, 800e802 <_vfiprintf_r+0x86>
 800e7fe:	2a25      	cmp	r2, #37	@ 0x25
 800e800:	d1f9      	bne.n	800e7f6 <_vfiprintf_r+0x7a>
 800e802:	ebba 0b04 	subs.w	fp, sl, r4
 800e806:	d00b      	beq.n	800e820 <_vfiprintf_r+0xa4>
 800e808:	465b      	mov	r3, fp
 800e80a:	4622      	mov	r2, r4
 800e80c:	4629      	mov	r1, r5
 800e80e:	4630      	mov	r0, r6
 800e810:	f7ff ffa2 	bl	800e758 <__sfputs_r>
 800e814:	3001      	adds	r0, #1
 800e816:	f000 80a7 	beq.w	800e968 <_vfiprintf_r+0x1ec>
 800e81a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e81c:	445a      	add	r2, fp
 800e81e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e820:	f89a 3000 	ldrb.w	r3, [sl]
 800e824:	2b00      	cmp	r3, #0
 800e826:	f000 809f 	beq.w	800e968 <_vfiprintf_r+0x1ec>
 800e82a:	2300      	movs	r3, #0
 800e82c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e834:	f10a 0a01 	add.w	sl, sl, #1
 800e838:	9304      	str	r3, [sp, #16]
 800e83a:	9307      	str	r3, [sp, #28]
 800e83c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e840:	931a      	str	r3, [sp, #104]	@ 0x68
 800e842:	4654      	mov	r4, sl
 800e844:	2205      	movs	r2, #5
 800e846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84a:	4853      	ldr	r0, [pc, #332]	@ (800e998 <_vfiprintf_r+0x21c>)
 800e84c:	f7f1 fcc8 	bl	80001e0 <memchr>
 800e850:	9a04      	ldr	r2, [sp, #16]
 800e852:	b9d8      	cbnz	r0, 800e88c <_vfiprintf_r+0x110>
 800e854:	06d1      	lsls	r1, r2, #27
 800e856:	bf44      	itt	mi
 800e858:	2320      	movmi	r3, #32
 800e85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e85e:	0713      	lsls	r3, r2, #28
 800e860:	bf44      	itt	mi
 800e862:	232b      	movmi	r3, #43	@ 0x2b
 800e864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e868:	f89a 3000 	ldrb.w	r3, [sl]
 800e86c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e86e:	d015      	beq.n	800e89c <_vfiprintf_r+0x120>
 800e870:	9a07      	ldr	r2, [sp, #28]
 800e872:	4654      	mov	r4, sl
 800e874:	2000      	movs	r0, #0
 800e876:	f04f 0c0a 	mov.w	ip, #10
 800e87a:	4621      	mov	r1, r4
 800e87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e880:	3b30      	subs	r3, #48	@ 0x30
 800e882:	2b09      	cmp	r3, #9
 800e884:	d94b      	bls.n	800e91e <_vfiprintf_r+0x1a2>
 800e886:	b1b0      	cbz	r0, 800e8b6 <_vfiprintf_r+0x13a>
 800e888:	9207      	str	r2, [sp, #28]
 800e88a:	e014      	b.n	800e8b6 <_vfiprintf_r+0x13a>
 800e88c:	eba0 0308 	sub.w	r3, r0, r8
 800e890:	fa09 f303 	lsl.w	r3, r9, r3
 800e894:	4313      	orrs	r3, r2
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	46a2      	mov	sl, r4
 800e89a:	e7d2      	b.n	800e842 <_vfiprintf_r+0xc6>
 800e89c:	9b03      	ldr	r3, [sp, #12]
 800e89e:	1d19      	adds	r1, r3, #4
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	9103      	str	r1, [sp, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	bfbb      	ittet	lt
 800e8a8:	425b      	neglt	r3, r3
 800e8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e8ae:	9307      	strge	r3, [sp, #28]
 800e8b0:	9307      	strlt	r3, [sp, #28]
 800e8b2:	bfb8      	it	lt
 800e8b4:	9204      	strlt	r2, [sp, #16]
 800e8b6:	7823      	ldrb	r3, [r4, #0]
 800e8b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ba:	d10a      	bne.n	800e8d2 <_vfiprintf_r+0x156>
 800e8bc:	7863      	ldrb	r3, [r4, #1]
 800e8be:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8c0:	d132      	bne.n	800e928 <_vfiprintf_r+0x1ac>
 800e8c2:	9b03      	ldr	r3, [sp, #12]
 800e8c4:	1d1a      	adds	r2, r3, #4
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	9203      	str	r2, [sp, #12]
 800e8ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8ce:	3402      	adds	r4, #2
 800e8d0:	9305      	str	r3, [sp, #20]
 800e8d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e9a8 <_vfiprintf_r+0x22c>
 800e8d6:	7821      	ldrb	r1, [r4, #0]
 800e8d8:	2203      	movs	r2, #3
 800e8da:	4650      	mov	r0, sl
 800e8dc:	f7f1 fc80 	bl	80001e0 <memchr>
 800e8e0:	b138      	cbz	r0, 800e8f2 <_vfiprintf_r+0x176>
 800e8e2:	9b04      	ldr	r3, [sp, #16]
 800e8e4:	eba0 000a 	sub.w	r0, r0, sl
 800e8e8:	2240      	movs	r2, #64	@ 0x40
 800e8ea:	4082      	lsls	r2, r0
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	3401      	adds	r4, #1
 800e8f0:	9304      	str	r3, [sp, #16]
 800e8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8f6:	4829      	ldr	r0, [pc, #164]	@ (800e99c <_vfiprintf_r+0x220>)
 800e8f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8fc:	2206      	movs	r2, #6
 800e8fe:	f7f1 fc6f 	bl	80001e0 <memchr>
 800e902:	2800      	cmp	r0, #0
 800e904:	d03f      	beq.n	800e986 <_vfiprintf_r+0x20a>
 800e906:	4b26      	ldr	r3, [pc, #152]	@ (800e9a0 <_vfiprintf_r+0x224>)
 800e908:	bb1b      	cbnz	r3, 800e952 <_vfiprintf_r+0x1d6>
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	3307      	adds	r3, #7
 800e90e:	f023 0307 	bic.w	r3, r3, #7
 800e912:	3308      	adds	r3, #8
 800e914:	9303      	str	r3, [sp, #12]
 800e916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e918:	443b      	add	r3, r7
 800e91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e91c:	e76a      	b.n	800e7f4 <_vfiprintf_r+0x78>
 800e91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e922:	460c      	mov	r4, r1
 800e924:	2001      	movs	r0, #1
 800e926:	e7a8      	b.n	800e87a <_vfiprintf_r+0xfe>
 800e928:	2300      	movs	r3, #0
 800e92a:	3401      	adds	r4, #1
 800e92c:	9305      	str	r3, [sp, #20]
 800e92e:	4619      	mov	r1, r3
 800e930:	f04f 0c0a 	mov.w	ip, #10
 800e934:	4620      	mov	r0, r4
 800e936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e93a:	3a30      	subs	r2, #48	@ 0x30
 800e93c:	2a09      	cmp	r2, #9
 800e93e:	d903      	bls.n	800e948 <_vfiprintf_r+0x1cc>
 800e940:	2b00      	cmp	r3, #0
 800e942:	d0c6      	beq.n	800e8d2 <_vfiprintf_r+0x156>
 800e944:	9105      	str	r1, [sp, #20]
 800e946:	e7c4      	b.n	800e8d2 <_vfiprintf_r+0x156>
 800e948:	fb0c 2101 	mla	r1, ip, r1, r2
 800e94c:	4604      	mov	r4, r0
 800e94e:	2301      	movs	r3, #1
 800e950:	e7f0      	b.n	800e934 <_vfiprintf_r+0x1b8>
 800e952:	ab03      	add	r3, sp, #12
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	462a      	mov	r2, r5
 800e958:	4b12      	ldr	r3, [pc, #72]	@ (800e9a4 <_vfiprintf_r+0x228>)
 800e95a:	a904      	add	r1, sp, #16
 800e95c:	4630      	mov	r0, r6
 800e95e:	f7fb fe85 	bl	800a66c <_printf_float>
 800e962:	4607      	mov	r7, r0
 800e964:	1c78      	adds	r0, r7, #1
 800e966:	d1d6      	bne.n	800e916 <_vfiprintf_r+0x19a>
 800e968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e96a:	07d9      	lsls	r1, r3, #31
 800e96c:	d405      	bmi.n	800e97a <_vfiprintf_r+0x1fe>
 800e96e:	89ab      	ldrh	r3, [r5, #12]
 800e970:	059a      	lsls	r2, r3, #22
 800e972:	d402      	bmi.n	800e97a <_vfiprintf_r+0x1fe>
 800e974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e976:	f7fc fe33 	bl	800b5e0 <__retarget_lock_release_recursive>
 800e97a:	89ab      	ldrh	r3, [r5, #12]
 800e97c:	065b      	lsls	r3, r3, #25
 800e97e:	f53f af1f 	bmi.w	800e7c0 <_vfiprintf_r+0x44>
 800e982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e984:	e71e      	b.n	800e7c4 <_vfiprintf_r+0x48>
 800e986:	ab03      	add	r3, sp, #12
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	462a      	mov	r2, r5
 800e98c:	4b05      	ldr	r3, [pc, #20]	@ (800e9a4 <_vfiprintf_r+0x228>)
 800e98e:	a904      	add	r1, sp, #16
 800e990:	4630      	mov	r0, r6
 800e992:	f7fc f903 	bl	800ab9c <_printf_i>
 800e996:	e7e4      	b.n	800e962 <_vfiprintf_r+0x1e6>
 800e998:	0800ee55 	.word	0x0800ee55
 800e99c:	0800ee5f 	.word	0x0800ee5f
 800e9a0:	0800a66d 	.word	0x0800a66d
 800e9a4:	0800e759 	.word	0x0800e759
 800e9a8:	0800ee5b 	.word	0x0800ee5b

0800e9ac <__swbuf_r>:
 800e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ae:	460e      	mov	r6, r1
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	b118      	cbz	r0, 800e9be <__swbuf_r+0x12>
 800e9b6:	6a03      	ldr	r3, [r0, #32]
 800e9b8:	b90b      	cbnz	r3, 800e9be <__swbuf_r+0x12>
 800e9ba:	f7fc fca7 	bl	800b30c <__sinit>
 800e9be:	69a3      	ldr	r3, [r4, #24]
 800e9c0:	60a3      	str	r3, [r4, #8]
 800e9c2:	89a3      	ldrh	r3, [r4, #12]
 800e9c4:	071a      	lsls	r2, r3, #28
 800e9c6:	d501      	bpl.n	800e9cc <__swbuf_r+0x20>
 800e9c8:	6923      	ldr	r3, [r4, #16]
 800e9ca:	b943      	cbnz	r3, 800e9de <__swbuf_r+0x32>
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f000 f82a 	bl	800ea28 <__swsetup_r>
 800e9d4:	b118      	cbz	r0, 800e9de <__swbuf_r+0x32>
 800e9d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e9da:	4638      	mov	r0, r7
 800e9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9de:	6823      	ldr	r3, [r4, #0]
 800e9e0:	6922      	ldr	r2, [r4, #16]
 800e9e2:	1a98      	subs	r0, r3, r2
 800e9e4:	6963      	ldr	r3, [r4, #20]
 800e9e6:	b2f6      	uxtb	r6, r6
 800e9e8:	4283      	cmp	r3, r0
 800e9ea:	4637      	mov	r7, r6
 800e9ec:	dc05      	bgt.n	800e9fa <__swbuf_r+0x4e>
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	4628      	mov	r0, r5
 800e9f2:	f7ff fa6f 	bl	800ded4 <_fflush_r>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d1ed      	bne.n	800e9d6 <__swbuf_r+0x2a>
 800e9fa:	68a3      	ldr	r3, [r4, #8]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	60a3      	str	r3, [r4, #8]
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	6022      	str	r2, [r4, #0]
 800ea06:	701e      	strb	r6, [r3, #0]
 800ea08:	6962      	ldr	r2, [r4, #20]
 800ea0a:	1c43      	adds	r3, r0, #1
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d004      	beq.n	800ea1a <__swbuf_r+0x6e>
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	07db      	lsls	r3, r3, #31
 800ea14:	d5e1      	bpl.n	800e9da <__swbuf_r+0x2e>
 800ea16:	2e0a      	cmp	r6, #10
 800ea18:	d1df      	bne.n	800e9da <__swbuf_r+0x2e>
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f7ff fa59 	bl	800ded4 <_fflush_r>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d0d9      	beq.n	800e9da <__swbuf_r+0x2e>
 800ea26:	e7d6      	b.n	800e9d6 <__swbuf_r+0x2a>

0800ea28 <__swsetup_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4b29      	ldr	r3, [pc, #164]	@ (800ead0 <__swsetup_r+0xa8>)
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	6818      	ldr	r0, [r3, #0]
 800ea30:	460c      	mov	r4, r1
 800ea32:	b118      	cbz	r0, 800ea3c <__swsetup_r+0x14>
 800ea34:	6a03      	ldr	r3, [r0, #32]
 800ea36:	b90b      	cbnz	r3, 800ea3c <__swsetup_r+0x14>
 800ea38:	f7fc fc68 	bl	800b30c <__sinit>
 800ea3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea40:	0719      	lsls	r1, r3, #28
 800ea42:	d422      	bmi.n	800ea8a <__swsetup_r+0x62>
 800ea44:	06da      	lsls	r2, r3, #27
 800ea46:	d407      	bmi.n	800ea58 <__swsetup_r+0x30>
 800ea48:	2209      	movs	r2, #9
 800ea4a:	602a      	str	r2, [r5, #0]
 800ea4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea50:	81a3      	strh	r3, [r4, #12]
 800ea52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea56:	e033      	b.n	800eac0 <__swsetup_r+0x98>
 800ea58:	0758      	lsls	r0, r3, #29
 800ea5a:	d512      	bpl.n	800ea82 <__swsetup_r+0x5a>
 800ea5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea5e:	b141      	cbz	r1, 800ea72 <__swsetup_r+0x4a>
 800ea60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea64:	4299      	cmp	r1, r3
 800ea66:	d002      	beq.n	800ea6e <__swsetup_r+0x46>
 800ea68:	4628      	mov	r0, r5
 800ea6a:	f7fd fc29 	bl	800c2c0 <_free_r>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea72:	89a3      	ldrh	r3, [r4, #12]
 800ea74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea78:	81a3      	strh	r3, [r4, #12]
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	6063      	str	r3, [r4, #4]
 800ea7e:	6923      	ldr	r3, [r4, #16]
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	f043 0308 	orr.w	r3, r3, #8
 800ea88:	81a3      	strh	r3, [r4, #12]
 800ea8a:	6923      	ldr	r3, [r4, #16]
 800ea8c:	b94b      	cbnz	r3, 800eaa2 <__swsetup_r+0x7a>
 800ea8e:	89a3      	ldrh	r3, [r4, #12]
 800ea90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea98:	d003      	beq.n	800eaa2 <__swsetup_r+0x7a>
 800ea9a:	4621      	mov	r1, r4
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	f000 f883 	bl	800eba8 <__smakebuf_r>
 800eaa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaa6:	f013 0201 	ands.w	r2, r3, #1
 800eaaa:	d00a      	beq.n	800eac2 <__swsetup_r+0x9a>
 800eaac:	2200      	movs	r2, #0
 800eaae:	60a2      	str	r2, [r4, #8]
 800eab0:	6962      	ldr	r2, [r4, #20]
 800eab2:	4252      	negs	r2, r2
 800eab4:	61a2      	str	r2, [r4, #24]
 800eab6:	6922      	ldr	r2, [r4, #16]
 800eab8:	b942      	cbnz	r2, 800eacc <__swsetup_r+0xa4>
 800eaba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eabe:	d1c5      	bne.n	800ea4c <__swsetup_r+0x24>
 800eac0:	bd38      	pop	{r3, r4, r5, pc}
 800eac2:	0799      	lsls	r1, r3, #30
 800eac4:	bf58      	it	pl
 800eac6:	6962      	ldrpl	r2, [r4, #20]
 800eac8:	60a2      	str	r2, [r4, #8]
 800eaca:	e7f4      	b.n	800eab6 <__swsetup_r+0x8e>
 800eacc:	2000      	movs	r0, #0
 800eace:	e7f7      	b.n	800eac0 <__swsetup_r+0x98>
 800ead0:	20000130 	.word	0x20000130

0800ead4 <_raise_r>:
 800ead4:	291f      	cmp	r1, #31
 800ead6:	b538      	push	{r3, r4, r5, lr}
 800ead8:	4605      	mov	r5, r0
 800eada:	460c      	mov	r4, r1
 800eadc:	d904      	bls.n	800eae8 <_raise_r+0x14>
 800eade:	2316      	movs	r3, #22
 800eae0:	6003      	str	r3, [r0, #0]
 800eae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eae6:	bd38      	pop	{r3, r4, r5, pc}
 800eae8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eaea:	b112      	cbz	r2, 800eaf2 <_raise_r+0x1e>
 800eaec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eaf0:	b94b      	cbnz	r3, 800eb06 <_raise_r+0x32>
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 f830 	bl	800eb58 <_getpid_r>
 800eaf8:	4622      	mov	r2, r4
 800eafa:	4601      	mov	r1, r0
 800eafc:	4628      	mov	r0, r5
 800eafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb02:	f000 b817 	b.w	800eb34 <_kill_r>
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d00a      	beq.n	800eb20 <_raise_r+0x4c>
 800eb0a:	1c59      	adds	r1, r3, #1
 800eb0c:	d103      	bne.n	800eb16 <_raise_r+0x42>
 800eb0e:	2316      	movs	r3, #22
 800eb10:	6003      	str	r3, [r0, #0]
 800eb12:	2001      	movs	r0, #1
 800eb14:	e7e7      	b.n	800eae6 <_raise_r+0x12>
 800eb16:	2100      	movs	r1, #0
 800eb18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	4798      	blx	r3
 800eb20:	2000      	movs	r0, #0
 800eb22:	e7e0      	b.n	800eae6 <_raise_r+0x12>

0800eb24 <raise>:
 800eb24:	4b02      	ldr	r3, [pc, #8]	@ (800eb30 <raise+0xc>)
 800eb26:	4601      	mov	r1, r0
 800eb28:	6818      	ldr	r0, [r3, #0]
 800eb2a:	f7ff bfd3 	b.w	800ead4 <_raise_r>
 800eb2e:	bf00      	nop
 800eb30:	20000130 	.word	0x20000130

0800eb34 <_kill_r>:
 800eb34:	b538      	push	{r3, r4, r5, lr}
 800eb36:	4d07      	ldr	r5, [pc, #28]	@ (800eb54 <_kill_r+0x20>)
 800eb38:	2300      	movs	r3, #0
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	4608      	mov	r0, r1
 800eb3e:	4611      	mov	r1, r2
 800eb40:	602b      	str	r3, [r5, #0]
 800eb42:	f7f3 fb03 	bl	800214c <_kill>
 800eb46:	1c43      	adds	r3, r0, #1
 800eb48:	d102      	bne.n	800eb50 <_kill_r+0x1c>
 800eb4a:	682b      	ldr	r3, [r5, #0]
 800eb4c:	b103      	cbz	r3, 800eb50 <_kill_r+0x1c>
 800eb4e:	6023      	str	r3, [r4, #0]
 800eb50:	bd38      	pop	{r3, r4, r5, pc}
 800eb52:	bf00      	nop
 800eb54:	200021cc 	.word	0x200021cc

0800eb58 <_getpid_r>:
 800eb58:	f7f3 baf0 	b.w	800213c <_getpid>

0800eb5c <__swhatbuf_r>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	460c      	mov	r4, r1
 800eb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb64:	2900      	cmp	r1, #0
 800eb66:	b096      	sub	sp, #88	@ 0x58
 800eb68:	4615      	mov	r5, r2
 800eb6a:	461e      	mov	r6, r3
 800eb6c:	da0d      	bge.n	800eb8a <__swhatbuf_r+0x2e>
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb74:	f04f 0100 	mov.w	r1, #0
 800eb78:	bf14      	ite	ne
 800eb7a:	2340      	movne	r3, #64	@ 0x40
 800eb7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb80:	2000      	movs	r0, #0
 800eb82:	6031      	str	r1, [r6, #0]
 800eb84:	602b      	str	r3, [r5, #0]
 800eb86:	b016      	add	sp, #88	@ 0x58
 800eb88:	bd70      	pop	{r4, r5, r6, pc}
 800eb8a:	466a      	mov	r2, sp
 800eb8c:	f000 f848 	bl	800ec20 <_fstat_r>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	dbec      	blt.n	800eb6e <__swhatbuf_r+0x12>
 800eb94:	9901      	ldr	r1, [sp, #4]
 800eb96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eb9e:	4259      	negs	r1, r3
 800eba0:	4159      	adcs	r1, r3
 800eba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eba6:	e7eb      	b.n	800eb80 <__swhatbuf_r+0x24>

0800eba8 <__smakebuf_r>:
 800eba8:	898b      	ldrh	r3, [r1, #12]
 800ebaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebac:	079d      	lsls	r5, r3, #30
 800ebae:	4606      	mov	r6, r0
 800ebb0:	460c      	mov	r4, r1
 800ebb2:	d507      	bpl.n	800ebc4 <__smakebuf_r+0x1c>
 800ebb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	6123      	str	r3, [r4, #16]
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	6163      	str	r3, [r4, #20]
 800ebc0:	b003      	add	sp, #12
 800ebc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc4:	ab01      	add	r3, sp, #4
 800ebc6:	466a      	mov	r2, sp
 800ebc8:	f7ff ffc8 	bl	800eb5c <__swhatbuf_r>
 800ebcc:	9f00      	ldr	r7, [sp, #0]
 800ebce:	4605      	mov	r5, r0
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f7fd fbe8 	bl	800c3a8 <_malloc_r>
 800ebd8:	b948      	cbnz	r0, 800ebee <__smakebuf_r+0x46>
 800ebda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebde:	059a      	lsls	r2, r3, #22
 800ebe0:	d4ee      	bmi.n	800ebc0 <__smakebuf_r+0x18>
 800ebe2:	f023 0303 	bic.w	r3, r3, #3
 800ebe6:	f043 0302 	orr.w	r3, r3, #2
 800ebea:	81a3      	strh	r3, [r4, #12]
 800ebec:	e7e2      	b.n	800ebb4 <__smakebuf_r+0xc>
 800ebee:	89a3      	ldrh	r3, [r4, #12]
 800ebf0:	6020      	str	r0, [r4, #0]
 800ebf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebf6:	81a3      	strh	r3, [r4, #12]
 800ebf8:	9b01      	ldr	r3, [sp, #4]
 800ebfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ebfe:	b15b      	cbz	r3, 800ec18 <__smakebuf_r+0x70>
 800ec00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec04:	4630      	mov	r0, r6
 800ec06:	f000 f81d 	bl	800ec44 <_isatty_r>
 800ec0a:	b128      	cbz	r0, 800ec18 <__smakebuf_r+0x70>
 800ec0c:	89a3      	ldrh	r3, [r4, #12]
 800ec0e:	f023 0303 	bic.w	r3, r3, #3
 800ec12:	f043 0301 	orr.w	r3, r3, #1
 800ec16:	81a3      	strh	r3, [r4, #12]
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	431d      	orrs	r5, r3
 800ec1c:	81a5      	strh	r5, [r4, #12]
 800ec1e:	e7cf      	b.n	800ebc0 <__smakebuf_r+0x18>

0800ec20 <_fstat_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4d07      	ldr	r5, [pc, #28]	@ (800ec40 <_fstat_r+0x20>)
 800ec24:	2300      	movs	r3, #0
 800ec26:	4604      	mov	r4, r0
 800ec28:	4608      	mov	r0, r1
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	602b      	str	r3, [r5, #0]
 800ec2e:	f7f3 faed 	bl	800220c <_fstat>
 800ec32:	1c43      	adds	r3, r0, #1
 800ec34:	d102      	bne.n	800ec3c <_fstat_r+0x1c>
 800ec36:	682b      	ldr	r3, [r5, #0]
 800ec38:	b103      	cbz	r3, 800ec3c <_fstat_r+0x1c>
 800ec3a:	6023      	str	r3, [r4, #0]
 800ec3c:	bd38      	pop	{r3, r4, r5, pc}
 800ec3e:	bf00      	nop
 800ec40:	200021cc 	.word	0x200021cc

0800ec44 <_isatty_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4d06      	ldr	r5, [pc, #24]	@ (800ec60 <_isatty_r+0x1c>)
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	4608      	mov	r0, r1
 800ec4e:	602b      	str	r3, [r5, #0]
 800ec50:	f7f3 faec 	bl	800222c <_isatty>
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	d102      	bne.n	800ec5e <_isatty_r+0x1a>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	b103      	cbz	r3, 800ec5e <_isatty_r+0x1a>
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}
 800ec60:	200021cc 	.word	0x200021cc

0800ec64 <_init>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr

0800ec70 <_fini>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	bf00      	nop
 800ec74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec76:	bc08      	pop	{r3}
 800ec78:	469e      	mov	lr, r3
 800ec7a:	4770      	bx	lr
