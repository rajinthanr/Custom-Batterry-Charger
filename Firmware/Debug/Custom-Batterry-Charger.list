
Custom-Batterry-Charger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c78  08009c78  0000b160  2**0
                  CONTENTS
  4 .ARM          00000008  08009c78  08009c78  0000ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c80  08009c80  0000b160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c80  08009c80  0000ac80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c84  08009c84  0000ac84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  08009c88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e88  20000160  08009de8  0000b160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fe8  08009de8  0000bfe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163ff  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f8  00000000  00000000  0002158f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00024c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff1  00000000  00000000  00026130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa20  00000000  00000000  00027121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa2a  00000000  00000000  00041b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e2bf  00000000  00000000  0005c56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dac  00000000  00000000  000fa870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bc0 	.word	0x08009bc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08009bc0 	.word	0x08009bc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b96a 	b.w	8000be8 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	460c      	mov	r4, r1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d14e      	bne.n	80009d6 <__udivmoddi4+0xaa>
 8000938:	4694      	mov	ip, r2
 800093a:	458c      	cmp	ip, r1
 800093c:	4686      	mov	lr, r0
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	d962      	bls.n	8000a0a <__udivmoddi4+0xde>
 8000944:	b14a      	cbz	r2, 800095a <__udivmoddi4+0x2e>
 8000946:	f1c2 0320 	rsb	r3, r2, #32
 800094a:	4091      	lsls	r1, r2
 800094c:	fa20 f303 	lsr.w	r3, r0, r3
 8000950:	fa0c fc02 	lsl.w	ip, ip, r2
 8000954:	4319      	orrs	r1, r3
 8000956:	fa00 fe02 	lsl.w	lr, r0, r2
 800095a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095e:	fa1f f68c 	uxth.w	r6, ip
 8000962:	fbb1 f4f7 	udiv	r4, r1, r7
 8000966:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800096a:	fb07 1114 	mls	r1, r7, r4, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb04 f106 	mul.w	r1, r4, r6
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000982:	f080 8112 	bcs.w	8000baa <__udivmoddi4+0x27e>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 810f 	bls.w	8000baa <__udivmoddi4+0x27e>
 800098c:	3c02      	subs	r4, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a59      	subs	r1, r3, r1
 8000992:	fa1f f38e 	uxth.w	r3, lr
 8000996:	fbb1 f0f7 	udiv	r0, r1, r7
 800099a:	fb07 1110 	mls	r1, r7, r0, r1
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb00 f606 	mul.w	r6, r0, r6
 80009a6:	429e      	cmp	r6, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x94>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b2:	f080 80fc 	bcs.w	8000bae <__udivmoddi4+0x282>
 80009b6:	429e      	cmp	r6, r3
 80009b8:	f240 80f9 	bls.w	8000bae <__udivmoddi4+0x282>
 80009bc:	4463      	add	r3, ip
 80009be:	3802      	subs	r0, #2
 80009c0:	1b9b      	subs	r3, r3, r6
 80009c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009c6:	2100      	movs	r1, #0
 80009c8:	b11d      	cbz	r5, 80009d2 <__udivmoddi4+0xa6>
 80009ca:	40d3      	lsrs	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	e9c5 3200 	strd	r3, r2, [r5]
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d905      	bls.n	80009e6 <__udivmoddi4+0xba>
 80009da:	b10d      	cbz	r5, 80009e0 <__udivmoddi4+0xb4>
 80009dc:	e9c5 0100 	strd	r0, r1, [r5]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4608      	mov	r0, r1
 80009e4:	e7f5      	b.n	80009d2 <__udivmoddi4+0xa6>
 80009e6:	fab3 f183 	clz	r1, r3
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d146      	bne.n	8000a7c <__udivmoddi4+0x150>
 80009ee:	42a3      	cmp	r3, r4
 80009f0:	d302      	bcc.n	80009f8 <__udivmoddi4+0xcc>
 80009f2:	4290      	cmp	r0, r2
 80009f4:	f0c0 80f0 	bcc.w	8000bd8 <__udivmoddi4+0x2ac>
 80009f8:	1a86      	subs	r6, r0, r2
 80009fa:	eb64 0303 	sbc.w	r3, r4, r3
 80009fe:	2001      	movs	r0, #1
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d0e6      	beq.n	80009d2 <__udivmoddi4+0xa6>
 8000a04:	e9c5 6300 	strd	r6, r3, [r5]
 8000a08:	e7e3      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	f040 8090 	bne.w	8000b30 <__udivmoddi4+0x204>
 8000a10:	eba1 040c 	sub.w	r4, r1, ip
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a26:	fb08 4416 	mls	r4, r8, r6, r4
 8000a2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2e:	fb07 f006 	mul.w	r0, r7, r6
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x11c>
 8000a36:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x11a>
 8000a40:	4298      	cmp	r0, r3
 8000a42:	f200 80cd 	bhi.w	8000be0 <__udivmoddi4+0x2b4>
 8000a46:	4626      	mov	r6, r4
 8000a48:	1a1c      	subs	r4, r3, r0
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a52:	fb08 4410 	mls	r4, r8, r0, r4
 8000a56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a5a:	fb00 f707 	mul.w	r7, r0, r7
 8000a5e:	429f      	cmp	r7, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x148>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a6a:	d202      	bcs.n	8000a72 <__udivmoddi4+0x146>
 8000a6c:	429f      	cmp	r7, r3
 8000a6e:	f200 80b0 	bhi.w	8000bd2 <__udivmoddi4+0x2a6>
 8000a72:	4620      	mov	r0, r4
 8000a74:	1bdb      	subs	r3, r3, r7
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	e7a5      	b.n	80009c8 <__udivmoddi4+0x9c>
 8000a7c:	f1c1 0620 	rsb	r6, r1, #32
 8000a80:	408b      	lsls	r3, r1
 8000a82:	fa22 f706 	lsr.w	r7, r2, r6
 8000a86:	431f      	orrs	r7, r3
 8000a88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a90:	ea43 030c 	orr.w	r3, r3, ip
 8000a94:	40f4      	lsrs	r4, r6
 8000a96:	fa00 f801 	lsl.w	r8, r0, r1
 8000a9a:	0c38      	lsrs	r0, r7, #16
 8000a9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000aa0:	fbb4 fef0 	udiv	lr, r4, r0
 8000aa4:	fa1f fc87 	uxth.w	ip, r7
 8000aa8:	fb00 441e 	mls	r4, r0, lr, r4
 8000aac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ab4:	45a1      	cmp	r9, r4
 8000ab6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aba:	d90a      	bls.n	8000ad2 <__udivmoddi4+0x1a6>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ac2:	f080 8084 	bcs.w	8000bce <__udivmoddi4+0x2a2>
 8000ac6:	45a1      	cmp	r9, r4
 8000ac8:	f240 8081 	bls.w	8000bce <__udivmoddi4+0x2a2>
 8000acc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ad0:	443c      	add	r4, r7
 8000ad2:	eba4 0409 	sub.w	r4, r4, r9
 8000ad6:	fa1f f983 	uxth.w	r9, r3
 8000ada:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ade:	fb00 4413 	mls	r4, r0, r3, r4
 8000ae2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aea:	45a4      	cmp	ip, r4
 8000aec:	d907      	bls.n	8000afe <__udivmoddi4+0x1d2>
 8000aee:	193c      	adds	r4, r7, r4
 8000af0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000af4:	d267      	bcs.n	8000bc6 <__udivmoddi4+0x29a>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	d965      	bls.n	8000bc6 <__udivmoddi4+0x29a>
 8000afa:	3b02      	subs	r3, #2
 8000afc:	443c      	add	r4, r7
 8000afe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b02:	fba0 9302 	umull	r9, r3, r0, r2
 8000b06:	eba4 040c 	sub.w	r4, r4, ip
 8000b0a:	429c      	cmp	r4, r3
 8000b0c:	46ce      	mov	lr, r9
 8000b0e:	469c      	mov	ip, r3
 8000b10:	d351      	bcc.n	8000bb6 <__udivmoddi4+0x28a>
 8000b12:	d04e      	beq.n	8000bb2 <__udivmoddi4+0x286>
 8000b14:	b155      	cbz	r5, 8000b2c <__udivmoddi4+0x200>
 8000b16:	ebb8 030e 	subs.w	r3, r8, lr
 8000b1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b22:	40cb      	lsrs	r3, r1
 8000b24:	431e      	orrs	r6, r3
 8000b26:	40cc      	lsrs	r4, r1
 8000b28:	e9c5 6400 	strd	r6, r4, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e750      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f103 	lsr.w	r1, r0, r3
 8000b38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b40:	4094      	lsls	r4, r2
 8000b42:	430c      	orrs	r4, r1
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4c:	fa1f f78c 	uxth.w	r7, ip
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3110 	mls	r1, r8, r0, r3
 8000b58:	0c23      	lsrs	r3, r4, #16
 8000b5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5e:	fb00 f107 	mul.w	r1, r0, r7
 8000b62:	4299      	cmp	r1, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x24c>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b6e:	d22c      	bcs.n	8000bca <__udivmoddi4+0x29e>
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d92a      	bls.n	8000bca <__udivmoddi4+0x29e>
 8000b74:	3802      	subs	r0, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b80:	fb08 3311 	mls	r3, r8, r1, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb01 f307 	mul.w	r3, r1, r7
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x276>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b98:	d213      	bcs.n	8000bc2 <__udivmoddi4+0x296>
 8000b9a:	42a3      	cmp	r3, r4
 8000b9c:	d911      	bls.n	8000bc2 <__udivmoddi4+0x296>
 8000b9e:	3902      	subs	r1, #2
 8000ba0:	4464      	add	r4, ip
 8000ba2:	1ae4      	subs	r4, r4, r3
 8000ba4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ba8:	e739      	b.n	8000a1e <__udivmoddi4+0xf2>
 8000baa:	4604      	mov	r4, r0
 8000bac:	e6f0      	b.n	8000990 <__udivmoddi4+0x64>
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e706      	b.n	80009c0 <__udivmoddi4+0x94>
 8000bb2:	45c8      	cmp	r8, r9
 8000bb4:	d2ae      	bcs.n	8000b14 <__udivmoddi4+0x1e8>
 8000bb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	e7a8      	b.n	8000b14 <__udivmoddi4+0x1e8>
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	e7ed      	b.n	8000ba2 <__udivmoddi4+0x276>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e799      	b.n	8000afe <__udivmoddi4+0x1d2>
 8000bca:	4630      	mov	r0, r6
 8000bcc:	e7d4      	b.n	8000b78 <__udivmoddi4+0x24c>
 8000bce:	46d6      	mov	lr, sl
 8000bd0:	e77f      	b.n	8000ad2 <__udivmoddi4+0x1a6>
 8000bd2:	4463      	add	r3, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	e74d      	b.n	8000a74 <__udivmoddi4+0x148>
 8000bd8:	4606      	mov	r6, r0
 8000bda:	4623      	mov	r3, r4
 8000bdc:	4608      	mov	r0, r1
 8000bde:	e70f      	b.n	8000a00 <__udivmoddi4+0xd4>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	e730      	b.n	8000a48 <__udivmoddi4+0x11c>
 8000be6:	bf00      	nop

08000be8 <__aeabi_idiv0>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <readADC>:
float ki = 0.01f; // Integral gain for voltage control




int readADC(uint32_t pin){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  sConfig.Channel = pin;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4619      	mov	r1, r3
 8000c14:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <readADC+0x68>)
 8000c16:	f000 ffdf 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <readADC+0x38>
  {
    Error_Handler();
 8000c20:	f000 fb8e 	bl	8001340 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <readADC+0x68>)
 8000c26:	f000 fe57 	bl	80018d8 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8000c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2e:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <readADC+0x68>)
 8000c30:	f000 ff39 	bl	8001aa6 <HAL_ADC_PollForConversion>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <readADC+0x52>
  {
    Error_Handler();
 8000c3a:	f000 fb81 	bl	8001340 <Error_Handler>
  }
  HAL_ADC_Stop(&hadc1);
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <readADC+0x68>)
 8000c40:	f000 fefe 	bl	8001a40 <HAL_ADC_Stop>

  return HAL_ADC_GetValue(&hadc1);
 8000c44:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <readADC+0x68>)
 8000c46:	f000 ffb9 	bl	8001bbc <HAL_ADC_GetValue>
 8000c4a:	4603      	mov	r3, r0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000017c 	.word	0x2000017c

08000c58 <pwm>:

void pwm(float pulseWidth) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	ed87 0a01 	vstr	s0, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	615a      	str	r2, [r3, #20]
 8000c74:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	2360      	movs	r3, #96	@ 0x60
 8000c78:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = pulseWidth * 4095; // Scale pulse width to match timer resolution
 8000c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c7e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000cc0 <pwm+0x68>
 8000c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8a:	ee17 3a90 	vmov	r3, s15
 8000c8e:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <pwm+0x6c>)
 8000ca2:	f003 fdc3 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <pwm+0x58>
  {
    Error_Handler();
 8000cac:	f000 fb48 	bl	8001340 <Error_Handler>
  }

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <pwm+0x6c>)
 8000cb4:	f003 fd0a 	bl	80046cc <HAL_TIM_PWM_Start>
}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	457ff000 	.word	0x457ff000
 8000cc4:	20000260 	.word	0x20000260

08000cc8 <toggle>:

void toggle(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <toggle+0x14>)
 8000cd2:	f001 fc5e 	bl	8002592 <HAL_GPIO_TogglePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	@ 0x38
 8000ce4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 fd1d 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f90b 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f000 fab7 	bl	8001260 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cf2:	f000 f96f 	bl	8000fd4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cf6:	f000 f9bf 	bl	8001078 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cfa:	f000 f9eb 	bl	80010d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cfe:	f000 fa39 	bl	8001174 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d02:	f007 fd99 	bl	8008838 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  toggle(); // Initial toggle to indicate start
 8000d06:	f7ff ffdf 	bl	8000cc8 <toggle>
  toggle();
 8000d0a:	f7ff ffdd 	bl	8000cc8 <toggle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    v_out = readADC(ADC_CHANNEL_0) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ff6c 	bl	8000bec <readADC>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd36 	bl	8000788 <__aeabi_i2d>
 8000d1c:	a36a      	add	r3, pc, #424	@ (adr r3, 8000ec8 <main+0x1e8>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fab5 	bl	8000290 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	a368      	add	r3, pc, #416	@ (adr r3, 8000ed0 <main+0x1f0>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	f7ff faac 	bl	8000290 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f7ff fd8c 	bl	800085c <__aeabi_d2f>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a66      	ldr	r2, [pc, #408]	@ (8000ee0 <main+0x200>)
 8000d48:	6013      	str	r3, [r2, #0]

    v_in = readADC(ADC_CHANNEL_9) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 8000d4a:	2009      	movs	r0, #9
 8000d4c:	f7ff ff4e 	bl	8000bec <readADC>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fd18 	bl	8000788 <__aeabi_i2d>
 8000d58:	a35b      	add	r3, pc, #364	@ (adr r3, 8000ec8 <main+0x1e8>)
 8000d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5e:	f7ff fa97 	bl	8000290 <__aeabi_dmul>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	a359      	add	r3, pc, #356	@ (adr r3, 8000ed0 <main+0x1f0>)
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	f7ff fa8e 	bl	8000290 <__aeabi_dmul>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fd6e 	bl	800085c <__aeabi_d2f>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a58      	ldr	r2, [pc, #352]	@ (8000ee4 <main+0x204>)
 8000d84:	6013      	str	r3, [r2, #0]

    i_out = readADC(ADC_CHANNEL_2) *(10000.0/22)* (3.3f / 4095.0f); // Read ADC value and convert to current
 8000d86:	2002      	movs	r0, #2
 8000d88:	f7ff ff30 	bl	8000bec <readADC>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fcfa 	bl	8000788 <__aeabi_i2d>
 8000d94:	a350      	add	r3, pc, #320	@ (adr r3, 8000ed8 <main+0x1f8>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fa79 	bl	8000290 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	a34a      	add	r3, pc, #296	@ (adr r3, 8000ed0 <main+0x1f0>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fa70 	bl	8000290 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff fd50 	bl	800085c <__aeabi_d2f>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8000ee8 <main+0x208>)
 8000dc0:	6013      	str	r3, [r2, #0]

    char vin_str[32];
    snprintf(vin_str, sizeof(vin_str), "VIN: %.2f\r\n", v_in);
 8000dc2:	4b48      	ldr	r3, [pc, #288]	@ (8000ee4 <main+0x204>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fcf0 	bl	80007ac <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	e9cd 2300 	strd	r2, r3, [sp]
 8000dd6:	4a45      	ldr	r2, [pc, #276]	@ (8000eec <main+0x20c>)
 8000dd8:	2120      	movs	r1, #32
 8000dda:	f008 fa3d 	bl	8009258 <sniprintf>
    CDC_Transmit_FS((uint8_t *)vin_str, strlen(vin_str)); // Transmit VIN string over USB CDC
 8000dde:	463b      	mov	r3, r7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff f9fd 	bl	80001e0 <strlen>
 8000de6:	4602      	mov	r2, r0
 8000de8:	463b      	mov	r3, r7
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f007 fde1 	bl	80089b4 <CDC_Transmit_FS>

    // Voltage control loop
    float voltageError = targetVoltage - v_out; // Calculate voltage error
 8000df2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <main+0x210>)
 8000df4:	ed93 7a00 	vldr	s14, [r3]
 8000df8:	4b39      	ldr	r3, [pc, #228]	@ (8000ee0 <main+0x200>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float voltageControl = kp * voltageError; // Proportional control for voltage
 8000e06:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef4 <main+0x214>)
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e14:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    // } else if (pulseWidth > 1.0f) {
    //   pulseWidth = 1.0f; // Ensure pulse width does not exceed 1
    // }

    // Current control loop
    float currentError = targetCurrent - i_out; // Calculate current error
 8000e18:	4b37      	ldr	r3, [pc, #220]	@ (8000ef8 <main+0x218>)
 8000e1a:	ed93 7a00 	vldr	s14, [r3]
 8000e1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <main+0x208>)
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float currentControl = ki * currentError; // Integral control for current
 8000e2c:	4b33      	ldr	r3, [pc, #204]	@ (8000efc <main+0x21c>)
 8000e2e:	edd3 7a00 	vldr	s15, [r3]
 8000e32:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3a:	edc7 7a08 	vstr	s15, [r7, #32]

    if(i_out > targetCurrent) 
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <main+0x208>)
 8000e40:	ed93 7a00 	vldr	s14, [r3]
 8000e44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <main+0x218>)
 8000e46:	edd3 7a00 	vldr	s15, [r3]
 8000e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e52:	dd0a      	ble.n	8000e6a <main+0x18a>
      pulseWidth += currentControl; // Adjust pulse width based on current control
 8000e54:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <main+0x220>)
 8000e56:	ed93 7a00 	vldr	s14, [r3]
 8000e5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <main+0x220>)
 8000e64:	edc3 7a00 	vstr	s15, [r3]
 8000e68:	e009      	b.n	8000e7e <main+0x19e>
    else 
      pulseWidth += voltageControl; // Adjust pulse width based on voltage control
 8000e6a:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <main+0x220>)
 8000e6c:	ed93 7a00 	vldr	s14, [r3]
 8000e70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e78:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <main+0x220>)
 8000e7a:	edc3 7a00 	vstr	s15, [r3]

    if (pulseWidth < 0.0f) {
 8000e7e:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <main+0x220>)
 8000e80:	edd3 7a00 	vldr	s15, [r3]
 8000e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	d504      	bpl.n	8000e98 <main+0x1b8>
      pulseWidth = 0.0f; // Ensure pulse width does not go below 0
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <main+0x220>)
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e00d      	b.n	8000eb4 <main+0x1d4>
    } else if (pulseWidth > 1.0f) {
 8000e98:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <main+0x220>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	dd03      	ble.n	8000eb4 <main+0x1d4>
      pulseWidth = 1.0f; // Ensure pulse width does not exceed 1
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <main+0x220>)
 8000eae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000eb2:	601a      	str	r2, [r3, #0]
    }

    pwm(pulseWidth); // Set PWM output based on pulse width
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <main+0x220>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	f7ff fecb 	bl	8000c58 <pwm>
  {
 8000ec2:	e724      	b.n	8000d0e <main+0x2e>
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	cccccccd 	.word	0xcccccccd
 8000ecc:	4016cccc 	.word	0x4016cccc
 8000ed0:	e0000000 	.word	0xe0000000
 8000ed4:	3f4a680c 	.word	0x3f4a680c
 8000ed8:	2e8ba2e9 	.word	0x2e8ba2e9
 8000edc:	407c68ba 	.word	0x407c68ba
 8000ee0:	200002a8 	.word	0x200002a8
 8000ee4:	200002ac 	.word	0x200002ac
 8000ee8:	200002b0 	.word	0x200002b0
 8000eec:	08009bd8 	.word	0x08009bd8
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000010 	.word	0x20000010
 8000f00:	20000000 	.word	0x20000000

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	@ 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2230      	movs	r2, #48	@ 0x30
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f008 f9d4 	bl	80092c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <SystemClock_Config+0xc8>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	4a26      	ldr	r2, [pc, #152]	@ (8000fcc <SystemClock_Config+0xc8>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <SystemClock_Config+0xc8>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f74:	230c      	movs	r3, #12
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 92;
 8000f78:	235c      	movs	r3, #92	@ 0x5c
 8000f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 feb3 	bl	8003cf4 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f94:	f000 f9d4 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 f915 	bl	80041e4 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fc0:	f000 f9be 	bl	8001340 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	@ 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <MX_ADC1_Init+0x98>)
 8000fe8:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <MX_ADC1_Init+0x9c>)
 8000fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <MX_ADC1_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_ADC1_Init+0x98>)
 8001014:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <MX_ADC1_Init+0xa0>)
 8001016:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <MX_ADC1_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_ADC1_Init+0x98>)
 800102e:	2201      	movs	r2, #1
 8001030:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001032:	480e      	ldr	r0, [pc, #56]	@ (800106c <MX_ADC1_Init+0x98>)
 8001034:	f000 fc0c 	bl	8001850 <HAL_ADC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 f97f 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001042:	2309      	movs	r3, #9
 8001044:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	@ (800106c <MX_ADC1_Init+0x98>)
 8001054:	f000 fdc0 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800105e:	f000 f96f 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000017c 	.word	0x2000017c
 8001070:	40012000 	.word	0x40012000
 8001074:	0f000001 	.word	0x0f000001

08001078 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_I2C1_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <MX_I2C1_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_I2C1_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <MX_I2C1_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_I2C1_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_I2C1_Init+0x50>)
 80010b6:	f001 fa87 	bl	80025c8 <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 f93e 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001c4 	.word	0x200001c4
 80010cc:	40005400 	.word	0x40005400
 80010d0:	000186a0 	.word	0x000186a0

080010d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <MX_TIM1_Init+0x98>)
 80010f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001170 <MX_TIM1_Init+0x9c>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <MX_TIM1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_TIM1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_TIM1_Init+0x98>)
 8001104:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001108:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_TIM1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_TIM1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_TIM1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111c:	4813      	ldr	r0, [pc, #76]	@ (800116c <MX_TIM1_Init+0x98>)
 800111e:	f003 fa2d 	bl	800457c <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001128:	f000 f90a 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <MX_TIM1_Init+0x98>)
 800113a:	f003 fc39 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001144:	f000 f8fc 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_TIM1_Init+0x98>)
 8001156:	f003 ffc5 	bl	80050e4 <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001160:	f000 f8ee 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000218 	.word	0x20000218
 8001170:	40010000 	.word	0x40010000

08001174 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	@ 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011ba:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b26      	ldr	r3, [pc, #152]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b25      	ldr	r3, [pc, #148]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011cc:	4823      	ldr	r0, [pc, #140]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011ce:	f003 f9d5 	bl	800457c <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011d8:	f000 f8b2 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e6:	4619      	mov	r1, r3
 80011e8:	481c      	ldr	r0, [pc, #112]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011ea:	f003 fbe1 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011f4:	f000 f8a4 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f8:	4818      	ldr	r0, [pc, #96]	@ (800125c <MX_TIM2_Init+0xe8>)
 80011fa:	f003 fa0e 	bl	800461a <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001204:	f000 f89c 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	@ (800125c <MX_TIM2_Init+0xe8>)
 8001218:	f003 ff64 	bl	80050e4 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001222:	f000 f88d 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	@ 0x60
 8001228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2208      	movs	r2, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <MX_TIM2_Init+0xe8>)
 800123e:	f003 faf5 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001248:	f000 f87a 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_TIM2_Init+0xe8>)
 800124e:	f000 f983 	bl	8001558 <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3738      	adds	r7, #56	@ 0x38
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000260 	.word	0x20000260

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <MX_GPIO_Init+0xd4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <MX_GPIO_Init+0xd4>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <MX_GPIO_Init+0xd4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <MX_GPIO_Init+0xd4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <MX_GPIO_Init+0xd4>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <MX_GPIO_Init+0xd4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <MX_GPIO_Init+0xd4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001334 <MX_GPIO_Init+0xd4>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_GPIO_Init+0xd4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_GPIO_Init+0xd4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a18      	ldr	r2, [pc, #96]	@ (8001334 <MX_GPIO_Init+0xd4>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_GPIO_Init+0xd4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ec:	4812      	ldr	r0, [pc, #72]	@ (8001338 <MX_GPIO_Init+0xd8>)
 80012ee:	f001 f937 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <MX_GPIO_Init+0xd8>)
 800130c:	f000 ffa4 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_GPIO_Init+0xdc>)
 8001326:	f000 ff97 	bl	8002258 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020400 	.word	0x40020400

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001360:	6453      	str	r3, [r2, #68]	@ 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a24      	ldr	r2, [pc, #144]	@ (800144c <HAL_ADC_MspInit+0xb0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d141      	bne.n	8001442 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_ADC_MspInit+0xb4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001412:	2305      	movs	r3, #5
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	480b      	ldr	r0, [pc, #44]	@ (8001454 <HAL_ADC_MspInit+0xb8>)
 8001426:	f000 ff17 	bl	8002258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4806      	ldr	r0, [pc, #24]	@ (8001458 <HAL_ADC_MspInit+0xbc>)
 800143e:	f000 ff0b 	bl	8002258 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400

0800145c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	@ (80014e0 <HAL_I2C_MspInit+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12b      	bne.n	80014d6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_I2C_MspInit+0x88>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_I2C_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149a:	23c0      	movs	r3, #192	@ 0xc0
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149e:	2312      	movs	r3, #18
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014aa:	2304      	movs	r3, #4
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <HAL_I2C_MspInit+0x8c>)
 80014b6:	f000 fecf 	bl	8002258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_I2C_MspInit+0x88>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <HAL_I2C_MspInit+0x88>)
 80014c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_I2C_MspInit+0x88>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020400 	.word	0x40020400

080014ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <HAL_TIM_Base_MspInit+0x64>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d10e      	bne.n	800151c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_TIM_Base_MspInit+0x68>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <HAL_TIM_Base_MspInit+0x68>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_TIM_Base_MspInit+0x68>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151a:	e012      	b.n	8001542 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001524:	d10d      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_TIM_Base_MspInit+0x68>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <HAL_TIM_Base_MspInit+0x68>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6413      	str	r3, [r2, #64]	@ 0x40
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <HAL_TIM_Base_MspInit+0x68>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40010000 	.word	0x40010000
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001578:	d11e      	bne.n	80015b8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_TIM_MspPostInit+0x68>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a0f      	ldr	r2, [pc, #60]	@ (80015c0 <HAL_TIM_MspPostInit+0x68>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_TIM_MspPostInit+0x68>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800159a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4619      	mov	r1, r3
 80015b2:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <HAL_TIM_MspPostInit+0x6c>)
 80015b4:	f000 fe50 	bl	8002258 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161e:	f000 f8d3 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */



  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800162c:	4803      	ldr	r0, [pc, #12]	@ (800163c <OTG_FS_IRQHandler+0x14>)
 800162e:	f001 fa53 	bl	8002ad8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  toggle();
 8001632:	f7ff fb49 	bl	8000cc8 <toggle>

  

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000179c 	.word	0x2000179c

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f007 fe2e 	bl	80092d0 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20020000 	.word	0x20020000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	200002b4 	.word	0x200002b4
 80016a8:	20001fe8 	.word	0x20001fe8

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001708 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016d4:	f7ff ffea 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	@ (8001710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	@ (800171c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f007 fded 	bl	80092dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff faed 	bl	8000ce0 <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001714:	08009c88 	.word	0x08009c88
  ldr r2, =_sbss
 8001718:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800171c:	20001fe8 	.word	0x20001fe8

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 fd41 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	200f      	movs	r0, #15
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fdf8 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fd59 	bl	800223e <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 fd21 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000014 	.word	0x20000014
 80017c0:	2000001c 	.word	0x2000001c
 80017c4:	20000018 	.word	0x20000018

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2000001c 	.word	0x2000001c
 80017ec:	200002b8 	.word	0x200002b8

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200002b8 	.word	0x200002b8

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000001c 	.word	0x2000001c

08001850 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e033      	b.n	80018ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd94 	bl	800139c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001896:	f023 0302 	bic.w	r3, r3, #2
 800189a:	f043 0202 	orr.w	r2, r3, #2
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 faca 	bl	8001e3c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80018be:	e001      	b.n	80018c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Start+0x1a>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e097      	b.n	8001a22 <HAL_ADC_Start+0x14a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d018      	beq.n	800193a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001918:	4b45      	ldr	r3, [pc, #276]	@ (8001a30 <HAL_ADC_Start+0x158>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a45      	ldr	r2, [pc, #276]	@ (8001a34 <HAL_ADC_Start+0x15c>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9a      	lsrs	r2, r3, #18
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800192c:	e002      	b.n	8001934 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3b01      	subs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	d15f      	bne.n	8001a08 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001972:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001986:	d106      	bne.n	8001996 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	f023 0206 	bic.w	r2, r3, #6
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44
 8001994:	e002      	b.n	800199c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a4:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <HAL_ADC_Start+0x160>)
 80019a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019b0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d129      	bne.n	8001a20 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	e020      	b.n	8001a20 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a16      	ldr	r2, [pc, #88]	@ (8001a3c <HAL_ADC_Start+0x164>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d11b      	bne.n	8001a20 <HAL_ADC_Start+0x148>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d114      	bne.n	8001a20 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	e00b      	b.n	8001a20 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f043 0210 	orr.w	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000014 	.word	0x20000014
 8001a34:	431bde83 	.word	0x431bde83
 8001a38:	40012300 	.word	0x40012300
 8001a3c:	40012000 	.word	0x40012000

08001a40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Stop+0x16>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e021      	b.n	8001a9a <HAL_ADC_Stop+0x5a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac2:	d113      	bne.n	8001aec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad2:	d10b      	bne.n	8001aec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e063      	b.n	8001bb4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aec:	f7ff fe80 	bl	80017f0 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001af2:	e021      	b.n	8001b38 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afa:	d01d      	beq.n	8001b38 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_ADC_PollForConversion+0x6c>
 8001b02:	f7ff fe75 	bl	80017f0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d212      	bcs.n	8001b38 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d00b      	beq.n	8001b38 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	f043 0204 	orr.w	r2, r3, #4
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e03d      	b.n	8001bb4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d1d6      	bne.n	8001af4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0212 	mvn.w	r2, #18
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d123      	bne.n	8001bb2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11f      	bne.n	8001bb2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d111      	bne.n	8001bb2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x1c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e113      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x244>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d925      	bls.n	8001c50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68d9      	ldr	r1, [r3, #12]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43da      	mvns	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	400a      	ands	r2, r1
 8001c28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68d9      	ldr	r1, [r3, #12]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4403      	add	r3, r0
 8001c42:	3b1e      	subs	r3, #30
 8001c44:	409a      	lsls	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	e022      	b.n	8001c96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6919      	ldr	r1, [r3, #16]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	2207      	movs	r2, #7
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6919      	ldr	r1, [r3, #16]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4403      	add	r3, r0
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d824      	bhi.n	8001ce8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b05      	subs	r3, #5
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b05      	subs	r3, #5
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce6:	e04c      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d824      	bhi.n	8001d3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b23      	subs	r3, #35	@ 0x23
 8001d02:	221f      	movs	r2, #31
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	400a      	ands	r2, r1
 8001d10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b23      	subs	r3, #35	@ 0x23
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d38:	e023      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b41      	subs	r3, #65	@ 0x41
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b41      	subs	r3, #65	@ 0x41
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d82:	4b29      	ldr	r3, [pc, #164]	@ (8001e28 <HAL_ADC_ConfigChannel+0x250>)
 8001d84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a28      	ldr	r2, [pc, #160]	@ (8001e2c <HAL_ADC_ConfigChannel+0x254>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d10f      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x1d8>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b12      	cmp	r3, #18
 8001d96:	d10b      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_ADC_ConfigChannel+0x254>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12b      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x23a>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001e30 <HAL_ADC_ConfigChannel+0x258>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x1f4>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b11      	cmp	r3, #17
 8001dca:	d122      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <HAL_ADC_ConfigChannel+0x258>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d111      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_ADC_ConfigChannel+0x25c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a11      	ldr	r2, [pc, #68]	@ (8001e38 <HAL_ADC_ConfigChannel+0x260>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	0c9a      	lsrs	r2, r3, #18
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e04:	e002      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f9      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40012300 	.word	0x40012300
 8001e2c:	40012000 	.word	0x40012000
 8001e30:	10000012 	.word	0x10000012
 8001e34:	20000014 	.word	0x20000014
 8001e38:	431bde83 	.word	0x431bde83

08001e3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e44:	4b79      	ldr	r3, [pc, #484]	@ (800202c <ADC_Init+0x1f0>)
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	021a      	lsls	r2, r3, #8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	4a58      	ldr	r2, [pc, #352]	@ (8002030 <ADC_Init+0x1f4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d022      	beq.n	8001f1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ee2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6899      	ldr	r1, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	e00f      	b.n	8001f3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f38:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0202 	bic.w	r2, r2, #2
 8001f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e1b      	ldrb	r3, [r3, #24]
 8001f54:	005a      	lsls	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01b      	beq.n	8001fa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f76:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	3b01      	subs	r3, #1
 8001f94:	035a      	lsls	r2, r3, #13
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	e007      	b.n	8001fb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	051a      	lsls	r2, r3, #20
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ff2:	025a      	lsls	r2, r3, #9
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800200a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6899      	ldr	r1, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	029a      	lsls	r2, r3, #10
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	609a      	str	r2, [r3, #8]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40012300 	.word	0x40012300
 8002030:	0f000001 	.word	0x0f000001

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	@ (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	@ (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff29 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff3e 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff31 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	@ 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e159      	b.n	8002528 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 8148 	bne.w	8002522 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d005      	beq.n	80022aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d130      	bne.n	800230c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a2 	beq.w	8002522 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4a56      	ldr	r2, [pc, #344]	@ (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ee:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <HAL_GPIO_Init+0x2e8>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a52      	ldr	r2, [pc, #328]	@ (8002544 <HAL_GPIO_Init+0x2ec>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a49      	ldr	r2, [pc, #292]	@ (8002548 <HAL_GPIO_Init+0x2f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x202>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a48      	ldr	r2, [pc, #288]	@ (800254c <HAL_GPIO_Init+0x2f4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x1fe>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a47      	ldr	r2, [pc, #284]	@ (8002550 <HAL_GPIO_Init+0x2f8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x1fa>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a46      	ldr	r2, [pc, #280]	@ (8002554 <HAL_GPIO_Init+0x2fc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x1f6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a45      	ldr	r2, [pc, #276]	@ (8002558 <HAL_GPIO_Init+0x300>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x1f2>
 8002446:	2304      	movs	r3, #4
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244a:	2307      	movs	r3, #7
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x204>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246c:	4935      	ldr	r1, [pc, #212]	@ (8002544 <HAL_GPIO_Init+0x2ec>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b38      	ldr	r3, [pc, #224]	@ (800255c <HAL_GPIO_Init+0x304>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a2f      	ldr	r2, [pc, #188]	@ (800255c <HAL_GPIO_Init+0x304>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_GPIO_Init+0x304>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a24      	ldr	r2, [pc, #144]	@ (800255c <HAL_GPIO_Init+0x304>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ce:	4b23      	ldr	r3, [pc, #140]	@ (800255c <HAL_GPIO_Init+0x304>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f2:	4a1a      	ldr	r2, [pc, #104]	@ (800255c <HAL_GPIO_Init+0x304>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f8:	4b18      	ldr	r3, [pc, #96]	@ (800255c <HAL_GPIO_Init+0x304>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251c:	4a0f      	ldr	r2, [pc, #60]	@ (800255c <HAL_GPIO_Init+0x304>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f aea2 	bls.w	8002274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e12b      	b.n	8002832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe ff34 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	@ 0x24
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800261a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800262a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800262c:	f001 ff92 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a81      	ldr	r2, [pc, #516]	@ (800283c <HAL_I2C_Init+0x274>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d807      	bhi.n	800264c <HAL_I2C_Init+0x84>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a80      	ldr	r2, [pc, #512]	@ (8002840 <HAL_I2C_Init+0x278>)
 8002640:	4293      	cmp	r3, r2
 8002642:	bf94      	ite	ls
 8002644:	2301      	movls	r3, #1
 8002646:	2300      	movhi	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e006      	b.n	800265a <HAL_I2C_Init+0x92>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a7d      	ldr	r2, [pc, #500]	@ (8002844 <HAL_I2C_Init+0x27c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	bf94      	ite	ls
 8002654:	2301      	movls	r3, #1
 8002656:	2300      	movhi	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0e7      	b.n	8002832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a78      	ldr	r2, [pc, #480]	@ (8002848 <HAL_I2C_Init+0x280>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a6a      	ldr	r2, [pc, #424]	@ (800283c <HAL_I2C_Init+0x274>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d802      	bhi.n	800269c <HAL_I2C_Init+0xd4>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	e009      	b.n	80026b0 <HAL_I2C_Init+0xe8>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	4a69      	ldr	r2, [pc, #420]	@ (800284c <HAL_I2C_Init+0x284>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	495c      	ldr	r1, [pc, #368]	@ (800283c <HAL_I2C_Init+0x274>)
 80026cc:	428b      	cmp	r3, r1
 80026ce:	d819      	bhi.n	8002704 <HAL_I2C_Init+0x13c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e59      	subs	r1, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fbb1 f3f3 	udiv	r3, r1, r3
 80026de:	1c59      	adds	r1, r3, #1
 80026e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026e4:	400b      	ands	r3, r1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_I2C_Init+0x138>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e59      	subs	r1, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	e051      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002700:	2304      	movs	r3, #4
 8002702:	e04f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <HAL_I2C_Init+0x168>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e012      	b.n	8002756 <HAL_I2C_Init+0x18e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Init+0x196>
 800275a:	2301      	movs	r3, #1
 800275c:	e022      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10e      	bne.n	8002784 <HAL_I2C_Init+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e58      	subs	r0, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	440b      	add	r3, r1
 8002774:	fbb0 f3f3 	udiv	r3, r0, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002782:	e00f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	6809      	ldr	r1, [r1, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6911      	ldr	r1, [r2, #16]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	000186a0 	.word	0x000186a0
 8002840:	001e847f 	.word	0x001e847f
 8002844:	003d08ff 	.word	0x003d08ff
 8002848:	431bde83 	.word	0x431bde83
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e101      	b.n	8002a66 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f006 f9e1 	bl	8008c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002890:	d102      	bne.n	8002898 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fda6 	bl	80053ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7c1a      	ldrb	r2, [r3, #16]
 80028aa:	f88d 2000 	strb.w	r2, [sp]
 80028ae:	3304      	adds	r3, #4
 80028b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b2:	f002 fc85 	bl	80051c0 <USB_CoreInit>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0ce      	b.n	8002a66 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fd9e 	bl	8005410 <USB_SetCurrentMode>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0bf      	b.n	8002a66 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e04a      	b.n	8002982 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3315      	adds	r3, #21
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3314      	adds	r3, #20
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	b298      	uxth	r0, r3
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	332e      	adds	r3, #46	@ 0x2e
 8002928:	4602      	mov	r2, r0
 800292a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3318      	adds	r3, #24
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	331c      	adds	r3, #28
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3320      	adds	r3, #32
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3324      	adds	r3, #36	@ 0x24
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	3301      	adds	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	791b      	ldrb	r3, [r3, #4]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3af      	bcc.n	80028ec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e044      	b.n	8002a1c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	791b      	ldrb	r3, [r3, #4]
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3b5      	bcc.n	8002992 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7c1a      	ldrb	r2, [r3, #16]
 8002a2e:	f88d 2000 	strb.w	r2, [sp]
 8002a32:	3304      	adds	r3, #4
 8002a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a36:	f002 fd37 	bl	80054a8 <USB_DevInit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e00c      	b.n	8002a66 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fd81 	bl	8006566 <USB_DevDisconnect>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_PCD_Start+0x1c>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e022      	b.n	8002ad0 <HAL_PCD_Start+0x62>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aaa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 fc88 	bl	80053cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 fd2f 	bl	8006524 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b08d      	sub	sp, #52	@ 0x34
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fded 	bl	80066ce <USB_GetMode>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 848c 	bne.w	8003414 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fd51 	bl	80065a8 <USB_ReadInterrupts>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8482 	beq.w	8003412 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fd3e 	bl	80065a8 <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d107      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f002 0202 	and.w	r2, r2, #2
 8002b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fd2c 	bl	80065a8 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d161      	bne.n	8002c1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0210 	bic.w	r2, r2, #16
 8002b68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	0c5b      	lsrs	r3, r3, #17
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d124      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d035      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6a38      	ldr	r0, [r7, #32]
 8002bb6:	f003 fb63 	bl	8006280 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc6:	441a      	add	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd8:	441a      	add	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	615a      	str	r2, [r3, #20]
 8002bde:	e016      	b.n	8002c0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	0c5b      	lsrs	r3, r3, #17
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d110      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6a38      	ldr	r0, [r7, #32]
 8002bf8:	f003 fb42 	bl	8006280 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c08:	441a      	add	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0210 	orr.w	r2, r2, #16
 8002c1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fcc0 	bl	80065a8 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c32:	f040 80a7 	bne.w	8002d84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fcc5 	bl	80065ce <USB_ReadDevAllOutEpInterrupt>
 8002c44:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c46:	e099      	b.n	8002d7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 808e 	beq.w	8002d70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fce9 	bl	8006636 <USB_ReadDevOutEPInterrupt>
 8002c64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2301      	movs	r3, #1
 8002c80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fea3 	bl	80039d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ca6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 ff79 	bl	8003ba0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d030      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cdc:	2b80      	cmp	r3, #128	@ 0x80
 8002cde:	d109      	bne.n	8002cf4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cf2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	78db      	ldrb	r3, [r3, #3]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f006 f88c 	bl	8008e3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	2302      	movs	r3, #2
 8002d34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2320      	movs	r3, #32
 8002d50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f47f af62 	bne.w	8002c48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fc0d 	bl	80065a8 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d98:	f040 80db 	bne.w	8002f52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fc2e 	bl	8006602 <USB_ReadDevAllInEpInterrupt>
 8002da6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002dac:	e0cd      	b.n	8002f4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80c2 	beq.w	8002f3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fc54 	bl	8006672 <USB_ReadDevInEPInterrupt>
 8002dca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d057      	beq.n	8002e86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	2201      	movs	r2, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69f9      	ldr	r1, [r7, #28]
 8002df2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002df6:	4013      	ands	r3, r2
 8002df8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e06:	461a      	mov	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	799b      	ldrb	r3, [r3, #6]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d132      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3320      	adds	r3, #32
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4403      	add	r3, r0
 8002e34:	331c      	adds	r3, #28
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4419      	add	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4403      	add	r3, r0
 8002e48:	3320      	adds	r3, #32
 8002e4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d113      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x3a2>
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3324      	adds	r3, #36	@ 0x24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e72:	461a      	mov	r2, r3
 8002e74:	2101      	movs	r1, #1
 8002e76:	f003 fc5b 	bl	8006730 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f005 ff60 	bl	8008d46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2310      	movs	r3, #16
 8002ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2340      	movs	r3, #64	@ 0x40
 8002ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee6:	6a38      	ldr	r0, [r7, #32]
 8002ee8:	f002 fc42 	bl	8005770 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	3310      	adds	r3, #16
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	78db      	ldrb	r3, [r3, #3]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d108      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f005 ffa3 	bl	8008e60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f26:	461a      	mov	r2, r3
 8002f28:	2302      	movs	r3, #2
 8002f2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fcbd 	bl	80038b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	3301      	adds	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f af2e 	bne.w	8002dae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fb26 	bl	80065a8 <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f66:	d122      	bne.n	8002fae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f8e:	2100      	movs	r1, #0
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fea3 	bl	8003cdc <HAL_PCDEx_LPM_Callback>
 8002f96:	e002      	b.n	8002f9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f005 ff41 	bl	8008e20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 faf8 	bl	80065a8 <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc2:	d112      	bne.n	8002fea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f005 fefd 	bl	8008dd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002fe8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f003 fada 	bl	80065a8 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffe:	f040 80b7 	bne.w	8003170 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2110      	movs	r1, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fba7 	bl	8005770 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003026:	e046      	b.n	80030b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003034:	461a      	mov	r2, r3
 8003036:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800303a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800303c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800304c:	0151      	lsls	r1, r2, #5
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	440a      	add	r2, r1
 8003052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003056:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800305a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003068:	461a      	mov	r2, r3
 800306a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800306e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003080:	0151      	lsls	r1, r2, #5
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	440a      	add	r2, r1
 8003086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800308a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800308e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030a0:	0151      	lsls	r1, r2, #5
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	440a      	add	r2, r1
 80030a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80030aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b2:	3301      	adds	r3, #1
 80030b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	791b      	ldrb	r3, [r3, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	4293      	cmp	r3, r2
 80030c0:	d3b2      	bcc.n	8003028 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030d0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80030d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7bdb      	ldrb	r3, [r3, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ee:	f043 030b 	orr.w	r3, r3, #11
 80030f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003104:	f043 030b 	orr.w	r3, r3, #11
 8003108:	6453      	str	r3, [r2, #68]	@ 0x44
 800310a:	e015      	b.n	8003138 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800311a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800311e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003122:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003132:	f043 030b 	orr.w	r3, r3, #11
 8003136:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003146:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800314a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800315a:	461a      	mov	r2, r3
 800315c:	f003 fae8 	bl	8006730 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fa17 	bl	80065a8 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003184:	d123      	bne.n	80031ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f003 faad 	bl	80066ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fb64 	bl	8005862 <USB_GetDevSpeed>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681c      	ldr	r4, [r3, #0]
 80031a6:	f001 f9c9 	bl	800453c <HAL_RCC_GetHCLKFreq>
 80031aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031b0:	461a      	mov	r2, r3
 80031b2:	4620      	mov	r0, r4
 80031b4:	f002 f868 	bl	8005288 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f005 fdec 	bl	8008d96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80031cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 f9e8 	bl	80065a8 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d10a      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f005 fdc9 	bl	8008d7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f002 0208 	and.w	r2, r2, #8
 80031f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 f9d3 	bl	80065a8 <USB_ReadInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003208:	2b80      	cmp	r3, #128	@ 0x80
 800320a:	d123      	bne.n	8003254 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
 800321c:	e014      	b.n	8003248 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb0a 	bl	8003856 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	3301      	adds	r3, #1
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	791b      	ldrb	r3, [r3, #4]
 800324c:	461a      	mov	r2, r3
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	4293      	cmp	r3, r2
 8003252:	d3e4      	bcc.n	800321e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 f9a5 	bl	80065a8 <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003268:	d13c      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800326a:	2301      	movs	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
 800326e:	e02b      	b.n	80032c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3318      	adds	r3, #24
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d115      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003296:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003298:	2b00      	cmp	r3, #0
 800329a:	da12      	bge.n	80032c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	3317      	adds	r3, #23
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 faca 	bl	8003856 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	791b      	ldrb	r3, [r3, #4]
 80032cc:	461a      	mov	r2, r3
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d3cd      	bcc.n	8003270 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80032e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 f95d 	bl	80065a8 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f8:	d156      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fa:	2301      	movs	r3, #1
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	e045      	b.n	800338c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d12e      	bne.n	8003386 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003328:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800332a:	2b00      	cmp	r3, #0
 800332c:	da2b      	bge.n	8003386 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	0c1a      	lsrs	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003338:	4053      	eors	r3, r2
 800333a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800333e:	2b00      	cmp	r3, #0
 8003340:	d121      	bne.n	8003386 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800337e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003382:	6053      	str	r3, [r2, #4]
            break;
 8003384:	e008      	b.n	8003398 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	3301      	adds	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	791b      	ldrb	r3, [r3, #4]
 8003390:	461a      	mov	r2, r3
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	4293      	cmp	r3, r2
 8003396:	d3b3      	bcc.n	8003300 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80033a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 f8fb 	bl	80065a8 <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d10a      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f005 fd60 	bl	8008e84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80033d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 f8e5 	bl	80065a8 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d115      	bne.n	8003414 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f005 fd50 	bl	8008ea0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	e000      	b.n	8003414 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003412:	bf00      	nop
    }
  }
}
 8003414:	3734      	adds	r7, #52	@ 0x34
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}

0800341a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_PCD_SetAddress+0x1a>
 8003430:	2302      	movs	r3, #2
 8003432:	e012      	b.n	800345a <HAL_PCD_SetAddress+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f003 f844 	bl	80064d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	4608      	mov	r0, r1
 800346c:	4611      	mov	r1, r2
 800346e:	461a      	mov	r2, r3
 8003470:	4603      	mov	r3, r0
 8003472:	70fb      	strb	r3, [r7, #3]
 8003474:	460b      	mov	r3, r1
 8003476:	803b      	strh	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003484:	2b00      	cmp	r3, #0
 8003486:	da0f      	bge.n	80034a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 020f 	and.w	r2, r3, #15
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	3310      	adds	r3, #16
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	3304      	adds	r3, #4
 800349e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	705a      	strb	r2, [r3, #1]
 80034a6:	e00f      	b.n	80034c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80034d4:	883b      	ldrh	r3, [r7, #0]
 80034d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	78ba      	ldrb	r2, [r7, #2]
 80034e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034f6:	78bb      	ldrb	r3, [r7, #2]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d102      	bne.n	8003502 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_PCD_EP_Open+0xae>
 800350c:	2302      	movs	r3, #2
 800350e:	e00e      	b.n	800352e <HAL_PCD_EP_Open+0xcc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 f9c4 	bl	80058ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800352c:	7afb      	ldrb	r3, [r7, #11]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da0f      	bge.n	800356a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3310      	adds	r3, #16
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	705a      	strb	r2, [r3, #1]
 8003568:	e00f      	b.n	800358a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	3304      	adds	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_PCD_EP_Close+0x6e>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e00e      	b.n	80035c2 <HAL_PCD_EP_Close+0x8c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fa02 	bl	80059bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	460b      	mov	r3, r1
 80035d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035da:	7afb      	ldrb	r3, [r7, #11]
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360c:	7afb      	ldrb	r3, [r7, #11]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	b2da      	uxtb	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	799b      	ldrb	r3, [r3, #6]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d102      	bne.n	8003626 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	799b      	ldrb	r3, [r3, #6]
 800362e:	461a      	mov	r2, r3
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	f002 fa9f 	bl	8005b74 <USB_EPStartXfer>

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	460b      	mov	r3, r1
 800367e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	3310      	adds	r3, #16
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2201      	movs	r2, #1
 80036ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	799b      	ldrb	r3, [r3, #6]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d102      	bne.n	80036ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	799b      	ldrb	r3, [r3, #6]
 80036d2:	461a      	mov	r2, r3
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	f002 fa4d 	bl	8005b74 <USB_EPStartXfer>

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	7912      	ldrb	r2, [r2, #4]
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e04f      	b.n	80037a2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da0f      	bge.n	800372a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3310      	adds	r3, #16
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	705a      	strb	r2, [r3, #1]
 8003728:	e00d      	b.n	8003746 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_PCD_EP_SetStall+0x82>
 8003762:	2302      	movs	r3, #2
 8003764:	e01d      	b.n	80037a2 <HAL_PCD_EP_SetStall+0xbe>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	4618      	mov	r0, r3
 8003776:	f002 fddb 	bl	8006330 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7999      	ldrb	r1, [r3, #6]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003792:	461a      	mov	r2, r3
 8003794:	f002 ffcc 	bl	8006730 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	7912      	ldrb	r2, [r2, #4]
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e042      	b.n	800384e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da0f      	bge.n	80037f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	3310      	adds	r3, #16
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	705a      	strb	r2, [r3, #1]
 80037ee:	e00f      	b.n	8003810 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_PCD_EP_ClrStall+0x86>
 800382c:	2302      	movs	r3, #2
 800382e:	e00e      	b.n	800384e <HAL_PCD_EP_ClrStall+0xa4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	4618      	mov	r0, r3
 8003840:	f002 fde4 	bl	800640c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da0c      	bge.n	8003884 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	3310      	adds	r3, #16
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e00c      	b.n	800389e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 020f 	and.w	r2, r3, #15
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	3304      	adds	r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f002 fc03 	bl	80060b0 <USB_EPStopXfer>
 80038aa:	4603      	mov	r3, r0
 80038ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038ae:	7afb      	ldrb	r3, [r7, #11]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	@ 0x28
 80038bc:	af02      	add	r7, sp, #8
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	3310      	adds	r3, #16
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	3304      	adds	r3, #4
 80038de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d901      	bls.n	80038f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e06b      	b.n	80039c8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	429a      	cmp	r2, r3
 8003904:	d902      	bls.n	800390c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3303      	adds	r3, #3
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003914:	e02a      	b.n	800396c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	429a      	cmp	r2, r3
 800392a:	d902      	bls.n	8003932 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3303      	adds	r3, #3
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68d9      	ldr	r1, [r3, #12]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4603      	mov	r3, r0
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f002 fc58 	bl	8006204 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	441a      	add	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	429a      	cmp	r2, r3
 8003980:	d809      	bhi.n	8003996 <PCD_WriteEmptyTxFifo+0xde>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800398a:	429a      	cmp	r2, r3
 800398c:	d203      	bcs.n	8003996 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1bf      	bne.n	8003916 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d811      	bhi.n	80039c6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	2201      	movs	r2, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	6939      	ldr	r1, [r7, #16]
 80039be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039c2:	4013      	ands	r3, r2
 80039c4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	333c      	adds	r3, #60	@ 0x3c
 80039e8:	3304      	adds	r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	799b      	ldrb	r3, [r3, #6]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d17b      	bne.n	8003afe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4a61      	ldr	r2, [pc, #388]	@ (8003b98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	f240 80b9 	bls.w	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80b3 	beq.w	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a32:	461a      	mov	r2, r3
 8003a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a38:	6093      	str	r3, [r2, #8]
 8003a3a:	e0a7      	b.n	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	2320      	movs	r3, #32
 8003a56:	6093      	str	r3, [r2, #8]
 8003a58:	e098      	b.n	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 8093 	bne.w	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	4a4b      	ldr	r2, [pc, #300]	@ (8003b98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d90f      	bls.n	8003a8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a8a:	6093      	str	r3, [r2, #8]
 8003a8c:	e07e      	b.n	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	440b      	add	r3, r1
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aba:	1ad2      	subs	r2, r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d114      	bne.n	8003af0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2101      	movs	r1, #1
 8003adc:	f002 fe28 	bl	8006730 <USB_EP0_OutStart>
 8003ae0:	e006      	b.n	8003af0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	441a      	add	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f005 f90a 	bl	8008d10 <HAL_PCD_DataOutStageCallback>
 8003afc:	e046      	b.n	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d124      	bne.n	8003b50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e032      	b.n	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2320      	movs	r3, #32
 8003b40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f005 f8e1 	bl	8008d10 <HAL_PCD_DataOutStageCallback>
 8003b4e:	e01d      	b.n	8003b8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d114      	bne.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f002 fdd8 	bl	8006730 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f005 f8c2 	bl	8008d10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	4f54300a 	.word	0x4f54300a
 8003b9c:	4f54310a 	.word	0x4f54310a

08003ba0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	333c      	adds	r3, #60	@ 0x3c
 8003bb8:	3304      	adds	r3, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d90e      	bls.n	8003bf4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bf2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f005 f879 	bl	8008cec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d90c      	bls.n	8003c1c <PCD_EP_OutSetupPacket_int+0x7c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	799b      	ldrb	r3, [r3, #6]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d108      	bne.n	8003c1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c14:	461a      	mov	r2, r3
 8003c16:	2101      	movs	r1, #1
 8003c18:	f002 fd8a 	bl	8006730 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	4f54300a 	.word	0x4f54300a

08003c2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c4a:	883b      	ldrh	r3, [r7, #0]
 8003c4c:	0419      	lsls	r1, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c58:	e028      	b.n	8003cac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	4413      	add	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
 8003c6c:	e00d      	b.n	8003c8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	3340      	adds	r3, #64	@ 0x40
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	4413      	add	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	3301      	adds	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3ec      	bcc.n	8003c6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c94:	883b      	ldrh	r3, [r7, #0]
 8003c96:	0418      	lsls	r0, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	4302      	orrs	r2, r0
 8003ca4:	3340      	adds	r3, #64	@ 0x40
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e267      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d075      	beq.n	8003dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d12:	4b88      	ldr	r3, [pc, #544]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d00c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b85      	ldr	r3, [pc, #532]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2a:	4b82      	ldr	r3, [pc, #520]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	4b7e      	ldr	r3, [pc, #504]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05b      	beq.n	8003dfc <HAL_RCC_OscConfig+0x108>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d157      	bne.n	8003dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e242      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x74>
 8003d5a:	4b76      	ldr	r3, [pc, #472]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e01d      	b.n	8003da4 <HAL_RCC_OscConfig+0xb0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x98>
 8003d72:	4b70      	ldr	r3, [pc, #448]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6f      	ldr	r2, [pc, #444]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6c      	ldr	r2, [pc, #432]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	4b69      	ldr	r3, [pc, #420]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a68      	ldr	r2, [pc, #416]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b66      	ldr	r3, [pc, #408]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a65      	ldr	r2, [pc, #404]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fd fd20 	bl	80017f0 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fd fd1c 	bl	80017f0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	@ 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e207      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0xc0>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fd0c 	bl	80017f0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fd fd08 	bl	80017f0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	@ 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1f3      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	4b51      	ldr	r3, [pc, #324]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0xe8>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d063      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b47      	ldr	r3, [pc, #284]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d11c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b44      	ldr	r3, [pc, #272]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_RCC_OscConfig+0x152>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1c7      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4937      	ldr	r1, [pc, #220]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	e03a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b34      	ldr	r3, [pc, #208]	@ (8003f38 <HAL_RCC_OscConfig+0x244>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fcc1 	bl	80017f0 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fd fcbd 	bl	80017f0 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e1a8      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	4b2b      	ldr	r3, [pc, #172]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b28      	ldr	r3, [pc, #160]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4925      	ldr	r1, [pc, #148]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea6:	4b24      	ldr	r3, [pc, #144]	@ (8003f38 <HAL_RCC_OscConfig+0x244>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd fca0 	bl	80017f0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fd fc9c 	bl	80017f0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e187      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d036      	beq.n	8003f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <HAL_RCC_OscConfig+0x248>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd fc80 	bl	80017f0 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fd fc7c 	bl	80017f0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e167      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x200>
 8003f12:	e01b      	b.n	8003f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_OscConfig+0x248>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fc69 	bl	80017f0 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	e00e      	b.n	8003f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f22:	f7fd fc65 	bl	80017f0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d907      	bls.n	8003f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e150      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	42470000 	.word	0x42470000
 8003f3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	4b88      	ldr	r3, [pc, #544]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ea      	bne.n	8003f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8097 	beq.w	8004088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b81      	ldr	r3, [pc, #516]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	4a7c      	ldr	r2, [pc, #496]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b77      	ldr	r3, [pc, #476]	@ (8004168 <HAL_RCC_OscConfig+0x474>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f96:	4b74      	ldr	r3, [pc, #464]	@ (8004168 <HAL_RCC_OscConfig+0x474>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a73      	ldr	r2, [pc, #460]	@ (8004168 <HAL_RCC_OscConfig+0x474>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fd fc25 	bl	80017f0 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fd fc21 	bl	80017f0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e10c      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004168 <HAL_RCC_OscConfig+0x474>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x2ea>
 8003fd0:	4b64      	ldr	r3, [pc, #400]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a63      	ldr	r2, [pc, #396]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fdc:	e01c      	b.n	8004018 <HAL_RCC_OscConfig+0x324>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x30c>
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	4a5e      	ldr	r2, [pc, #376]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0x324>
 8004000:	4b58      	ldr	r3, [pc, #352]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a57      	ldr	r2, [pc, #348]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
 800400c:	4b55      	ldr	r3, [pc, #340]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	4a54      	ldr	r2, [pc, #336]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 0304 	bic.w	r3, r3, #4
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fd fbe6 	bl	80017f0 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fd fbe2 	bl	80017f0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0cb      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	4b49      	ldr	r3, [pc, #292]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ee      	beq.n	8004028 <HAL_RCC_OscConfig+0x334>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404c:	f7fd fbd0 	bl	80017f0 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fd fbcc 	bl	80017f0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0b5      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	4b3e      	ldr	r3, [pc, #248]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1ee      	bne.n	8004054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407c:	4b39      	ldr	r3, [pc, #228]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	4a38      	ldr	r2, [pc, #224]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8004082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004086:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80a1 	beq.w	80041d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004092:	4b34      	ldr	r3, [pc, #208]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b08      	cmp	r3, #8
 800409c:	d05c      	beq.n	8004158 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d141      	bne.n	800412a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a6:	4b31      	ldr	r3, [pc, #196]	@ (800416c <HAL_RCC_OscConfig+0x478>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fd fba0 	bl	80017f0 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fd fb9c 	bl	80017f0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e087      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	4b27      	ldr	r3, [pc, #156]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	491b      	ldr	r1, [pc, #108]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fc:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <HAL_RCC_OscConfig+0x478>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fd fb75 	bl	80017f0 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fd fb71 	bl	80017f0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e05c      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x416>
 8004128:	e054      	b.n	80041d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <HAL_RCC_OscConfig+0x478>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fb5e 	bl	80017f0 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fd fb5a 	bl	80017f0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e045      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <HAL_RCC_OscConfig+0x470>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x444>
 8004156:	e03d      	b.n	80041d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e038      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000
 800416c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004170:	4b1b      	ldr	r3, [pc, #108]	@ (80041e0 <HAL_RCC_OscConfig+0x4ec>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d028      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d121      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d11a      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041a0:	4013      	ands	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d111      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	3b01      	subs	r3, #1
 80041ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800

080041e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0cc      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f8:	4b68      	ldr	r3, [pc, #416]	@ (800439c <HAL_RCC_ClockConfig+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d90c      	bls.n	8004220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b65      	ldr	r3, [pc, #404]	@ (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b63      	ldr	r3, [pc, #396]	@ (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004238:	4b59      	ldr	r3, [pc, #356]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a58      	ldr	r2, [pc, #352]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004242:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004250:	4b53      	ldr	r3, [pc, #332]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a52      	ldr	r2, [pc, #328]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800425a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b50      	ldr	r3, [pc, #320]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	494d      	ldr	r1, [pc, #308]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d044      	beq.n	8004304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b47      	ldr	r3, [pc, #284]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d119      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	4b3f      	ldr	r3, [pc, #252]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e06f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b2:	4b3b      	ldr	r3, [pc, #236]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e067      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c2:	4b37      	ldr	r3, [pc, #220]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4934      	ldr	r1, [pc, #208]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d4:	f7fd fa8c 	bl	80017f0 <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fd fa88 	bl	80017f0 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e04f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	4b2b      	ldr	r3, [pc, #172]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 020c 	and.w	r2, r3, #12
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	429a      	cmp	r2, r3
 8004302:	d1eb      	bne.n	80042dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004304:	4b25      	ldr	r3, [pc, #148]	@ (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d20c      	bcs.n	800432c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b22      	ldr	r3, [pc, #136]	@ (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	@ (800439c <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e032      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4916      	ldr	r1, [pc, #88]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004356:	4b12      	ldr	r3, [pc, #72]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	490e      	ldr	r1, [pc, #56]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800436a:	f000 f821 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800436e:	4602      	mov	r2, r0
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	490a      	ldr	r1, [pc, #40]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	5ccb      	ldrb	r3, [r1, r3]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd f9ec 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00
 80043a0:	40023800 	.word	0x40023800
 80043a4:	08009c2c 	.word	0x08009c2c
 80043a8:	20000014 	.word	0x20000014
 80043ac:	20000018 	.word	0x20000018

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b4:	b090      	sub	sp, #64	@ 0x40
 80043b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c8:	4b59      	ldr	r3, [pc, #356]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d00d      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x40>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	f200 80a1 	bhi.w	800451c <HAL_RCC_GetSysClockFreq+0x16c>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x34>
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x3a>
 80043e2:	e09b      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b53      	ldr	r3, [pc, #332]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x184>)
 80043e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043e8:	e09b      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ea:	4b53      	ldr	r3, [pc, #332]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ee:	e098      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d028      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004406:	4b4a      	ldr	r3, [pc, #296]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	2200      	movs	r2, #0
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	627a      	str	r2, [r7, #36]	@ 0x24
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004418:	2100      	movs	r1, #0
 800441a:	4b47      	ldr	r3, [pc, #284]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x188>)
 800441c:	fb03 f201 	mul.w	r2, r3, r1
 8004420:	2300      	movs	r3, #0
 8004422:	fb00 f303 	mul.w	r3, r0, r3
 8004426:	4413      	add	r3, r2
 8004428:	4a43      	ldr	r2, [pc, #268]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x188>)
 800442a:	fba0 1202 	umull	r1, r2, r0, r2
 800442e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004430:	460a      	mov	r2, r1
 8004432:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004436:	4413      	add	r3, r2
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443c:	2200      	movs	r2, #0
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	61fa      	str	r2, [r7, #28]
 8004442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004446:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800444a:	f7fc fa57 	bl	80008fc <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4613      	mov	r3, r2
 8004454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004456:	e053      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004458:	4b35      	ldr	r3, [pc, #212]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	2200      	movs	r2, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	617a      	str	r2, [r7, #20]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800446a:	f04f 0b00 	mov.w	fp, #0
 800446e:	4652      	mov	r2, sl
 8004470:	465b      	mov	r3, fp
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	0159      	lsls	r1, r3, #5
 800447c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004480:	0150      	lsls	r0, r2, #5
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	ebb2 080a 	subs.w	r8, r2, sl
 800448a:	eb63 090b 	sbc.w	r9, r3, fp
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800449a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800449e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044a2:	ebb2 0408 	subs.w	r4, r2, r8
 80044a6:	eb63 0509 	sbc.w	r5, r3, r9
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	00eb      	lsls	r3, r5, #3
 80044b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b8:	00e2      	lsls	r2, r4, #3
 80044ba:	4614      	mov	r4, r2
 80044bc:	461d      	mov	r5, r3
 80044be:	eb14 030a 	adds.w	r3, r4, sl
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	eb45 030b 	adc.w	r3, r5, fp
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d6:	4629      	mov	r1, r5
 80044d8:	028b      	lsls	r3, r1, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e0:	4621      	mov	r1, r4
 80044e2:	028a      	lsls	r2, r1, #10
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ea:	2200      	movs	r2, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	60fa      	str	r2, [r7, #12]
 80044f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f4:	f7fc fa02 	bl	80008fc <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x184>)
 800451e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004524:	4618      	mov	r0, r3
 8004526:	3740      	adds	r7, #64	@ 0x40
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	017d7840 	.word	0x017d7840

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000014 	.word	0x20000014

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	@ (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08009c3c 	.word	0x08009c3c

0800457c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e041      	b.n	8004612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc ffa2 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fac0 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e041      	b.n	80046b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f839 	bl	80046b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f000 fa71 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x24>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e022      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d109      	bne.n	800470a <HAL_TIM_PWM_Start+0x3e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e015      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x58>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e008      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e068      	b.n	8004810 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0x82>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800474c:	e013      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0x92>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800475c:	e00b      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800476c:	e003      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fc8a 	bl	8005098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a23      	ldr	r2, [pc, #140]	@ (8004818 <HAL_TIM_PWM_Start+0x14c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d107      	bne.n	800479e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004818 <HAL_TIM_PWM_Start+0x14c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b0:	d013      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a19      	ldr	r2, [pc, #100]	@ (800481c <HAL_TIM_PWM_Start+0x150>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a17      	ldr	r2, [pc, #92]	@ (8004820 <HAL_TIM_PWM_Start+0x154>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a16      	ldr	r2, [pc, #88]	@ (8004824 <HAL_TIM_PWM_Start+0x158>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIM_PWM_Start+0x10e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a14      	ldr	r2, [pc, #80]	@ (8004828 <HAL_TIM_PWM_Start+0x15c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d111      	bne.n	80047fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d010      	beq.n	800480e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	e007      	b.n	800480e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40010000 	.word	0x40010000
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40014000 	.word	0x40014000

0800482c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004846:	2302      	movs	r3, #2
 8004848:	e0ae      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	f200 809f 	bhi.w	8004998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800485a:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004895 	.word	0x08004895
 8004864:	08004999 	.word	0x08004999
 8004868:	08004999 	.word	0x08004999
 800486c:	08004999 	.word	0x08004999
 8004870:	080048d5 	.word	0x080048d5
 8004874:	08004999 	.word	0x08004999
 8004878:	08004999 	.word	0x08004999
 800487c:	08004999 	.word	0x08004999
 8004880:	08004917 	.word	0x08004917
 8004884:	08004999 	.word	0x08004999
 8004888:	08004999 	.word	0x08004999
 800488c:	08004999 	.word	0x08004999
 8004890:	08004957 	.word	0x08004957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f9d6 	bl	8004c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0208 	orr.w	r2, r2, #8
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	619a      	str	r2, [r3, #24]
      break;
 80048d2:	e064      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa1c 	bl	8004d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6999      	ldr	r1, [r3, #24]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	619a      	str	r2, [r3, #24]
      break;
 8004914:	e043      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fa67 	bl	8004df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0208 	orr.w	r2, r2, #8
 8004930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0204 	bic.w	r2, r2, #4
 8004940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69d9      	ldr	r1, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	61da      	str	r2, [r3, #28]
      break;
 8004954:	e023      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fab1 	bl	8004ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69d9      	ldr	r1, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	021a      	lsls	r2, r3, #8
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	61da      	str	r2, [r3, #28]
      break;
 8004996:	e002      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0b4      	b.n	8004b36 <HAL_TIM_ConfigClockSource+0x186>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a04:	d03e      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0xd4>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0a:	f200 8087 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	f000 8086 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x172>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d87f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b70      	cmp	r3, #112	@ 0x70
 8004a1e:	d01a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xa6>
 8004a20:	2b70      	cmp	r3, #112	@ 0x70
 8004a22:	d87b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b60      	cmp	r3, #96	@ 0x60
 8004a26:	d050      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x11a>
 8004a28:	2b60      	cmp	r3, #96	@ 0x60
 8004a2a:	d877      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b50      	cmp	r3, #80	@ 0x50
 8004a2e:	d03c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xfa>
 8004a30:	2b50      	cmp	r3, #80	@ 0x50
 8004a32:	d873      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d058      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x13a>
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d86f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b30      	cmp	r3, #48	@ 0x30
 8004a3e:	d064      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	2b30      	cmp	r3, #48	@ 0x30
 8004a42:	d86b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d060      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d867      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d05a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	e062      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a66:	f000 faf7 	bl	8005058 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
      break;
 8004a82:	e04f      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a94:	f000 fae0 	bl	8005058 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa6:	609a      	str	r2, [r3, #8]
      break;
 8004aa8:	e03c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 fa54 	bl	8004f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2150      	movs	r1, #80	@ 0x50
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 faad 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e02c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fa73 	bl	8004fc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2160      	movs	r1, #96	@ 0x60
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa9d 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fa34 	bl	8004f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2140      	movs	r1, #64	@ 0x40
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fa8d 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 fa84 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a37      	ldr	r2, [pc, #220]	@ (8004c30 <TIM_Base_SetConfig+0xf0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a34      	ldr	r2, [pc, #208]	@ (8004c34 <TIM_Base_SetConfig+0xf4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a33      	ldr	r2, [pc, #204]	@ (8004c38 <TIM_Base_SetConfig+0xf8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a32      	ldr	r2, [pc, #200]	@ (8004c3c <TIM_Base_SetConfig+0xfc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d108      	bne.n	8004b8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a28      	ldr	r2, [pc, #160]	@ (8004c30 <TIM_Base_SetConfig+0xf0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01b      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b98:	d017      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	@ (8004c34 <TIM_Base_SetConfig+0xf4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a24      	ldr	r2, [pc, #144]	@ (8004c38 <TIM_Base_SetConfig+0xf8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <TIM_Base_SetConfig+0xfc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	@ (8004c40 <TIM_Base_SetConfig+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a21      	ldr	r2, [pc, #132]	@ (8004c44 <TIM_Base_SetConfig+0x104>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a20      	ldr	r2, [pc, #128]	@ (8004c48 <TIM_Base_SetConfig+0x108>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c30 <TIM_Base_SetConfig+0xf0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d103      	bne.n	8004c0a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f043 0204 	orr.w	r2, r3, #4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40014400 	.word	0x40014400
 8004c48:	40014800 	.word	0x40014800

08004c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f023 0201 	bic.w	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 0302 	bic.w	r3, r3, #2
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d14 <TIM_OC1_SetConfig+0xc8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d10c      	bne.n	8004cc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0308 	bic.w	r3, r3, #8
 8004cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 0304 	bic.w	r3, r3, #4
 8004cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a13      	ldr	r2, [pc, #76]	@ (8004d14 <TIM_OC1_SetConfig+0xc8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d111      	bne.n	8004cee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40010000 	.word	0x40010000

08004d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f023 0210 	bic.w	r2, r3, #16
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0320 	bic.w	r3, r3, #32
 8004d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1e      	ldr	r2, [pc, #120]	@ (8004dec <TIM_OC2_SetConfig+0xd4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10d      	bne.n	8004d94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a15      	ldr	r2, [pc, #84]	@ (8004dec <TIM_OC2_SetConfig+0xd4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d113      	bne.n	8004dc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40010000 	.word	0x40010000

08004df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <TIM_OC3_SetConfig+0xd0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10d      	bne.n	8004e6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a14      	ldr	r2, [pc, #80]	@ (8004ec0 <TIM_OC3_SetConfig+0xd0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d113      	bne.n	8004e9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40010000 	.word	0x40010000

08004ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	031b      	lsls	r3, r3, #12
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a10      	ldr	r2, [pc, #64]	@ (8004f60 <TIM_OC4_SetConfig+0x9c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d109      	bne.n	8004f38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	019b      	lsls	r3, r3, #6
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40010000 	.word	0x40010000

08004f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0201 	bic.w	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 030a 	bic.w	r3, r3, #10
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f023 0210 	bic.w	r2, r3, #16
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	031b      	lsls	r3, r3, #12
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ffe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	f043 0307 	orr.w	r3, r3, #7
 8005044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	021a      	lsls	r2, r3, #8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	431a      	orrs	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4313      	orrs	r3, r2
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	2201      	movs	r2, #1
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1a      	ldr	r2, [r3, #32]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	401a      	ands	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	fa01 f303 	lsl.w	r3, r1, r3
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e050      	b.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1c      	ldr	r2, [pc, #112]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005148:	d013      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a18      	ldr	r2, [pc, #96]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a13      	ldr	r2, [pc, #76]	@ (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10c      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40014000 	.word	0x40014000

080051c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051c0:	b084      	sub	sp, #16
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	f107 001c 	add.w	r0, r7, #28
 80051ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d123      	bne.n	8005222 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80051ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005202:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 fae8 	bl	80067ec <USB_CoreReset>
 800521c:	4603      	mov	r3, r0
 800521e:	73fb      	strb	r3, [r7, #15]
 8005220:	e01b      	b.n	800525a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fadc 	bl	80067ec <USB_CoreReset>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005238:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	639a      	str	r2, [r3, #56]	@ 0x38
 800524c:	e005      	b.n	800525a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800525a:	7fbb      	ldrb	r3, [r7, #30]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10b      	bne.n	8005278 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f043 0206 	orr.w	r2, r3, #6
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005284:	b004      	add	sp, #16
 8005286:	4770      	bx	lr

08005288 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d165      	bne.n	8005368 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a41      	ldr	r2, [pc, #260]	@ (80053a4 <USB_SetTurnaroundTime+0x11c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d906      	bls.n	80052b2 <USB_SetTurnaroundTime+0x2a>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4a40      	ldr	r2, [pc, #256]	@ (80053a8 <USB_SetTurnaroundTime+0x120>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d202      	bcs.n	80052b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052ac:	230f      	movs	r3, #15
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	e062      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4a3c      	ldr	r2, [pc, #240]	@ (80053a8 <USB_SetTurnaroundTime+0x120>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d306      	bcc.n	80052c8 <USB_SetTurnaroundTime+0x40>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4a3b      	ldr	r2, [pc, #236]	@ (80053ac <USB_SetTurnaroundTime+0x124>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d202      	bcs.n	80052c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052c2:	230e      	movs	r3, #14
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e057      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a38      	ldr	r2, [pc, #224]	@ (80053ac <USB_SetTurnaroundTime+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d306      	bcc.n	80052de <USB_SetTurnaroundTime+0x56>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a37      	ldr	r2, [pc, #220]	@ (80053b0 <USB_SetTurnaroundTime+0x128>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d202      	bcs.n	80052de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052d8:	230d      	movs	r3, #13
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e04c      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a33      	ldr	r2, [pc, #204]	@ (80053b0 <USB_SetTurnaroundTime+0x128>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d306      	bcc.n	80052f4 <USB_SetTurnaroundTime+0x6c>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4a32      	ldr	r2, [pc, #200]	@ (80053b4 <USB_SetTurnaroundTime+0x12c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d802      	bhi.n	80052f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052ee:	230c      	movs	r3, #12
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e041      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	@ (80053b4 <USB_SetTurnaroundTime+0x12c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d906      	bls.n	800530a <USB_SetTurnaroundTime+0x82>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <USB_SetTurnaroundTime+0x130>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d802      	bhi.n	800530a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005304:	230b      	movs	r3, #11
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e036      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a2a      	ldr	r2, [pc, #168]	@ (80053b8 <USB_SetTurnaroundTime+0x130>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d906      	bls.n	8005320 <USB_SetTurnaroundTime+0x98>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a29      	ldr	r2, [pc, #164]	@ (80053bc <USB_SetTurnaroundTime+0x134>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d802      	bhi.n	8005320 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800531a:	230a      	movs	r3, #10
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e02b      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a26      	ldr	r2, [pc, #152]	@ (80053bc <USB_SetTurnaroundTime+0x134>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d906      	bls.n	8005336 <USB_SetTurnaroundTime+0xae>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a25      	ldr	r2, [pc, #148]	@ (80053c0 <USB_SetTurnaroundTime+0x138>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d202      	bcs.n	8005336 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005330:	2309      	movs	r3, #9
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e020      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a21      	ldr	r2, [pc, #132]	@ (80053c0 <USB_SetTurnaroundTime+0x138>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d306      	bcc.n	800534c <USB_SetTurnaroundTime+0xc4>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a20      	ldr	r2, [pc, #128]	@ (80053c4 <USB_SetTurnaroundTime+0x13c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d802      	bhi.n	800534c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005346:	2308      	movs	r3, #8
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e015      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <USB_SetTurnaroundTime+0x13c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d906      	bls.n	8005362 <USB_SetTurnaroundTime+0xda>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <USB_SetTurnaroundTime+0x140>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d202      	bcs.n	8005362 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800535c:	2307      	movs	r3, #7
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e00a      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005362:	2306      	movs	r3, #6
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e007      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800536e:	2309      	movs	r3, #9
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e001      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005374:	2309      	movs	r3, #9
 8005376:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	029b      	lsls	r3, r3, #10
 800538c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	00d8acbf 	.word	0x00d8acbf
 80053a8:	00e4e1c0 	.word	0x00e4e1c0
 80053ac:	00f42400 	.word	0x00f42400
 80053b0:	01067380 	.word	0x01067380
 80053b4:	011a499f 	.word	0x011a499f
 80053b8:	01312cff 	.word	0x01312cff
 80053bc:	014ca43f 	.word	0x014ca43f
 80053c0:	016e3600 	.word	0x016e3600
 80053c4:	01a6ab1f 	.word	0x01a6ab1f
 80053c8:	01e84800 	.word	0x01e84800

080053cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f043 0201 	orr.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d115      	bne.n	800545e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800543e:	200a      	movs	r0, #10
 8005440:	f7fc f9e2 	bl	8001808 <HAL_Delay>
      ms += 10U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	330a      	adds	r3, #10
 8005448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 f93f 	bl	80066ce <USB_GetMode>
 8005450:	4603      	mov	r3, r0
 8005452:	2b01      	cmp	r3, #1
 8005454:	d01e      	beq.n	8005494 <USB_SetCurrentMode+0x84>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2bc7      	cmp	r3, #199	@ 0xc7
 800545a:	d9f0      	bls.n	800543e <USB_SetCurrentMode+0x2e>
 800545c:	e01a      	b.n	8005494 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d115      	bne.n	8005490 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005470:	200a      	movs	r0, #10
 8005472:	f7fc f9c9 	bl	8001808 <HAL_Delay>
      ms += 10U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	330a      	adds	r3, #10
 800547a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 f926 	bl	80066ce <USB_GetMode>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <USB_SetCurrentMode+0x84>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2bc7      	cmp	r3, #199	@ 0xc7
 800548c:	d9f0      	bls.n	8005470 <USB_SetCurrentMode+0x60>
 800548e:	e001      	b.n	8005494 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e005      	b.n	80054a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2bc8      	cmp	r3, #200	@ 0xc8
 8005498:	d101      	bne.n	800549e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a8:	b084      	sub	sp, #16
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b086      	sub	sp, #24
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e009      	b.n	80054dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3340      	adds	r3, #64	@ 0x40
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3301      	adds	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b0e      	cmp	r3, #14
 80054e0:	d9f2      	bls.n	80054c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11c      	bne.n	8005524 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005502:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
 8005522:	e00b      	b.n	800553c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005534:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005542:	461a      	mov	r2, r3
 8005544:	2300      	movs	r3, #0
 8005546:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005548:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800554c:	2b01      	cmp	r3, #1
 800554e:	d10d      	bne.n	800556c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005558:	2100      	movs	r1, #0
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f968 	bl	8005830 <USB_SetDevSpeed>
 8005560:	e008      	b.n	8005574 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005562:	2101      	movs	r1, #1
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f963 	bl	8005830 <USB_SetDevSpeed>
 800556a:	e003      	b.n	8005574 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800556c:	2103      	movs	r1, #3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f95e 	bl	8005830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005574:	2110      	movs	r1, #16
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8fa 	bl	8005770 <USB_FlushTxFifo>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f924 	bl	80057d4 <USB_FlushRxFifo>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559c:	461a      	mov	r2, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	e043      	b.n	8005648 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055d6:	d118      	bne.n	800560a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ea:	461a      	mov	r2, r3
 80055ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e013      	b.n	800561c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005600:	461a      	mov	r2, r3
 8005602:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	e008      	b.n	800561c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005616:	461a      	mov	r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	461a      	mov	r2, r3
 800563c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005640:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3301      	adds	r3, #1
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800564c:	461a      	mov	r2, r3
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4293      	cmp	r3, r2
 8005652:	d3b5      	bcc.n	80055c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	e043      	b.n	80056e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005670:	d118      	bne.n	80056a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005684:	461a      	mov	r2, r3
 8005686:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e013      	b.n	80056b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e008      	b.n	80056b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b0:	461a      	mov	r2, r3
 80056b2:	2300      	movs	r3, #0
 80056b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c2:	461a      	mov	r2, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d4:	461a      	mov	r2, r3
 80056d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	3301      	adds	r3, #1
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056e6:	461a      	mov	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d3b5      	bcc.n	800565a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005700:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800570e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f043 0210 	orr.w	r2, r3, #16
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699a      	ldr	r2, [r3, #24]
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <USB_DevInit+0x2c4>)
 800572a:	4313      	orrs	r3, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005730:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f043 0208 	orr.w	r2, r3, #8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005744:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005748:	2b01      	cmp	r3, #1
 800574a:	d107      	bne.n	800575c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005768:	b004      	add	sp, #16
 800576a:	4770      	bx	lr
 800576c:	803c3800 	.word	0x803c3800

08005770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800578a:	d901      	bls.n	8005790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e01b      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	daf2      	bge.n	800577e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	019b      	lsls	r3, r3, #6
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057b4:	d901      	bls.n	80057ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d0f0      	beq.n	80057a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057ec:	d901      	bls.n	80057f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e018      	b.n	8005824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	daf2      	bge.n	80057e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2210      	movs	r2, #16
 8005802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005810:	d901      	bls.n	8005816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e006      	b.n	8005824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b10      	cmp	r3, #16
 8005820:	d0f0      	beq.n	8005804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005862:	b480      	push	{r7}
 8005864:	b087      	sub	sp, #28
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 0306 	and.w	r3, r3, #6
 800587a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]
 8005886:	e00a      	b.n	800589e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d002      	beq.n	8005894 <USB_GetDevSpeed+0x32>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b06      	cmp	r3, #6
 8005892:	d102      	bne.n	800589a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005894:	2302      	movs	r3, #2
 8005896:	75fb      	strb	r3, [r7, #23]
 8005898:	e001      	b.n	800589e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800589a:	230f      	movs	r3, #15
 800589c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d13a      	bne.n	800593e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	2101      	movs	r1, #1
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d155      	bne.n	80059ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	791b      	ldrb	r3, [r3, #4]
 800591a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800591c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	059b      	lsls	r3, r3, #22
 8005922:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005924:	4313      	orrs	r3, r2
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e036      	b.n	80059ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	2101      	movs	r1, #1
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	041b      	lsls	r3, r3, #16
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800595c:	4313      	orrs	r3, r2
 800595e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d11a      	bne.n	80059ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	791b      	ldrb	r3, [r3, #4]
 8005990:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005992:	430b      	orrs	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d161      	bne.n	8005a9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ee:	d11f      	bne.n	8005a30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	2101      	movs	r1, #1
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a50:	4013      	ands	r3, r2
 8005a52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	2101      	movs	r1, #1
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a74:	4013      	ands	r3, r2
 8005a76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	0159      	lsls	r1, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	440b      	add	r3, r1
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a92:	4619      	mov	r1, r3
 8005a94:	4b35      	ldr	r3, [pc, #212]	@ (8005b6c <USB_DeactivateEndpoint+0x1b0>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	600b      	str	r3, [r1, #0]
 8005a9a:	e060      	b.n	8005b5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab2:	d11f      	bne.n	8005af4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ace:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ad2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005af2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b14:	4013      	ands	r3, r2
 8005b16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	43db      	mvns	r3, r3
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	0159      	lsls	r1, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b56:	4619      	mov	r1, r3
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <USB_DeactivateEndpoint+0x1b4>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	ec337800 	.word	0xec337800
 8005b70:	eff37800 	.word	0xeff37800

08005b74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	@ 0x28
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	f040 817f 	bne.w	8005e94 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d132      	bne.n	8005c04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bbc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bfc:	0cdb      	lsrs	r3, r3, #19
 8005bfe:	04db      	lsls	r3, r3, #19
 8005c00:	6113      	str	r3, [r2, #16]
 8005c02:	e097      	b.n	8005d34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c1e:	0cdb      	lsrs	r3, r3, #19
 8005c20:	04db      	lsls	r3, r3, #19
 8005c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c46:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11a      	bne.n	8005c84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d903      	bls.n	8005c62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c80:	6113      	str	r3, [r2, #16]
 8005c82:	e044      	b.n	8005d0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	1e5a      	subs	r2, r3, #1
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	8afb      	ldrh	r3, [r7, #22]
 8005caa:	04d9      	lsls	r1, r3, #19
 8005cac:	4ba4      	ldr	r3, [pc, #656]	@ (8005f40 <USB_EPStartXfer+0x3cc>)
 8005cae:	400b      	ands	r3, r1
 8005cb0:	69b9      	ldr	r1, [r7, #24]
 8005cb2:	0148      	lsls	r0, r1, #5
 8005cb4:	69f9      	ldr	r1, [r7, #28]
 8005cb6:	4401      	add	r1, r0
 8005cb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	791b      	ldrb	r3, [r3, #4]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d122      	bne.n	8005d0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005ce6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	8afb      	ldrh	r3, [r7, #22]
 8005cf8:	075b      	lsls	r3, r3, #29
 8005cfa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005cfe:	69b9      	ldr	r1, [r7, #24]
 8005d00:	0148      	lsls	r0, r1, #5
 8005d02:	69f9      	ldr	r1, [r7, #28]
 8005d04:	4401      	add	r1, r0
 8005d06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	0148      	lsls	r0, r1, #5
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	4401      	add	r1, r0
 8005d2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d30:	4313      	orrs	r3, r2
 8005d32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d14b      	bne.n	8005dd2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	791b      	ldrb	r3, [r3, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d128      	bne.n	8005db0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d110      	bne.n	8005d90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e00f      	b.n	8005db0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e166      	b.n	80060a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005df0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	791b      	ldrb	r3, [r3, #4]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d015      	beq.n	8005e26 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 814e 	beq.w	80060a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	69f9      	ldr	r1, [r7, #28]
 8005e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e20:	4313      	orrs	r3, r2
 8005e22:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e24:	e13c      	b.n	80060a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d110      	bne.n	8005e58 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	e00f      	b.n	8005e78 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e76:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	68d9      	ldr	r1, [r3, #12]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781a      	ldrb	r2, [r3, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	b298      	uxth	r0, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f9b9 	bl	8006204 <USB_WritePacket>
 8005e92:	e105      	b.n	80060a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eae:	0cdb      	lsrs	r3, r3, #19
 8005eb0:	04db      	lsls	r3, r3, #19
 8005eb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ece:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ed2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ed6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d132      	bne.n	8005f44 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0c:	69b9      	ldr	r1, [r7, #24]
 8005f0e:	0148      	lsls	r0, r1, #5
 8005f10:	69f9      	ldr	r1, [r7, #28]
 8005f12:	4401      	add	r1, r0
 8005f14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f3a:	6113      	str	r3, [r2, #16]
 8005f3c:	e062      	b.n	8006004 <USB_EPStartXfer+0x490>
 8005f3e:	bf00      	nop
 8005f40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d123      	bne.n	8005f94 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	0148      	lsls	r0, r1, #5
 8005f66:	69f9      	ldr	r1, [r7, #28]
 8005f68:	4401      	add	r1, r0
 8005f6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f90:	6113      	str	r3, [r2, #16]
 8005f92:	e037      	b.n	8006004 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	1e5a      	subs	r2, r3, #1
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	8afa      	ldrh	r2, [r7, #22]
 8005fb0:	fb03 f202 	mul.w	r2, r3, r2
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	8afb      	ldrh	r3, [r7, #22]
 8005fc8:	04d9      	lsls	r1, r3, #19
 8005fca:	4b38      	ldr	r3, [pc, #224]	@ (80060ac <USB_EPStartXfer+0x538>)
 8005fcc:	400b      	ands	r3, r1
 8005fce:	69b9      	ldr	r1, [r7, #24]
 8005fd0:	0148      	lsls	r0, r1, #5
 8005fd2:	69f9      	ldr	r1, [r7, #28]
 8005fd4:	4401      	add	r1, r0
 8005fd6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	0148      	lsls	r0, r1, #5
 8005ff8:	69f9      	ldr	r1, [r7, #28]
 8005ffa:	4401      	add	r1, r0
 8005ffc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006000:	4313      	orrs	r3, r2
 8006002:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d10d      	bne.n	8006026 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006022:	460a      	mov	r2, r1
 8006024:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	791b      	ldrb	r3, [r3, #4]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d128      	bne.n	8006080 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d110      	bne.n	8006060 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006058:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e00f      	b.n	8006080 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800607a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800607e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800609a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800609e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	1ff80000 	.word	0x1ff80000

080060b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d14a      	bne.n	8006164 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060e6:	f040 8086 	bne.w	80061f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006108:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800610c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800612c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006130:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800613e:	4293      	cmp	r3, r2
 8006140:	d902      	bls.n	8006148 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	75fb      	strb	r3, [r7, #23]
          break;
 8006146:	e056      	b.n	80061f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800615c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006160:	d0e7      	beq.n	8006132 <USB_EPStopXfer+0x82>
 8006162:	e048      	b.n	80061f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800617c:	d13b      	bne.n	80061f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	7812      	ldrb	r2, [r2, #0]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d902      	bls.n	80061dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
          break;
 80061da:	e00c      	b.n	80061f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061f4:	d0e7      	beq.n	80061c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	@ 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	460b      	mov	r3, r1
 8006214:	71fb      	strb	r3, [r7, #7]
 8006216:	4613      	mov	r3, r2
 8006218:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006222:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d123      	bne.n	8006272 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800622a:	88bb      	ldrh	r3, [r7, #4]
 800622c:	3303      	adds	r3, #3
 800622e:	089b      	lsrs	r3, r3, #2
 8006230:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e018      	b.n	800626a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	031a      	lsls	r2, r3, #12
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006244:	461a      	mov	r2, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	3301      	adds	r3, #1
 8006250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	3301      	adds	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	3301      	adds	r3, #1
 8006262:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	3301      	adds	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	429a      	cmp	r2, r3
 8006270:	d3e2      	bcc.n	8006238 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3724      	adds	r7, #36	@ 0x24
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006280:	b480      	push	{r7}
 8006282:	b08b      	sub	sp, #44	@ 0x2c
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	089b      	lsrs	r3, r3, #2
 800629a:	b29b      	uxth	r3, r3
 800629c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	e014      	b.n	80062d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ba:	3301      	adds	r3, #1
 80062bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	3301      	adds	r3, #1
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	3301      	adds	r3, #1
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	3301      	adds	r3, #1
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	3301      	adds	r3, #1
 80062d4:	623b      	str	r3, [r7, #32]
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d3e6      	bcc.n	80062ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062de:	8bfb      	ldrh	r3, [r7, #30]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ee:	461a      	mov	r2, r3
 80062f0:	f107 0310 	add.w	r3, r7, #16
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	701a      	strb	r2, [r3, #0]
      i++;
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	3301      	adds	r3, #1
 800630e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	3301      	adds	r3, #1
 8006314:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006316:	8bfb      	ldrh	r3, [r7, #30]
 8006318:	3b01      	subs	r3, #1
 800631a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800631c:	8bfb      	ldrh	r3, [r7, #30]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ea      	bne.n	80062f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006324:	4618      	mov	r0, r3
 8006326:	372c      	adds	r7, #44	@ 0x2c
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d12c      	bne.n	80063a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	db12      	blt.n	8006384 <USB_EPSetStall+0x54>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800637e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006382:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	e02b      	b.n	80063fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	db12      	blt.n	80063de <USB_EPSetStall+0xae>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00f      	beq.n	80063de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d128      	bne.n	800647a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006446:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	791b      	ldrb	r3, [r3, #4]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d003      	beq.n	8006458 <USB_EPClearStall+0x4c>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	791b      	ldrb	r3, [r3, #4]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d138      	bne.n	80064ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e027      	b.n	80064ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006494:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006498:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d003      	beq.n	80064aa <USB_EPClearStall+0x9e>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d10f      	bne.n	80064ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80064fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800650c:	68f9      	ldr	r1, [r7, #12]
 800650e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006512:	4313      	orrs	r3, r2
 8006514:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006552:	f023 0302 	bic.w	r3, r3, #2
 8006556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4013      	ands	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065c0:	68fb      	ldr	r3, [r7, #12]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	0c1b      	lsrs	r3, r3, #16
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	b29b      	uxth	r3, r3
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006664:	68bb      	ldr	r3, [r7, #8]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006672:	b480      	push	{r7}
 8006674:	b087      	sub	sp, #28
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006694:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	01db      	lsls	r3, r3, #7
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4013      	ands	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066c0:	68bb      	ldr	r3, [r7, #8]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f003 0301 	and.w	r3, r3, #1
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006704:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006708:	f023 0307 	bic.w	r3, r3, #7
 800670c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800671c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	460b      	mov	r3, r1
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	333c      	adds	r3, #60	@ 0x3c
 8006746:	3304      	adds	r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4a26      	ldr	r2, [pc, #152]	@ (80067e8 <USB_EP0_OutStart+0xb8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d90a      	bls.n	800676a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006764:	d101      	bne.n	800676a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e037      	b.n	80067da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006770:	461a      	mov	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006784:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006798:	f043 0318 	orr.w	r3, r3, #24
 800679c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80067b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10f      	bne.n	80067d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80067d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	4f54300a 	.word	0x4f54300a

080067ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006804:	d901      	bls.n	800680a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e022      	b.n	8006850 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	daf2      	bge.n	80067f8 <USB_CoreReset+0xc>

  count = 10U;
 8006812:	230a      	movs	r3, #10
 8006814:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006816:	e002      	b.n	800681e <USB_CoreReset+0x32>
  {
    count--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3b01      	subs	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f9      	bne.n	8006818 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f043 0201 	orr.w	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800683c:	d901      	bls.n	8006842 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e006      	b.n	8006850 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b01      	cmp	r3, #1
 800684c:	d0f0      	beq.n	8006830 <USB_CoreReset+0x44>

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006868:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800686c:	f002 fcb0 	bl	80091d0 <USBD_static_malloc>
 8006870:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32b0      	adds	r2, #176	@ 0xb0
 8006882:	2100      	movs	r1, #0
 8006884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006888:	2302      	movs	r3, #2
 800688a:	e0d4      	b.n	8006a36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800688c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006890:	2100      	movs	r1, #0
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f002 fd14 	bl	80092c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	32b0      	adds	r2, #176	@ 0xb0
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	32b0      	adds	r2, #176	@ 0xb0
 80068b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7c1b      	ldrb	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d138      	bne.n	8006936 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068c4:	4b5e      	ldr	r3, [pc, #376]	@ (8006a40 <USBD_CDC_Init+0x1e4>)
 80068c6:	7819      	ldrb	r1, [r3, #0]
 80068c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068cc:	2202      	movs	r2, #2
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f002 fb5b 	bl	8008f8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006a40 <USBD_CDC_Init+0x1e4>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f003 020f 	and.w	r2, r3, #15
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	3323      	adds	r3, #35	@ 0x23
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068ee:	4b55      	ldr	r3, [pc, #340]	@ (8006a44 <USBD_CDC_Init+0x1e8>)
 80068f0:	7819      	ldrb	r1, [r3, #0]
 80068f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068f6:	2202      	movs	r2, #2
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f002 fb46 	bl	8008f8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068fe:	4b51      	ldr	r3, [pc, #324]	@ (8006a44 <USBD_CDC_Init+0x1e8>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006916:	2201      	movs	r2, #1
 8006918:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800691a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a48 <USBD_CDC_Init+0x1ec>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f003 020f 	and.w	r2, r3, #15
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	331c      	adds	r3, #28
 8006930:	2210      	movs	r2, #16
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e035      	b.n	80069a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006936:	4b42      	ldr	r3, [pc, #264]	@ (8006a40 <USBD_CDC_Init+0x1e4>)
 8006938:	7819      	ldrb	r1, [r3, #0]
 800693a:	2340      	movs	r3, #64	@ 0x40
 800693c:	2202      	movs	r2, #2
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f002 fb23 	bl	8008f8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006944:	4b3e      	ldr	r3, [pc, #248]	@ (8006a40 <USBD_CDC_Init+0x1e4>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	3323      	adds	r3, #35	@ 0x23
 800695a:	2201      	movs	r2, #1
 800695c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800695e:	4b39      	ldr	r3, [pc, #228]	@ (8006a44 <USBD_CDC_Init+0x1e8>)
 8006960:	7819      	ldrb	r1, [r3, #0]
 8006962:	2340      	movs	r3, #64	@ 0x40
 8006964:	2202      	movs	r2, #2
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f002 fb0f 	bl	8008f8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800696c:	4b35      	ldr	r3, [pc, #212]	@ (8006a44 <USBD_CDC_Init+0x1e8>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f003 020f 	and.w	r2, r3, #15
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006984:	2201      	movs	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006988:	4b2f      	ldr	r3, [pc, #188]	@ (8006a48 <USBD_CDC_Init+0x1ec>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	f003 020f 	and.w	r2, r3, #15
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	331c      	adds	r3, #28
 800699e:	2210      	movs	r2, #16
 80069a0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069a2:	4b29      	ldr	r3, [pc, #164]	@ (8006a48 <USBD_CDC_Init+0x1ec>)
 80069a4:	7819      	ldrb	r1, [r3, #0]
 80069a6:	2308      	movs	r3, #8
 80069a8:	2203      	movs	r2, #3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f002 faed 	bl	8008f8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069b0:	4b25      	ldr	r3, [pc, #148]	@ (8006a48 <USBD_CDC_Init+0x1ec>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 020f 	and.w	r2, r3, #15
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3323      	adds	r3, #35	@ 0x23
 80069c6:	2201      	movs	r2, #1
 80069c8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	33b0      	adds	r3, #176	@ 0xb0
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a00:	2302      	movs	r3, #2
 8006a02:	e018      	b.n	8006a36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7c1b      	ldrb	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <USBD_CDC_Init+0x1e8>)
 8006a0e:	7819      	ldrb	r1, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f002 fba4 	bl	8009168 <USBD_LL_PrepareReceive>
 8006a20:	e008      	b.n	8006a34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a22:	4b08      	ldr	r3, [pc, #32]	@ (8006a44 <USBD_CDC_Init+0x1e8>)
 8006a24:	7819      	ldrb	r1, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a2c:	2340      	movs	r3, #64	@ 0x40
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 fb9a 	bl	8009168 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200000a7 	.word	0x200000a7
 8006a44:	200000a8 	.word	0x200000a8
 8006a48:	200000a9 	.word	0x200000a9

08006a4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a58:	4b3a      	ldr	r3, [pc, #232]	@ (8006b44 <USBD_CDC_DeInit+0xf8>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f002 fab9 	bl	8008fd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a64:	4b37      	ldr	r3, [pc, #220]	@ (8006b44 <USBD_CDC_DeInit+0xf8>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	f003 020f 	and.w	r2, r3, #15
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	3323      	adds	r3, #35	@ 0x23
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a7e:	4b32      	ldr	r3, [pc, #200]	@ (8006b48 <USBD_CDC_DeInit+0xfc>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 faa6 	bl	8008fd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b48 <USBD_CDC_DeInit+0xfc>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006aa6:	4b29      	ldr	r3, [pc, #164]	@ (8006b4c <USBD_CDC_DeInit+0x100>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f002 fa92 	bl	8008fd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ab2:	4b26      	ldr	r3, [pc, #152]	@ (8006b4c <USBD_CDC_DeInit+0x100>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	3323      	adds	r3, #35	@ 0x23
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006acc:	4b1f      	ldr	r3, [pc, #124]	@ (8006b4c <USBD_CDC_DeInit+0x100>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	f003 020f 	and.w	r2, r3, #15
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	331c      	adds	r3, #28
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	32b0      	adds	r2, #176	@ 0xb0
 8006af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01f      	beq.n	8006b38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	33b0      	adds	r3, #176	@ 0xb0
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	32b0      	adds	r2, #176	@ 0xb0
 8006b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f002 fb66 	bl	80091ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32b0      	adds	r2, #176	@ 0xb0
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200000a7 	.word	0x200000a7
 8006b48:	200000a8 	.word	0x200000a8
 8006b4c:	200000a9 	.word	0x200000a9

08006b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	32b0      	adds	r2, #176	@ 0xb0
 8006b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e0bf      	b.n	8006d00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d050      	beq.n	8006c2e <USBD_CDC_Setup+0xde>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	f040 80af 	bne.w	8006cf0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	88db      	ldrh	r3, [r3, #6]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d03a      	beq.n	8006c10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da1b      	bge.n	8006bdc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	33b0      	adds	r3, #176	@ 0xb0
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006bba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	88d2      	ldrh	r2, [r2, #6]
 8006bc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	88db      	ldrh	r3, [r3, #6]
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	bf28      	it	cs
 8006bca:	2307      	movcs	r3, #7
 8006bcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	89fa      	ldrh	r2, [r7, #14]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fda7 	bl	8008728 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006bda:	e090      	b.n	8006cfe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785a      	ldrb	r2, [r3, #1]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	88db      	ldrh	r3, [r3, #6]
 8006bea:	2b3f      	cmp	r3, #63	@ 0x3f
 8006bec:	d803      	bhi.n	8006bf6 <USBD_CDC_Setup+0xa6>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	88db      	ldrh	r3, [r3, #6]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	e000      	b.n	8006bf8 <USBD_CDC_Setup+0xa8>
 8006bf6:	2240      	movs	r2, #64	@ 0x40
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006bfe:	6939      	ldr	r1, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006c06:	461a      	mov	r2, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fdbc 	bl	8008786 <USBD_CtlPrepareRx>
      break;
 8006c0e:	e076      	b.n	8006cfe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	33b0      	adds	r3, #176	@ 0xb0
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	7850      	ldrb	r0, [r2, #1]
 8006c26:	2200      	movs	r2, #0
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	4798      	blx	r3
      break;
 8006c2c:	e067      	b.n	8006cfe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b0b      	cmp	r3, #11
 8006c34:	d851      	bhi.n	8006cda <USBD_CDC_Setup+0x18a>
 8006c36:	a201      	add	r2, pc, #4	@ (adr r2, 8006c3c <USBD_CDC_Setup+0xec>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006c6d 	.word	0x08006c6d
 8006c40:	08006ce9 	.word	0x08006ce9
 8006c44:	08006cdb 	.word	0x08006cdb
 8006c48:	08006cdb 	.word	0x08006cdb
 8006c4c:	08006cdb 	.word	0x08006cdb
 8006c50:	08006cdb 	.word	0x08006cdb
 8006c54:	08006cdb 	.word	0x08006cdb
 8006c58:	08006cdb 	.word	0x08006cdb
 8006c5c:	08006cdb 	.word	0x08006cdb
 8006c60:	08006cdb 	.word	0x08006cdb
 8006c64:	08006c97 	.word	0x08006c97
 8006c68:	08006cc1 	.word	0x08006cc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d107      	bne.n	8006c88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c78:	f107 030a 	add.w	r3, r7, #10
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fd51 	bl	8008728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c86:	e032      	b.n	8006cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fccf 	bl	800862e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	75fb      	strb	r3, [r7, #23]
          break;
 8006c94:	e02b      	b.n	8006cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d107      	bne.n	8006cb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ca2:	f107 030d 	add.w	r3, r7, #13
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fd3c 	bl	8008728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cb0:	e01d      	b.n	8006cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fcba 	bl	800862e <USBD_CtlError>
            ret = USBD_FAIL;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cbe:	e016      	b.n	8006cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d00f      	beq.n	8006cec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fcad 	bl	800862e <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cd8:	e008      	b.n	8006cec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 fca6 	bl	800862e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ce6:	e002      	b.n	8006cee <USBD_CDC_Setup+0x19e>
          break;
 8006ce8:	bf00      	nop
 8006cea:	e008      	b.n	8006cfe <USBD_CDC_Setup+0x1ae>
          break;
 8006cec:	bf00      	nop
      }
      break;
 8006cee:	e006      	b.n	8006cfe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fc9b 	bl	800862e <USBD_CtlError>
      ret = USBD_FAIL;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32b0      	adds	r2, #176	@ 0xb0
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e065      	b.n	8006dfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	32b0      	adds	r2, #176	@ 0xb0
 8006d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	f003 020f 	and.w	r2, r3, #15
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	3314      	adds	r3, #20
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d02f      	beq.n	8006dbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	f003 020f 	and.w	r2, r3, #15
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	4613      	mov	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3314      	adds	r3, #20
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	78fb      	ldrb	r3, [r7, #3]
 8006d74:	f003 010f 	and.w	r1, r3, #15
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	440b      	add	r3, r1
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4403      	add	r3, r0
 8006d84:	331c      	adds	r3, #28
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d8c:	fb01 f303 	mul.w	r3, r1, r3
 8006d90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d112      	bne.n	8006dbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	3314      	adds	r3, #20
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dae:	78f9      	ldrb	r1, [r7, #3]
 8006db0:	2300      	movs	r3, #0
 8006db2:	2200      	movs	r2, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f002 f9b6 	bl	8009126 <USBD_LL_Transmit>
 8006dba:	e01f      	b.n	8006dfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	33b0      	adds	r3, #176	@ 0xb0
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d010      	beq.n	8006dfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	33b0      	adds	r3, #176	@ 0xb0
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	32b0      	adds	r2, #176	@ 0xb0
 8006e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	32b0      	adds	r2, #176	@ 0xb0
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e01a      	b.n	8006e6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f002 f9b4 	bl	80091aa <USBD_LL_GetRxDataSize>
 8006e42:	4602      	mov	r2, r0
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	33b0      	adds	r3, #176	@ 0xb0
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006e68:	4611      	mov	r1, r2
 8006e6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	32b0      	adds	r2, #176	@ 0xb0
 8006e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e024      	b.n	8006ee2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	33b0      	adds	r3, #176	@ 0xb0
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d019      	beq.n	8006ee0 <USBD_CDC_EP0_RxReady+0x6a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006eb2:	2bff      	cmp	r3, #255	@ 0xff
 8006eb4:	d014      	beq.n	8006ee0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	33b0      	adds	r3, #176	@ 0xb0
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ece:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ed6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	22ff      	movs	r2, #255	@ 0xff
 8006edc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ef4:	2182      	movs	r1, #130	@ 0x82
 8006ef6:	4818      	ldr	r0, [pc, #96]	@ (8006f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ef8:	f000 fd62 	bl	80079c0 <USBD_GetEpDesc>
 8006efc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006efe:	2101      	movs	r1, #1
 8006f00:	4815      	ldr	r0, [pc, #84]	@ (8006f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f02:	f000 fd5d 	bl	80079c0 <USBD_GetEpDesc>
 8006f06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f08:	2181      	movs	r1, #129	@ 0x81
 8006f0a:	4813      	ldr	r0, [pc, #76]	@ (8006f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f0c:	f000 fd58 	bl	80079c0 <USBD_GetEpDesc>
 8006f10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d006      	beq.n	8006f32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f2c:	711a      	strb	r2, [r3, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d006      	beq.n	8006f46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f40:	711a      	strb	r2, [r3, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2243      	movs	r2, #67	@ 0x43
 8006f4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f4c:	4b02      	ldr	r3, [pc, #8]	@ (8006f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000064 	.word	0x20000064

08006f5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f64:	2182      	movs	r1, #130	@ 0x82
 8006f66:	4818      	ldr	r0, [pc, #96]	@ (8006fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f68:	f000 fd2a 	bl	80079c0 <USBD_GetEpDesc>
 8006f6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f6e:	2101      	movs	r1, #1
 8006f70:	4815      	ldr	r0, [pc, #84]	@ (8006fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f72:	f000 fd25 	bl	80079c0 <USBD_GetEpDesc>
 8006f76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f78:	2181      	movs	r1, #129	@ 0x81
 8006f7a:	4813      	ldr	r0, [pc, #76]	@ (8006fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f7c:	f000 fd20 	bl	80079c0 <USBD_GetEpDesc>
 8006f80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2210      	movs	r2, #16
 8006f8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d006      	beq.n	8006fa2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2200      	movs	r2, #0
 8006f98:	711a      	strb	r2, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f042 0202 	orr.w	r2, r2, #2
 8006fa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d006      	beq.n	8006fb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	711a      	strb	r2, [r3, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f042 0202 	orr.w	r2, r2, #2
 8006fb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2243      	movs	r2, #67	@ 0x43
 8006fba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fbc:	4b02      	ldr	r3, [pc, #8]	@ (8006fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000064 	.word	0x20000064

08006fcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fd4:	2182      	movs	r1, #130	@ 0x82
 8006fd6:	4818      	ldr	r0, [pc, #96]	@ (8007038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fd8:	f000 fcf2 	bl	80079c0 <USBD_GetEpDesc>
 8006fdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fde:	2101      	movs	r1, #1
 8006fe0:	4815      	ldr	r0, [pc, #84]	@ (8007038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fe2:	f000 fced 	bl	80079c0 <USBD_GetEpDesc>
 8006fe6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fe8:	2181      	movs	r1, #129	@ 0x81
 8006fea:	4813      	ldr	r0, [pc, #76]	@ (8007038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fec:	f000 fce8 	bl	80079c0 <USBD_GetEpDesc>
 8006ff0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2210      	movs	r2, #16
 8006ffc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d006      	beq.n	8007012 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2200      	movs	r2, #0
 8007008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800700c:	711a      	strb	r2, [r3, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d006      	beq.n	8007026 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007020:	711a      	strb	r2, [r3, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2243      	movs	r2, #67	@ 0x43
 800702a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800702c:	4b02      	ldr	r3, [pc, #8]	@ (8007038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000064 	.word	0x20000064

0800703c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	220a      	movs	r2, #10
 8007048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800704a:	4b03      	ldr	r3, [pc, #12]	@ (8007058 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000020 	.word	0x20000020

0800705c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	e009      	b.n	8007084 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	33b0      	adds	r3, #176	@ 0xb0
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	32b0      	adds	r2, #176	@ 0xb0
 80070a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e008      	b.n	80070c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	32b0      	adds	r2, #176	@ 0xb0
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e004      	b.n	8007102 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	32b0      	adds	r2, #176	@ 0xb0
 8007122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007126:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007132:	2303      	movs	r3, #3
 8007134:	e025      	b.n	8007182 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11f      	bne.n	8007180 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2201      	movs	r2, #1
 8007144:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007148:	4b10      	ldr	r3, [pc, #64]	@ (800718c <USBD_CDC_TransmitPacket+0x7c>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4403      	add	r3, r0
 8007162:	3314      	adds	r3, #20
 8007164:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007166:	4b09      	ldr	r3, [pc, #36]	@ (800718c <USBD_CDC_TransmitPacket+0x7c>)
 8007168:	7819      	ldrb	r1, [r3, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 ffd5 	bl	8009126 <USBD_LL_Transmit>

    ret = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	200000a7 	.word	0x200000a7

08007190 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	32b0      	adds	r2, #176	@ 0xb0
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	32b0      	adds	r2, #176	@ 0xb0
 80071b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e018      	b.n	80071f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7c1b      	ldrb	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071c6:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <USBD_CDC_ReceivePacket+0x68>)
 80071c8:	7819      	ldrb	r1, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 ffc7 	bl	8009168 <USBD_LL_PrepareReceive>
 80071da:	e008      	b.n	80071ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071dc:	4b06      	ldr	r3, [pc, #24]	@ (80071f8 <USBD_CDC_ReceivePacket+0x68>)
 80071de:	7819      	ldrb	r1, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071e6:	2340      	movs	r3, #64	@ 0x40
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 ffbd 	bl	8009168 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	200000a8 	.word	0x200000a8

080071fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007210:	2303      	movs	r3, #3
 8007212:	e01f      	b.n	8007254 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	79fa      	ldrb	r2, [r7, #7]
 8007246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 fe37 	bl	8008ebc <USBD_LL_Init>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	e025      	b.n	80072c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	32ae      	adds	r2, #174	@ 0xae
 8007286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00f      	beq.n	80072b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	32ae      	adds	r2, #174	@ 0xae
 800729a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	f107 020e 	add.w	r2, r7, #14
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
 80072a8:	4602      	mov	r2, r0
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 fe3f 	bl	8008f54 <USBD_LL_Start>
 80072d6:	4603      	mov	r3, r0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	78fa      	ldrb	r2, [r7, #3]
 800731a:	4611      	mov	r1, r2
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	4611      	mov	r1, r2
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f001 f920 	bl	80085ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007388:	461a      	mov	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	2b02      	cmp	r3, #2
 800739c:	d01a      	beq.n	80073d4 <USBD_LL_SetupStage+0x72>
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d822      	bhi.n	80073e8 <USBD_LL_SetupStage+0x86>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <USBD_LL_SetupStage+0x4a>
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d00a      	beq.n	80073c0 <USBD_LL_SetupStage+0x5e>
 80073aa:	e01d      	b.n	80073e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fb75 	bl	8007aa4 <USBD_StdDevReq>
 80073ba:	4603      	mov	r3, r0
 80073bc:	73fb      	strb	r3, [r7, #15]
      break;
 80073be:	e020      	b.n	8007402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fbdd 	bl	8007b88 <USBD_StdItfReq>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
      break;
 80073d2:	e016      	b.n	8007402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fc3f 	bl	8007c60 <USBD_StdEPReq>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
      break;
 80073e6:	e00c      	b.n	8007402 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fe0c 	bl	8009014 <USBD_LL_StallEP>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	bf00      	nop
  }

  return ret;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	460b      	mov	r3, r1
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d177      	bne.n	8007514 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800742a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007432:	2b03      	cmp	r3, #3
 8007434:	f040 80a1 	bne.w	800757a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	8992      	ldrh	r2, [r2, #12]
 8007440:	4293      	cmp	r3, r2
 8007442:	d91c      	bls.n	800747e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	8992      	ldrh	r2, [r2, #12]
 800744c:	1a9a      	subs	r2, r3, r2
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	8992      	ldrh	r2, [r2, #12]
 800745a:	441a      	add	r2, r3
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6919      	ldr	r1, [r3, #16]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	899b      	ldrh	r3, [r3, #12]
 8007468:	461a      	mov	r2, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	4293      	cmp	r3, r2
 8007470:	bf38      	it	cc
 8007472:	4613      	movcc	r3, r2
 8007474:	461a      	mov	r2, r3
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 f9a6 	bl	80087c8 <USBD_CtlContinueRx>
 800747c:	e07d      	b.n	800757a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2b02      	cmp	r3, #2
 800748a:	d014      	beq.n	80074b6 <USBD_LL_DataOutStage+0xaa>
 800748c:	2b02      	cmp	r3, #2
 800748e:	d81d      	bhi.n	80074cc <USBD_LL_DataOutStage+0xc0>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <USBD_LL_DataOutStage+0x8e>
 8007494:	2b01      	cmp	r3, #1
 8007496:	d003      	beq.n	80074a0 <USBD_LL_DataOutStage+0x94>
 8007498:	e018      	b.n	80074cc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	75bb      	strb	r3, [r7, #22]
            break;
 800749e:	e018      	b.n	80074d2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fa6e 	bl	800798c <USBD_CoreFindIF>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75bb      	strb	r3, [r7, #22]
            break;
 80074b4:	e00d      	b.n	80074d2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	4619      	mov	r1, r3
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fa70 	bl	80079a6 <USBD_CoreFindEP>
 80074c6:	4603      	mov	r3, r0
 80074c8:	75bb      	strb	r3, [r7, #22]
            break;
 80074ca:	e002      	b.n	80074d2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	75bb      	strb	r3, [r7, #22]
            break;
 80074d0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80074d2:	7dbb      	ldrb	r3, [r7, #22]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d119      	bne.n	800750c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d113      	bne.n	800750c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80074e4:	7dba      	ldrb	r2, [r7, #22]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	32ae      	adds	r2, #174	@ 0xae
 80074ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80074f4:	7dba      	ldrb	r2, [r7, #22]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074fc:	7dba      	ldrb	r2, [r7, #22]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	32ae      	adds	r2, #174	@ 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f001 f96c 	bl	80087ea <USBD_CtlSendStatus>
 8007512:	e032      	b.n	800757a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007514:	7afb      	ldrb	r3, [r7, #11]
 8007516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800751a:	b2db      	uxtb	r3, r3
 800751c:	4619      	mov	r1, r3
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fa41 	bl	80079a6 <USBD_CoreFindEP>
 8007524:	4603      	mov	r3, r0
 8007526:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007528:	7dbb      	ldrb	r3, [r7, #22]
 800752a:	2bff      	cmp	r3, #255	@ 0xff
 800752c:	d025      	beq.n	800757a <USBD_LL_DataOutStage+0x16e>
 800752e:	7dbb      	ldrb	r3, [r7, #22]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d122      	bne.n	800757a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b03      	cmp	r3, #3
 800753e:	d117      	bne.n	8007570 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007540:	7dba      	ldrb	r2, [r7, #22]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	32ae      	adds	r2, #174	@ 0xae
 8007546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007550:	7dba      	ldrb	r2, [r7, #22]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007558:	7dba      	ldrb	r2, [r7, #22]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	32ae      	adds	r2, #174	@ 0xae
 800755e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	7afa      	ldrb	r2, [r7, #11]
 8007566:	4611      	mov	r1, r2
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	4798      	blx	r3
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	e000      	b.n	800757c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	460b      	mov	r3, r1
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d178      	bne.n	800768a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3314      	adds	r3, #20
 800759c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d163      	bne.n	8007670 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	8992      	ldrh	r2, [r2, #12]
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d91c      	bls.n	80075ee <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	8992      	ldrh	r2, [r2, #12]
 80075bc:	1a9a      	subs	r2, r3, r2
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	8992      	ldrh	r2, [r2, #12]
 80075ca:	441a      	add	r2, r3
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6919      	ldr	r1, [r3, #16]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	461a      	mov	r2, r3
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f001 f8c2 	bl	8008764 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e0:	2300      	movs	r3, #0
 80075e2:	2200      	movs	r2, #0
 80075e4:	2100      	movs	r1, #0
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f001 fdbe 	bl	8009168 <USBD_LL_PrepareReceive>
 80075ec:	e040      	b.n	8007670 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	899b      	ldrh	r3, [r3, #12]
 80075f2:	461a      	mov	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d11c      	bne.n	8007636 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007604:	4293      	cmp	r3, r2
 8007606:	d316      	bcc.n	8007636 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007612:	429a      	cmp	r2, r3
 8007614:	d20f      	bcs.n	8007636 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f001 f8a2 	bl	8008764 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007628:	2300      	movs	r3, #0
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f001 fd9a 	bl	8009168 <USBD_LL_PrepareReceive>
 8007634:	e01c      	b.n	8007670 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b03      	cmp	r3, #3
 8007640:	d10f      	bne.n	8007662 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007662:	2180      	movs	r1, #128	@ 0x80
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f001 fcd5 	bl	8009014 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f001 f8d0 	bl	8008810 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d03a      	beq.n	80076f0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff fe30 	bl	80072e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007688:	e032      	b.n	80076f0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007690:	b2db      	uxtb	r3, r3
 8007692:	4619      	mov	r1, r3
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f986 	bl	80079a6 <USBD_CoreFindEP>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	2bff      	cmp	r3, #255	@ 0xff
 80076a2:	d025      	beq.n	80076f0 <USBD_LL_DataInStage+0x16c>
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d122      	bne.n	80076f0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d11c      	bne.n	80076f0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076b6:	7dfa      	ldrb	r2, [r7, #23]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	32ae      	adds	r2, #174	@ 0xae
 80076bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d014      	beq.n	80076f0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80076c6:	7dfa      	ldrb	r2, [r7, #23]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80076ce:	7dfa      	ldrb	r2, [r7, #23]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	32ae      	adds	r2, #174	@ 0xae
 80076d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	7afa      	ldrb	r2, [r7, #11]
 80076dc:	4611      	mov	r1, r2
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	4798      	blx	r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80076e6:	7dbb      	ldrb	r3, [r7, #22]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80076ec:	7dbb      	ldrb	r3, [r7, #22]
 80076ee:	e000      	b.n	80076f2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d014      	beq.n	8007760 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00e      	beq.n	8007760 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6852      	ldr	r2, [r2, #4]
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	4611      	mov	r1, r2
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007760:	2340      	movs	r3, #64	@ 0x40
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fc0f 	bl	8008f8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2240      	movs	r2, #64	@ 0x40
 8007778:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800777c:	2340      	movs	r3, #64	@ 0x40
 800777e:	2200      	movs	r2, #0
 8007780:	2180      	movs	r1, #128	@ 0x80
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fc01 	bl	8008f8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2240      	movs	r2, #64	@ 0x40
 8007794:	841a      	strh	r2, [r3, #32]

  return ret;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d006      	beq.n	80077e2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2204      	movs	r2, #4
 80077e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b04      	cmp	r3, #4
 800780a:	d106      	bne.n	800781a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007812:	b2da      	uxtb	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b03      	cmp	r3, #3
 800783a:	d110      	bne.n	800785e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32ae      	adds	r2, #174	@ 0xae
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	e01c      	b.n	80078c4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b03      	cmp	r3, #3
 8007894:	d115      	bne.n	80078c2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	32ae      	adds	r2, #174	@ 0xae
 80078a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	32ae      	adds	r2, #174	@ 0xae
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	4611      	mov	r1, r2
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	32ae      	adds	r2, #174	@ 0xae
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e01c      	b.n	8007928 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d115      	bne.n	8007926 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	32ae      	adds	r2, #174	@ 0xae
 8007904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	32ae      	adds	r2, #174	@ 0xae
 8007918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	4611      	mov	r1, r2
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00e      	beq.n	8007982 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6852      	ldr	r2, [r2, #4]
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	4611      	mov	r1, r2
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007998:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	885b      	ldrh	r3, [r3, #2]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	7812      	ldrb	r2, [r2, #0]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d91f      	bls.n	8007a26 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80079ec:	e013      	b.n	8007a16 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80079ee:	f107 030a 	add.w	r3, r7, #10
 80079f2:	4619      	mov	r1, r3
 80079f4:	6978      	ldr	r0, [r7, #20]
 80079f6:	f000 f81b 	bl	8007a30 <USBD_GetNextDesc>
 80079fa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b05      	cmp	r3, #5
 8007a02:	d108      	bne.n	8007a16 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	789b      	ldrb	r3, [r3, #2]
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d008      	beq.n	8007a24 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	897b      	ldrh	r3, [r7, #10]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d8e5      	bhi.n	80079ee <USBD_GetEpDesc+0x2e>
 8007a22:	e000      	b.n	8007a26 <USBD_GetEpDesc+0x66>
          break;
 8007a24:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a26:	693b      	ldr	r3, [r7, #16]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	7812      	ldrb	r2, [r2, #0]
 8007a46:	4413      	add	r3, r2
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4413      	add	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a86:	8a3b      	ldrh	r3, [r7, #16]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	b21a      	sxth	r2, r3
 8007a8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	b21b      	sxth	r3, r3
 8007a94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a96:	89fb      	ldrh	r3, [r7, #14]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aba:	2b40      	cmp	r3, #64	@ 0x40
 8007abc:	d005      	beq.n	8007aca <USBD_StdDevReq+0x26>
 8007abe:	2b40      	cmp	r3, #64	@ 0x40
 8007ac0:	d857      	bhi.n	8007b72 <USBD_StdDevReq+0xce>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00f      	beq.n	8007ae6 <USBD_StdDevReq+0x42>
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d153      	bne.n	8007b72 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	32ae      	adds	r2, #174	@ 0xae
 8007ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae4:	e04a      	b.n	8007b7c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	d83b      	bhi.n	8007b66 <USBD_StdDevReq+0xc2>
 8007aee:	a201      	add	r2, pc, #4	@ (adr r2, 8007af4 <USBD_StdDevReq+0x50>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b49 	.word	0x08007b49
 8007af8:	08007b5d 	.word	0x08007b5d
 8007afc:	08007b67 	.word	0x08007b67
 8007b00:	08007b53 	.word	0x08007b53
 8007b04:	08007b67 	.word	0x08007b67
 8007b08:	08007b27 	.word	0x08007b27
 8007b0c:	08007b1d 	.word	0x08007b1d
 8007b10:	08007b67 	.word	0x08007b67
 8007b14:	08007b3f 	.word	0x08007b3f
 8007b18:	08007b31 	.word	0x08007b31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa3e 	bl	8007fa0 <USBD_GetDescriptor>
          break;
 8007b24:	e024      	b.n	8007b70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fba3 	bl	8008274 <USBD_SetAddress>
          break;
 8007b2e:	e01f      	b.n	8007b70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fbe2 	bl	80082fc <USBD_SetConfig>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b3c:	e018      	b.n	8007b70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fc85 	bl	8008450 <USBD_GetConfig>
          break;
 8007b46:	e013      	b.n	8007b70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fcb6 	bl	80084bc <USBD_GetStatus>
          break;
 8007b50:	e00e      	b.n	8007b70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fce5 	bl	8008524 <USBD_SetFeature>
          break;
 8007b5a:	e009      	b.n	8007b70 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fd09 	bl	8008576 <USBD_ClrFeature>
          break;
 8007b64:	e004      	b.n	8007b70 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fd60 	bl	800862e <USBD_CtlError>
          break;
 8007b6e:	bf00      	nop
      }
      break;
 8007b70:	e004      	b.n	8007b7c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fd5a 	bl	800862e <USBD_CtlError>
      break;
 8007b7a:	bf00      	nop
  }

  return ret;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop

08007b88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ba0:	d005      	beq.n	8007bae <USBD_StdItfReq+0x26>
 8007ba2:	2b40      	cmp	r3, #64	@ 0x40
 8007ba4:	d852      	bhi.n	8007c4c <USBD_StdItfReq+0xc4>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <USBD_StdItfReq+0x26>
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	d14e      	bne.n	8007c4c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d840      	bhi.n	8007c3e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	889b      	ldrh	r3, [r3, #4]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d836      	bhi.n	8007c34 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	889b      	ldrh	r3, [r3, #4]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff fedc 	bl	800798c <USBD_CoreFindIF>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	2bff      	cmp	r3, #255	@ 0xff
 8007bdc:	d01d      	beq.n	8007c1a <USBD_StdItfReq+0x92>
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d11a      	bne.n	8007c1a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007be4:	7bba      	ldrb	r2, [r7, #14]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	32ae      	adds	r2, #174	@ 0xae
 8007bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00f      	beq.n	8007c14 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007bf4:	7bba      	ldrb	r2, [r7, #14]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bfc:	7bba      	ldrb	r2, [r7, #14]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	32ae      	adds	r2, #174	@ 0xae
 8007c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c12:	e004      	b.n	8007c1e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c14:	2303      	movs	r3, #3
 8007c16:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c18:	e001      	b.n	8007c1e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	88db      	ldrh	r3, [r3, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d110      	bne.n	8007c48 <USBD_StdItfReq+0xc0>
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10d      	bne.n	8007c48 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fddc 	bl	80087ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c32:	e009      	b.n	8007c48 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fcf9 	bl	800862e <USBD_CtlError>
          break;
 8007c3c:	e004      	b.n	8007c48 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fcf4 	bl	800862e <USBD_CtlError>
          break;
 8007c46:	e000      	b.n	8007c4a <USBD_StdItfReq+0xc2>
          break;
 8007c48:	bf00      	nop
      }
      break;
 8007c4a:	e004      	b.n	8007c56 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fced 	bl	800862e <USBD_CtlError>
      break;
 8007c54:	bf00      	nop
  }

  return ret;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	889b      	ldrh	r3, [r3, #4]
 8007c72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c7c:	2b40      	cmp	r3, #64	@ 0x40
 8007c7e:	d007      	beq.n	8007c90 <USBD_StdEPReq+0x30>
 8007c80:	2b40      	cmp	r3, #64	@ 0x40
 8007c82:	f200 8181 	bhi.w	8007f88 <USBD_StdEPReq+0x328>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d02a      	beq.n	8007ce0 <USBD_StdEPReq+0x80>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	f040 817c 	bne.w	8007f88 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff fe86 	bl	80079a6 <USBD_CoreFindEP>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ca0:	2bff      	cmp	r3, #255	@ 0xff
 8007ca2:	f000 8176 	beq.w	8007f92 <USBD_StdEPReq+0x332>
 8007ca6:	7b7b      	ldrb	r3, [r7, #13]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f040 8172 	bne.w	8007f92 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007cae:	7b7a      	ldrb	r2, [r7, #13]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cb6:	7b7a      	ldrb	r2, [r7, #13]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	32ae      	adds	r2, #174	@ 0xae
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 8165 	beq.w	8007f92 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007cc8:	7b7a      	ldrb	r2, [r7, #13]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	32ae      	adds	r2, #174	@ 0xae
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cde:	e158      	b.n	8007f92 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d008      	beq.n	8007cfa <USBD_StdEPReq+0x9a>
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	f300 8147 	bgt.w	8007f7c <USBD_StdEPReq+0x31c>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 809b 	beq.w	8007e2a <USBD_StdEPReq+0x1ca>
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d03c      	beq.n	8007d72 <USBD_StdEPReq+0x112>
 8007cf8:	e140      	b.n	8007f7c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d002      	beq.n	8007d0c <USBD_StdEPReq+0xac>
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d016      	beq.n	8007d38 <USBD_StdEPReq+0xd8>
 8007d0a:	e02c      	b.n	8007d66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00d      	beq.n	8007d2e <USBD_StdEPReq+0xce>
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b80      	cmp	r3, #128	@ 0x80
 8007d16:	d00a      	beq.n	8007d2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f979 	bl	8009014 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d22:	2180      	movs	r1, #128	@ 0x80
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f975 	bl	8009014 <USBD_LL_StallEP>
 8007d2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d2c:	e020      	b.n	8007d70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc7c 	bl	800862e <USBD_CtlError>
              break;
 8007d36:	e01b      	b.n	8007d70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	885b      	ldrh	r3, [r3, #2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10e      	bne.n	8007d5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <USBD_StdEPReq+0xfe>
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	2b80      	cmp	r3, #128	@ 0x80
 8007d4a:	d008      	beq.n	8007d5e <USBD_StdEPReq+0xfe>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	88db      	ldrh	r3, [r3, #6]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 f95b 	bl	8009014 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fd43 	bl	80087ea <USBD_CtlSendStatus>

              break;
 8007d64:	e004      	b.n	8007d70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fc60 	bl	800862e <USBD_CtlError>
              break;
 8007d6e:	bf00      	nop
          }
          break;
 8007d70:	e109      	b.n	8007f86 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d002      	beq.n	8007d84 <USBD_StdEPReq+0x124>
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d016      	beq.n	8007db0 <USBD_StdEPReq+0x150>
 8007d82:	e04b      	b.n	8007e1c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00d      	beq.n	8007da6 <USBD_StdEPReq+0x146>
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b80      	cmp	r3, #128	@ 0x80
 8007d8e:	d00a      	beq.n	8007da6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 f93d 	bl	8009014 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d9a:	2180      	movs	r1, #128	@ 0x80
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f939 	bl	8009014 <USBD_LL_StallEP>
 8007da2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007da4:	e040      	b.n	8007e28 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fc40 	bl	800862e <USBD_CtlError>
              break;
 8007dae:	e03b      	b.n	8007e28 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	885b      	ldrh	r3, [r3, #2]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d136      	bne.n	8007e26 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d004      	beq.n	8007dcc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 f943 	bl	8009052 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fd0c 	bl	80087ea <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fde5 	bl	80079a6 <USBD_CoreFindEP>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007de0:	7b7b      	ldrb	r3, [r7, #13]
 8007de2:	2bff      	cmp	r3, #255	@ 0xff
 8007de4:	d01f      	beq.n	8007e26 <USBD_StdEPReq+0x1c6>
 8007de6:	7b7b      	ldrb	r3, [r7, #13]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d11c      	bne.n	8007e26 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007dec:	7b7a      	ldrb	r2, [r7, #13]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007df4:	7b7a      	ldrb	r2, [r7, #13]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	32ae      	adds	r2, #174	@ 0xae
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d010      	beq.n	8007e26 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e04:	7b7a      	ldrb	r2, [r7, #13]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32ae      	adds	r2, #174	@ 0xae
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e1a:	e004      	b.n	8007e26 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fc05 	bl	800862e <USBD_CtlError>
              break;
 8007e24:	e000      	b.n	8007e28 <USBD_StdEPReq+0x1c8>
              break;
 8007e26:	bf00      	nop
          }
          break;
 8007e28:	e0ad      	b.n	8007f86 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d002      	beq.n	8007e3c <USBD_StdEPReq+0x1dc>
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d033      	beq.n	8007ea2 <USBD_StdEPReq+0x242>
 8007e3a:	e099      	b.n	8007f70 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <USBD_StdEPReq+0x1f2>
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b80      	cmp	r3, #128	@ 0x80
 8007e46:	d004      	beq.n	8007e52 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fbef 	bl	800862e <USBD_CtlError>
                break;
 8007e50:	e093      	b.n	8007f7a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	da0b      	bge.n	8007e72 <USBD_StdEPReq+0x212>
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	3310      	adds	r3, #16
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	3304      	adds	r3, #4
 8007e70:	e00b      	b.n	8007e8a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e78:	4613      	mov	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	4413      	add	r3, r2
 8007e88:	3304      	adds	r3, #4
 8007e8a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	330e      	adds	r3, #14
 8007e96:	2202      	movs	r2, #2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fc44 	bl	8008728 <USBD_CtlSendData>
              break;
 8007ea0:	e06b      	b.n	8007f7a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da11      	bge.n	8007ece <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	3323      	adds	r3, #35	@ 0x23
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d117      	bne.n	8007ef4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fbb1 	bl	800862e <USBD_CtlError>
                  break;
 8007ecc:	e055      	b.n	8007f7a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d104      	bne.n	8007ef4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb9e 	bl	800862e <USBD_CtlError>
                  break;
 8007ef2:	e042      	b.n	8007f7a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da0b      	bge.n	8007f14 <USBD_StdEPReq+0x2b4>
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	3310      	adds	r3, #16
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4413      	add	r3, r2
 8007f10:	3304      	adds	r3, #4
 8007f12:	e00b      	b.n	8007f2c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <USBD_StdEPReq+0x2da>
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b80      	cmp	r3, #128	@ 0x80
 8007f38:	d103      	bne.n	8007f42 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	739a      	strb	r2, [r3, #14]
 8007f40:	e00e      	b.n	8007f60 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f8a2 	bl	8009090 <USBD_LL_IsStallEP>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2201      	movs	r2, #1
 8007f56:	739a      	strb	r2, [r3, #14]
 8007f58:	e002      	b.n	8007f60 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	330e      	adds	r3, #14
 8007f64:	2202      	movs	r2, #2
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fbdd 	bl	8008728 <USBD_CtlSendData>
              break;
 8007f6e:	e004      	b.n	8007f7a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fb5b 	bl	800862e <USBD_CtlError>
              break;
 8007f78:	bf00      	nop
          }
          break;
 8007f7a:	e004      	b.n	8007f86 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fb55 	bl	800862e <USBD_CtlError>
          break;
 8007f84:	bf00      	nop
      }
      break;
 8007f86:	e005      	b.n	8007f94 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fb4f 	bl	800862e <USBD_CtlError>
      break;
 8007f90:	e000      	b.n	8007f94 <USBD_StdEPReq+0x334>
      break;
 8007f92:	bf00      	nop
  }

  return ret;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	2b06      	cmp	r3, #6
 8007fc2:	f200 8128 	bhi.w	8008216 <USBD_GetDescriptor+0x276>
 8007fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <USBD_GetDescriptor+0x2c>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007fe9 	.word	0x08007fe9
 8007fd0:	08008001 	.word	0x08008001
 8007fd4:	08008041 	.word	0x08008041
 8007fd8:	08008217 	.word	0x08008217
 8007fdc:	08008217 	.word	0x08008217
 8007fe0:	080081b7 	.word	0x080081b7
 8007fe4:	080081e3 	.word	0x080081e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7c12      	ldrb	r2, [r2, #16]
 8007ff4:	f107 0108 	add.w	r1, r7, #8
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
 8007ffc:	60f8      	str	r0, [r7, #12]
      break;
 8007ffe:	e112      	b.n	8008226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7c1b      	ldrb	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10d      	bne.n	8008024 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800800e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008010:	f107 0208 	add.w	r2, r7, #8
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
 8008018:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	2202      	movs	r2, #2
 8008020:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008022:	e100      	b.n	8008226 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802c:	f107 0208 	add.w	r2, r7, #8
 8008030:	4610      	mov	r0, r2
 8008032:	4798      	blx	r3
 8008034:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3301      	adds	r3, #1
 800803a:	2202      	movs	r2, #2
 800803c:	701a      	strb	r2, [r3, #0]
      break;
 800803e:	e0f2      	b.n	8008226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b05      	cmp	r3, #5
 8008048:	f200 80ac 	bhi.w	80081a4 <USBD_GetDescriptor+0x204>
 800804c:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <USBD_GetDescriptor+0xb4>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	0800806d 	.word	0x0800806d
 8008058:	080080a1 	.word	0x080080a1
 800805c:	080080d5 	.word	0x080080d5
 8008060:	08008109 	.word	0x08008109
 8008064:	0800813d 	.word	0x0800813d
 8008068:	08008171 	.word	0x08008171
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7c12      	ldrb	r2, [r2, #16]
 8008084:	f107 0108 	add.w	r1, r7, #8
 8008088:	4610      	mov	r0, r2
 800808a:	4798      	blx	r3
 800808c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808e:	e091      	b.n	80081b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 facb 	bl	800862e <USBD_CtlError>
            err++;
 8008098:	7afb      	ldrb	r3, [r7, #11]
 800809a:	3301      	adds	r3, #1
 800809c:	72fb      	strb	r3, [r7, #11]
          break;
 800809e:	e089      	b.n	80081b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	7c12      	ldrb	r2, [r2, #16]
 80080b8:	f107 0108 	add.w	r1, r7, #8
 80080bc:	4610      	mov	r0, r2
 80080be:	4798      	blx	r3
 80080c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080c2:	e077      	b.n	80081b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fab1 	bl	800862e <USBD_CtlError>
            err++;
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	3301      	adds	r3, #1
 80080d0:	72fb      	strb	r3, [r7, #11]
          break;
 80080d2:	e06f      	b.n	80081b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	7c12      	ldrb	r2, [r2, #16]
 80080ec:	f107 0108 	add.w	r1, r7, #8
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f6:	e05d      	b.n	80081b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa97 	bl	800862e <USBD_CtlError>
            err++;
 8008100:	7afb      	ldrb	r3, [r7, #11]
 8008102:	3301      	adds	r3, #1
 8008104:	72fb      	strb	r3, [r7, #11]
          break;
 8008106:	e055      	b.n	80081b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	7c12      	ldrb	r2, [r2, #16]
 8008120:	f107 0108 	add.w	r1, r7, #8
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812a:	e043      	b.n	80081b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fa7d 	bl	800862e <USBD_CtlError>
            err++;
 8008134:	7afb      	ldrb	r3, [r7, #11]
 8008136:	3301      	adds	r3, #1
 8008138:	72fb      	strb	r3, [r7, #11]
          break;
 800813a:	e03b      	b.n	80081b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	7c12      	ldrb	r2, [r2, #16]
 8008154:	f107 0108 	add.w	r1, r7, #8
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
 800815c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815e:	e029      	b.n	80081b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa63 	bl	800862e <USBD_CtlError>
            err++;
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	3301      	adds	r3, #1
 800816c:	72fb      	strb	r3, [r7, #11]
          break;
 800816e:	e021      	b.n	80081b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7c12      	ldrb	r2, [r2, #16]
 8008188:	f107 0108 	add.w	r1, r7, #8
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008192:	e00f      	b.n	80081b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa49 	bl	800862e <USBD_CtlError>
            err++;
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	3301      	adds	r3, #1
 80081a0:	72fb      	strb	r3, [r7, #11]
          break;
 80081a2:	e007      	b.n	80081b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa41 	bl	800862e <USBD_CtlError>
          err++;
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	3301      	adds	r3, #1
 80081b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081b2:	bf00      	nop
      }
      break;
 80081b4:	e037      	b.n	8008226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7c1b      	ldrb	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d109      	bne.n	80081d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c6:	f107 0208 	add.w	r2, r7, #8
 80081ca:	4610      	mov	r0, r2
 80081cc:	4798      	blx	r3
 80081ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081d0:	e029      	b.n	8008226 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fa2a 	bl	800862e <USBD_CtlError>
        err++;
 80081da:	7afb      	ldrb	r3, [r7, #11]
 80081dc:	3301      	adds	r3, #1
 80081de:	72fb      	strb	r3, [r7, #11]
      break;
 80081e0:	e021      	b.n	8008226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7c1b      	ldrb	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10d      	bne.n	8008206 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f2:	f107 0208 	add.w	r2, r7, #8
 80081f6:	4610      	mov	r0, r2
 80081f8:	4798      	blx	r3
 80081fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3301      	adds	r3, #1
 8008200:	2207      	movs	r2, #7
 8008202:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008204:	e00f      	b.n	8008226 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fa10 	bl	800862e <USBD_CtlError>
        err++;
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	3301      	adds	r3, #1
 8008212:	72fb      	strb	r3, [r7, #11]
      break;
 8008214:	e007      	b.n	8008226 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa08 	bl	800862e <USBD_CtlError>
      err++;
 800821e:	7afb      	ldrb	r3, [r7, #11]
 8008220:	3301      	adds	r3, #1
 8008222:	72fb      	strb	r3, [r7, #11]
      break;
 8008224:	bf00      	nop
  }

  if (err != 0U)
 8008226:	7afb      	ldrb	r3, [r7, #11]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d11e      	bne.n	800826a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d016      	beq.n	8008262 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008234:	893b      	ldrh	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	88da      	ldrh	r2, [r3, #6]
 800823e:	893b      	ldrh	r3, [r7, #8]
 8008240:	4293      	cmp	r3, r2
 8008242:	bf28      	it	cs
 8008244:	4613      	movcs	r3, r2
 8008246:	b29b      	uxth	r3, r3
 8008248:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800824a:	893b      	ldrh	r3, [r7, #8]
 800824c:	461a      	mov	r2, r3
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fa69 	bl	8008728 <USBD_CtlSendData>
 8008256:	e009      	b.n	800826c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f9e7 	bl	800862e <USBD_CtlError>
 8008260:	e004      	b.n	800826c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fac1 	bl	80087ea <USBD_CtlSendStatus>
 8008268:	e000      	b.n	800826c <USBD_GetDescriptor+0x2cc>
    return;
 800826a:	bf00      	nop
  }
}
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop

08008274 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	889b      	ldrh	r3, [r3, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d131      	bne.n	80082ea <USBD_SetAddress+0x76>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	88db      	ldrh	r3, [r3, #6]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d12d      	bne.n	80082ea <USBD_SetAddress+0x76>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	2b7f      	cmp	r3, #127	@ 0x7f
 8008294:	d829      	bhi.n	80082ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d104      	bne.n	80082b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9bc 	bl	800862e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b6:	e01d      	b.n	80082f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 ff0f 	bl	80090e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa8d 	bl	80087ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d004      	beq.n	80082e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2202      	movs	r2, #2
 80082da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082de:	e009      	b.n	80082f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e8:	e004      	b.n	80082f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f99e 	bl	800862e <USBD_CtlError>
  }
}
 80082f2:	bf00      	nop
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	b2da      	uxtb	r2, r3
 8008310:	4b4e      	ldr	r3, [pc, #312]	@ (800844c <USBD_SetConfig+0x150>)
 8008312:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008314:	4b4d      	ldr	r3, [pc, #308]	@ (800844c <USBD_SetConfig+0x150>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d905      	bls.n	8008328 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f985 	bl	800862e <USBD_CtlError>
    return USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	e08c      	b.n	8008442 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d002      	beq.n	800833a <USBD_SetConfig+0x3e>
 8008334:	2b03      	cmp	r3, #3
 8008336:	d029      	beq.n	800838c <USBD_SetConfig+0x90>
 8008338:	e075      	b.n	8008426 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800833a:	4b44      	ldr	r3, [pc, #272]	@ (800844c <USBD_SetConfig+0x150>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d020      	beq.n	8008384 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008342:	4b42      	ldr	r3, [pc, #264]	@ (800844c <USBD_SetConfig+0x150>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800834c:	4b3f      	ldr	r3, [pc, #252]	@ (800844c <USBD_SetConfig+0x150>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fe ffcf 	bl	80072f6 <USBD_SetClassConfig>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f962 	bl	800862e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2202      	movs	r2, #2
 800836e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008372:	e065      	b.n	8008440 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa38 	bl	80087ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2203      	movs	r2, #3
 800837e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008382:	e05d      	b.n	8008440 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fa30 	bl	80087ea <USBD_CtlSendStatus>
      break;
 800838a:	e059      	b.n	8008440 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800838c:	4b2f      	ldr	r3, [pc, #188]	@ (800844c <USBD_SetConfig+0x150>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d112      	bne.n	80083ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800839c:	4b2b      	ldr	r3, [pc, #172]	@ (800844c <USBD_SetConfig+0x150>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083a6:	4b29      	ldr	r3, [pc, #164]	@ (800844c <USBD_SetConfig+0x150>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fe ffbe 	bl	800732e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa19 	bl	80087ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083b8:	e042      	b.n	8008440 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083ba:	4b24      	ldr	r3, [pc, #144]	@ (800844c <USBD_SetConfig+0x150>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d02a      	beq.n	800841e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7fe ffac 	bl	800732e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083d6:	4b1d      	ldr	r3, [pc, #116]	@ (800844c <USBD_SetConfig+0x150>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083e0:	4b1a      	ldr	r3, [pc, #104]	@ (800844c <USBD_SetConfig+0x150>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fe ff85 	bl	80072f6 <USBD_SetClassConfig>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00f      	beq.n	8008416 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f918 	bl	800862e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fe ff91 	bl	800732e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008414:	e014      	b.n	8008440 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f9e7 	bl	80087ea <USBD_CtlSendStatus>
      break;
 800841c:	e010      	b.n	8008440 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f9e3 	bl	80087ea <USBD_CtlSendStatus>
      break;
 8008424:	e00c      	b.n	8008440 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f900 	bl	800862e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800842e:	4b07      	ldr	r3, [pc, #28]	@ (800844c <USBD_SetConfig+0x150>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7fe ff7a 	bl	800732e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	73fb      	strb	r3, [r7, #15]
      break;
 800843e:	bf00      	nop
  }

  return ret;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200002bc 	.word	0x200002bc

08008450 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	88db      	ldrh	r3, [r3, #6]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d004      	beq.n	800846c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f8e2 	bl	800862e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800846a:	e023      	b.n	80084b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b02      	cmp	r3, #2
 8008476:	dc02      	bgt.n	800847e <USBD_GetConfig+0x2e>
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc03      	bgt.n	8008484 <USBD_GetConfig+0x34>
 800847c:	e015      	b.n	80084aa <USBD_GetConfig+0x5a>
 800847e:	2b03      	cmp	r3, #3
 8008480:	d00b      	beq.n	800849a <USBD_GetConfig+0x4a>
 8008482:	e012      	b.n	80084aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3308      	adds	r3, #8
 800848e:	2201      	movs	r2, #1
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f948 	bl	8008728 <USBD_CtlSendData>
        break;
 8008498:	e00c      	b.n	80084b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3304      	adds	r3, #4
 800849e:	2201      	movs	r2, #1
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f940 	bl	8008728 <USBD_CtlSendData>
        break;
 80084a8:	e004      	b.n	80084b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8be 	bl	800862e <USBD_CtlError>
        break;
 80084b2:	bf00      	nop
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d81e      	bhi.n	8008512 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	88db      	ldrh	r3, [r3, #6]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d004      	beq.n	80084e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8a5 	bl	800862e <USBD_CtlError>
        break;
 80084e4:	e01a      	b.n	800851c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f043 0202 	orr.w	r2, r3, #2
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	330c      	adds	r3, #12
 8008506:	2202      	movs	r2, #2
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f90c 	bl	8008728 <USBD_CtlSendData>
      break;
 8008510:	e004      	b.n	800851c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f88a 	bl	800862e <USBD_CtlError>
      break;
 800851a:	bf00      	nop
  }
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d107      	bne.n	8008546 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f953 	bl	80087ea <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008544:	e013      	b.n	800856e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d10b      	bne.n	8008566 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	889b      	ldrh	r3, [r3, #4]
 8008552:	0a1b      	lsrs	r3, r3, #8
 8008554:	b29b      	uxth	r3, r3
 8008556:	b2da      	uxtb	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f943 	bl	80087ea <USBD_CtlSendStatus>
}
 8008564:	e003      	b.n	800856e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f860 	bl	800862e <USBD_CtlError>
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008586:	b2db      	uxtb	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	2b02      	cmp	r3, #2
 800858c:	d80b      	bhi.n	80085a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d10c      	bne.n	80085b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f923 	bl	80087ea <USBD_CtlSendStatus>
      }
      break;
 80085a4:	e004      	b.n	80085b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f840 	bl	800862e <USBD_CtlError>
      break;
 80085ae:	e000      	b.n	80085b2 <USBD_ClrFeature+0x3c>
      break;
 80085b0:	bf00      	nop
  }
}
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	781a      	ldrb	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f7ff fa3f 	bl	8007a68 <SWAPBYTE>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3301      	adds	r3, #1
 80085f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3301      	adds	r3, #1
 80085fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff fa32 	bl	8007a68 <SWAPBYTE>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7ff fa25 	bl	8007a68 <SWAPBYTE>
 800861e:	4603      	mov	r3, r0
 8008620:	461a      	mov	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	80da      	strh	r2, [r3, #6]
}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008638:	2180      	movs	r1, #128	@ 0x80
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fcea 	bl	8009014 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008640:	2100      	movs	r1, #0
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fce6 	bl	8009014 <USBD_LL_StallEP>
}
 8008648:	bf00      	nop
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d042      	beq.n	80086ec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800866a:	6938      	ldr	r0, [r7, #16]
 800866c:	f000 f842 	bl	80086f4 <USBD_GetLen>
 8008670:	4603      	mov	r3, r0
 8008672:	3301      	adds	r3, #1
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800867a:	d808      	bhi.n	800868e <USBD_GetString+0x3e>
 800867c:	6938      	ldr	r0, [r7, #16]
 800867e:	f000 f839 	bl	80086f4 <USBD_GetLen>
 8008682:	4603      	mov	r3, r0
 8008684:	3301      	adds	r3, #1
 8008686:	b29b      	uxth	r3, r3
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	e001      	b.n	8008692 <USBD_GetString+0x42>
 800868e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	4413      	add	r3, r2
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7812      	ldrb	r2, [r2, #0]
 80086a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	3301      	adds	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4413      	add	r3, r2
 80086ae:	2203      	movs	r2, #3
 80086b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	3301      	adds	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086b8:	e013      	b.n	80086e2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	4413      	add	r3, r2
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	7812      	ldrb	r2, [r2, #0]
 80086c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3301      	adds	r3, #1
 80086ca:	613b      	str	r3, [r7, #16]
    idx++;
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	3301      	adds	r3, #1
 80086d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	4413      	add	r3, r2
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
    idx++;
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	3301      	adds	r3, #1
 80086e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e7      	bne.n	80086ba <USBD_GetString+0x6a>
 80086ea:	e000      	b.n	80086ee <USBD_GetString+0x9e>
    return;
 80086ec:	bf00      	nop
  }
}
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008704:	e005      	b.n	8008712 <USBD_GetLen+0x1e>
  {
    len++;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	3301      	adds	r3, #1
 800870a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	3301      	adds	r3, #1
 8008710:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f5      	bne.n	8008706 <USBD_GetLen+0x12>
  }

  return len;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2202      	movs	r2, #2
 8008738:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	2100      	movs	r1, #0
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 fce6 	bl	8009126 <USBD_LL_Transmit>

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	2100      	movs	r1, #0
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fcd5 	bl	8009126 <USBD_LL_Transmit>

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2203      	movs	r2, #3
 8008796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	2100      	movs	r1, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fcd5 	bl	8009168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	2100      	movs	r1, #0
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fcc4 	bl	8009168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2204      	movs	r2, #4
 80087f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087fa:	2300      	movs	r3, #0
 80087fc:	2200      	movs	r2, #0
 80087fe:	2100      	movs	r1, #0
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fc90 	bl	8009126 <USBD_LL_Transmit>

  return USBD_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2205      	movs	r2, #5
 800881c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008820:	2300      	movs	r3, #0
 8008822:	2200      	movs	r2, #0
 8008824:	2100      	movs	r1, #0
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fc9e 	bl	8009168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800883c:	2200      	movs	r2, #0
 800883e:	4912      	ldr	r1, [pc, #72]	@ (8008888 <MX_USB_DEVICE_Init+0x50>)
 8008840:	4812      	ldr	r0, [pc, #72]	@ (800888c <MX_USB_DEVICE_Init+0x54>)
 8008842:	f7fe fcdb 	bl	80071fc <USBD_Init>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800884c:	f7f8 fd78 	bl	8001340 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008850:	490f      	ldr	r1, [pc, #60]	@ (8008890 <MX_USB_DEVICE_Init+0x58>)
 8008852:	480e      	ldr	r0, [pc, #56]	@ (800888c <MX_USB_DEVICE_Init+0x54>)
 8008854:	f7fe fd02 	bl	800725c <USBD_RegisterClass>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800885e:	f7f8 fd6f 	bl	8001340 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008862:	490c      	ldr	r1, [pc, #48]	@ (8008894 <MX_USB_DEVICE_Init+0x5c>)
 8008864:	4809      	ldr	r0, [pc, #36]	@ (800888c <MX_USB_DEVICE_Init+0x54>)
 8008866:	f7fe fbf9 	bl	800705c <USBD_CDC_RegisterInterface>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008870:	f7f8 fd66 	bl	8001340 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008874:	4805      	ldr	r0, [pc, #20]	@ (800888c <MX_USB_DEVICE_Init+0x54>)
 8008876:	f7fe fd27 	bl	80072c8 <USBD_Start>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008880:	f7f8 fd5e 	bl	8001340 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008884:	bf00      	nop
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200000c0 	.word	0x200000c0
 800888c:	200002c0 	.word	0x200002c0
 8008890:	2000002c 	.word	0x2000002c
 8008894:	200000ac 	.word	0x200000ac

08008898 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800889c:	2200      	movs	r2, #0
 800889e:	4905      	ldr	r1, [pc, #20]	@ (80088b4 <CDC_Init_FS+0x1c>)
 80088a0:	4805      	ldr	r0, [pc, #20]	@ (80088b8 <CDC_Init_FS+0x20>)
 80088a2:	f7fe fbf5 	bl	8007090 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088a6:	4905      	ldr	r1, [pc, #20]	@ (80088bc <CDC_Init_FS+0x24>)
 80088a8:	4803      	ldr	r0, [pc, #12]	@ (80088b8 <CDC_Init_FS+0x20>)
 80088aa:	f7fe fc13 	bl	80070d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20000d9c 	.word	0x20000d9c
 80088b8:	200002c0 	.word	0x200002c0
 80088bc:	2000059c 	.word	0x2000059c

080088c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
 80088dc:	4613      	mov	r3, r2
 80088de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	2b23      	cmp	r3, #35	@ 0x23
 80088e4:	d84a      	bhi.n	800897c <CDC_Control_FS+0xac>
 80088e6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ec <CDC_Control_FS+0x1c>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	0800897d 	.word	0x0800897d
 80088f0:	0800897d 	.word	0x0800897d
 80088f4:	0800897d 	.word	0x0800897d
 80088f8:	0800897d 	.word	0x0800897d
 80088fc:	0800897d 	.word	0x0800897d
 8008900:	0800897d 	.word	0x0800897d
 8008904:	0800897d 	.word	0x0800897d
 8008908:	0800897d 	.word	0x0800897d
 800890c:	0800897d 	.word	0x0800897d
 8008910:	0800897d 	.word	0x0800897d
 8008914:	0800897d 	.word	0x0800897d
 8008918:	0800897d 	.word	0x0800897d
 800891c:	0800897d 	.word	0x0800897d
 8008920:	0800897d 	.word	0x0800897d
 8008924:	0800897d 	.word	0x0800897d
 8008928:	0800897d 	.word	0x0800897d
 800892c:	0800897d 	.word	0x0800897d
 8008930:	0800897d 	.word	0x0800897d
 8008934:	0800897d 	.word	0x0800897d
 8008938:	0800897d 	.word	0x0800897d
 800893c:	0800897d 	.word	0x0800897d
 8008940:	0800897d 	.word	0x0800897d
 8008944:	0800897d 	.word	0x0800897d
 8008948:	0800897d 	.word	0x0800897d
 800894c:	0800897d 	.word	0x0800897d
 8008950:	0800897d 	.word	0x0800897d
 8008954:	0800897d 	.word	0x0800897d
 8008958:	0800897d 	.word	0x0800897d
 800895c:	0800897d 	.word	0x0800897d
 8008960:	0800897d 	.word	0x0800897d
 8008964:	0800897d 	.word	0x0800897d
 8008968:	0800897d 	.word	0x0800897d
 800896c:	0800897d 	.word	0x0800897d
 8008970:	0800897d 	.word	0x0800897d
 8008974:	0800897d 	.word	0x0800897d
 8008978:	0800897d 	.word	0x0800897d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800897c:	bf00      	nop
  }

  return (USBD_OK);
 800897e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4805      	ldr	r0, [pc, #20]	@ (80089b0 <CDC_Receive_FS+0x24>)
 800899a:	f7fe fb9b 	bl	80070d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800899e:	4804      	ldr	r0, [pc, #16]	@ (80089b0 <CDC_Receive_FS+0x24>)
 80089a0:	f7fe fbf6 	bl	8007190 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	200002c0 	.word	0x200002c0

080089b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089c4:	4b0d      	ldr	r3, [pc, #52]	@ (80089fc <CDC_Transmit_FS+0x48>)
 80089c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e00b      	b.n	80089f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089da:	887b      	ldrh	r3, [r7, #2]
 80089dc:	461a      	mov	r2, r3
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	4806      	ldr	r0, [pc, #24]	@ (80089fc <CDC_Transmit_FS+0x48>)
 80089e2:	f7fe fb55 	bl	8007090 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089e6:	4805      	ldr	r0, [pc, #20]	@ (80089fc <CDC_Transmit_FS+0x48>)
 80089e8:	f7fe fb92 	bl	8007110 <USBD_CDC_TransmitPacket>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200002c0 	.word	0x200002c0

08008a00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
	...

08008a24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2212      	movs	r2, #18
 8008a34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a36:	4b03      	ldr	r3, [pc, #12]	@ (8008a44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	200000dc 	.word	0x200000dc

08008a48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2204      	movs	r2, #4
 8008a58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a5a:	4b03      	ldr	r3, [pc, #12]	@ (8008a68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	200000f0 	.word	0x200000f0

08008a6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	6039      	str	r1, [r7, #0]
 8008a76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4907      	ldr	r1, [pc, #28]	@ (8008aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a82:	4808      	ldr	r0, [pc, #32]	@ (8008aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a84:	f7ff fde4 	bl	8008650 <USBD_GetString>
 8008a88:	e004      	b.n	8008a94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	4904      	ldr	r1, [pc, #16]	@ (8008aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a8e:	4805      	ldr	r0, [pc, #20]	@ (8008aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a90:	f7ff fdde 	bl	8008650 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a94:	4b02      	ldr	r3, [pc, #8]	@ (8008aa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	2000159c 	.word	0x2000159c
 8008aa4:	08009be4 	.word	0x08009be4

08008aa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	4904      	ldr	r1, [pc, #16]	@ (8008ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ab8:	4804      	ldr	r0, [pc, #16]	@ (8008acc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008aba:	f7ff fdc9 	bl	8008650 <USBD_GetString>
  return USBD_StrDesc;
 8008abe:	4b02      	ldr	r3, [pc, #8]	@ (8008ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	2000159c 	.word	0x2000159c
 8008acc:	08009bfc 	.word	0x08009bfc

08008ad0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	221a      	movs	r2, #26
 8008ae0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ae2:	f000 f843 	bl	8008b6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ae6:	4b02      	ldr	r3, [pc, #8]	@ (8008af0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	200000f4 	.word	0x200000f4

08008af4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d105      	bne.n	8008b12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4907      	ldr	r1, [pc, #28]	@ (8008b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b0a:	4808      	ldr	r0, [pc, #32]	@ (8008b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b0c:	f7ff fda0 	bl	8008650 <USBD_GetString>
 8008b10:	e004      	b.n	8008b1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	4904      	ldr	r1, [pc, #16]	@ (8008b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b16:	4805      	ldr	r0, [pc, #20]	@ (8008b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b18:	f7ff fd9a 	bl	8008650 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b1c:	4b02      	ldr	r3, [pc, #8]	@ (8008b28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	2000159c 	.word	0x2000159c
 8008b2c:	08009c10 	.word	0x08009c10

08008b30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4907      	ldr	r1, [pc, #28]	@ (8008b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b46:	4808      	ldr	r0, [pc, #32]	@ (8008b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b48:	f7ff fd82 	bl	8008650 <USBD_GetString>
 8008b4c:	e004      	b.n	8008b58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4904      	ldr	r1, [pc, #16]	@ (8008b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b52:	4805      	ldr	r0, [pc, #20]	@ (8008b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b54:	f7ff fd7c 	bl	8008650 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b58:	4b02      	ldr	r3, [pc, #8]	@ (8008b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	2000159c 	.word	0x2000159c
 8008b68:	08009c1c 	.word	0x08009c1c

08008b6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b72:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb0 <Get_SerialNum+0x44>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b78:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb4 <Get_SerialNum+0x48>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb8 <Get_SerialNum+0x4c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d009      	beq.n	8008ba6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b92:	2208      	movs	r2, #8
 8008b94:	4909      	ldr	r1, [pc, #36]	@ (8008bbc <Get_SerialNum+0x50>)
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f814 	bl	8008bc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	4908      	ldr	r1, [pc, #32]	@ (8008bc0 <Get_SerialNum+0x54>)
 8008ba0:	68b8      	ldr	r0, [r7, #8]
 8008ba2:	f000 f80f 	bl	8008bc4 <IntToUnicode>
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	1fff7a10 	.word	0x1fff7a10
 8008bb4:	1fff7a14 	.word	0x1fff7a14
 8008bb8:	1fff7a18 	.word	0x1fff7a18
 8008bbc:	200000f6 	.word	0x200000f6
 8008bc0:	20000106 	.word	0x20000106

08008bc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]
 8008bda:	e027      	b.n	8008c2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	0f1b      	lsrs	r3, r3, #28
 8008be0:	2b09      	cmp	r3, #9
 8008be2:	d80b      	bhi.n	8008bfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	0f1b      	lsrs	r3, r3, #28
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	440b      	add	r3, r1
 8008bf4:	3230      	adds	r2, #48	@ 0x30
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	e00a      	b.n	8008c12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	0f1b      	lsrs	r3, r3, #28
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	4619      	mov	r1, r3
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	440b      	add	r3, r1
 8008c0c:	3237      	adds	r2, #55	@ 0x37
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4413      	add	r3, r2
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
 8008c2c:	7dfa      	ldrb	r2, [r7, #23]
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d3d3      	bcc.n	8008bdc <IntToUnicode+0x18>
  }
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08a      	sub	sp, #40	@ 0x28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c4c:	f107 0314 	add.w	r3, r7, #20
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	605a      	str	r2, [r3, #4]
 8008c56:	609a      	str	r2, [r3, #8]
 8008c58:	60da      	str	r2, [r3, #12]
 8008c5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c64:	d13a      	bne.n	8008cdc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c66:	2300      	movs	r3, #0
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008c70:	f043 0301 	orr.w	r3, r3, #1
 8008c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c76:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c90:	2303      	movs	r3, #3
 8008c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c94:	230a      	movs	r3, #10
 8008c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c98:	f107 0314 	add.w	r3, r7, #20
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4812      	ldr	r0, [pc, #72]	@ (8008ce8 <HAL_PCD_MspInit+0xa4>)
 8008ca0:	f7f9 fada 	bl	8002258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cae:	6353      	str	r3, [r2, #52]	@ 0x34
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008cba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8008cc0:	4b08      	ldr	r3, [pc, #32]	@ (8008ce4 <HAL_PCD_MspInit+0xa0>)
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	2043      	movs	r0, #67	@ 0x43
 8008cd2:	f7f9 fa8a 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cd6:	2043      	movs	r0, #67	@ 0x43
 8008cd8:	f7f9 faa3 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cdc:	bf00      	nop
 8008cde:	3728      	adds	r7, #40	@ 0x28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40020000 	.word	0x40020000

08008cec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe fb2d 	bl	8007362 <USBD_LL_SetupStage>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4613      	mov	r3, r2
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f7fe fb67 	bl	800740c <USBD_LL_DataOutStage>
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d58:	78fa      	ldrb	r2, [r7, #3]
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	3320      	adds	r3, #32
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	78fb      	ldrb	r3, [r7, #3]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f7fe fc09 	bl	8007584 <USBD_LL_DataInStage>
}
 8008d72:	bf00      	nop
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe fd4d 	bl	8007828 <USBD_LL_SOF>
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	79db      	ldrb	r3, [r3, #7]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d001      	beq.n	8008dae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008daa:	f7f8 fac9 	bl	8001340 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008db4:	7bfa      	ldrb	r2, [r7, #15]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fcf1 	bl	80077a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fe fc98 	bl	80076fa <USBD_LL_Reset>
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fcec 	bl	80077c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6812      	ldr	r2, [r2, #0]
 8008df6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7adb      	ldrb	r3, [r3, #11]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e08:	4b04      	ldr	r3, [pc, #16]	@ (8008e1c <HAL_PCD_SuspendCallback+0x48>)
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	4a03      	ldr	r2, [pc, #12]	@ (8008e1c <HAL_PCD_SuspendCallback+0x48>)
 8008e0e:	f043 0306 	orr.w	r3, r3, #6
 8008e12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	e000ed00 	.word	0xe000ed00

08008e20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fce2 	bl	80077f8 <USBD_LL_Resume>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fd3a 	bl	80078cc <USBD_LL_IsoOUTIncomplete>
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e72:	78fa      	ldrb	r2, [r7, #3]
 8008e74:	4611      	mov	r1, r2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fcf6 	bl	8007868 <USBD_LL_IsoINIncomplete>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fd4c 	bl	8007930 <USBD_LL_DevConnected>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fd49 	bl	8007946 <USBD_LL_DevDisconnected>
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d13c      	bne.n	8008f46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ecc:	4a20      	ldr	r2, [pc, #128]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008ed8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008edc:	4b1c      	ldr	r3, [pc, #112]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008ede:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ee2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008eea:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008eec:	2202      	movs	r2, #2
 8008eee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ef0:	4b17      	ldr	r3, [pc, #92]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ef6:	4b16      	ldr	r3, [pc, #88]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008ef8:	2202      	movs	r2, #2
 8008efa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008efc:	4b14      	ldr	r3, [pc, #80]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f02:	4b13      	ldr	r3, [pc, #76]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f08:	4b11      	ldr	r3, [pc, #68]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f0e:	4b10      	ldr	r3, [pc, #64]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f14:	4b0e      	ldr	r3, [pc, #56]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f1a:	480d      	ldr	r0, [pc, #52]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f1c:	f7f9 fc98 	bl	8002850 <HAL_PCD_Init>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f26:	f7f8 fa0b 	bl	8001340 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f2a:	2180      	movs	r1, #128	@ 0x80
 8008f2c:	4808      	ldr	r0, [pc, #32]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f2e:	f7fa fec4 	bl	8003cba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f32:	2240      	movs	r2, #64	@ 0x40
 8008f34:	2100      	movs	r1, #0
 8008f36:	4806      	ldr	r0, [pc, #24]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f38:	f7fa fe78 	bl	8003c2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f3c:	2280      	movs	r2, #128	@ 0x80
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4803      	ldr	r0, [pc, #12]	@ (8008f50 <USBD_LL_Init+0x94>)
 8008f42:	f7fa fe73 	bl	8003c2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	2000179c 	.word	0x2000179c

08008f54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7f9 fd7f 	bl	8002a6e <HAL_PCD_Start>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 f942 	bl	8009200 <USBD_Get_USB_Status>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	4608      	mov	r0, r1
 8008f94:	4611      	mov	r1, r2
 8008f96:	461a      	mov	r2, r3
 8008f98:	4603      	mov	r3, r0
 8008f9a:	70fb      	strb	r3, [r7, #3]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70bb      	strb	r3, [r7, #2]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fb2:	78bb      	ldrb	r3, [r7, #2]
 8008fb4:	883a      	ldrh	r2, [r7, #0]
 8008fb6:	78f9      	ldrb	r1, [r7, #3]
 8008fb8:	f7fa fa53 	bl	8003462 <HAL_PCD_EP_Open>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 f91c 	bl	8009200 <USBD_Get_USB_Status>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fa fa9e 	bl	8003536 <HAL_PCD_EP_Close>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f8fd 	bl	8009200 <USBD_Get_USB_Status>
 8009006:	4603      	mov	r3, r0
 8009008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800900a:	7bbb      	ldrb	r3, [r7, #14]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7fa fb56 	bl	80036e4 <HAL_PCD_EP_SetStall>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f8de 	bl	8009200 <USBD_Get_USB_Status>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800906c:	78fa      	ldrb	r2, [r7, #3]
 800906e:	4611      	mov	r1, r2
 8009070:	4618      	mov	r0, r3
 8009072:	f7fa fb9a 	bl	80037aa <HAL_PCD_EP_ClrStall>
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	4618      	mov	r0, r3
 800907e:	f000 f8bf 	bl	8009200 <USBD_Get_USB_Status>
 8009082:	4603      	mov	r3, r0
 8009084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009086:	7bbb      	ldrb	r3, [r7, #14]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	da0b      	bge.n	80090c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	4613      	mov	r3, r2
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	440b      	add	r3, r1
 80090be:	3316      	adds	r3, #22
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	e00b      	b.n	80090dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80090da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7fa f987 	bl	800341a <HAL_PCD_SetAddress>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f874 	bl	8009200 <USBD_Get_USB_Status>
 8009118:	4603      	mov	r3, r0
 800911a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911c:	7bbb      	ldrb	r3, [r7, #14]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	603b      	str	r3, [r7, #0]
 8009132:	460b      	mov	r3, r1
 8009134:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009144:	7af9      	ldrb	r1, [r7, #11]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	f7fa fa91 	bl	8003670 <HAL_PCD_EP_Transmit>
 800914e:	4603      	mov	r3, r0
 8009150:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f853 	bl	8009200 <USBD_Get_USB_Status>
 800915a:	4603      	mov	r3, r0
 800915c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800915e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	607a      	str	r2, [r7, #4]
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	460b      	mov	r3, r1
 8009176:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009186:	7af9      	ldrb	r1, [r7, #11]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	f7fa fa1d 	bl	80035ca <HAL_PCD_EP_Receive>
 8009190:	4603      	mov	r3, r0
 8009192:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 f832 	bl	8009200 <USBD_Get_USB_Status>
 800919c:	4603      	mov	r3, r0
 800919e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fa fa3d 	bl	8003640 <HAL_PCD_EP_GetRxCount>
 80091c6:	4603      	mov	r3, r0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091d8:	4b03      	ldr	r3, [pc, #12]	@ (80091e8 <USBD_static_malloc+0x18>)
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20001c80 	.word	0x20001c80

080091ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]

}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d817      	bhi.n	8009244 <USBD_Get_USB_Status+0x44>
 8009214:	a201      	add	r2, pc, #4	@ (adr r2, 800921c <USBD_Get_USB_Status+0x1c>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	0800922d 	.word	0x0800922d
 8009220:	08009233 	.word	0x08009233
 8009224:	08009239 	.word	0x08009239
 8009228:	0800923f 	.word	0x0800923f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
    break;
 8009230:	e00b      	b.n	800924a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009232:	2303      	movs	r3, #3
 8009234:	73fb      	strb	r3, [r7, #15]
    break;
 8009236:	e008      	b.n	800924a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009238:	2301      	movs	r3, #1
 800923a:	73fb      	strb	r3, [r7, #15]
    break;
 800923c:	e005      	b.n	800924a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800923e:	2303      	movs	r3, #3
 8009240:	73fb      	strb	r3, [r7, #15]
    break;
 8009242:	e002      	b.n	800924a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009244:	2303      	movs	r3, #3
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	bf00      	nop
  }
  return usb_status;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <sniprintf>:
 8009258:	b40c      	push	{r2, r3}
 800925a:	b530      	push	{r4, r5, lr}
 800925c:	4b17      	ldr	r3, [pc, #92]	@ (80092bc <sniprintf+0x64>)
 800925e:	1e0c      	subs	r4, r1, #0
 8009260:	681d      	ldr	r5, [r3, #0]
 8009262:	b09d      	sub	sp, #116	@ 0x74
 8009264:	da08      	bge.n	8009278 <sniprintf+0x20>
 8009266:	238b      	movs	r3, #139	@ 0x8b
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	b01d      	add	sp, #116	@ 0x74
 8009270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009274:	b002      	add	sp, #8
 8009276:	4770      	bx	lr
 8009278:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800927c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009280:	bf14      	ite	ne
 8009282:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009286:	4623      	moveq	r3, r4
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	9307      	str	r3, [sp, #28]
 800928c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009290:	9002      	str	r0, [sp, #8]
 8009292:	9006      	str	r0, [sp, #24]
 8009294:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009298:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800929a:	ab21      	add	r3, sp, #132	@ 0x84
 800929c:	a902      	add	r1, sp, #8
 800929e:	4628      	mov	r0, r5
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	f000 f995 	bl	80095d0 <_svfiprintf_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	bfbc      	itt	lt
 80092aa:	238b      	movlt	r3, #139	@ 0x8b
 80092ac:	602b      	strlt	r3, [r5, #0]
 80092ae:	2c00      	cmp	r4, #0
 80092b0:	d0dd      	beq.n	800926e <sniprintf+0x16>
 80092b2:	9b02      	ldr	r3, [sp, #8]
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	e7d9      	b.n	800926e <sniprintf+0x16>
 80092ba:	bf00      	nop
 80092bc:	20000110 	.word	0x20000110

080092c0 <memset>:
 80092c0:	4402      	add	r2, r0
 80092c2:	4603      	mov	r3, r0
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d100      	bne.n	80092ca <memset+0xa>
 80092c8:	4770      	bx	lr
 80092ca:	f803 1b01 	strb.w	r1, [r3], #1
 80092ce:	e7f9      	b.n	80092c4 <memset+0x4>

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	@ (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000110 	.word	0x20000110

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	4d0d      	ldr	r5, [pc, #52]	@ (8009314 <__libc_init_array+0x38>)
 80092e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009318 <__libc_init_array+0x3c>)
 80092e2:	1b64      	subs	r4, r4, r5
 80092e4:	10a4      	asrs	r4, r4, #2
 80092e6:	2600      	movs	r6, #0
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	4d0b      	ldr	r5, [pc, #44]	@ (800931c <__libc_init_array+0x40>)
 80092ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009320 <__libc_init_array+0x44>)
 80092f0:	f000 fc66 	bl	8009bc0 <_init>
 80092f4:	1b64      	subs	r4, r4, r5
 80092f6:	10a4      	asrs	r4, r4, #2
 80092f8:	2600      	movs	r6, #0
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	08009c80 	.word	0x08009c80
 8009318:	08009c80 	.word	0x08009c80
 800931c:	08009c80 	.word	0x08009c80
 8009320:	08009c84 	.word	0x08009c84

08009324 <__retarget_lock_acquire_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_release_recursive>:
 8009326:	4770      	bx	lr

08009328 <_free_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4605      	mov	r5, r0
 800932c:	2900      	cmp	r1, #0
 800932e:	d041      	beq.n	80093b4 <_free_r+0x8c>
 8009330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009334:	1f0c      	subs	r4, r1, #4
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfb8      	it	lt
 800933a:	18e4      	addlt	r4, r4, r3
 800933c:	f000 f8e0 	bl	8009500 <__malloc_lock>
 8009340:	4a1d      	ldr	r2, [pc, #116]	@ (80093b8 <_free_r+0x90>)
 8009342:	6813      	ldr	r3, [r2, #0]
 8009344:	b933      	cbnz	r3, 8009354 <_free_r+0x2c>
 8009346:	6063      	str	r3, [r4, #4]
 8009348:	6014      	str	r4, [r2, #0]
 800934a:	4628      	mov	r0, r5
 800934c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009350:	f000 b8dc 	b.w	800950c <__malloc_unlock>
 8009354:	42a3      	cmp	r3, r4
 8009356:	d908      	bls.n	800936a <_free_r+0x42>
 8009358:	6820      	ldr	r0, [r4, #0]
 800935a:	1821      	adds	r1, r4, r0
 800935c:	428b      	cmp	r3, r1
 800935e:	bf01      	itttt	eq
 8009360:	6819      	ldreq	r1, [r3, #0]
 8009362:	685b      	ldreq	r3, [r3, #4]
 8009364:	1809      	addeq	r1, r1, r0
 8009366:	6021      	streq	r1, [r4, #0]
 8009368:	e7ed      	b.n	8009346 <_free_r+0x1e>
 800936a:	461a      	mov	r2, r3
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	b10b      	cbz	r3, 8009374 <_free_r+0x4c>
 8009370:	42a3      	cmp	r3, r4
 8009372:	d9fa      	bls.n	800936a <_free_r+0x42>
 8009374:	6811      	ldr	r1, [r2, #0]
 8009376:	1850      	adds	r0, r2, r1
 8009378:	42a0      	cmp	r0, r4
 800937a:	d10b      	bne.n	8009394 <_free_r+0x6c>
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	4401      	add	r1, r0
 8009380:	1850      	adds	r0, r2, r1
 8009382:	4283      	cmp	r3, r0
 8009384:	6011      	str	r1, [r2, #0]
 8009386:	d1e0      	bne.n	800934a <_free_r+0x22>
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	6053      	str	r3, [r2, #4]
 800938e:	4408      	add	r0, r1
 8009390:	6010      	str	r0, [r2, #0]
 8009392:	e7da      	b.n	800934a <_free_r+0x22>
 8009394:	d902      	bls.n	800939c <_free_r+0x74>
 8009396:	230c      	movs	r3, #12
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	e7d6      	b.n	800934a <_free_r+0x22>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	1821      	adds	r1, r4, r0
 80093a0:	428b      	cmp	r3, r1
 80093a2:	bf04      	itt	eq
 80093a4:	6819      	ldreq	r1, [r3, #0]
 80093a6:	685b      	ldreq	r3, [r3, #4]
 80093a8:	6063      	str	r3, [r4, #4]
 80093aa:	bf04      	itt	eq
 80093ac:	1809      	addeq	r1, r1, r0
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	6054      	str	r4, [r2, #4]
 80093b2:	e7ca      	b.n	800934a <_free_r+0x22>
 80093b4:	bd38      	pop	{r3, r4, r5, pc}
 80093b6:	bf00      	nop
 80093b8:	20001fe4 	.word	0x20001fe4

080093bc <sbrk_aligned>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	4e0f      	ldr	r6, [pc, #60]	@ (80093fc <sbrk_aligned+0x40>)
 80093c0:	460c      	mov	r4, r1
 80093c2:	6831      	ldr	r1, [r6, #0]
 80093c4:	4605      	mov	r5, r0
 80093c6:	b911      	cbnz	r1, 80093ce <sbrk_aligned+0x12>
 80093c8:	f000 fba6 	bl	8009b18 <_sbrk_r>
 80093cc:	6030      	str	r0, [r6, #0]
 80093ce:	4621      	mov	r1, r4
 80093d0:	4628      	mov	r0, r5
 80093d2:	f000 fba1 	bl	8009b18 <_sbrk_r>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d103      	bne.n	80093e2 <sbrk_aligned+0x26>
 80093da:	f04f 34ff 	mov.w	r4, #4294967295
 80093de:	4620      	mov	r0, r4
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
 80093e2:	1cc4      	adds	r4, r0, #3
 80093e4:	f024 0403 	bic.w	r4, r4, #3
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d0f8      	beq.n	80093de <sbrk_aligned+0x22>
 80093ec:	1a21      	subs	r1, r4, r0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 fb92 	bl	8009b18 <_sbrk_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d1f2      	bne.n	80093de <sbrk_aligned+0x22>
 80093f8:	e7ef      	b.n	80093da <sbrk_aligned+0x1e>
 80093fa:	bf00      	nop
 80093fc:	20001fe0 	.word	0x20001fe0

08009400 <_malloc_r>:
 8009400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009404:	1ccd      	adds	r5, r1, #3
 8009406:	f025 0503 	bic.w	r5, r5, #3
 800940a:	3508      	adds	r5, #8
 800940c:	2d0c      	cmp	r5, #12
 800940e:	bf38      	it	cc
 8009410:	250c      	movcc	r5, #12
 8009412:	2d00      	cmp	r5, #0
 8009414:	4606      	mov	r6, r0
 8009416:	db01      	blt.n	800941c <_malloc_r+0x1c>
 8009418:	42a9      	cmp	r1, r5
 800941a:	d904      	bls.n	8009426 <_malloc_r+0x26>
 800941c:	230c      	movs	r3, #12
 800941e:	6033      	str	r3, [r6, #0]
 8009420:	2000      	movs	r0, #0
 8009422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094fc <_malloc_r+0xfc>
 800942a:	f000 f869 	bl	8009500 <__malloc_lock>
 800942e:	f8d8 3000 	ldr.w	r3, [r8]
 8009432:	461c      	mov	r4, r3
 8009434:	bb44      	cbnz	r4, 8009488 <_malloc_r+0x88>
 8009436:	4629      	mov	r1, r5
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff ffbf 	bl	80093bc <sbrk_aligned>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	4604      	mov	r4, r0
 8009442:	d158      	bne.n	80094f6 <_malloc_r+0xf6>
 8009444:	f8d8 4000 	ldr.w	r4, [r8]
 8009448:	4627      	mov	r7, r4
 800944a:	2f00      	cmp	r7, #0
 800944c:	d143      	bne.n	80094d6 <_malloc_r+0xd6>
 800944e:	2c00      	cmp	r4, #0
 8009450:	d04b      	beq.n	80094ea <_malloc_r+0xea>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	4639      	mov	r1, r7
 8009456:	4630      	mov	r0, r6
 8009458:	eb04 0903 	add.w	r9, r4, r3
 800945c:	f000 fb5c 	bl	8009b18 <_sbrk_r>
 8009460:	4581      	cmp	r9, r0
 8009462:	d142      	bne.n	80094ea <_malloc_r+0xea>
 8009464:	6821      	ldr	r1, [r4, #0]
 8009466:	1a6d      	subs	r5, r5, r1
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff ffa6 	bl	80093bc <sbrk_aligned>
 8009470:	3001      	adds	r0, #1
 8009472:	d03a      	beq.n	80094ea <_malloc_r+0xea>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	442b      	add	r3, r5
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	f8d8 3000 	ldr.w	r3, [r8]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	bb62      	cbnz	r2, 80094dc <_malloc_r+0xdc>
 8009482:	f8c8 7000 	str.w	r7, [r8]
 8009486:	e00f      	b.n	80094a8 <_malloc_r+0xa8>
 8009488:	6822      	ldr	r2, [r4, #0]
 800948a:	1b52      	subs	r2, r2, r5
 800948c:	d420      	bmi.n	80094d0 <_malloc_r+0xd0>
 800948e:	2a0b      	cmp	r2, #11
 8009490:	d917      	bls.n	80094c2 <_malloc_r+0xc2>
 8009492:	1961      	adds	r1, r4, r5
 8009494:	42a3      	cmp	r3, r4
 8009496:	6025      	str	r5, [r4, #0]
 8009498:	bf18      	it	ne
 800949a:	6059      	strne	r1, [r3, #4]
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	bf08      	it	eq
 80094a0:	f8c8 1000 	streq.w	r1, [r8]
 80094a4:	5162      	str	r2, [r4, r5]
 80094a6:	604b      	str	r3, [r1, #4]
 80094a8:	4630      	mov	r0, r6
 80094aa:	f000 f82f 	bl	800950c <__malloc_unlock>
 80094ae:	f104 000b 	add.w	r0, r4, #11
 80094b2:	1d23      	adds	r3, r4, #4
 80094b4:	f020 0007 	bic.w	r0, r0, #7
 80094b8:	1ac2      	subs	r2, r0, r3
 80094ba:	bf1c      	itt	ne
 80094bc:	1a1b      	subne	r3, r3, r0
 80094be:	50a3      	strne	r3, [r4, r2]
 80094c0:	e7af      	b.n	8009422 <_malloc_r+0x22>
 80094c2:	6862      	ldr	r2, [r4, #4]
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	bf0c      	ite	eq
 80094c8:	f8c8 2000 	streq.w	r2, [r8]
 80094cc:	605a      	strne	r2, [r3, #4]
 80094ce:	e7eb      	b.n	80094a8 <_malloc_r+0xa8>
 80094d0:	4623      	mov	r3, r4
 80094d2:	6864      	ldr	r4, [r4, #4]
 80094d4:	e7ae      	b.n	8009434 <_malloc_r+0x34>
 80094d6:	463c      	mov	r4, r7
 80094d8:	687f      	ldr	r7, [r7, #4]
 80094da:	e7b6      	b.n	800944a <_malloc_r+0x4a>
 80094dc:	461a      	mov	r2, r3
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	d1fb      	bne.n	80094dc <_malloc_r+0xdc>
 80094e4:	2300      	movs	r3, #0
 80094e6:	6053      	str	r3, [r2, #4]
 80094e8:	e7de      	b.n	80094a8 <_malloc_r+0xa8>
 80094ea:	230c      	movs	r3, #12
 80094ec:	6033      	str	r3, [r6, #0]
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 f80c 	bl	800950c <__malloc_unlock>
 80094f4:	e794      	b.n	8009420 <_malloc_r+0x20>
 80094f6:	6005      	str	r5, [r0, #0]
 80094f8:	e7d6      	b.n	80094a8 <_malloc_r+0xa8>
 80094fa:	bf00      	nop
 80094fc:	20001fe4 	.word	0x20001fe4

08009500 <__malloc_lock>:
 8009500:	4801      	ldr	r0, [pc, #4]	@ (8009508 <__malloc_lock+0x8>)
 8009502:	f7ff bf0f 	b.w	8009324 <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	20001fdc 	.word	0x20001fdc

0800950c <__malloc_unlock>:
 800950c:	4801      	ldr	r0, [pc, #4]	@ (8009514 <__malloc_unlock+0x8>)
 800950e:	f7ff bf0a 	b.w	8009326 <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	20001fdc 	.word	0x20001fdc

08009518 <__ssputs_r>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	688e      	ldr	r6, [r1, #8]
 800951e:	461f      	mov	r7, r3
 8009520:	42be      	cmp	r6, r7
 8009522:	680b      	ldr	r3, [r1, #0]
 8009524:	4682      	mov	sl, r0
 8009526:	460c      	mov	r4, r1
 8009528:	4690      	mov	r8, r2
 800952a:	d82d      	bhi.n	8009588 <__ssputs_r+0x70>
 800952c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009530:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009534:	d026      	beq.n	8009584 <__ssputs_r+0x6c>
 8009536:	6965      	ldr	r5, [r4, #20]
 8009538:	6909      	ldr	r1, [r1, #16]
 800953a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800953e:	eba3 0901 	sub.w	r9, r3, r1
 8009542:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009546:	1c7b      	adds	r3, r7, #1
 8009548:	444b      	add	r3, r9
 800954a:	106d      	asrs	r5, r5, #1
 800954c:	429d      	cmp	r5, r3
 800954e:	bf38      	it	cc
 8009550:	461d      	movcc	r5, r3
 8009552:	0553      	lsls	r3, r2, #21
 8009554:	d527      	bpl.n	80095a6 <__ssputs_r+0x8e>
 8009556:	4629      	mov	r1, r5
 8009558:	f7ff ff52 	bl	8009400 <_malloc_r>
 800955c:	4606      	mov	r6, r0
 800955e:	b360      	cbz	r0, 80095ba <__ssputs_r+0xa2>
 8009560:	6921      	ldr	r1, [r4, #16]
 8009562:	464a      	mov	r2, r9
 8009564:	f000 fae8 	bl	8009b38 <memcpy>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800956e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	6126      	str	r6, [r4, #16]
 8009576:	6165      	str	r5, [r4, #20]
 8009578:	444e      	add	r6, r9
 800957a:	eba5 0509 	sub.w	r5, r5, r9
 800957e:	6026      	str	r6, [r4, #0]
 8009580:	60a5      	str	r5, [r4, #8]
 8009582:	463e      	mov	r6, r7
 8009584:	42be      	cmp	r6, r7
 8009586:	d900      	bls.n	800958a <__ssputs_r+0x72>
 8009588:	463e      	mov	r6, r7
 800958a:	6820      	ldr	r0, [r4, #0]
 800958c:	4632      	mov	r2, r6
 800958e:	4641      	mov	r1, r8
 8009590:	f000 faa8 	bl	8009ae4 <memmove>
 8009594:	68a3      	ldr	r3, [r4, #8]
 8009596:	1b9b      	subs	r3, r3, r6
 8009598:	60a3      	str	r3, [r4, #8]
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	4433      	add	r3, r6
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	2000      	movs	r0, #0
 80095a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a6:	462a      	mov	r2, r5
 80095a8:	f000 fad4 	bl	8009b54 <_realloc_r>
 80095ac:	4606      	mov	r6, r0
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d1e0      	bne.n	8009574 <__ssputs_r+0x5c>
 80095b2:	6921      	ldr	r1, [r4, #16]
 80095b4:	4650      	mov	r0, sl
 80095b6:	f7ff feb7 	bl	8009328 <_free_r>
 80095ba:	230c      	movs	r3, #12
 80095bc:	f8ca 3000 	str.w	r3, [sl]
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095c6:	81a3      	strh	r3, [r4, #12]
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295
 80095cc:	e7e9      	b.n	80095a2 <__ssputs_r+0x8a>
	...

080095d0 <_svfiprintf_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	4698      	mov	r8, r3
 80095d6:	898b      	ldrh	r3, [r1, #12]
 80095d8:	061b      	lsls	r3, r3, #24
 80095da:	b09d      	sub	sp, #116	@ 0x74
 80095dc:	4607      	mov	r7, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	d510      	bpl.n	8009606 <_svfiprintf_r+0x36>
 80095e4:	690b      	ldr	r3, [r1, #16]
 80095e6:	b973      	cbnz	r3, 8009606 <_svfiprintf_r+0x36>
 80095e8:	2140      	movs	r1, #64	@ 0x40
 80095ea:	f7ff ff09 	bl	8009400 <_malloc_r>
 80095ee:	6028      	str	r0, [r5, #0]
 80095f0:	6128      	str	r0, [r5, #16]
 80095f2:	b930      	cbnz	r0, 8009602 <_svfiprintf_r+0x32>
 80095f4:	230c      	movs	r3, #12
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	b01d      	add	sp, #116	@ 0x74
 80095fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	2340      	movs	r3, #64	@ 0x40
 8009604:	616b      	str	r3, [r5, #20]
 8009606:	2300      	movs	r3, #0
 8009608:	9309      	str	r3, [sp, #36]	@ 0x24
 800960a:	2320      	movs	r3, #32
 800960c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009610:	f8cd 800c 	str.w	r8, [sp, #12]
 8009614:	2330      	movs	r3, #48	@ 0x30
 8009616:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097b4 <_svfiprintf_r+0x1e4>
 800961a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800961e:	f04f 0901 	mov.w	r9, #1
 8009622:	4623      	mov	r3, r4
 8009624:	469a      	mov	sl, r3
 8009626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800962a:	b10a      	cbz	r2, 8009630 <_svfiprintf_r+0x60>
 800962c:	2a25      	cmp	r2, #37	@ 0x25
 800962e:	d1f9      	bne.n	8009624 <_svfiprintf_r+0x54>
 8009630:	ebba 0b04 	subs.w	fp, sl, r4
 8009634:	d00b      	beq.n	800964e <_svfiprintf_r+0x7e>
 8009636:	465b      	mov	r3, fp
 8009638:	4622      	mov	r2, r4
 800963a:	4629      	mov	r1, r5
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff ff6b 	bl	8009518 <__ssputs_r>
 8009642:	3001      	adds	r0, #1
 8009644:	f000 80a7 	beq.w	8009796 <_svfiprintf_r+0x1c6>
 8009648:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800964a:	445a      	add	r2, fp
 800964c:	9209      	str	r2, [sp, #36]	@ 0x24
 800964e:	f89a 3000 	ldrb.w	r3, [sl]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 809f 	beq.w	8009796 <_svfiprintf_r+0x1c6>
 8009658:	2300      	movs	r3, #0
 800965a:	f04f 32ff 	mov.w	r2, #4294967295
 800965e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009662:	f10a 0a01 	add.w	sl, sl, #1
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	9307      	str	r3, [sp, #28]
 800966a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800966e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009670:	4654      	mov	r4, sl
 8009672:	2205      	movs	r2, #5
 8009674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009678:	484e      	ldr	r0, [pc, #312]	@ (80097b4 <_svfiprintf_r+0x1e4>)
 800967a:	f7f6 fdb9 	bl	80001f0 <memchr>
 800967e:	9a04      	ldr	r2, [sp, #16]
 8009680:	b9d8      	cbnz	r0, 80096ba <_svfiprintf_r+0xea>
 8009682:	06d0      	lsls	r0, r2, #27
 8009684:	bf44      	itt	mi
 8009686:	2320      	movmi	r3, #32
 8009688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800968c:	0711      	lsls	r1, r2, #28
 800968e:	bf44      	itt	mi
 8009690:	232b      	movmi	r3, #43	@ 0x2b
 8009692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009696:	f89a 3000 	ldrb.w	r3, [sl]
 800969a:	2b2a      	cmp	r3, #42	@ 0x2a
 800969c:	d015      	beq.n	80096ca <_svfiprintf_r+0xfa>
 800969e:	9a07      	ldr	r2, [sp, #28]
 80096a0:	4654      	mov	r4, sl
 80096a2:	2000      	movs	r0, #0
 80096a4:	f04f 0c0a 	mov.w	ip, #10
 80096a8:	4621      	mov	r1, r4
 80096aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ae:	3b30      	subs	r3, #48	@ 0x30
 80096b0:	2b09      	cmp	r3, #9
 80096b2:	d94b      	bls.n	800974c <_svfiprintf_r+0x17c>
 80096b4:	b1b0      	cbz	r0, 80096e4 <_svfiprintf_r+0x114>
 80096b6:	9207      	str	r2, [sp, #28]
 80096b8:	e014      	b.n	80096e4 <_svfiprintf_r+0x114>
 80096ba:	eba0 0308 	sub.w	r3, r0, r8
 80096be:	fa09 f303 	lsl.w	r3, r9, r3
 80096c2:	4313      	orrs	r3, r2
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	46a2      	mov	sl, r4
 80096c8:	e7d2      	b.n	8009670 <_svfiprintf_r+0xa0>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	1d19      	adds	r1, r3, #4
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	9103      	str	r1, [sp, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	bfbb      	ittet	lt
 80096d6:	425b      	neglt	r3, r3
 80096d8:	f042 0202 	orrlt.w	r2, r2, #2
 80096dc:	9307      	strge	r3, [sp, #28]
 80096de:	9307      	strlt	r3, [sp, #28]
 80096e0:	bfb8      	it	lt
 80096e2:	9204      	strlt	r2, [sp, #16]
 80096e4:	7823      	ldrb	r3, [r4, #0]
 80096e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80096e8:	d10a      	bne.n	8009700 <_svfiprintf_r+0x130>
 80096ea:	7863      	ldrb	r3, [r4, #1]
 80096ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80096ee:	d132      	bne.n	8009756 <_svfiprintf_r+0x186>
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	1d1a      	adds	r2, r3, #4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	9203      	str	r2, [sp, #12]
 80096f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096fc:	3402      	adds	r4, #2
 80096fe:	9305      	str	r3, [sp, #20]
 8009700:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097c4 <_svfiprintf_r+0x1f4>
 8009704:	7821      	ldrb	r1, [r4, #0]
 8009706:	2203      	movs	r2, #3
 8009708:	4650      	mov	r0, sl
 800970a:	f7f6 fd71 	bl	80001f0 <memchr>
 800970e:	b138      	cbz	r0, 8009720 <_svfiprintf_r+0x150>
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	eba0 000a 	sub.w	r0, r0, sl
 8009716:	2240      	movs	r2, #64	@ 0x40
 8009718:	4082      	lsls	r2, r0
 800971a:	4313      	orrs	r3, r2
 800971c:	3401      	adds	r4, #1
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	4824      	ldr	r0, [pc, #144]	@ (80097b8 <_svfiprintf_r+0x1e8>)
 8009726:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800972a:	2206      	movs	r2, #6
 800972c:	f7f6 fd60 	bl	80001f0 <memchr>
 8009730:	2800      	cmp	r0, #0
 8009732:	d036      	beq.n	80097a2 <_svfiprintf_r+0x1d2>
 8009734:	4b21      	ldr	r3, [pc, #132]	@ (80097bc <_svfiprintf_r+0x1ec>)
 8009736:	bb1b      	cbnz	r3, 8009780 <_svfiprintf_r+0x1b0>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	3307      	adds	r3, #7
 800973c:	f023 0307 	bic.w	r3, r3, #7
 8009740:	3308      	adds	r3, #8
 8009742:	9303      	str	r3, [sp, #12]
 8009744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009746:	4433      	add	r3, r6
 8009748:	9309      	str	r3, [sp, #36]	@ 0x24
 800974a:	e76a      	b.n	8009622 <_svfiprintf_r+0x52>
 800974c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009750:	460c      	mov	r4, r1
 8009752:	2001      	movs	r0, #1
 8009754:	e7a8      	b.n	80096a8 <_svfiprintf_r+0xd8>
 8009756:	2300      	movs	r3, #0
 8009758:	3401      	adds	r4, #1
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	4619      	mov	r1, r3
 800975e:	f04f 0c0a 	mov.w	ip, #10
 8009762:	4620      	mov	r0, r4
 8009764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009768:	3a30      	subs	r2, #48	@ 0x30
 800976a:	2a09      	cmp	r2, #9
 800976c:	d903      	bls.n	8009776 <_svfiprintf_r+0x1a6>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0c6      	beq.n	8009700 <_svfiprintf_r+0x130>
 8009772:	9105      	str	r1, [sp, #20]
 8009774:	e7c4      	b.n	8009700 <_svfiprintf_r+0x130>
 8009776:	fb0c 2101 	mla	r1, ip, r1, r2
 800977a:	4604      	mov	r4, r0
 800977c:	2301      	movs	r3, #1
 800977e:	e7f0      	b.n	8009762 <_svfiprintf_r+0x192>
 8009780:	ab03      	add	r3, sp, #12
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	462a      	mov	r2, r5
 8009786:	4b0e      	ldr	r3, [pc, #56]	@ (80097c0 <_svfiprintf_r+0x1f0>)
 8009788:	a904      	add	r1, sp, #16
 800978a:	4638      	mov	r0, r7
 800978c:	f3af 8000 	nop.w
 8009790:	1c42      	adds	r2, r0, #1
 8009792:	4606      	mov	r6, r0
 8009794:	d1d6      	bne.n	8009744 <_svfiprintf_r+0x174>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	065b      	lsls	r3, r3, #25
 800979a:	f53f af2d 	bmi.w	80095f8 <_svfiprintf_r+0x28>
 800979e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097a0:	e72c      	b.n	80095fc <_svfiprintf_r+0x2c>
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	462a      	mov	r2, r5
 80097a8:	4b05      	ldr	r3, [pc, #20]	@ (80097c0 <_svfiprintf_r+0x1f0>)
 80097aa:	a904      	add	r1, sp, #16
 80097ac:	4638      	mov	r0, r7
 80097ae:	f000 f879 	bl	80098a4 <_printf_i>
 80097b2:	e7ed      	b.n	8009790 <_svfiprintf_r+0x1c0>
 80097b4:	08009c44 	.word	0x08009c44
 80097b8:	08009c4e 	.word	0x08009c4e
 80097bc:	00000000 	.word	0x00000000
 80097c0:	08009519 	.word	0x08009519
 80097c4:	08009c4a 	.word	0x08009c4a

080097c8 <_printf_common>:
 80097c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097cc:	4616      	mov	r6, r2
 80097ce:	4698      	mov	r8, r3
 80097d0:	688a      	ldr	r2, [r1, #8]
 80097d2:	690b      	ldr	r3, [r1, #16]
 80097d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097d8:	4293      	cmp	r3, r2
 80097da:	bfb8      	it	lt
 80097dc:	4613      	movlt	r3, r2
 80097de:	6033      	str	r3, [r6, #0]
 80097e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097e4:	4607      	mov	r7, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	b10a      	cbz	r2, 80097ee <_printf_common+0x26>
 80097ea:	3301      	adds	r3, #1
 80097ec:	6033      	str	r3, [r6, #0]
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	0699      	lsls	r1, r3, #26
 80097f2:	bf42      	ittt	mi
 80097f4:	6833      	ldrmi	r3, [r6, #0]
 80097f6:	3302      	addmi	r3, #2
 80097f8:	6033      	strmi	r3, [r6, #0]
 80097fa:	6825      	ldr	r5, [r4, #0]
 80097fc:	f015 0506 	ands.w	r5, r5, #6
 8009800:	d106      	bne.n	8009810 <_printf_common+0x48>
 8009802:	f104 0a19 	add.w	sl, r4, #25
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	6832      	ldr	r2, [r6, #0]
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	42ab      	cmp	r3, r5
 800980e:	dc26      	bgt.n	800985e <_printf_common+0x96>
 8009810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	3b00      	subs	r3, #0
 8009818:	bf18      	it	ne
 800981a:	2301      	movne	r3, #1
 800981c:	0692      	lsls	r2, r2, #26
 800981e:	d42b      	bmi.n	8009878 <_printf_common+0xb0>
 8009820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009824:	4641      	mov	r1, r8
 8009826:	4638      	mov	r0, r7
 8009828:	47c8      	blx	r9
 800982a:	3001      	adds	r0, #1
 800982c:	d01e      	beq.n	800986c <_printf_common+0xa4>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	6922      	ldr	r2, [r4, #16]
 8009832:	f003 0306 	and.w	r3, r3, #6
 8009836:	2b04      	cmp	r3, #4
 8009838:	bf02      	ittt	eq
 800983a:	68e5      	ldreq	r5, [r4, #12]
 800983c:	6833      	ldreq	r3, [r6, #0]
 800983e:	1aed      	subeq	r5, r5, r3
 8009840:	68a3      	ldr	r3, [r4, #8]
 8009842:	bf0c      	ite	eq
 8009844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009848:	2500      	movne	r5, #0
 800984a:	4293      	cmp	r3, r2
 800984c:	bfc4      	itt	gt
 800984e:	1a9b      	subgt	r3, r3, r2
 8009850:	18ed      	addgt	r5, r5, r3
 8009852:	2600      	movs	r6, #0
 8009854:	341a      	adds	r4, #26
 8009856:	42b5      	cmp	r5, r6
 8009858:	d11a      	bne.n	8009890 <_printf_common+0xc8>
 800985a:	2000      	movs	r0, #0
 800985c:	e008      	b.n	8009870 <_printf_common+0xa8>
 800985e:	2301      	movs	r3, #1
 8009860:	4652      	mov	r2, sl
 8009862:	4641      	mov	r1, r8
 8009864:	4638      	mov	r0, r7
 8009866:	47c8      	blx	r9
 8009868:	3001      	adds	r0, #1
 800986a:	d103      	bne.n	8009874 <_printf_common+0xac>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009874:	3501      	adds	r5, #1
 8009876:	e7c6      	b.n	8009806 <_printf_common+0x3e>
 8009878:	18e1      	adds	r1, r4, r3
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	2030      	movs	r0, #48	@ 0x30
 800987e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009882:	4422      	add	r2, r4
 8009884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800988c:	3302      	adds	r3, #2
 800988e:	e7c7      	b.n	8009820 <_printf_common+0x58>
 8009890:	2301      	movs	r3, #1
 8009892:	4622      	mov	r2, r4
 8009894:	4641      	mov	r1, r8
 8009896:	4638      	mov	r0, r7
 8009898:	47c8      	blx	r9
 800989a:	3001      	adds	r0, #1
 800989c:	d0e6      	beq.n	800986c <_printf_common+0xa4>
 800989e:	3601      	adds	r6, #1
 80098a0:	e7d9      	b.n	8009856 <_printf_common+0x8e>
	...

080098a4 <_printf_i>:
 80098a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098a8:	7e0f      	ldrb	r7, [r1, #24]
 80098aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098ac:	2f78      	cmp	r7, #120	@ 0x78
 80098ae:	4691      	mov	r9, r2
 80098b0:	4680      	mov	r8, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	469a      	mov	sl, r3
 80098b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098ba:	d807      	bhi.n	80098cc <_printf_i+0x28>
 80098bc:	2f62      	cmp	r7, #98	@ 0x62
 80098be:	d80a      	bhi.n	80098d6 <_printf_i+0x32>
 80098c0:	2f00      	cmp	r7, #0
 80098c2:	f000 80d2 	beq.w	8009a6a <_printf_i+0x1c6>
 80098c6:	2f58      	cmp	r7, #88	@ 0x58
 80098c8:	f000 80b9 	beq.w	8009a3e <_printf_i+0x19a>
 80098cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098d4:	e03a      	b.n	800994c <_printf_i+0xa8>
 80098d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098da:	2b15      	cmp	r3, #21
 80098dc:	d8f6      	bhi.n	80098cc <_printf_i+0x28>
 80098de:	a101      	add	r1, pc, #4	@ (adr r1, 80098e4 <_printf_i+0x40>)
 80098e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098e4:	0800993d 	.word	0x0800993d
 80098e8:	08009951 	.word	0x08009951
 80098ec:	080098cd 	.word	0x080098cd
 80098f0:	080098cd 	.word	0x080098cd
 80098f4:	080098cd 	.word	0x080098cd
 80098f8:	080098cd 	.word	0x080098cd
 80098fc:	08009951 	.word	0x08009951
 8009900:	080098cd 	.word	0x080098cd
 8009904:	080098cd 	.word	0x080098cd
 8009908:	080098cd 	.word	0x080098cd
 800990c:	080098cd 	.word	0x080098cd
 8009910:	08009a51 	.word	0x08009a51
 8009914:	0800997b 	.word	0x0800997b
 8009918:	08009a0b 	.word	0x08009a0b
 800991c:	080098cd 	.word	0x080098cd
 8009920:	080098cd 	.word	0x080098cd
 8009924:	08009a73 	.word	0x08009a73
 8009928:	080098cd 	.word	0x080098cd
 800992c:	0800997b 	.word	0x0800997b
 8009930:	080098cd 	.word	0x080098cd
 8009934:	080098cd 	.word	0x080098cd
 8009938:	08009a13 	.word	0x08009a13
 800993c:	6833      	ldr	r3, [r6, #0]
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6032      	str	r2, [r6, #0]
 8009944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800994c:	2301      	movs	r3, #1
 800994e:	e09d      	b.n	8009a8c <_printf_i+0x1e8>
 8009950:	6833      	ldr	r3, [r6, #0]
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	1d19      	adds	r1, r3, #4
 8009956:	6031      	str	r1, [r6, #0]
 8009958:	0606      	lsls	r6, r0, #24
 800995a:	d501      	bpl.n	8009960 <_printf_i+0xbc>
 800995c:	681d      	ldr	r5, [r3, #0]
 800995e:	e003      	b.n	8009968 <_printf_i+0xc4>
 8009960:	0645      	lsls	r5, r0, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0xb8>
 8009964:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009968:	2d00      	cmp	r5, #0
 800996a:	da03      	bge.n	8009974 <_printf_i+0xd0>
 800996c:	232d      	movs	r3, #45	@ 0x2d
 800996e:	426d      	negs	r5, r5
 8009970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009974:	4859      	ldr	r0, [pc, #356]	@ (8009adc <_printf_i+0x238>)
 8009976:	230a      	movs	r3, #10
 8009978:	e011      	b.n	800999e <_printf_i+0xfa>
 800997a:	6821      	ldr	r1, [r4, #0]
 800997c:	6833      	ldr	r3, [r6, #0]
 800997e:	0608      	lsls	r0, r1, #24
 8009980:	f853 5b04 	ldr.w	r5, [r3], #4
 8009984:	d402      	bmi.n	800998c <_printf_i+0xe8>
 8009986:	0649      	lsls	r1, r1, #25
 8009988:	bf48      	it	mi
 800998a:	b2ad      	uxthmi	r5, r5
 800998c:	2f6f      	cmp	r7, #111	@ 0x6f
 800998e:	4853      	ldr	r0, [pc, #332]	@ (8009adc <_printf_i+0x238>)
 8009990:	6033      	str	r3, [r6, #0]
 8009992:	bf14      	ite	ne
 8009994:	230a      	movne	r3, #10
 8009996:	2308      	moveq	r3, #8
 8009998:	2100      	movs	r1, #0
 800999a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800999e:	6866      	ldr	r6, [r4, #4]
 80099a0:	60a6      	str	r6, [r4, #8]
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	bfa2      	ittt	ge
 80099a6:	6821      	ldrge	r1, [r4, #0]
 80099a8:	f021 0104 	bicge.w	r1, r1, #4
 80099ac:	6021      	strge	r1, [r4, #0]
 80099ae:	b90d      	cbnz	r5, 80099b4 <_printf_i+0x110>
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	d04b      	beq.n	8009a4c <_printf_i+0x1a8>
 80099b4:	4616      	mov	r6, r2
 80099b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80099ba:	fb03 5711 	mls	r7, r3, r1, r5
 80099be:	5dc7      	ldrb	r7, [r0, r7]
 80099c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099c4:	462f      	mov	r7, r5
 80099c6:	42bb      	cmp	r3, r7
 80099c8:	460d      	mov	r5, r1
 80099ca:	d9f4      	bls.n	80099b6 <_printf_i+0x112>
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d10b      	bne.n	80099e8 <_printf_i+0x144>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	07df      	lsls	r7, r3, #31
 80099d4:	d508      	bpl.n	80099e8 <_printf_i+0x144>
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	6861      	ldr	r1, [r4, #4]
 80099da:	4299      	cmp	r1, r3
 80099dc:	bfde      	ittt	le
 80099de:	2330      	movle	r3, #48	@ 0x30
 80099e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099e8:	1b92      	subs	r2, r2, r6
 80099ea:	6122      	str	r2, [r4, #16]
 80099ec:	f8cd a000 	str.w	sl, [sp]
 80099f0:	464b      	mov	r3, r9
 80099f2:	aa03      	add	r2, sp, #12
 80099f4:	4621      	mov	r1, r4
 80099f6:	4640      	mov	r0, r8
 80099f8:	f7ff fee6 	bl	80097c8 <_printf_common>
 80099fc:	3001      	adds	r0, #1
 80099fe:	d14a      	bne.n	8009a96 <_printf_i+0x1f2>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	b004      	add	sp, #16
 8009a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	f043 0320 	orr.w	r3, r3, #32
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	4833      	ldr	r0, [pc, #204]	@ (8009ae0 <_printf_i+0x23c>)
 8009a14:	2778      	movs	r7, #120	@ 0x78
 8009a16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	6831      	ldr	r1, [r6, #0]
 8009a1e:	061f      	lsls	r7, r3, #24
 8009a20:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a24:	d402      	bmi.n	8009a2c <_printf_i+0x188>
 8009a26:	065f      	lsls	r7, r3, #25
 8009a28:	bf48      	it	mi
 8009a2a:	b2ad      	uxthmi	r5, r5
 8009a2c:	6031      	str	r1, [r6, #0]
 8009a2e:	07d9      	lsls	r1, r3, #31
 8009a30:	bf44      	itt	mi
 8009a32:	f043 0320 	orrmi.w	r3, r3, #32
 8009a36:	6023      	strmi	r3, [r4, #0]
 8009a38:	b11d      	cbz	r5, 8009a42 <_printf_i+0x19e>
 8009a3a:	2310      	movs	r3, #16
 8009a3c:	e7ac      	b.n	8009998 <_printf_i+0xf4>
 8009a3e:	4827      	ldr	r0, [pc, #156]	@ (8009adc <_printf_i+0x238>)
 8009a40:	e7e9      	b.n	8009a16 <_printf_i+0x172>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	f023 0320 	bic.w	r3, r3, #32
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	e7f6      	b.n	8009a3a <_printf_i+0x196>
 8009a4c:	4616      	mov	r6, r2
 8009a4e:	e7bd      	b.n	80099cc <_printf_i+0x128>
 8009a50:	6833      	ldr	r3, [r6, #0]
 8009a52:	6825      	ldr	r5, [r4, #0]
 8009a54:	6961      	ldr	r1, [r4, #20]
 8009a56:	1d18      	adds	r0, r3, #4
 8009a58:	6030      	str	r0, [r6, #0]
 8009a5a:	062e      	lsls	r6, r5, #24
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	d501      	bpl.n	8009a64 <_printf_i+0x1c0>
 8009a60:	6019      	str	r1, [r3, #0]
 8009a62:	e002      	b.n	8009a6a <_printf_i+0x1c6>
 8009a64:	0668      	lsls	r0, r5, #25
 8009a66:	d5fb      	bpl.n	8009a60 <_printf_i+0x1bc>
 8009a68:	8019      	strh	r1, [r3, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6123      	str	r3, [r4, #16]
 8009a6e:	4616      	mov	r6, r2
 8009a70:	e7bc      	b.n	80099ec <_printf_i+0x148>
 8009a72:	6833      	ldr	r3, [r6, #0]
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	6032      	str	r2, [r6, #0]
 8009a78:	681e      	ldr	r6, [r3, #0]
 8009a7a:	6862      	ldr	r2, [r4, #4]
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7f6 fbb6 	bl	80001f0 <memchr>
 8009a84:	b108      	cbz	r0, 8009a8a <_printf_i+0x1e6>
 8009a86:	1b80      	subs	r0, r0, r6
 8009a88:	6060      	str	r0, [r4, #4]
 8009a8a:	6863      	ldr	r3, [r4, #4]
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a94:	e7aa      	b.n	80099ec <_printf_i+0x148>
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	4632      	mov	r2, r6
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	47d0      	blx	sl
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d0ad      	beq.n	8009a00 <_printf_i+0x15c>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	079b      	lsls	r3, r3, #30
 8009aa8:	d413      	bmi.n	8009ad2 <_printf_i+0x22e>
 8009aaa:	68e0      	ldr	r0, [r4, #12]
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	4298      	cmp	r0, r3
 8009ab0:	bfb8      	it	lt
 8009ab2:	4618      	movlt	r0, r3
 8009ab4:	e7a6      	b.n	8009a04 <_printf_i+0x160>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4632      	mov	r2, r6
 8009aba:	4649      	mov	r1, r9
 8009abc:	4640      	mov	r0, r8
 8009abe:	47d0      	blx	sl
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d09d      	beq.n	8009a00 <_printf_i+0x15c>
 8009ac4:	3501      	adds	r5, #1
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	9903      	ldr	r1, [sp, #12]
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	42ab      	cmp	r3, r5
 8009ace:	dcf2      	bgt.n	8009ab6 <_printf_i+0x212>
 8009ad0:	e7eb      	b.n	8009aaa <_printf_i+0x206>
 8009ad2:	2500      	movs	r5, #0
 8009ad4:	f104 0619 	add.w	r6, r4, #25
 8009ad8:	e7f5      	b.n	8009ac6 <_printf_i+0x222>
 8009ada:	bf00      	nop
 8009adc:	08009c55 	.word	0x08009c55
 8009ae0:	08009c66 	.word	0x08009c66

08009ae4 <memmove>:
 8009ae4:	4288      	cmp	r0, r1
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	eb01 0402 	add.w	r4, r1, r2
 8009aec:	d902      	bls.n	8009af4 <memmove+0x10>
 8009aee:	4284      	cmp	r4, r0
 8009af0:	4623      	mov	r3, r4
 8009af2:	d807      	bhi.n	8009b04 <memmove+0x20>
 8009af4:	1e43      	subs	r3, r0, #1
 8009af6:	42a1      	cmp	r1, r4
 8009af8:	d008      	beq.n	8009b0c <memmove+0x28>
 8009afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b02:	e7f8      	b.n	8009af6 <memmove+0x12>
 8009b04:	4402      	add	r2, r0
 8009b06:	4601      	mov	r1, r0
 8009b08:	428a      	cmp	r2, r1
 8009b0a:	d100      	bne.n	8009b0e <memmove+0x2a>
 8009b0c:	bd10      	pop	{r4, pc}
 8009b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b16:	e7f7      	b.n	8009b08 <memmove+0x24>

08009b18 <_sbrk_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d06      	ldr	r5, [pc, #24]	@ (8009b34 <_sbrk_r+0x1c>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	602b      	str	r3, [r5, #0]
 8009b24:	f7f7 fd8c 	bl	8001640 <_sbrk>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_sbrk_r+0x1a>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_sbrk_r+0x1a>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	20001fd8 	.word	0x20001fd8

08009b38 <memcpy>:
 8009b38:	440a      	add	r2, r1
 8009b3a:	4291      	cmp	r1, r2
 8009b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b40:	d100      	bne.n	8009b44 <memcpy+0xc>
 8009b42:	4770      	bx	lr
 8009b44:	b510      	push	{r4, lr}
 8009b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	d1f9      	bne.n	8009b46 <memcpy+0xe>
 8009b52:	bd10      	pop	{r4, pc}

08009b54 <_realloc_r>:
 8009b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b58:	4680      	mov	r8, r0
 8009b5a:	4615      	mov	r5, r2
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	b921      	cbnz	r1, 8009b6a <_realloc_r+0x16>
 8009b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b64:	4611      	mov	r1, r2
 8009b66:	f7ff bc4b 	b.w	8009400 <_malloc_r>
 8009b6a:	b92a      	cbnz	r2, 8009b78 <_realloc_r+0x24>
 8009b6c:	f7ff fbdc 	bl	8009328 <_free_r>
 8009b70:	2400      	movs	r4, #0
 8009b72:	4620      	mov	r0, r4
 8009b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b78:	f000 f81a 	bl	8009bb0 <_malloc_usable_size_r>
 8009b7c:	4285      	cmp	r5, r0
 8009b7e:	4606      	mov	r6, r0
 8009b80:	d802      	bhi.n	8009b88 <_realloc_r+0x34>
 8009b82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b86:	d8f4      	bhi.n	8009b72 <_realloc_r+0x1e>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	f7ff fc38 	bl	8009400 <_malloc_r>
 8009b90:	4607      	mov	r7, r0
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d0ec      	beq.n	8009b70 <_realloc_r+0x1c>
 8009b96:	42b5      	cmp	r5, r6
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	bf28      	it	cs
 8009b9e:	4632      	movcs	r2, r6
 8009ba0:	f7ff ffca 	bl	8009b38 <memcpy>
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	f7ff fbbe 	bl	8009328 <_free_r>
 8009bac:	463c      	mov	r4, r7
 8009bae:	e7e0      	b.n	8009b72 <_realloc_r+0x1e>

08009bb0 <_malloc_usable_size_r>:
 8009bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb4:	1f18      	subs	r0, r3, #4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	bfbc      	itt	lt
 8009bba:	580b      	ldrlt	r3, [r1, r0]
 8009bbc:	18c0      	addlt	r0, r0, r3
 8009bbe:	4770      	bx	lr

08009bc0 <_init>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr

08009bcc <_fini>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr
