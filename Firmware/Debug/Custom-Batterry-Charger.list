
Custom-Batterry-Charger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e778  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800e918  0800e918  0000f918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee04  0800ee04  000102dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ee04  0800ee04  0000fe04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee0c  0800ee0c  000102dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee0c  0800ee0c  0000fe0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee10  0800ee10  0000fe10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002dc  20000000  0800ee14  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e9c  200002dc  0800f0f0  000102dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002178  0800f0f0  00011178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bb3  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ef  00000000  00000000  00026ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0002a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106b  00000000  00000000  0002bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca44  00000000  00000000  0002cd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afbb  00000000  00000000  000497af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0473  00000000  00000000  0006476a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00104bdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007208  00000000  00000000  00104c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010be6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002dc 	.word	0x200002dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e900 	.word	0x0800e900

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e0 	.word	0x200002e0
 80001dc:	0800e900 	.word	0x0800e900

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <readADC>:





int readADC(uint32_t pin){
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  sConfig.Channel = pin;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4619      	mov	r1, r3
 8001058:	480f      	ldr	r0, [pc, #60]	@ (8001098 <readADC+0x68>)
 800105a:	f001 f8f5 	bl	8002248 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <readADC+0x38>
  {
    Error_Handler();
 8001064:	f000 fc14 	bl	8001890 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8001068:	480b      	ldr	r0, [pc, #44]	@ (8001098 <readADC+0x68>)
 800106a:	f000 ff6d 	bl	8001f48 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 800106e:	f04f 31ff 	mov.w	r1, #4294967295
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <readADC+0x68>)
 8001074:	f001 f84f 	bl	8002116 <HAL_ADC_PollForConversion>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <readADC+0x52>
  {
    Error_Handler();
 800107e:	f000 fc07 	bl	8001890 <Error_Handler>
  }
  HAL_ADC_Stop(&hadc1);
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <readADC+0x68>)
 8001084:	f001 f814 	bl	80020b0 <HAL_ADC_Stop>

  return HAL_ADC_GetValue(&hadc1);
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <readADC+0x68>)
 800108a:	f001 f8cf 	bl	800222c <HAL_ADC_GetValue>
 800108e:	4603      	mov	r3, r0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200002f8 	.word	0x200002f8

0800109c <pwm>:

void pwm(float pulseWidth) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a01 	vstr	s0, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ba:	2360      	movs	r3, #96	@ 0x60
 80010bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = pulseWidth * 4095; // Scale pulse width to match timer resolution
 80010be:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001104 <pwm+0x68>
 80010c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ce:	ee17 3a90 	vmov	r3, s15
 80010d2:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2208      	movs	r2, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	4808      	ldr	r0, [pc, #32]	@ (8001108 <pwm+0x6c>)
 80010e6:	f003 fed9 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <pwm+0x58>
  {
    Error_Handler();
 80010f0:	f000 fbce 	bl	8001890 <Error_Handler>
  }

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010f4:	2108      	movs	r1, #8
 80010f6:	4804      	ldr	r0, [pc, #16]	@ (8001108 <pwm+0x6c>)
 80010f8:	f003 fe20 	bl	8004d3c <HAL_TIM_PWM_Start>
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	@ 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	457ff000 	.word	0x457ff000
 8001108:	200003dc 	.word	0x200003dc

0800110c <toggle>:

void toggle(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <toggle+0x14>)
 8001116:	f001 fd74 	bl	8002c02 <HAL_GPIO_TogglePin>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020800 	.word	0x40020800
 8001124:	00000000 	.word	0x00000000

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800112c:	b094      	sub	sp, #80	@ 0x50
 800112e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fe30 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f98e 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 fb3a 	bl	80017b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800113c:	f000 f9f2 	bl	8001524 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001140:	f000 fa42 	bl	80015c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001144:	f000 fa6e 	bl	8001624 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001148:	f000 fabc 	bl	80016c4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800114c:	f007 feae 	bl	8008eac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  toggle(); // Initial toggle to indicate start
 8001150:	f7ff ffdc 	bl	800110c <toggle>
  toggle();
 8001154:	f7ff ffda 	bl	800110c <toggle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    v_out = readADC(ADC_CHANNEL_0) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff ff69 	bl	8001030 <readADC>
 800115e:	4603      	mov	r3, r0
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9e7 	bl	8000534 <__aeabi_i2d>
 8001166:	a3a4      	add	r3, pc, #656	@ (adr r3, 80013f8 <main+0x2d0>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff fa4c 	bl	8000608 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001400 <main+0x2d8>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fa43 	bl	8000608 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd35 	bl	8000bf8 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	4a9f      	ldr	r2, [pc, #636]	@ (8001410 <main+0x2e8>)
 8001192:	6013      	str	r3, [r2, #0]

    v_in = readADC(ADC_CHANNEL_9) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 8001194:	2009      	movs	r0, #9
 8001196:	f7ff ff4b 	bl	8001030 <readADC>
 800119a:	4603      	mov	r3, r0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9c9 	bl	8000534 <__aeabi_i2d>
 80011a2:	a395      	add	r3, pc, #596	@ (adr r3, 80013f8 <main+0x2d0>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa2e 	bl	8000608 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a392      	add	r3, pc, #584	@ (adr r3, 8001400 <main+0x2d8>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fa25 	bl	8000608 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fd17 	bl	8000bf8 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a91      	ldr	r2, [pc, #580]	@ (8001414 <main+0x2ec>)
 80011ce:	6013      	str	r3, [r2, #0]

    i_out = readADC(ADC_CHANNEL_2) *(10000.0/22)* (3.3f / 4095.0f); // Read ADC value and convert to current
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff ff2d 	bl	8001030 <readADC>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9ab 	bl	8000534 <__aeabi_i2d>
 80011de:	a38a      	add	r3, pc, #552	@ (adr r3, 8001408 <main+0x2e0>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa10 	bl	8000608 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	a383      	add	r3, pc, #524	@ (adr r3, 8001400 <main+0x2d8>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff fa07 	bl	8000608 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcf9 	bl	8000bf8 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a83      	ldr	r2, [pc, #524]	@ (8001418 <main+0x2f0>)
 800120a:	6013      	str	r3, [r2, #0]

    // Simple low-pass filter for each reading
    static float v_out_filt = 0.0f;
    static float v_in_filt = 0.0f;
    static float i_out_filt = 0.0f;
    const float alpha = 0.5f; // Smoothing factor (0 < alpha < 1)
 800120c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34

    v_out_filt = alpha * v_out + (1.0f - alpha) * v_out_filt;
 8001212:	4b7f      	ldr	r3, [pc, #508]	@ (8001410 <main+0x2e8>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800121c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001224:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001228:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800122c:	4b7b      	ldr	r3, [pc, #492]	@ (800141c <main+0x2f4>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123a:	4b78      	ldr	r3, [pc, #480]	@ (800141c <main+0x2f4>)
 800123c:	edc3 7a00 	vstr	s15, [r3]
    v_in_filt = alpha * v_in + (1.0f - alpha) * v_in_filt;
 8001240:	4b74      	ldr	r3, [pc, #464]	@ (8001414 <main+0x2ec>)
 8001242:	ed93 7a00 	vldr	s14, [r3]
 8001246:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800124a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001252:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001256:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800125a:	4b71      	ldr	r3, [pc, #452]	@ (8001420 <main+0x2f8>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	4b6d      	ldr	r3, [pc, #436]	@ (8001420 <main+0x2f8>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
    i_out_filt = alpha * i_out + (1.0f - alpha) * i_out_filt;
 800126e:	4b6a      	ldr	r3, [pc, #424]	@ (8001418 <main+0x2f0>)
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001280:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001284:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001288:	4b66      	ldr	r3, [pc, #408]	@ (8001424 <main+0x2fc>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	4b63      	ldr	r3, [pc, #396]	@ (8001424 <main+0x2fc>)
 8001298:	edc3 7a00 	vstr	s15, [r3]

    // Use filtered values for control and feedback
    v_out = v_out_filt;
 800129c:	4b5f      	ldr	r3, [pc, #380]	@ (800141c <main+0x2f4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a5b      	ldr	r2, [pc, #364]	@ (8001410 <main+0x2e8>)
 80012a2:	6013      	str	r3, [r2, #0]
    v_in = v_in_filt;
 80012a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001420 <main+0x2f8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001414 <main+0x2ec>)
 80012aa:	6013      	str	r3, [r2, #0]
    i_out = i_out_filt;
 80012ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <main+0x2fc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a59      	ldr	r2, [pc, #356]	@ (8001418 <main+0x2f0>)
 80012b2:	6013      	str	r3, [r2, #0]

    char vin_str[32];

    if(feedback){
 80012b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001428 <main+0x300>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d02c      	beq.n	8001316 <main+0x1ee>
      feedback=0;
 80012bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001428 <main+0x300>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
      snprintf(vin_str, sizeof(vin_str), "VOUT:%.2f,IOUT:%.2f,VIN:%.2f\r\n", v_out, i_out, v_in);
 80012c2:	4b53      	ldr	r3, [pc, #332]	@ (8001410 <main+0x2e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f946 	bl	8000558 <__aeabi_f2d>
 80012cc:	4604      	mov	r4, r0
 80012ce:	460d      	mov	r5, r1
 80012d0:	4b51      	ldr	r3, [pc, #324]	@ (8001418 <main+0x2f0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f93f 	bl	8000558 <__aeabi_f2d>
 80012da:	4680      	mov	r8, r0
 80012dc:	4689      	mov	r9, r1
 80012de:	4b4d      	ldr	r3, [pc, #308]	@ (8001414 <main+0x2ec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f938 	bl	8000558 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	1d38      	adds	r0, r7, #4
 80012ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012f6:	e9cd 4500 	strd	r4, r5, [sp]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	@ (800142c <main+0x304>)
 80012fc:	2120      	movs	r1, #32
 80012fe:	f009 fa55 	bl	800a7ac <sniprintf>
      CDC_Transmit_FS((uint8_t*)vin_str, strlen(vin_str));
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffbb 	bl	8000280 <strlen>
 800130a:	4602      	mov	r2, r0
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f007 fed3 	bl	80090bc <CDC_Transmit_FS>
    }



    // Voltage control loop
    float voltageError = targetVoltage - v_out; // Calculate voltage error
 8001316:	4b46      	ldr	r3, [pc, #280]	@ (8001430 <main+0x308>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	4b3c      	ldr	r3, [pc, #240]	@ (8001410 <main+0x2e8>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001326:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float voltageControl = kp * voltageError; // Proportional control for voltage
 800132a:	4b42      	ldr	r3, [pc, #264]	@ (8001434 <main+0x30c>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    // } else if (pulseWidth > 1.0f) {
    //   pulseWidth = 1.0f; // Ensure pulse width does not exceed 1
    // }

    // Current control loop
    float currentError = targetCurrent - i_out; // Calculate current error
 800133c:	4b3e      	ldr	r3, [pc, #248]	@ (8001438 <main+0x310>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <main+0x2f0>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float currentControl = ki * currentError; // Integral control for current
 8001350:	4b3a      	ldr	r3, [pc, #232]	@ (800143c <main+0x314>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800135a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if(i_out > targetCurrent) 
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <main+0x2f0>)
 8001364:	ed93 7a00 	vldr	s14, [r3]
 8001368:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <main+0x310>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	dd0a      	ble.n	800138e <main+0x266>
      pulseWidth += currentControl; // Adjust pulse width based on current control
 8001378:	4b31      	ldr	r3, [pc, #196]	@ (8001440 <main+0x318>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <main+0x318>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
 800138c:	e009      	b.n	80013a2 <main+0x27a>
    else 
      pulseWidth += voltageControl; // Adjust pulse width based on voltage control
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <main+0x318>)
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <main+0x318>)
 800139e:	edc3 7a00 	vstr	s15, [r3]

    if (pulseWidth < 0.0f) {
 80013a2:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <main+0x318>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d504      	bpl.n	80013bc <main+0x294>
      pulseWidth = 0.0f; // Ensure pulse width does not go below 0
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <main+0x318>)
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	e00c      	b.n	80013d6 <main+0x2ae>
    } else if (pulseWidth > 0.99f) {
 80013bc:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <main+0x318>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001444 <main+0x31c>
 80013c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	dd02      	ble.n	80013d6 <main+0x2ae>
      pulseWidth = 0.99f; // Ensure pulse width does not exceed 1
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <main+0x318>)
 80013d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <main+0x320>)
 80013d4:	601a      	str	r2, [r3, #0]
    }

    if(output)
 80013d6:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <main+0x324>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <main+0x2c6>
      pwm(pulseWidth); // Set PWM output based on pulse width
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <main+0x318>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	f7ff fe58 	bl	800109c <pwm>
 80013ec:	e6b4      	b.n	8001158 <main+0x30>
    else 
      pwm(0);
 80013ee:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001450 <main+0x328>
 80013f2:	f7ff fe53 	bl	800109c <pwm>
  {
 80013f6:	e6af      	b.n	8001158 <main+0x30>
 80013f8:	cccccccd 	.word	0xcccccccd
 80013fc:	4016cccc 	.word	0x4016cccc
 8001400:	e0000000 	.word	0xe0000000
 8001404:	3f4a680c 	.word	0x3f4a680c
 8001408:	2e8ba2e9 	.word	0x2e8ba2e9
 800140c:	407c68ba 	.word	0x407c68ba
 8001410:	20000424 	.word	0x20000424
 8001414:	20000428 	.word	0x20000428
 8001418:	2000042c 	.word	0x2000042c
 800141c:	20000434 	.word	0x20000434
 8001420:	20000438 	.word	0x20000438
 8001424:	2000043c 	.word	0x2000043c
 8001428:	20000430 	.word	0x20000430
 800142c:	0800e918 	.word	0x0800e918
 8001430:	20000004 	.word	0x20000004
 8001434:	2000000c 	.word	0x2000000c
 8001438:	20000008 	.word	0x20000008
 800143c:	20000010 	.word	0x20000010
 8001440:	20000000 	.word	0x20000000
 8001444:	3f7d70a4 	.word	0x3f7d70a4
 8001448:	3f7d70a4 	.word	0x3f7d70a4
 800144c:	20000014 	.word	0x20000014
 8001450:	00000000 	.word	0x00000000

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	@ 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	2230      	movs	r2, #48	@ 0x30
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f009 fa6b 	bl	800a93e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	4b27      	ldr	r3, [pc, #156]	@ (800151c <SystemClock_Config+0xc8>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a26      	ldr	r2, [pc, #152]	@ (800151c <SystemClock_Config+0xc8>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
 8001488:	4b24      	ldr	r3, [pc, #144]	@ (800151c <SystemClock_Config+0xc8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <SystemClock_Config+0xcc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a20      	ldr	r2, [pc, #128]	@ (8001520 <SystemClock_Config+0xcc>)
 800149e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <SystemClock_Config+0xcc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b0:	2301      	movs	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014c4:	230c      	movs	r3, #12
 80014c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 92;
 80014c8:	235c      	movs	r3, #92	@ 0x5c
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014d0:	2304      	movs	r3, #4
 80014d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 0320 	add.w	r3, r7, #32
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 ff43 	bl	8004364 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014e4:	f000 f9d4 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f003 f9a5 	bl	8004854 <HAL_RCC_ClockConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001510:	f000 f9be 	bl	8001890 <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	3750      	adds	r7, #80	@ 0x50
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001538:	4a21      	ldr	r2, [pc, #132]	@ (80015c0 <MX_ADC1_Init+0x9c>)
 800153a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800153c:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_ADC1_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001542:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_ADC1_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_ADC1_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001564:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <MX_ADC1_Init+0xa0>)
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_ADC1_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001570:	2201      	movs	r2, #1
 8001572:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_ADC1_Init+0x98>)
 800157e:	2201      	movs	r2, #1
 8001580:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001582:	480e      	ldr	r0, [pc, #56]	@ (80015bc <MX_ADC1_Init+0x98>)
 8001584:	f000 fc9c 	bl	8001ec0 <HAL_ADC_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800158e:	f000 f97f 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001592:	2309      	movs	r3, #9
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	@ (80015bc <MX_ADC1_Init+0x98>)
 80015a4:	f000 fe50 	bl	8002248 <HAL_ADC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015ae:	f000 f96f 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200002f8 	.word	0x200002f8
 80015c0:	40012000 	.word	0x40012000
 80015c4:	0f000001 	.word	0x0f000001

080015c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015ce:	4a13      	ldr	r2, [pc, #76]	@ (800161c <MX_I2C1_Init+0x54>)
 80015d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015d4:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <MX_I2C1_Init+0x58>)
 80015d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <MX_I2C1_Init+0x50>)
 8001606:	f001 fb17 	bl	8002c38 <HAL_I2C_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001610:	f000 f93e 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000340 	.word	0x20000340
 800161c:	40005400 	.word	0x40005400
 8001620:	000186a0 	.word	0x000186a0

08001624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <MX_TIM1_Init+0x98>)
 8001642:	4a1f      	ldr	r2, [pc, #124]	@ (80016c0 <MX_TIM1_Init+0x9c>)
 8001644:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_TIM1_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <MX_TIM1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001652:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_TIM1_Init+0x98>)
 8001654:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001658:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <MX_TIM1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_TIM1_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <MX_TIM1_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800166c:	4813      	ldr	r0, [pc, #76]	@ (80016bc <MX_TIM1_Init+0x98>)
 800166e:	f003 fabd 	bl	8004bec <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001678:	f000 f90a 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001680:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <MX_TIM1_Init+0x98>)
 800168a:	f003 fcc9 	bl	8005020 <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001694:	f000 f8fc 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_TIM1_Init+0x98>)
 80016a6:	f004 f855 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016b0:	f000 f8ee 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000394 	.word	0x20000394
 80016c0:	40010000 	.word	0x40010000

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	@ 0x38
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]
 80016f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <MX_TIM2_Init+0xe8>)
 80016f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <MX_TIM2_Init+0xe8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <MX_TIM2_Init+0xe8>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8001708:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <MX_TIM2_Init+0xe8>)
 800170a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800170e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <MX_TIM2_Init+0xe8>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <MX_TIM2_Init+0xe8>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800171c:	4823      	ldr	r0, [pc, #140]	@ (80017ac <MX_TIM2_Init+0xe8>)
 800171e:	f003 fa65 	bl	8004bec <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001728:	f000 f8b2 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001732:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001736:	4619      	mov	r1, r3
 8001738:	481c      	ldr	r0, [pc, #112]	@ (80017ac <MX_TIM2_Init+0xe8>)
 800173a:	f003 fc71 	bl	8005020 <HAL_TIM_ConfigClockSource>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001744:	f000 f8a4 	bl	8001890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001748:	4818      	ldr	r0, [pc, #96]	@ (80017ac <MX_TIM2_Init+0xe8>)
 800174a:	f003 fa9e 	bl	8004c8a <HAL_TIM_PWM_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001754:	f000 f89c 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4619      	mov	r1, r3
 8001766:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_TIM2_Init+0xe8>)
 8001768:	f003 fff4 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001772:	f000 f88d 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001776:	2360      	movs	r3, #96	@ 0x60
 8001778:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2208      	movs	r2, #8
 800178a:	4619      	mov	r1, r3
 800178c:	4807      	ldr	r0, [pc, #28]	@ (80017ac <MX_TIM2_Init+0xe8>)
 800178e:	f003 fb85 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001798:	f000 f87a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <MX_TIM2_Init+0xe8>)
 800179e:	f000 f983 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 80017a2:	bf00      	nop
 80017a4:	3738      	adds	r7, #56	@ 0x38
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200003dc 	.word	0x200003dc

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <MX_GPIO_Init+0xd4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001884 <MX_GPIO_Init+0xd4>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <MX_GPIO_Init+0xd4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <MX_GPIO_Init+0xd4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a26      	ldr	r2, [pc, #152]	@ (8001884 <MX_GPIO_Init+0xd4>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <MX_GPIO_Init+0xd4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <MX_GPIO_Init+0xd4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <MX_GPIO_Init+0xd4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <MX_GPIO_Init+0xd4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <MX_GPIO_Init+0xd4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <MX_GPIO_Init+0xd4>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <MX_GPIO_Init+0xd4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183c:	4812      	ldr	r0, [pc, #72]	@ (8001888 <MX_GPIO_Init+0xd8>)
 800183e:	f001 f9c7 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001842:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	480b      	ldr	r0, [pc, #44]	@ (8001888 <MX_GPIO_Init+0xd8>)
 800185c:	f001 f834 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_GPIO_Init+0xdc>)
 8001876:	f001 f827 	bl	80028c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020400 	.word	0x40020400

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <Error_Handler+0x8>

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	4a0f      	ldr	r2, [pc, #60]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a24      	ldr	r2, [pc, #144]	@ (800199c <HAL_ADC_MspInit+0xb0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d141      	bne.n	8001992 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	4a22      	ldr	r2, [pc, #136]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191c:	6453      	str	r3, [r2, #68]	@ 0x44
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a1b      	ldr	r2, [pc, #108]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_ADC_MspInit+0xb4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001962:	2305      	movs	r3, #5
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001966:	2303      	movs	r3, #3
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <HAL_ADC_MspInit+0xb8>)
 8001976:	f000 ffa7 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800197a:	2302      	movs	r3, #2
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197e:	2303      	movs	r3, #3
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <HAL_ADC_MspInit+0xbc>)
 800198e:	f000 ff9b 	bl	80028c8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	@ 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40012000 	.word	0x40012000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_I2C_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ea:	23c0      	movs	r3, #192	@ 0xc0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fa:	2304      	movs	r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <HAL_I2C_MspInit+0x8c>)
 8001a06:	f000 ff5f 	bl	80028c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <HAL_TIM_Base_MspInit+0x64>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10e      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x68>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a13      	ldr	r2, [pc, #76]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x68>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x68>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a6a:	e012      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a74:	d10d      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x68>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x68>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x68>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac8:	d11e      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001b04:	f000 fee0 	bl	80028c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <NMI_Handler+0x4>

08001b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <MemManage_Handler+0x4>

08001b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6e:	f000 f963 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */



  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b7c:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <OTG_FS_IRQHandler+0x14>)
 8001b7e:	f001 fae3 	bl	8003148 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  toggle();
 8001b82:	f7ff fac3 	bl	800110c <toggle>

  

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20001928 	.word	0x20001928

08001b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_kill>:

int _kill(int pid, int sig)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001baa:	f008 ff1b 	bl	800a9e4 <__errno>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2216      	movs	r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_exit>:

void _exit (int status)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffe7 	bl	8001ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd2:	bf00      	nop
 8001bd4:	e7fd      	b.n	8001bd2 <_exit+0x12>

08001bd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e00a      	b.n	8001bfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be8:	f3af 8000 	nop.w
 8001bec:	4601      	mov	r1, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	60ba      	str	r2, [r7, #8]
 8001bf4:	b2ca      	uxtb	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf0      	blt.n	8001be8 <_read+0x12>
  }

  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e009      	b.n	8001c36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	60ba      	str	r2, [r7, #8]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dbf1      	blt.n	8001c22 <_write+0x12>
  }
  return len;
 8001c3e:	687b      	ldr	r3, [r7, #4]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_close>:

int _close(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c70:	605a      	str	r2, [r3, #4]
  return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_isatty>:

int _isatty(int file)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f008 fe80 	bl	800a9e4 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20020000 	.word	0x20020000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000440 	.word	0x20000440
 8001d18:	20002178 	.word	0x20002178

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d44:	f7ff ffea 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d4a:	490d      	ldr	r1, [pc, #52]	@ (8001d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d60:	4c0a      	ldr	r4, [pc, #40]	@ (8001d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f008 fe3f 	bl	800a9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7ff f9d9 	bl	8001128 <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001d84:	0800ee14 	.word	0x0800ee14
  ldr r2, =_sbss
 8001d88:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001d8c:	20002178 	.word	0x20002178

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <HAL_Init+0x40>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_Init+0x40>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	@ (8001dd4 <HAL_Init+0x40>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 fd41 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f808 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fd68 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_InitTick+0x54>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_InitTick+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fd59 	bl	80028ae <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 fd21 	bl	800285a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	@ (8001e34 <HAL_InitTick+0x5c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000018 	.word	0x20000018
 8001e30:	20000020 	.word	0x20000020
 8001e34:	2000001c 	.word	0x2000001c

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000020 	.word	0x20000020
 8001e5c:	20000444 	.word	0x20000444

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000444 	.word	0x20000444

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000020 	.word	0x20000020

08001ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e033      	b.n	8001f3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fd04 	bl	80018ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f06:	f023 0302 	bic.w	r3, r3, #2
 8001f0a:	f043 0202 	orr.w	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 faca 	bl	80024ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f2e:	e001      	b.n	8001f34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_Start+0x1a>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e097      	b.n	8002092 <HAL_ADC_Start+0x14a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d018      	beq.n	8001faa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f88:	4b45      	ldr	r3, [pc, #276]	@ (80020a0 <HAL_ADC_Start+0x158>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a45      	ldr	r2, [pc, #276]	@ (80020a4 <HAL_ADC_Start+0x15c>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0c9a      	lsrs	r2, r3, #18
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f9c:	e002      	b.n	8001fa4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d15f      	bne.n	8002078 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fe2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ff6:	d106      	bne.n	8002006 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	f023 0206 	bic.w	r2, r3, #6
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44
 8002004:	e002      	b.n	800200c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002014:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_ADC_Start+0x160>)
 8002016:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002020:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d129      	bne.n	8002090 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e020      	b.n	8002090 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_ADC_Start+0x164>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d11b      	bne.n	8002090 <HAL_ADC_Start+0x148>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d114      	bne.n	8002090 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	e00b      	b.n	8002090 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f043 0210 	orr.w	r2, r3, #16
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000018 	.word	0x20000018
 80020a4:	431bde83 	.word	0x431bde83
 80020a8:	40012300 	.word	0x40012300
 80020ac:	40012000 	.word	0x40012000

080020b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Stop+0x16>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e021      	b.n	800210a <HAL_ADC_Stop+0x5a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002132:	d113      	bne.n	800215c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800213e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002142:	d10b      	bne.n	800215c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e063      	b.n	8002224 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800215c:	f7ff fe80 	bl	8001e60 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002162:	e021      	b.n	80021a8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d01d      	beq.n	80021a8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_ADC_PollForConversion+0x6c>
 8002172:	f7ff fe75 	bl	8001e60 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d212      	bcs.n	80021a8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d00b      	beq.n	80021a8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	f043 0204 	orr.w	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e03d      	b.n	8002224 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d1d6      	bne.n	8002164 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0212 	mvn.w	r2, #18
 80021be:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d123      	bne.n	8002222 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11f      	bne.n	8002222 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d111      	bne.n	8002222 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1c>
 8002260:	2302      	movs	r3, #2
 8002262:	e113      	b.n	800248c <HAL_ADC_ConfigChannel+0x244>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b09      	cmp	r3, #9
 8002272:	d925      	bls.n	80022c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68d9      	ldr	r1, [r3, #12]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	3b1e      	subs	r3, #30
 800228a:	2207      	movs	r2, #7
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43da      	mvns	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	400a      	ands	r2, r1
 8002298:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68d9      	ldr	r1, [r3, #12]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	4603      	mov	r3, r0
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4403      	add	r3, r0
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	409a      	lsls	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e022      	b.n	8002306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6919      	ldr	r1, [r3, #16]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	2207      	movs	r2, #7
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	400a      	ands	r2, r1
 80022e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4403      	add	r3, r0
 80022fc:	409a      	lsls	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b06      	cmp	r3, #6
 800230c:	d824      	bhi.n	8002358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b05      	subs	r3, #5
 8002320:	221f      	movs	r2, #31
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	400a      	ands	r2, r1
 800232e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b05      	subs	r3, #5
 800234a:	fa00 f203 	lsl.w	r2, r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	635a      	str	r2, [r3, #52]	@ 0x34
 8002356:	e04c      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d824      	bhi.n	80023aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b23      	subs	r3, #35	@ 0x23
 8002372:	221f      	movs	r2, #31
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43da      	mvns	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	400a      	ands	r2, r1
 8002380:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	4618      	mov	r0, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b23      	subs	r3, #35	@ 0x23
 800239c:	fa00 f203 	lsl.w	r2, r0, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a8:	e023      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b41      	subs	r3, #65	@ 0x41
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b41      	subs	r3, #65	@ 0x41
 80023e6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f2:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_ADC_ConfigChannel+0x250>)
 80023f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a28      	ldr	r2, [pc, #160]	@ (800249c <HAL_ADC_ConfigChannel+0x254>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10f      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d8>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b12      	cmp	r3, #18
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_ADC_ConfigChannel+0x254>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12b      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_ADC_ConfigChannel+0x258>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <HAL_ADC_ConfigChannel+0x1f4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b11      	cmp	r3, #17
 800243a:	d122      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <HAL_ADC_ConfigChannel+0x258>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_ADC_ConfigChannel+0x25c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_ADC_ConfigChannel+0x260>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9a      	lsrs	r2, r3, #18
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012300 	.word	0x40012300
 800249c:	40012000 	.word	0x40012000
 80024a0:	10000012 	.word	0x10000012
 80024a4:	20000018 	.word	0x20000018
 80024a8:	431bde83 	.word	0x431bde83

080024ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b4:	4b79      	ldr	r3, [pc, #484]	@ (800269c <ADC_Init+0x1f0>)
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <ADC_Init+0x1f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e00f      	b.n	80025aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0202 	bic.w	r2, r2, #2
 80025b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
 80025c4:	005a      	lsls	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	3b01      	subs	r3, #1
 8002604:	035a      	lsls	r2, r3, #13
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e007      	b.n	8002620 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800261e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800262e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	3b01      	subs	r3, #1
 800263c:	051a      	lsls	r2, r3, #20
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002662:	025a      	lsls	r2, r3, #9
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800267a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	029a      	lsls	r2, r3, #10
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40012300 	.word	0x40012300
 80026a0:	0f000001 	.word	0x0f000001

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff29 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff3e 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff8e 	bl	8002798 <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5d 	bl	8002744 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff31 	bl	8002708 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa2 	bl	8002800 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e159      	b.n	8002b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	f040 8148 	bne.w	8002b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d005      	beq.n	800291a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	2b02      	cmp	r3, #2
 8002918:	d130      	bne.n	800297c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0201 	and.w	r2, r3, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b03      	cmp	r3, #3
 8002986:	d017      	beq.n	80029b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d123      	bne.n	8002a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	08da      	lsrs	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3208      	adds	r2, #8
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	69b9      	ldr	r1, [r7, #24]
 8002a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0203 	and.w	r2, r3, #3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a2 	beq.w	8002b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b57      	ldr	r3, [pc, #348]	@ (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	4a56      	ldr	r2, [pc, #344]	@ (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a5e:	4b54      	ldr	r3, [pc, #336]	@ (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6a:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_GPIO_Init+0x2ec>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a49      	ldr	r2, [pc, #292]	@ (8002bb8 <HAL_GPIO_Init+0x2f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_Init+0x202>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a48      	ldr	r2, [pc, #288]	@ (8002bbc <HAL_GPIO_Init+0x2f4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0x1fe>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a47      	ldr	r2, [pc, #284]	@ (8002bc0 <HAL_GPIO_Init+0x2f8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_Init+0x1fa>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a46      	ldr	r2, [pc, #280]	@ (8002bc4 <HAL_GPIO_Init+0x2fc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_Init+0x1f6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a45      	ldr	r2, [pc, #276]	@ (8002bc8 <HAL_GPIO_Init+0x300>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_Init+0x1f2>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002aca:	2300      	movs	r3, #0
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002adc:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_GPIO_Init+0x2ec>)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aea:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b14:	4b2d      	ldr	r3, [pc, #180]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b38:	4a24      	ldr	r2, [pc, #144]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b3e:	4b23      	ldr	r3, [pc, #140]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b62:	4a1a      	ldr	r2, [pc, #104]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b68:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	f67f aea2 	bls.w	80028e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c14:	887a      	ldrh	r2, [r7, #2]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	041a      	lsls	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	400b      	ands	r3, r1
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12b      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fea4 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f001 ff92 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a81      	ldr	r2, [pc, #516]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <HAL_I2C_Init+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a80      	ldr	r2, [pc, #512]	@ (8002eb0 <HAL_I2C_Init+0x278>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e006      	b.n	8002cca <HAL_I2C_Init+0x92>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8002eb4 <HAL_I2C_Init+0x27c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0e7      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a78      	ldr	r2, [pc, #480]	@ (8002eb8 <HAL_I2C_Init+0x280>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <HAL_I2C_Init+0xd4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e009      	b.n	8002d20 <HAL_I2C_Init+0xe8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a69      	ldr	r2, [pc, #420]	@ (8002ebc <HAL_I2C_Init+0x284>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	495c      	ldr	r1, [pc, #368]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d819      	bhi.n	8002d74 <HAL_I2C_Init+0x13c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e59      	subs	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d54:	400b      	ands	r3, r1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_I2C_Init+0x138>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1e59      	subs	r1, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	e051      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x168>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e101      	b.n	80030d6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f006 fa2d 	bl	800934c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f00:	d102      	bne.n	8002f08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f002 fda6 	bl	8005a5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7c1a      	ldrb	r2, [r3, #16]
 8002f1a:	f88d 2000 	strb.w	r2, [sp]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	f002 fc85 	bl	8005830 <USB_CoreInit>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0ce      	b.n	80030d6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 fd9e 	bl	8005a80 <USB_SetCurrentMode>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0bf      	b.n	80030d6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e04a      	b.n	8002ff2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3314      	adds	r3, #20
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	b298      	uxth	r0, r3
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	332e      	adds	r3, #46	@ 0x2e
 8002f98:	4602      	mov	r2, r0
 8002f9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3318      	adds	r3, #24
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	331c      	adds	r3, #28
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3320      	adds	r3, #32
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3324      	adds	r3, #36	@ 0x24
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	791b      	ldrb	r3, [r3, #4]
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d3af      	bcc.n	8002f5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e044      	b.n	800308c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	3301      	adds	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	429a      	cmp	r2, r3
 8003094:	d3b5      	bcc.n	8003002 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7c1a      	ldrb	r2, [r3, #16]
 800309e:	f88d 2000 	strb.w	r2, [sp]
 80030a2:	3304      	adds	r3, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	f002 fd37 	bl	8005b18 <USB_DevInit>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e00c      	b.n	80030d6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fd81 	bl	8006bd6 <USB_DevDisconnect>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_PCD_Start+0x1c>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e022      	b.n	8003140 <HAL_PCD_Start+0x62>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 fc88 	bl	8005a3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fd2f 	bl	8006b94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08d      	sub	sp, #52	@ 0x34
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f003 fded 	bl	8006d3e <USB_GetMode>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 848c 	bne.w	8003a84 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fd51 	bl	8006c18 <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8482 	beq.w	8003a82 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f003 fd3e 	bl	8006c18 <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 0202 	and.w	r2, r2, #2
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fd2c 	bl	8006c18 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d161      	bne.n	800328e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0210 	bic.w	r2, r2, #16
 80031d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003200:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003204:	d124      	bne.n	8003250 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d035      	beq.n	800327e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800321c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6a38      	ldr	r0, [r7, #32]
 8003226:	f003 fb63 	bl	80068f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003236:	441a      	add	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003248:	441a      	add	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	615a      	str	r2, [r3, #20]
 800324e:	e016      	b.n	800327e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003256:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800325a:	d110      	bne.n	800327e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003262:	2208      	movs	r2, #8
 8003264:	4619      	mov	r1, r3
 8003266:	6a38      	ldr	r0, [r7, #32]
 8003268:	f003 fb42 	bl	80068f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003278:	441a      	add	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0210 	orr.w	r2, r2, #16
 800328c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fcc0 	bl	8006c18 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800329e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032a2:	f040 80a7 	bne.w	80033f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 fcc5 	bl	8006c3e <USB_ReadDevAllOutEpInterrupt>
 80032b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80032b6:	e099      	b.n	80033ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808e 	beq.w	80033e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 fce9 	bl	8006ca6 <USB_ReadDevOutEPInterrupt>
 80032d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	2301      	movs	r3, #1
 80032f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fea3 	bl	8004040 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	2308      	movs	r3, #8
 8003314:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003316:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ff79 	bl	8004210 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	2310      	movs	r3, #16
 8003338:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d030      	beq.n	80033a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334c:	2b80      	cmp	r3, #128	@ 0x80
 800334e:	d109      	bne.n	8003364 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003362:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	78db      	ldrb	r3, [r3, #3]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d108      	bne.n	8003394 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f006 f8d8 	bl	8009544 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a0:	461a      	mov	r2, r3
 80033a2:	2302      	movs	r3, #2
 80033a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	2320      	movs	r3, #32
 80033c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	3301      	adds	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f af62 	bne.w	80032b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 fc0d 	bl	8006c18 <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003404:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003408:	f040 80db 	bne.w	80035c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fc2e 	bl	8006c72 <USB_ReadDevAllInEpInterrupt>
 8003416:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800341c:	e0cd      	b.n	80035ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c2 	beq.w	80035ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fc54 	bl	8006ce2 <USB_ReadDevInEPInterrupt>
 800343a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d057      	beq.n	80034f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	2201      	movs	r2, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800345a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43db      	mvns	r3, r3
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003466:	4013      	ands	r3, r2
 8003468:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003476:	461a      	mov	r2, r3
 8003478:	2301      	movs	r3, #1
 800347a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	799b      	ldrb	r3, [r3, #6]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d132      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3320      	adds	r3, #32
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	331c      	adds	r3, #28
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4419      	add	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	3320      	adds	r3, #32
 80034ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3324      	adds	r3, #36	@ 0x24
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034e2:	461a      	mov	r2, r3
 80034e4:	2101      	movs	r1, #1
 80034e6:	f003 fc5b 	bl	8006da0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f005 ffac 	bl	800944e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800350c:	461a      	mov	r2, r3
 800350e:	2308      	movs	r3, #8
 8003510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003528:	461a      	mov	r2, r3
 800352a:	2310      	movs	r3, #16
 800352c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003544:	461a      	mov	r2, r3
 8003546:	2340      	movs	r3, #64	@ 0x40
 8003548:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003556:	6a38      	ldr	r0, [r7, #32]
 8003558:	f002 fc42 	bl	8005de0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800355c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3310      	adds	r3, #16
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	3304      	adds	r3, #4
 800356e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f005 ffef 	bl	8009568 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	2302      	movs	r3, #2
 800359a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fcbd 	bl	8003f28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f af2e 	bne.w	800341e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fb26 	bl	8006c18 <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035d6:	d122      	bne.n	800361e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035fe:	2100      	movs	r1, #0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fea3 	bl	800434c <HAL_PCDEx_LPM_Callback>
 8003606:	e002      	b.n	800360e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f005 ff8d 	bl	8009528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800361c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f003 faf8 	bl	8006c18 <USB_ReadInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003632:	d112      	bne.n	800365a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d102      	bne.n	800364a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f005 ff49 	bl	80094dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003658:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f003 fada 	bl	8006c18 <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366e:	f040 80b7 	bne.w	80037e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2110      	movs	r1, #16
 800368c:	4618      	mov	r0, r3
 800368e:	f002 fba7 	bl	8005de0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003696:	e046      	b.n	8003726 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a4:	461a      	mov	r2, r3
 80036a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d8:	461a      	mov	r2, r3
 80036da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	440a      	add	r2, r1
 8003716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800371a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800371e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003722:	3301      	adds	r3, #1
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	791b      	ldrb	r3, [r3, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	4293      	cmp	r3, r2
 8003730:	d3b2      	bcc.n	8003698 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003740:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003744:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7bdb      	ldrb	r3, [r3, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800375e:	f043 030b 	orr.w	r3, r3, #11
 8003762:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003774:	f043 030b 	orr.w	r3, r3, #11
 8003778:	6453      	str	r3, [r2, #68]	@ 0x44
 800377a:	e015      	b.n	80037a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800378a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800378e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003792:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037a2:	f043 030b 	orr.w	r3, r3, #11
 80037a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80037ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f003 fae8 	bl	8006da0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80037de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 fa17 	bl	8006c18 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f4:	d123      	bne.n	800383e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 faad 	bl	8006d5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f002 fb64 	bl	8005ed2 <USB_GetDevSpeed>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	f001 f9c9 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 800381a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003820:	461a      	mov	r2, r3
 8003822:	4620      	mov	r0, r4
 8003824:	f002 f868 	bl	80058f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f005 fe38 	bl	800949e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800383c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f003 f9e8 	bl	8006c18 <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d10a      	bne.n	8003868 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f005 fe15 	bl	8009482 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 0208 	and.w	r2, r2, #8
 8003866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f003 f9d3 	bl	8006c18 <USB_ReadInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	d123      	bne.n	80038c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
 800388c:	e014      	b.n	80038b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fb0a 	bl	8003ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	3301      	adds	r3, #1
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	461a      	mov	r2, r3
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d3e4      	bcc.n	800388e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 f9a5 	bl	8006c18 <USB_ReadInterrupts>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d8:	d13c      	bne.n	8003954 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038da:	2301      	movs	r3, #1
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038de:	e02b      	b.n	8003938 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3318      	adds	r3, #24
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d115      	bne.n	8003932 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003906:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003908:	2b00      	cmp	r3, #0
 800390a:	da12      	bge.n	8003932 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3317      	adds	r3, #23
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 faca 	bl	8003ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	791b      	ldrb	r3, [r3, #4]
 800393c:	461a      	mov	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	4293      	cmp	r3, r2
 8003942:	d3cd      	bcc.n	80038e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f003 f95d 	bl	8006c18 <USB_ReadInterrupts>
 800395e:	4603      	mov	r3, r0
 8003960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003968:	d156      	bne.n	8003a18 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800396a:	2301      	movs	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
 800396e:	e045      	b.n	80039fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d12e      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003998:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800399a:	2b00      	cmp	r3, #0
 800399c:	da2b      	bge.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	0c1a      	lsrs	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80039a8:	4053      	eors	r3, r2
 80039aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d121      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039f2:	6053      	str	r3, [r2, #4]
            break;
 80039f4:	e008      	b.n	8003a08 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	3301      	adds	r3, #1
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	791b      	ldrb	r3, [r3, #4]
 8003a00:	461a      	mov	r2, r3
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d3b3      	bcc.n	8003970 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f003 f8fb 	bl	8006c18 <USB_ReadInterrupts>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2c:	d10a      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f005 fdac 	bl	800958c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 f8e5 	bl	8006c18 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d115      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f005 fd9c 	bl	80095a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	e000      	b.n	8003a84 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003a82:	bf00      	nop
    }
  }
}
 8003a84:	3734      	adds	r7, #52	@ 0x34
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}

08003a8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_PCD_SetAddress+0x1a>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e012      	b.n	8003aca <HAL_PCD_SetAddress+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f003 f844 	bl	8006b48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	4608      	mov	r0, r1
 8003adc:	4611      	mov	r1, r2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	70fb      	strb	r3, [r7, #3]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	803b      	strh	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da0f      	bge.n	8003b18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	3310      	adds	r3, #16
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	705a      	strb	r2, [r3, #1]
 8003b16:	e00f      	b.n	8003b38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003b44:	883b      	ldrh	r3, [r7, #0]
 8003b46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	78ba      	ldrb	r2, [r7, #2]
 8003b52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b66:	78bb      	ldrb	r3, [r7, #2]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d102      	bne.n	8003b72 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_PCD_EP_Open+0xae>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e00e      	b.n	8003b9e <HAL_PCD_EP_Open+0xcc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f002 f9c4 	bl	8005f1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003b9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0f      	bge.n	8003bda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3310      	adds	r3, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e00f      	b.n	8003bfa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_PCD_EP_Close+0x6e>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e00e      	b.n	8003c32 <HAL_PCD_EP_Close+0x8c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68f9      	ldr	r1, [r7, #12]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f002 fa02 	bl	800602c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	460b      	mov	r3, r1
 8003c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	3304      	adds	r3, #4
 8003c62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7c:	7afb      	ldrb	r3, [r7, #11]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	799b      	ldrb	r3, [r3, #6]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	799b      	ldrb	r3, [r3, #6]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6979      	ldr	r1, [r7, #20]
 8003ca2:	f002 fa9f 	bl	80061e4 <USB_EPStartXfer>

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	460b      	mov	r3, r1
 8003cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3310      	adds	r3, #16
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	799b      	ldrb	r3, [r3, #6]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	799b      	ldrb	r3, [r3, #6]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	f002 fa4d 	bl	80061e4 <USB_EPStartXfer>

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	7912      	ldrb	r2, [r2, #4]
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e04f      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	da0f      	bge.n	8003d9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	f003 020f 	and.w	r2, r3, #15
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	3310      	adds	r3, #16
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3304      	adds	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	705a      	strb	r2, [r3, #1]
 8003d98:	e00d      	b.n	8003db6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_PCD_EP_SetStall+0x82>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e01d      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xbe>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f002 fddb 	bl	80069a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7999      	ldrb	r1, [r3, #6]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e02:	461a      	mov	r2, r3
 8003e04:	f002 ffcc 	bl	8006da0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	7912      	ldrb	r2, [r2, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e042      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0f      	bge.n	8003e60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3310      	adds	r3, #16
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
 8003e5e:	e00f      	b.n	8003e80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_EP_ClrStall+0x86>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00e      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f002 fde4 	bl	8006a7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da0c      	bge.n	8003ef4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3310      	adds	r3, #16
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	3304      	adds	r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e00c      	b.n	8003f0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f002 fc03 	bl	8006720 <USB_EPStopXfer>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	@ 0x28
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	3310      	adds	r3, #16
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d901      	bls.n	8003f60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e06b      	b.n	8004038 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d902      	bls.n	8003f7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3303      	adds	r3, #3
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f84:	e02a      	b.n	8003fdc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d902      	bls.n	8003fa2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3303      	adds	r3, #3
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68d9      	ldr	r1, [r3, #12]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f002 fc58 	bl	8006874 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	441a      	add	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d809      	bhi.n	8004006 <PCD_WriteEmptyTxFifo+0xde>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d203      	bcs.n	8004006 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1bf      	bne.n	8003f86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	429a      	cmp	r2, r3
 8004010:	d811      	bhi.n	8004036 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	2201      	movs	r2, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	43db      	mvns	r3, r3
 800402c:	6939      	ldr	r1, [r7, #16]
 800402e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004032:	4013      	ands	r3, r2
 8004034:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	333c      	adds	r3, #60	@ 0x3c
 8004058:	3304      	adds	r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	799b      	ldrb	r3, [r3, #6]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d17b      	bne.n	800416e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4a61      	ldr	r2, [pc, #388]	@ (8004208 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	f240 80b9 	bls.w	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80b3 	beq.w	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a8:	6093      	str	r3, [r2, #8]
 80040aa:	e0a7      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c2:	461a      	mov	r2, r3
 80040c4:	2320      	movs	r3, #32
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	e098      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f040 8093 	bne.w	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004208 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d90f      	bls.n	80040fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	e07e      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	0159      	lsls	r1, r3, #5
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	440b      	add	r3, r1
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d114      	bne.n	8004160 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004148:	461a      	mov	r2, r3
 800414a:	2101      	movs	r1, #1
 800414c:	f002 fe28 	bl	8006da0 <USB_EP0_OutStart>
 8004150:	e006      	b.n	8004160 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f005 f956 	bl	8009418 <HAL_PCD_DataOutStageCallback>
 800416c:	e046      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a26      	ldr	r2, [pc, #152]	@ (800420c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d124      	bne.n	80041c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418c:	461a      	mov	r2, r3
 800418e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004192:	6093      	str	r3, [r2, #8]
 8004194:	e032      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ac:	461a      	mov	r2, r3
 80041ae:	2320      	movs	r3, #32
 80041b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f005 f92d 	bl	8009418 <HAL_PCD_DataOutStageCallback>
 80041be:	e01d      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d114      	bne.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d108      	bne.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041e8:	461a      	mov	r2, r3
 80041ea:	2100      	movs	r1, #0
 80041ec:	f002 fdd8 	bl	8006da0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f005 f90e 	bl	8009418 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	4f54300a 	.word	0x4f54300a
 800420c:	4f54310a 	.word	0x4f54310a

08004210 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	333c      	adds	r3, #60	@ 0x3c
 8004228:	3304      	adds	r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a15      	ldr	r2, [pc, #84]	@ (8004298 <PCD_EP_OutSetupPacket_int+0x88>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d90e      	bls.n	8004264 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425c:	461a      	mov	r2, r3
 800425e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004262:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f005 f8c5 	bl	80093f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <PCD_EP_OutSetupPacket_int+0x88>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d90c      	bls.n	800428c <PCD_EP_OutSetupPacket_int+0x7c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	799b      	ldrb	r3, [r3, #6]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d108      	bne.n	800428c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004284:	461a      	mov	r2, r3
 8004286:	2101      	movs	r1, #1
 8004288:	f002 fd8a 	bl	8006da0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	4f54300a 	.word	0x4f54300a

0800429c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
 80042a8:	4613      	mov	r3, r2
 80042aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d107      	bne.n	80042ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ba:	883b      	ldrh	r3, [r7, #0]
 80042bc:	0419      	lsls	r1, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042c8:	e028      	b.n	800431c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e00d      	b.n	80042fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	3340      	adds	r3, #64	@ 0x40
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4413      	add	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	3301      	adds	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	3b01      	subs	r3, #1
 8004300:	429a      	cmp	r2, r3
 8004302:	d3ec      	bcc.n	80042de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004304:	883b      	ldrh	r3, [r7, #0]
 8004306:	0418      	lsls	r0, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	3b01      	subs	r3, #1
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	4302      	orrs	r2, r0
 8004314:	3340      	adds	r3, #64	@ 0x40
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e267      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d075      	beq.n	800446e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004382:	4b88      	ldr	r3, [pc, #544]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b04      	cmp	r3, #4
 800438c:	d00c      	beq.n	80043a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438e:	4b85      	ldr	r3, [pc, #532]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004396:	2b08      	cmp	r3, #8
 8004398:	d112      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4b82      	ldr	r3, [pc, #520]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a8:	4b7e      	ldr	r3, [pc, #504]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d05b      	beq.n	800446c <HAL_RCC_OscConfig+0x108>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d157      	bne.n	800446c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e242      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c8:	d106      	bne.n	80043d8 <HAL_RCC_OscConfig+0x74>
 80043ca:	4b76      	ldr	r3, [pc, #472]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a75      	ldr	r2, [pc, #468]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e01d      	b.n	8004414 <HAL_RCC_OscConfig+0xb0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0x98>
 80043e2:	4b70      	ldr	r3, [pc, #448]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6f      	ldr	r2, [pc, #444]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b6d      	ldr	r3, [pc, #436]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6c      	ldr	r2, [pc, #432]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e00b      	b.n	8004414 <HAL_RCC_OscConfig+0xb0>
 80043fc:	4b69      	ldr	r3, [pc, #420]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a68      	ldr	r2, [pc, #416]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b66      	ldr	r3, [pc, #408]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a65      	ldr	r2, [pc, #404]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800440e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d013      	beq.n	8004444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fd fd20 	bl	8001e60 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fd fd1c 	bl	8001e60 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	@ 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e207      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	4b5b      	ldr	r3, [pc, #364]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0xc0>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fd fd0c 	bl	8001e60 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444c:	f7fd fd08 	bl	8001e60 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	@ 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e1f3      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	4b51      	ldr	r3, [pc, #324]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0xe8>
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d063      	beq.n	8004542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800447a:	4b4a      	ldr	r3, [pc, #296]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b47      	ldr	r3, [pc, #284]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800448e:	2b08      	cmp	r3, #8
 8004490:	d11c      	bne.n	80044cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b44      	ldr	r3, [pc, #272]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	4b41      	ldr	r3, [pc, #260]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_RCC_OscConfig+0x152>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e1c7      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b6:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4937      	ldr	r1, [pc, #220]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	e03a      	b.n	8004542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d4:	4b34      	ldr	r3, [pc, #208]	@ (80045a8 <HAL_RCC_OscConfig+0x244>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044da:	f7fd fcc1 	bl	8001e60 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e2:	f7fd fcbd 	bl	8001e60 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e1a8      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	4b2b      	ldr	r3, [pc, #172]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b28      	ldr	r3, [pc, #160]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4925      	ldr	r1, [pc, #148]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]
 8004514:	e015      	b.n	8004542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_RCC_OscConfig+0x244>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fca0 	bl	8001e60 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004524:	f7fd fc9c 	bl	8001e60 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e187      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d036      	beq.n	80045bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004556:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <HAL_RCC_OscConfig+0x248>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fd fc80 	bl	8001e60 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004564:	f7fd fc7c 	bl	8001e60 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e167      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x200>
 8004582:	e01b      	b.n	80045bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <HAL_RCC_OscConfig+0x248>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7fd fc69 	bl	8001e60 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004590:	e00e      	b.n	80045b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004592:	f7fd fc65 	bl	8001e60 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d907      	bls.n	80045b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e150      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
 80045a4:	40023800 	.word	0x40023800
 80045a8:	42470000 	.word	0x42470000
 80045ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	4b88      	ldr	r3, [pc, #544]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ea      	bne.n	8004592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8097 	beq.w	80046f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ce:	4b81      	ldr	r3, [pc, #516]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10f      	bne.n	80045fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	4b7d      	ldr	r3, [pc, #500]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	4a7c      	ldr	r2, [pc, #496]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ea:	4b7a      	ldr	r3, [pc, #488]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b77      	ldr	r3, [pc, #476]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d118      	bne.n	8004638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004606:	4b74      	ldr	r3, [pc, #464]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a73      	ldr	r2, [pc, #460]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 800460c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004612:	f7fd fc25 	bl	8001e60 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461a:	f7fd fc21 	bl	8001e60 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e10c      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	4b6a      	ldr	r3, [pc, #424]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d106      	bne.n	800464e <HAL_RCC_OscConfig+0x2ea>
 8004640:	4b64      	ldr	r3, [pc, #400]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004644:	4a63      	ldr	r2, [pc, #396]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
 800464c:	e01c      	b.n	8004688 <HAL_RCC_OscConfig+0x324>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b05      	cmp	r3, #5
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0x30c>
 8004656:	4b5f      	ldr	r3, [pc, #380]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	4a5e      	ldr	r2, [pc, #376]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	6713      	str	r3, [r2, #112]	@ 0x70
 8004662:	4b5c      	ldr	r3, [pc, #368]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004666:	4a5b      	ldr	r2, [pc, #364]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6713      	str	r3, [r2, #112]	@ 0x70
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0x324>
 8004670:	4b58      	ldr	r3, [pc, #352]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4a57      	ldr	r2, [pc, #348]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	@ 0x70
 800467c:	4b55      	ldr	r3, [pc, #340]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4a54      	ldr	r2, [pc, #336]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004682:	f023 0304 	bic.w	r3, r3, #4
 8004686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fd fbe6 	bl	8001e60 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fd fbe2 	bl	8001e60 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0cb      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ae:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0ee      	beq.n	8004698 <HAL_RCC_OscConfig+0x334>
 80046ba:	e014      	b.n	80046e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fd fbd0 	bl	8001e60 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fd fbcc 	bl	8001e60 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0b5      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046da:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ee      	bne.n	80046c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ec:	4b39      	ldr	r3, [pc, #228]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	4a38      	ldr	r2, [pc, #224]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80a1 	beq.w	8004844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004702:	4b34      	ldr	r3, [pc, #208]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b08      	cmp	r3, #8
 800470c:	d05c      	beq.n	80047c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d141      	bne.n	800479a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	4b31      	ldr	r3, [pc, #196]	@ (80047dc <HAL_RCC_OscConfig+0x478>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd fba0 	bl	8001e60 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fd fb9c 	bl	8001e60 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e087      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	4b27      	ldr	r3, [pc, #156]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	3b01      	subs	r3, #1
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	491b      	ldr	r1, [pc, #108]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800476c:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <HAL_RCC_OscConfig+0x478>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004772:	f7fd fb75 	bl	8001e60 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477a:	f7fd fb71 	bl	8001e60 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e05c      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478c:	4b11      	ldr	r3, [pc, #68]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x416>
 8004798:	e054      	b.n	8004844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b10      	ldr	r3, [pc, #64]	@ (80047dc <HAL_RCC_OscConfig+0x478>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fd fb5e 	bl	8001e60 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fd fb5a 	bl	8001e60 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e045      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x444>
 80047c6:	e03d      	b.n	8004844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e038      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000
 80047dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x4ec>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d028      	beq.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d121      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d11a      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004818:	4293      	cmp	r3, r2
 800481a:	d111      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	3b01      	subs	r3, #1
 800482a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800

08004854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0cc      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b68      	ldr	r3, [pc, #416]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d90c      	bls.n	8004890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b65      	ldr	r3, [pc, #404]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b63      	ldr	r3, [pc, #396]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0b8      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a8:	4b59      	ldr	r3, [pc, #356]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a58      	ldr	r2, [pc, #352]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c0:	4b53      	ldr	r3, [pc, #332]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a52      	ldr	r2, [pc, #328]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048cc:	4b50      	ldr	r3, [pc, #320]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	494d      	ldr	r1, [pc, #308]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d044      	beq.n	8004974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f2:	4b47      	ldr	r3, [pc, #284]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d119      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e07f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d003      	beq.n	8004912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490e:	2b03      	cmp	r3, #3
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b3f      	ldr	r3, [pc, #252]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e06f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	4b3b      	ldr	r3, [pc, #236]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e067      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4934      	ldr	r1, [pc, #208]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004944:	f7fd fa8c 	bl	8001e60 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fd fa88 	bl	8001e60 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e04f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b2b      	ldr	r3, [pc, #172]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004974:	4b25      	ldr	r3, [pc, #148]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20c      	bcs.n	800499c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b22      	ldr	r3, [pc, #136]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b20      	ldr	r3, [pc, #128]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e032      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a8:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4916      	ldr	r1, [pc, #88]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c6:	4b12      	ldr	r3, [pc, #72]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	490e      	ldr	r1, [pc, #56]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049da:	f000 f821 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049de:	4602      	mov	r2, r0
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	490a      	ldr	r1, [pc, #40]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	5ccb      	ldrb	r3, [r1, r3]
 80049ee:	fa22 f303 	lsr.w	r3, r2, r3
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049f6:	4b09      	ldr	r3, [pc, #36]	@ (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd f9ec 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023c00 	.word	0x40023c00
 8004a10:	40023800 	.word	0x40023800
 8004a14:	0800e9ac 	.word	0x0800e9ac
 8004a18:	20000018 	.word	0x20000018
 8004a1c:	2000001c 	.word	0x2000001c

08004a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a24:	b090      	sub	sp, #64	@ 0x40
 8004a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a38:	4b59      	ldr	r3, [pc, #356]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d00d      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x40>
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	f200 80a1 	bhi.w	8004b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d003      	beq.n	8004a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a52:	e09b      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b53      	ldr	r3, [pc, #332]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a58:	e09b      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5a:	4b53      	ldr	r3, [pc, #332]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a5e:	e098      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a60:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d028      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	623b      	str	r3, [r7, #32]
 8004a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a8c:	fb03 f201 	mul.w	r2, r3, r1
 8004a90:	2300      	movs	r3, #0
 8004a92:	fb00 f303 	mul.w	r3, r0, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	4a43      	ldr	r2, [pc, #268]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aa0:	460a      	mov	r2, r1
 8004aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa6:	4413      	add	r3, r2
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aac:	2200      	movs	r2, #0
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004aba:	f7fc f8ed 	bl	8000c98 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ac6:	e053      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac8:	4b35      	ldr	r3, [pc, #212]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	2200      	movs	r2, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	617a      	str	r2, [r7, #20]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ada:	f04f 0b00 	mov.w	fp, #0
 8004ade:	4652      	mov	r2, sl
 8004ae0:	465b      	mov	r3, fp
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	0159      	lsls	r1, r3, #5
 8004aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af0:	0150      	lsls	r0, r2, #5
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	ebb2 080a 	subs.w	r8, r2, sl
 8004afa:	eb63 090b 	sbc.w	r9, r3, fp
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b12:	ebb2 0408 	subs.w	r4, r2, r8
 8004b16:	eb63 0509 	sbc.w	r5, r3, r9
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	00eb      	lsls	r3, r5, #3
 8004b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b28:	00e2      	lsls	r2, r4, #3
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	461d      	mov	r5, r3
 8004b2e:	eb14 030a 	adds.w	r3, r4, sl
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	eb45 030b 	adc.w	r3, r5, fp
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b46:	4629      	mov	r1, r5
 8004b48:	028b      	lsls	r3, r1, #10
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b50:	4621      	mov	r1, r4
 8004b52:	028a      	lsls	r2, r1, #10
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	60fa      	str	r2, [r7, #12]
 8004b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b64:	f7fc f898 	bl	8000c98 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004b80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b8a:	e002      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3740      	adds	r7, #64	@ 0x40
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	017d7840 	.word	0x017d7840

08004bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000018 	.word	0x20000018

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bc8:	f7ff fff0 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0a9b      	lsrs	r3, r3, #10
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4903      	ldr	r1, [pc, #12]	@ (8004be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	0800e9bc 	.word	0x0800e9bc

08004bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e041      	b.n	8004c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc ff12 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f000 fac0 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e041      	b.n	8004d20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f839 	bl	8004d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 fa71 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e022      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e015      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e008      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e068      	b.n	8004e80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x82>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	e013      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0x92>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fc8a 	bl	8005708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a23      	ldr	r2, [pc, #140]	@ (8004e88 <HAL_TIM_PWM_Start+0x14c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1d      	ldr	r2, [pc, #116]	@ (8004e88 <HAL_TIM_PWM_Start+0x14c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d018      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x10e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d013      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x10e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a19      	ldr	r2, [pc, #100]	@ (8004e8c <HAL_TIM_PWM_Start+0x150>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x10e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <HAL_TIM_PWM_Start+0x154>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x10e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <HAL_TIM_PWM_Start+0x158>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x10e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a14      	ldr	r2, [pc, #80]	@ (8004e98 <HAL_TIM_PWM_Start+0x15c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d111      	bne.n	8004e6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b06      	cmp	r3, #6
 8004e5a:	d010      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	e007      	b.n	8004e7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40014000 	.word	0x40014000

08004e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0ae      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	f200 809f 	bhi.w	8005008 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08005009 	.word	0x08005009
 8004ed8:	08005009 	.word	0x08005009
 8004edc:	08005009 	.word	0x08005009
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08005009 	.word	0x08005009
 8004ee8:	08005009 	.word	0x08005009
 8004eec:	08005009 	.word	0x08005009
 8004ef0:	08004f87 	.word	0x08004f87
 8004ef4:	08005009 	.word	0x08005009
 8004ef8:	08005009 	.word	0x08005009
 8004efc:	08005009 	.word	0x08005009
 8004f00:	08004fc7 	.word	0x08004fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f9d6 	bl	80052bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	619a      	str	r2, [r3, #24]
      break;
 8004f42:	e064      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa1c 	bl	8005388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	619a      	str	r2, [r3, #24]
      break;
 8004f84:	e043      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fa67 	bl	8005460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0208 	orr.w	r2, r2, #8
 8004fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0204 	bic.w	r2, r2, #4
 8004fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69d9      	ldr	r1, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	61da      	str	r2, [r3, #28]
      break;
 8004fc4:	e023      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fab1 	bl	8005534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	021a      	lsls	r2, r3, #8
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	61da      	str	r2, [r3, #28]
      break;
 8005006:	e002      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
      break;
 800500c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_TIM_ConfigClockSource+0x1c>
 8005038:	2302      	movs	r3, #2
 800503a:	e0b4      	b.n	80051a6 <HAL_TIM_ConfigClockSource+0x186>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800505a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005074:	d03e      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507a:	f200 8087 	bhi.w	800518c <HAL_TIM_ConfigClockSource+0x16c>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005082:	f000 8086 	beq.w	8005192 <HAL_TIM_ConfigClockSource+0x172>
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508a:	d87f      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b70      	cmp	r3, #112	@ 0x70
 800508e:	d01a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005090:	2b70      	cmp	r3, #112	@ 0x70
 8005092:	d87b      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b60      	cmp	r3, #96	@ 0x60
 8005096:	d050      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x11a>
 8005098:	2b60      	cmp	r3, #96	@ 0x60
 800509a:	d877      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b50      	cmp	r3, #80	@ 0x50
 800509e:	d03c      	beq.n	800511a <HAL_TIM_ConfigClockSource+0xfa>
 80050a0:	2b50      	cmp	r3, #80	@ 0x50
 80050a2:	d873      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b40      	cmp	r3, #64	@ 0x40
 80050a6:	d058      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x13a>
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	d86f      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b30      	cmp	r3, #48	@ 0x30
 80050ae:	d064      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b30      	cmp	r3, #48	@ 0x30
 80050b2:	d86b      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d060      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d867      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05c      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d05a      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x15a>
 80050c4:	e062      	b.n	800518c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050d6:	f000 faf7 	bl	80056c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	609a      	str	r2, [r3, #8]
      break;
 80050f2:	e04f      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005104:	f000 fae0 	bl	80056c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005116:	609a      	str	r2, [r3, #8]
      break;
 8005118:	e03c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005126:	461a      	mov	r2, r3
 8005128:	f000 fa54 	bl	80055d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2150      	movs	r1, #80	@ 0x50
 8005132:	4618      	mov	r0, r3
 8005134:	f000 faad 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8005138:	e02c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005146:	461a      	mov	r2, r3
 8005148:	f000 fa73 	bl	8005632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2160      	movs	r1, #96	@ 0x60
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fa9d 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8005158:	e01c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005166:	461a      	mov	r2, r3
 8005168:	f000 fa34 	bl	80055d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2140      	movs	r1, #64	@ 0x40
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fa8d 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8005178:	e00c      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 fa84 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 800518a:	e003      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      break;
 8005190:	e000      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a37      	ldr	r2, [pc, #220]	@ (80052a0 <TIM_Base_SetConfig+0xf0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00f      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ce:	d00b      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a34      	ldr	r2, [pc, #208]	@ (80052a4 <TIM_Base_SetConfig+0xf4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d007      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a33      	ldr	r2, [pc, #204]	@ (80052a8 <TIM_Base_SetConfig+0xf8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a32      	ldr	r2, [pc, #200]	@ (80052ac <TIM_Base_SetConfig+0xfc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d108      	bne.n	80051fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a28      	ldr	r2, [pc, #160]	@ (80052a0 <TIM_Base_SetConfig+0xf0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01b      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005208:	d017      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a25      	ldr	r2, [pc, #148]	@ (80052a4 <TIM_Base_SetConfig+0xf4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a24      	ldr	r2, [pc, #144]	@ (80052a8 <TIM_Base_SetConfig+0xf8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00f      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a23      	ldr	r2, [pc, #140]	@ (80052ac <TIM_Base_SetConfig+0xfc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a22      	ldr	r2, [pc, #136]	@ (80052b0 <TIM_Base_SetConfig+0x100>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a21      	ldr	r2, [pc, #132]	@ (80052b4 <TIM_Base_SetConfig+0x104>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a20      	ldr	r2, [pc, #128]	@ (80052b8 <TIM_Base_SetConfig+0x108>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a0c      	ldr	r2, [pc, #48]	@ (80052a0 <TIM_Base_SetConfig+0xf0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d103      	bne.n	800527a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800

080052bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f023 0201 	bic.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 0302 	bic.w	r3, r3, #2
 8005304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <TIM_OC1_SetConfig+0xc8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d10c      	bne.n	8005332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0308 	bic.w	r3, r3, #8
 800531e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <TIM_OC1_SetConfig+0xc8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d111      	bne.n	800535e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010000 	.word	0x40010000

08005388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 0210 	bic.w	r2, r3, #16
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0320 	bic.w	r3, r3, #32
 80053d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	@ (800545c <TIM_OC2_SetConfig+0xd4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10d      	bne.n	8005404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a15      	ldr	r2, [pc, #84]	@ (800545c <TIM_OC2_SetConfig+0xd4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d113      	bne.n	8005434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800541a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000

08005460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005530 <TIM_OC3_SetConfig+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10d      	bne.n	80054da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a14      	ldr	r2, [pc, #80]	@ (8005530 <TIM_OC3_SetConfig+0xd0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d113      	bne.n	800550a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40010000 	.word	0x40010000

08005534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800557e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	031b      	lsls	r3, r3, #12
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <TIM_OC4_SetConfig+0x9c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d109      	bne.n	80055a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800559a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	019b      	lsls	r3, r3, #6
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000

080055d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0201 	bic.w	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 030a 	bic.w	r3, r3, #10
 8005610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005632:	b480      	push	{r7}
 8005634:	b087      	sub	sp, #28
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f023 0210 	bic.w	r2, r3, #16
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800565c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	031b      	lsls	r3, r3, #12
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800566e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f043 0307 	orr.w	r3, r3, #7
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2201      	movs	r2, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	43db      	mvns	r3, r3
 800572a:	401a      	ands	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	fa01 f303 	lsl.w	r3, r1, r3
 8005740:	431a      	orrs	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005768:	2302      	movs	r3, #2
 800576a:	e050      	b.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1c      	ldr	r2, [pc, #112]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b8:	d013      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a18      	ldr	r2, [pc, #96]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a16      	ldr	r2, [pc, #88]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a15      	ldr	r2, [pc, #84]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a13      	ldr	r2, [pc, #76]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10c      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40014000 	.word	0x40014000

08005830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005830:	b084      	sub	sp, #16
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	f107 001c 	add.w	r0, r7, #28
 800583e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005842:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005846:	2b01      	cmp	r3, #1
 8005848:	d123      	bne.n	8005892 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800585e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005876:	2b01      	cmp	r3, #1
 8005878:	d105      	bne.n	8005886 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 fae8 	bl	8006e5c <USB_CoreReset>
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e01b      	b.n	80058ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 fadc 	bl	8006e5c <USB_CoreReset>
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80058bc:	e005      	b.n	80058ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058ca:	7fbb      	ldrb	r3, [r7, #30]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d10b      	bne.n	80058e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f043 0206 	orr.w	r2, r3, #6
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058f4:	b004      	add	sp, #16
 80058f6:	4770      	bx	lr

080058f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d165      	bne.n	80059d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a41      	ldr	r2, [pc, #260]	@ (8005a14 <USB_SetTurnaroundTime+0x11c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d906      	bls.n	8005922 <USB_SetTurnaroundTime+0x2a>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a40      	ldr	r2, [pc, #256]	@ (8005a18 <USB_SetTurnaroundTime+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d202      	bcs.n	8005922 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800591c:	230f      	movs	r3, #15
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e062      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a3c      	ldr	r2, [pc, #240]	@ (8005a18 <USB_SetTurnaroundTime+0x120>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d306      	bcc.n	8005938 <USB_SetTurnaroundTime+0x40>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a3b      	ldr	r2, [pc, #236]	@ (8005a1c <USB_SetTurnaroundTime+0x124>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d202      	bcs.n	8005938 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005932:	230e      	movs	r3, #14
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e057      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4a38      	ldr	r2, [pc, #224]	@ (8005a1c <USB_SetTurnaroundTime+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d306      	bcc.n	800594e <USB_SetTurnaroundTime+0x56>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a37      	ldr	r2, [pc, #220]	@ (8005a20 <USB_SetTurnaroundTime+0x128>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d202      	bcs.n	800594e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005948:	230d      	movs	r3, #13
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e04c      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a33      	ldr	r2, [pc, #204]	@ (8005a20 <USB_SetTurnaroundTime+0x128>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d306      	bcc.n	8005964 <USB_SetTurnaroundTime+0x6c>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a32      	ldr	r2, [pc, #200]	@ (8005a24 <USB_SetTurnaroundTime+0x12c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d802      	bhi.n	8005964 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800595e:	230c      	movs	r3, #12
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e041      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a2f      	ldr	r2, [pc, #188]	@ (8005a24 <USB_SetTurnaroundTime+0x12c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d906      	bls.n	800597a <USB_SetTurnaroundTime+0x82>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a2e      	ldr	r2, [pc, #184]	@ (8005a28 <USB_SetTurnaroundTime+0x130>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d802      	bhi.n	800597a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005974:	230b      	movs	r3, #11
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e036      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a28 <USB_SetTurnaroundTime+0x130>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d906      	bls.n	8005990 <USB_SetTurnaroundTime+0x98>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a29      	ldr	r2, [pc, #164]	@ (8005a2c <USB_SetTurnaroundTime+0x134>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d802      	bhi.n	8005990 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800598a:	230a      	movs	r3, #10
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e02b      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a26      	ldr	r2, [pc, #152]	@ (8005a2c <USB_SetTurnaroundTime+0x134>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d906      	bls.n	80059a6 <USB_SetTurnaroundTime+0xae>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4a25      	ldr	r2, [pc, #148]	@ (8005a30 <USB_SetTurnaroundTime+0x138>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d202      	bcs.n	80059a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059a0:	2309      	movs	r3, #9
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e020      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4a21      	ldr	r2, [pc, #132]	@ (8005a30 <USB_SetTurnaroundTime+0x138>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d306      	bcc.n	80059bc <USB_SetTurnaroundTime+0xc4>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4a20      	ldr	r2, [pc, #128]	@ (8005a34 <USB_SetTurnaroundTime+0x13c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d802      	bhi.n	80059bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059b6:	2308      	movs	r3, #8
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e015      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4a1d      	ldr	r2, [pc, #116]	@ (8005a34 <USB_SetTurnaroundTime+0x13c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d906      	bls.n	80059d2 <USB_SetTurnaroundTime+0xda>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <USB_SetTurnaroundTime+0x140>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d202      	bcs.n	80059d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059cc:	2307      	movs	r3, #7
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e00a      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059d2:	2306      	movs	r3, #6
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e007      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059de:	2309      	movs	r3, #9
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e001      	b.n	80059e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059e4:	2309      	movs	r3, #9
 80059e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	029b      	lsls	r3, r3, #10
 80059fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005a00:	431a      	orrs	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	00d8acbf 	.word	0x00d8acbf
 8005a18:	00e4e1c0 	.word	0x00e4e1c0
 8005a1c:	00f42400 	.word	0x00f42400
 8005a20:	01067380 	.word	0x01067380
 8005a24:	011a499f 	.word	0x011a499f
 8005a28:	01312cff 	.word	0x01312cff
 8005a2c:	014ca43f 	.word	0x014ca43f
 8005a30:	016e3600 	.word	0x016e3600
 8005a34:	01a6ab1f 	.word	0x01a6ab1f
 8005a38:	01e84800 	.word	0x01e84800

08005a3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f043 0201 	orr.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d115      	bne.n	8005ace <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005aae:	200a      	movs	r0, #10
 8005ab0:	f7fc f9e2 	bl	8001e78 <HAL_Delay>
      ms += 10U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	330a      	adds	r3, #10
 8005ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 f93f 	bl	8006d3e <USB_GetMode>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d01e      	beq.n	8005b04 <USB_SetCurrentMode+0x84>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2bc7      	cmp	r3, #199	@ 0xc7
 8005aca:	d9f0      	bls.n	8005aae <USB_SetCurrentMode+0x2e>
 8005acc:	e01a      	b.n	8005b04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d115      	bne.n	8005b00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ae0:	200a      	movs	r0, #10
 8005ae2:	f7fc f9c9 	bl	8001e78 <HAL_Delay>
      ms += 10U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	330a      	adds	r3, #10
 8005aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 f926 	bl	8006d3e <USB_GetMode>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <USB_SetCurrentMode+0x84>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2bc7      	cmp	r3, #199	@ 0xc7
 8005afc:	d9f0      	bls.n	8005ae0 <USB_SetCurrentMode+0x60>
 8005afe:	e001      	b.n	8005b04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e005      	b.n	8005b10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b08:	d101      	bne.n	8005b0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b18:	b084      	sub	sp, #16
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e009      	b.n	8005b4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3340      	adds	r3, #64	@ 0x40
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	2200      	movs	r2, #0
 8005b44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b0e      	cmp	r3, #14
 8005b50:	d9f2      	bls.n	8005b38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d11c      	bne.n	8005b94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b68:	f043 0302 	orr.w	r3, r3, #2
 8005b6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b92:	e00b      	b.n	8005bac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d10d      	bne.n	8005bdc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f968 	bl	8005ea0 <USB_SetDevSpeed>
 8005bd0:	e008      	b.n	8005be4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f963 	bl	8005ea0 <USB_SetDevSpeed>
 8005bda:	e003      	b.n	8005be4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bdc:	2103      	movs	r1, #3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f95e 	bl	8005ea0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be4:	2110      	movs	r1, #16
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8fa 	bl	8005de0 <USB_FlushTxFifo>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f924 	bl	8005e44 <USB_FlushRxFifo>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c24:	461a      	mov	r2, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e043      	b.n	8005cb8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c46:	d118      	bne.n	8005c7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e013      	b.n	8005c8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	461a      	mov	r2, r3
 8005c72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e008      	b.n	8005c8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c86:	461a      	mov	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005caa:	461a      	mov	r2, r3
 8005cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d3b5      	bcc.n	8005c30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	e043      	b.n	8005d52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ce0:	d118      	bne.n	8005d14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e013      	b.n	8005d26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	e008      	b.n	8005d26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	2300      	movs	r3, #0
 8005d24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d32:	461a      	mov	r2, r3
 8005d34:	2300      	movs	r3, #0
 8005d36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	461a      	mov	r2, r3
 8005d46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d56:	461a      	mov	r2, r3
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d3b5      	bcc.n	8005cca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f043 0210 	orr.w	r2, r3, #16
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	4b10      	ldr	r3, [pc, #64]	@ (8005ddc <USB_DevInit+0x2c4>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005da0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f043 0208 	orr.w	r2, r3, #8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005db4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d107      	bne.n	8005dcc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dc4:	f043 0304 	orr.w	r3, r3, #4
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd8:	b004      	add	sp, #16
 8005dda:	4770      	bx	lr
 8005ddc:	803c3800 	.word	0x803c3800

08005de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfa:	d901      	bls.n	8005e00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e01b      	b.n	8005e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	daf2      	bge.n	8005dee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	019b      	lsls	r3, r3, #6
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e24:	d901      	bls.n	8005e2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e006      	b.n	8005e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d0f0      	beq.n	8005e18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e5c:	d901      	bls.n	8005e62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e018      	b.n	8005e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	daf2      	bge.n	8005e50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2210      	movs	r2, #16
 8005e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e80:	d901      	bls.n	8005e86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e006      	b.n	8005e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d0f0      	beq.n	8005e74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0306 	and.w	r3, r3, #6
 8005eea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
 8005ef6:	e00a      	b.n	8005f0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d002      	beq.n	8005f04 <USB_GetDevSpeed+0x32>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b06      	cmp	r3, #6
 8005f02:	d102      	bne.n	8005f0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f04:	2302      	movs	r3, #2
 8005f06:	75fb      	strb	r3, [r7, #23]
 8005f08:	e001      	b.n	8005f0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f0a:	230f      	movs	r3, #15
 8005f0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d13a      	bne.n	8005fae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	2101      	movs	r1, #1
 8005f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	68f9      	ldr	r1, [r7, #12]
 8005f52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d155      	bne.n	800601c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	791b      	ldrb	r3, [r3, #4]
 8005f8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	059b      	lsls	r3, r3, #22
 8005f92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f94:	4313      	orrs	r3, r2
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e036      	b.n	800601c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11a      	bne.n	800601c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	791b      	ldrb	r3, [r3, #4]
 8006000:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006002:	430b      	orrs	r3, r1
 8006004:	4313      	orrs	r3, r2
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800601a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d161      	bne.n	800610c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800605a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800605e:	d11f      	bne.n	80060a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800607a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800607e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800609e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	2101      	movs	r1, #1
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	43db      	mvns	r3, r3
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060c0:	4013      	ands	r3, r2
 80060c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	2101      	movs	r1, #1
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	b29b      	uxth	r3, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	68f9      	ldr	r1, [r7, #12]
 80060e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060e4:	4013      	ands	r3, r2
 80060e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	0159      	lsls	r1, r3, #5
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	440b      	add	r3, r1
 80060fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006102:	4619      	mov	r1, r3
 8006104:	4b35      	ldr	r3, [pc, #212]	@ (80061dc <USB_DeactivateEndpoint+0x1b0>)
 8006106:	4013      	ands	r3, r2
 8006108:	600b      	str	r3, [r1, #0]
 800610a:	e060      	b.n	80061ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800611e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006122:	d11f      	bne.n	8006164 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800613e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006142:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800615e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	43db      	mvns	r3, r3
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006184:	4013      	ands	r3, r2
 8006186:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	2101      	movs	r1, #1
 800619a:	fa01 f303 	lsl.w	r3, r1, r3
 800619e:	041b      	lsls	r3, r3, #16
 80061a0:	43db      	mvns	r3, r3
 80061a2:	68f9      	ldr	r1, [r7, #12]
 80061a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061a8:	4013      	ands	r3, r2
 80061aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	0159      	lsls	r1, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	440b      	add	r3, r1
 80061c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c6:	4619      	mov	r1, r3
 80061c8:	4b05      	ldr	r3, [pc, #20]	@ (80061e0 <USB_DeactivateEndpoint+0x1b4>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	ec337800 	.word	0xec337800
 80061e0:	eff37800 	.word	0xeff37800

080061e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	@ 0x28
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	f040 817f 	bne.w	8006504 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d132      	bne.n	8006274 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006228:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800622c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800624c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800626c:	0cdb      	lsrs	r3, r3, #19
 800626e:	04db      	lsls	r3, r3, #19
 8006270:	6113      	str	r3, [r2, #16]
 8006272:	e097      	b.n	80063a4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628e:	0cdb      	lsrs	r3, r3, #19
 8006290:	04db      	lsls	r3, r3, #19
 8006292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d11a      	bne.n	80062f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d903      	bls.n	80062d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062f0:	6113      	str	r3, [r2, #16]
 80062f2:	e044      	b.n	800637e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	1e5a      	subs	r2, r3, #1
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	fbb2 f3f3 	udiv	r3, r2, r3
 8006308:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	8afb      	ldrh	r3, [r7, #22]
 800631a:	04d9      	lsls	r1, r3, #19
 800631c:	4ba4      	ldr	r3, [pc, #656]	@ (80065b0 <USB_EPStartXfer+0x3cc>)
 800631e:	400b      	ands	r3, r1
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	0148      	lsls	r0, r1, #5
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	4401      	add	r1, r0
 8006328:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800632c:	4313      	orrs	r3, r2
 800632e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	791b      	ldrb	r3, [r3, #4]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d122      	bne.n	800637e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006352:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006356:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	8afb      	ldrh	r3, [r7, #22]
 8006368:	075b      	lsls	r3, r3, #29
 800636a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800636e:	69b9      	ldr	r1, [r7, #24]
 8006370:	0148      	lsls	r0, r1, #5
 8006372:	69f9      	ldr	r1, [r7, #28]
 8006374:	4401      	add	r1, r0
 8006376:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800637a:	4313      	orrs	r3, r2
 800637c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006394:	69b9      	ldr	r1, [r7, #24]
 8006396:	0148      	lsls	r0, r1, #5
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	4401      	add	r1, r0
 800639c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063a0:	4313      	orrs	r3, r2
 80063a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d14b      	bne.n	8006442 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063be:	461a      	mov	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d128      	bne.n	8006420 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d110      	bne.n	8006400 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e00f      	b.n	8006420 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800641a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800641e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e166      	b.n	8006710 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006460:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	791b      	ldrb	r3, [r3, #4]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d015      	beq.n	8006496 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 814e 	beq.w	8006710 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	2101      	movs	r1, #1
 8006486:	fa01 f303 	lsl.w	r3, r1, r3
 800648a:	69f9      	ldr	r1, [r7, #28]
 800648c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006490:	4313      	orrs	r3, r2
 8006492:	634b      	str	r3, [r1, #52]	@ 0x34
 8006494:	e13c      	b.n	8006710 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d110      	bne.n	80064c8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e00f      	b.n	80064e8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	68d9      	ldr	r1, [r3, #12]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	b298      	uxth	r0, r3
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	4603      	mov	r3, r0
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f9b9 	bl	8006874 <USB_WritePacket>
 8006502:	e105      	b.n	8006710 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	440a      	add	r2, r1
 800651a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800651e:	0cdb      	lsrs	r3, r3, #19
 8006520:	04db      	lsls	r3, r3, #19
 8006522:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800653e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006542:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006546:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d132      	bne.n	80065b4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800657c:	69b9      	ldr	r1, [r7, #24]
 800657e:	0148      	lsls	r0, r1, #5
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	4401      	add	r1, r0
 8006584:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006588:	4313      	orrs	r3, r2
 800658a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065aa:	6113      	str	r3, [r2, #16]
 80065ac:	e062      	b.n	8006674 <USB_EPStartXfer+0x490>
 80065ae:	bf00      	nop
 80065b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d123      	bne.n	8006604 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d2:	69b9      	ldr	r1, [r7, #24]
 80065d4:	0148      	lsls	r0, r1, #5
 80065d6:	69f9      	ldr	r1, [r7, #28]
 80065d8:	4401      	add	r1, r0
 80065da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065de:	4313      	orrs	r3, r2
 80065e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006600:	6113      	str	r3, [r2, #16]
 8006602:	e037      	b.n	8006674 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	4413      	add	r3, r2
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	8afa      	ldrh	r2, [r7, #22]
 8006620:	fb03 f202 	mul.w	r2, r3, r2
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006634:	691a      	ldr	r2, [r3, #16]
 8006636:	8afb      	ldrh	r3, [r7, #22]
 8006638:	04d9      	lsls	r1, r3, #19
 800663a:	4b38      	ldr	r3, [pc, #224]	@ (800671c <USB_EPStartXfer+0x538>)
 800663c:	400b      	ands	r3, r1
 800663e:	69b9      	ldr	r1, [r7, #24]
 8006640:	0148      	lsls	r0, r1, #5
 8006642:	69f9      	ldr	r1, [r7, #28]
 8006644:	4401      	add	r1, r0
 8006646:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800664a:	4313      	orrs	r3, r2
 800664c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006664:	69b9      	ldr	r1, [r7, #24]
 8006666:	0148      	lsls	r0, r1, #5
 8006668:	69f9      	ldr	r1, [r7, #28]
 800666a:	4401      	add	r1, r0
 800666c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006670:	4313      	orrs	r3, r2
 8006672:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d10d      	bne.n	8006696 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	68d9      	ldr	r1, [r3, #12]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006692:	460a      	mov	r2, r1
 8006694:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	791b      	ldrb	r3, [r3, #4]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d128      	bne.n	80066f0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d110      	bne.n	80066d0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e00f      	b.n	80066f0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800670a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800670e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	1ff80000 	.word	0x1ff80000

08006720 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d14a      	bne.n	80067d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006752:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006756:	f040 8086 	bne.w	8006866 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006778:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800677c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	7812      	ldrb	r2, [r2, #0]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d902      	bls.n	80067b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
          break;
 80067b6:	e056      	b.n	8006866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067d0:	d0e7      	beq.n	80067a2 <USB_EPStopXfer+0x82>
 80067d2:	e048      	b.n	8006866 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ec:	d13b      	bne.n	8006866 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	7812      	ldrb	r2, [r2, #0]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800680c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006810:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006830:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006834:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3301      	adds	r3, #1
 800683a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006842:	4293      	cmp	r3, r2
 8006844:	d902      	bls.n	800684c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
          break;
 800684a:	e00c      	b.n	8006866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006864:	d0e7      	beq.n	8006836 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
}
 8006868:	4618      	mov	r0, r3
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006874:	b480      	push	{r7}
 8006876:	b089      	sub	sp, #36	@ 0x24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4611      	mov	r1, r2
 8006880:	461a      	mov	r2, r3
 8006882:	460b      	mov	r3, r1
 8006884:	71fb      	strb	r3, [r7, #7]
 8006886:	4613      	mov	r3, r2
 8006888:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006892:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d123      	bne.n	80068e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800689a:	88bb      	ldrh	r3, [r7, #4]
 800689c:	3303      	adds	r3, #3
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e018      	b.n	80068da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	031a      	lsls	r2, r3, #12
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b4:	461a      	mov	r2, r3
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3301      	adds	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	3301      	adds	r3, #1
 80068c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	3301      	adds	r3, #1
 80068cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3301      	adds	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	3301      	adds	r3, #1
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d3e2      	bcc.n	80068a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3724      	adds	r7, #36	@ 0x24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b08b      	sub	sp, #44	@ 0x2c
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	089b      	lsrs	r3, r3, #2
 800690a:	b29b      	uxth	r3, r3
 800690c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006916:	2300      	movs	r3, #0
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	e014      	b.n	8006946 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	601a      	str	r2, [r3, #0]
    pDest++;
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	3301      	adds	r3, #1
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	3301      	adds	r3, #1
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	3301      	adds	r3, #1
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	3301      	adds	r3, #1
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	3301      	adds	r3, #1
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	6a3a      	ldr	r2, [r7, #32]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	429a      	cmp	r2, r3
 800694c:	d3e6      	bcc.n	800691c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800694e:	8bfb      	ldrh	r3, [r7, #30]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01e      	beq.n	8006992 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695e:	461a      	mov	r2, r3
 8006960:	f107 0310 	add.w	r3, r7, #16
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
 8006974:	b2da      	uxtb	r2, r3
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	701a      	strb	r2, [r3, #0]
      i++;
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	3301      	adds	r3, #1
 800697e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006982:	3301      	adds	r3, #1
 8006984:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006986:	8bfb      	ldrh	r3, [r7, #30]
 8006988:	3b01      	subs	r3, #1
 800698a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800698c:	8bfb      	ldrh	r3, [r7, #30]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1ea      	bne.n	8006968 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006994:	4618      	mov	r0, r3
 8006996:	372c      	adds	r7, #44	@ 0x2c
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	785b      	ldrb	r3, [r3, #1]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d12c      	bne.n	8006a16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db12      	blt.n	80069f4 <USB_EPSetStall+0x54>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00f      	beq.n	80069f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	e02b      	b.n	8006a6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	db12      	blt.n	8006a4e <USB_EPSetStall+0xae>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00f      	beq.n	8006a4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d128      	bne.n	8006aea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ab6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	791b      	ldrb	r3, [r3, #4]
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d003      	beq.n	8006ac8 <USB_EPClearStall+0x4c>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	791b      	ldrb	r3, [r3, #4]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d138      	bne.n	8006b3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e027      	b.n	8006b3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	791b      	ldrb	r3, [r3, #4]
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d003      	beq.n	8006b1a <USB_EPClearStall+0x9e>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	791b      	ldrb	r3, [r3, #4]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d10f      	bne.n	8006b3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b7c:	68f9      	ldr	r1, [r7, #12]
 8006b7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b82:	4313      	orrs	r3, r2
 8006b84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bc2:	f023 0302 	bic.w	r3, r3, #2
 8006bc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bf0:	f023 0303 	bic.w	r3, r3, #3
 8006bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	0c1b      	lsrs	r3, r3, #16
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	4013      	ands	r3, r2
 8006c94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	b29b      	uxth	r3, r3
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d06:	78fb      	ldrb	r3, [r7, #3]
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d12:	01db      	lsls	r3, r3, #7
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d30:	68bb      	ldr	r3, [r7, #8]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d78:	f023 0307 	bic.w	r3, r3, #7
 8006d7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	460b      	mov	r3, r1
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	333c      	adds	r3, #60	@ 0x3c
 8006db6:	3304      	adds	r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4a26      	ldr	r2, [pc, #152]	@ (8006e58 <USB_EP0_OutStart+0xb8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d90a      	bls.n	8006dda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dd4:	d101      	bne.n	8006dda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e037      	b.n	8006e4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de0:	461a      	mov	r2, r3
 8006de2:	2300      	movs	r3, #0
 8006de4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e08:	f043 0318 	orr.w	r3, r3, #24
 8006e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e22:	7afb      	ldrb	r3, [r7, #11]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d10f      	bne.n	8006e48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	4f54300a 	.word	0x4f54300a

08006e5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e74:	d901      	bls.n	8006e7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e022      	b.n	8006ec0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	daf2      	bge.n	8006e68 <USB_CoreReset+0xc>

  count = 10U;
 8006e82:	230a      	movs	r3, #10
 8006e84:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006e86:	e002      	b.n	8006e8e <USB_CoreReset+0x32>
  {
    count--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f9      	bne.n	8006e88 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f043 0201 	orr.w	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eac:	d901      	bls.n	8006eb2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e006      	b.n	8006ec0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d0f0      	beq.n	8006ea0 <USB_CoreReset+0x44>

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ed8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006edc:	f002 fcfc 	bl	80098d8 <USBD_static_malloc>
 8006ee0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d109      	bne.n	8006efc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32b0      	adds	r2, #176	@ 0xb0
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e0d4      	b.n	80070a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006efc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006f00:	2100      	movs	r1, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f003 fd1b 	bl	800a93e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32b0      	adds	r2, #176	@ 0xb0
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	32b0      	adds	r2, #176	@ 0xb0
 8006f22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7c1b      	ldrb	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d138      	bne.n	8006fa6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f34:	4b5e      	ldr	r3, [pc, #376]	@ (80070b0 <USBD_CDC_Init+0x1e4>)
 8006f36:	7819      	ldrb	r1, [r3, #0]
 8006f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 fba7 	bl	8009692 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f44:	4b5a      	ldr	r3, [pc, #360]	@ (80070b0 <USBD_CDC_Init+0x1e4>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	3323      	adds	r3, #35	@ 0x23
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f5e:	4b55      	ldr	r3, [pc, #340]	@ (80070b4 <USBD_CDC_Init+0x1e8>)
 8006f60:	7819      	ldrb	r1, [r3, #0]
 8006f62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f66:	2202      	movs	r2, #2
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f002 fb92 	bl	8009692 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f6e:	4b51      	ldr	r3, [pc, #324]	@ (80070b4 <USBD_CDC_Init+0x1e8>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f003 020f 	and.w	r2, r3, #15
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f86:	2201      	movs	r2, #1
 8006f88:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80070b8 <USBD_CDC_Init+0x1ec>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	f003 020f 	and.w	r2, r3, #15
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	331c      	adds	r3, #28
 8006fa0:	2210      	movs	r2, #16
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	e035      	b.n	8007012 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fa6:	4b42      	ldr	r3, [pc, #264]	@ (80070b0 <USBD_CDC_Init+0x1e4>)
 8006fa8:	7819      	ldrb	r1, [r3, #0]
 8006faa:	2340      	movs	r3, #64	@ 0x40
 8006fac:	2202      	movs	r2, #2
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f002 fb6f 	bl	8009692 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80070b0 <USBD_CDC_Init+0x1e4>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	3323      	adds	r3, #35	@ 0x23
 8006fca:	2201      	movs	r2, #1
 8006fcc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006fce:	4b39      	ldr	r3, [pc, #228]	@ (80070b4 <USBD_CDC_Init+0x1e8>)
 8006fd0:	7819      	ldrb	r1, [r3, #0]
 8006fd2:	2340      	movs	r3, #64	@ 0x40
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f002 fb5b 	bl	8009692 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fdc:	4b35      	ldr	r3, [pc, #212]	@ (80070b4 <USBD_CDC_Init+0x1e8>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80070b8 <USBD_CDC_Init+0x1ec>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	331c      	adds	r3, #28
 800700e:	2210      	movs	r2, #16
 8007010:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007012:	4b29      	ldr	r3, [pc, #164]	@ (80070b8 <USBD_CDC_Init+0x1ec>)
 8007014:	7819      	ldrb	r1, [r3, #0]
 8007016:	2308      	movs	r3, #8
 8007018:	2203      	movs	r2, #3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f002 fb39 	bl	8009692 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007020:	4b25      	ldr	r3, [pc, #148]	@ (80070b8 <USBD_CDC_Init+0x1ec>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	f003 020f 	and.w	r2, r3, #15
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	3323      	adds	r3, #35	@ 0x23
 8007036:	2201      	movs	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	33b0      	adds	r3, #176	@ 0xb0
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007070:	2302      	movs	r3, #2
 8007072:	e018      	b.n	80070a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	7c1b      	ldrb	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800707c:	4b0d      	ldr	r3, [pc, #52]	@ (80070b4 <USBD_CDC_Init+0x1e8>)
 800707e:	7819      	ldrb	r1, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f002 fbf0 	bl	8009870 <USBD_LL_PrepareReceive>
 8007090:	e008      	b.n	80070a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007092:	4b08      	ldr	r3, [pc, #32]	@ (80070b4 <USBD_CDC_Init+0x1e8>)
 8007094:	7819      	ldrb	r1, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800709c:	2340      	movs	r3, #64	@ 0x40
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f002 fbe6 	bl	8009870 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	200000ab 	.word	0x200000ab
 80070b4:	200000ac 	.word	0x200000ac
 80070b8:	200000ad 	.word	0x200000ad

080070bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070c8:	4b3a      	ldr	r3, [pc, #232]	@ (80071b4 <USBD_CDC_DeInit+0xf8>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f002 fb05 	bl	80096de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80070d4:	4b37      	ldr	r3, [pc, #220]	@ (80071b4 <USBD_CDC_DeInit+0xf8>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3323      	adds	r3, #35	@ 0x23
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80070ee:	4b32      	ldr	r3, [pc, #200]	@ (80071b8 <USBD_CDC_DeInit+0xfc>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f002 faf2 	bl	80096de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80070fa:	4b2f      	ldr	r3, [pc, #188]	@ (80071b8 <USBD_CDC_DeInit+0xfc>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	f003 020f 	and.w	r2, r3, #15
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007116:	4b29      	ldr	r3, [pc, #164]	@ (80071bc <USBD_CDC_DeInit+0x100>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f002 fade 	bl	80096de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007122:	4b26      	ldr	r3, [pc, #152]	@ (80071bc <USBD_CDC_DeInit+0x100>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	f003 020f 	and.w	r2, r3, #15
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	3323      	adds	r3, #35	@ 0x23
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800713c:	4b1f      	ldr	r3, [pc, #124]	@ (80071bc <USBD_CDC_DeInit+0x100>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	f003 020f 	and.w	r2, r3, #15
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	331c      	adds	r3, #28
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	32b0      	adds	r2, #176	@ 0xb0
 8007160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01f      	beq.n	80071a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	33b0      	adds	r3, #176	@ 0xb0
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	32b0      	adds	r2, #176	@ 0xb0
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	4618      	mov	r0, r3
 800718c:	f002 fbb2 	bl	80098f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	32b0      	adds	r2, #176	@ 0xb0
 800719a:	2100      	movs	r1, #0
 800719c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	200000ab 	.word	0x200000ab
 80071b8:	200000ac 	.word	0x200000ac
 80071bc:	200000ad 	.word	0x200000ad

080071c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	32b0      	adds	r2, #176	@ 0xb0
 80071d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e0bf      	b.n	8007370 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d050      	beq.n	800729e <USBD_CDC_Setup+0xde>
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	f040 80af 	bne.w	8007360 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	88db      	ldrh	r3, [r3, #6]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d03a      	beq.n	8007280 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b25b      	sxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	da1b      	bge.n	800724c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	33b0      	adds	r3, #176	@ 0xb0
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800722a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	88d2      	ldrh	r2, [r2, #6]
 8007230:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b07      	cmp	r3, #7
 8007238:	bf28      	it	cs
 800723a:	2307      	movcs	r3, #7
 800723c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	89fa      	ldrh	r2, [r7, #14]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fda9 	bl	8008d9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800724a:	e090      	b.n	800736e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	785a      	ldrb	r2, [r3, #1]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	88db      	ldrh	r3, [r3, #6]
 800725a:	2b3f      	cmp	r3, #63	@ 0x3f
 800725c:	d803      	bhi.n	8007266 <USBD_CDC_Setup+0xa6>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	88db      	ldrh	r3, [r3, #6]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	e000      	b.n	8007268 <USBD_CDC_Setup+0xa8>
 8007266:	2240      	movs	r2, #64	@ 0x40
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800726e:	6939      	ldr	r1, [r7, #16]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007276:	461a      	mov	r2, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fdbe 	bl	8008dfa <USBD_CtlPrepareRx>
      break;
 800727e:	e076      	b.n	800736e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	33b0      	adds	r3, #176	@ 0xb0
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	7850      	ldrb	r0, [r2, #1]
 8007296:	2200      	movs	r2, #0
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	4798      	blx	r3
      break;
 800729c:	e067      	b.n	800736e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	2b0b      	cmp	r3, #11
 80072a4:	d851      	bhi.n	800734a <USBD_CDC_Setup+0x18a>
 80072a6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <USBD_CDC_Setup+0xec>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	080072dd 	.word	0x080072dd
 80072b0:	08007359 	.word	0x08007359
 80072b4:	0800734b 	.word	0x0800734b
 80072b8:	0800734b 	.word	0x0800734b
 80072bc:	0800734b 	.word	0x0800734b
 80072c0:	0800734b 	.word	0x0800734b
 80072c4:	0800734b 	.word	0x0800734b
 80072c8:	0800734b 	.word	0x0800734b
 80072cc:	0800734b 	.word	0x0800734b
 80072d0:	0800734b 	.word	0x0800734b
 80072d4:	08007307 	.word	0x08007307
 80072d8:	08007331 	.word	0x08007331
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d107      	bne.n	80072f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072e8:	f107 030a 	add.w	r3, r7, #10
 80072ec:	2202      	movs	r2, #2
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fd53 	bl	8008d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072f6:	e032      	b.n	800735e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fcd1 	bl	8008ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007300:	2303      	movs	r3, #3
 8007302:	75fb      	strb	r3, [r7, #23]
          break;
 8007304:	e02b      	b.n	800735e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d107      	bne.n	8007322 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007312:	f107 030d 	add.w	r3, r7, #13
 8007316:	2201      	movs	r2, #1
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fd3e 	bl	8008d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007320:	e01d      	b.n	800735e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fcbc 	bl	8008ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 800732a:	2303      	movs	r3, #3
 800732c:	75fb      	strb	r3, [r7, #23]
          break;
 800732e:	e016      	b.n	800735e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b03      	cmp	r3, #3
 800733a:	d00f      	beq.n	800735c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fcaf 	bl	8008ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007344:	2303      	movs	r3, #3
 8007346:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007348:	e008      	b.n	800735c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 fca8 	bl	8008ca2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007352:	2303      	movs	r3, #3
 8007354:	75fb      	strb	r3, [r7, #23]
          break;
 8007356:	e002      	b.n	800735e <USBD_CDC_Setup+0x19e>
          break;
 8007358:	bf00      	nop
 800735a:	e008      	b.n	800736e <USBD_CDC_Setup+0x1ae>
          break;
 800735c:	bf00      	nop
      }
      break;
 800735e:	e006      	b.n	800736e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 fc9d 	bl	8008ca2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	bf00      	nop
  }

  return (uint8_t)ret;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800738a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32b0      	adds	r2, #176	@ 0xb0
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800739e:	2303      	movs	r3, #3
 80073a0:	e065      	b.n	800746e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	32b0      	adds	r2, #176	@ 0xb0
 80073ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	f003 020f 	and.w	r2, r3, #15
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	3314      	adds	r3, #20
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d02f      	beq.n	800742c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	f003 020f 	and.w	r2, r3, #15
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	3314      	adds	r3, #20
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	f003 010f 	and.w	r1, r3, #15
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	460b      	mov	r3, r1
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	440b      	add	r3, r1
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4403      	add	r3, r0
 80073f4:	331c      	adds	r3, #28
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007402:	2b00      	cmp	r3, #0
 8007404:	d112      	bne.n	800742c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007406:	78fb      	ldrb	r3, [r7, #3]
 8007408:	f003 020f 	and.w	r2, r3, #15
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	440b      	add	r3, r1
 8007418:	3314      	adds	r3, #20
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800741e:	78f9      	ldrb	r1, [r7, #3]
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f002 fa02 	bl	800982e <USBD_LL_Transmit>
 800742a:	e01f      	b.n	800746c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	33b0      	adds	r3, #176	@ 0xb0
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d010      	beq.n	800746c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	33b0      	adds	r3, #176	@ 0xb0
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	32b0      	adds	r2, #176	@ 0xb0
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	32b0      	adds	r2, #176	@ 0xb0
 800749c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e01a      	b.n	80074de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 fa00 	bl	80098b2 <USBD_LL_GetRxDataSize>
 80074b2:	4602      	mov	r2, r0
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	33b0      	adds	r3, #176	@ 0xb0
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80074d8:	4611      	mov	r1, r2
 80074da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	32b0      	adds	r2, #176	@ 0xb0
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007504:	2303      	movs	r3, #3
 8007506:	e024      	b.n	8007552 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	33b0      	adds	r3, #176	@ 0xb0
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d019      	beq.n	8007550 <USBD_CDC_EP0_RxReady+0x6a>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007522:	2bff      	cmp	r3, #255	@ 0xff
 8007524:	d014      	beq.n	8007550 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	33b0      	adds	r3, #176	@ 0xb0
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800753e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007546:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	22ff      	movs	r2, #255	@ 0xff
 800754c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007564:	2182      	movs	r1, #130	@ 0x82
 8007566:	4818      	ldr	r0, [pc, #96]	@ (80075c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007568:	f000 fd62 	bl	8008030 <USBD_GetEpDesc>
 800756c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800756e:	2101      	movs	r1, #1
 8007570:	4815      	ldr	r0, [pc, #84]	@ (80075c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007572:	f000 fd5d 	bl	8008030 <USBD_GetEpDesc>
 8007576:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007578:	2181      	movs	r1, #129	@ 0x81
 800757a:	4813      	ldr	r0, [pc, #76]	@ (80075c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800757c:	f000 fd58 	bl	8008030 <USBD_GetEpDesc>
 8007580:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2210      	movs	r2, #16
 800758c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d006      	beq.n	80075a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2200      	movs	r2, #0
 8007598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800759c:	711a      	strb	r2, [r3, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075b0:	711a      	strb	r2, [r3, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2243      	movs	r2, #67	@ 0x43
 80075ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075bc:	4b02      	ldr	r3, [pc, #8]	@ (80075c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000068 	.word	0x20000068

080075cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075d4:	2182      	movs	r1, #130	@ 0x82
 80075d6:	4818      	ldr	r0, [pc, #96]	@ (8007638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075d8:	f000 fd2a 	bl	8008030 <USBD_GetEpDesc>
 80075dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075de:	2101      	movs	r1, #1
 80075e0:	4815      	ldr	r0, [pc, #84]	@ (8007638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075e2:	f000 fd25 	bl	8008030 <USBD_GetEpDesc>
 80075e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075e8:	2181      	movs	r1, #129	@ 0x81
 80075ea:	4813      	ldr	r0, [pc, #76]	@ (8007638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075ec:	f000 fd20 	bl	8008030 <USBD_GetEpDesc>
 80075f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2210      	movs	r2, #16
 80075fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d006      	beq.n	8007612 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2200      	movs	r2, #0
 8007608:	711a      	strb	r2, [r3, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f042 0202 	orr.w	r2, r2, #2
 8007610:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d006      	beq.n	8007626 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	711a      	strb	r2, [r3, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f042 0202 	orr.w	r2, r2, #2
 8007624:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2243      	movs	r2, #67	@ 0x43
 800762a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800762c:	4b02      	ldr	r3, [pc, #8]	@ (8007638 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000068 	.word	0x20000068

0800763c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007644:	2182      	movs	r1, #130	@ 0x82
 8007646:	4818      	ldr	r0, [pc, #96]	@ (80076a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007648:	f000 fcf2 	bl	8008030 <USBD_GetEpDesc>
 800764c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800764e:	2101      	movs	r1, #1
 8007650:	4815      	ldr	r0, [pc, #84]	@ (80076a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007652:	f000 fced 	bl	8008030 <USBD_GetEpDesc>
 8007656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007658:	2181      	movs	r1, #129	@ 0x81
 800765a:	4813      	ldr	r0, [pc, #76]	@ (80076a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800765c:	f000 fce8 	bl	8008030 <USBD_GetEpDesc>
 8007660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2210      	movs	r2, #16
 800766c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2200      	movs	r2, #0
 8007678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800767c:	711a      	strb	r2, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d006      	beq.n	8007696 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007690:	711a      	strb	r2, [r3, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2243      	movs	r2, #67	@ 0x43
 800769a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800769c:	4b02      	ldr	r3, [pc, #8]	@ (80076a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000068 	.word	0x20000068

080076ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	220a      	movs	r2, #10
 80076b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076ba:	4b03      	ldr	r3, [pc, #12]	@ (80076c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20000024 	.word	0x20000024

080076cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	e009      	b.n	80076f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	33b0      	adds	r3, #176	@ 0xb0
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	32b0      	adds	r2, #176	@ 0xb0
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007722:	2303      	movs	r3, #3
 8007724:	e008      	b.n	8007738 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	32b0      	adds	r2, #176	@ 0xb0
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007764:	2303      	movs	r3, #3
 8007766:	e004      	b.n	8007772 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32b0      	adds	r2, #176	@ 0xb0
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e025      	b.n	80077f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d11f      	bne.n	80077f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80077b8:	4b10      	ldr	r3, [pc, #64]	@ (80077fc <USBD_CDC_TransmitPacket+0x7c>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4403      	add	r3, r0
 80077d2:	3314      	adds	r3, #20
 80077d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80077d6:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <USBD_CDC_TransmitPacket+0x7c>)
 80077d8:	7819      	ldrb	r1, [r3, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f002 f821 	bl	800982e <USBD_LL_Transmit>

    ret = USBD_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	200000ab 	.word	0x200000ab

08007800 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	32b0      	adds	r2, #176	@ 0xb0
 8007812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007816:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32b0      	adds	r2, #176	@ 0xb0
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800782a:	2303      	movs	r3, #3
 800782c:	e018      	b.n	8007860 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7c1b      	ldrb	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007836:	4b0c      	ldr	r3, [pc, #48]	@ (8007868 <USBD_CDC_ReceivePacket+0x68>)
 8007838:	7819      	ldrb	r1, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f002 f813 	bl	8009870 <USBD_LL_PrepareReceive>
 800784a:	e008      	b.n	800785e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800784c:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <USBD_CDC_ReceivePacket+0x68>)
 800784e:	7819      	ldrb	r1, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007856:	2340      	movs	r3, #64	@ 0x40
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f002 f809 	bl	8009870 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	200000ac 	.word	0x200000ac

0800786c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007880:	2303      	movs	r3, #3
 8007882:	e01f      	b.n	80078c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	79fa      	ldrb	r2, [r7, #7]
 80078b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 fe83 	bl	80095c4 <USBD_LL_Init>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e025      	b.n	8007930 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	32ae      	adds	r2, #174	@ 0xae
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00f      	beq.n	8007920 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	32ae      	adds	r2, #174	@ 0xae
 800790a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	f107 020e 	add.w	r2, r7, #14
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	4602      	mov	r2, r0
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 fe8b 	bl	800965c <USBD_LL_Start>
 8007946:	4603      	mov	r3, r0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d009      	beq.n	8007994 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	4611      	mov	r1, r2
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	4798      	blx	r3
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f922 	bl	8008c2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079f8:	461a      	mov	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a06:	f003 031f 	and.w	r3, r3, #31
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d01a      	beq.n	8007a44 <USBD_LL_SetupStage+0x72>
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d822      	bhi.n	8007a58 <USBD_LL_SetupStage+0x86>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <USBD_LL_SetupStage+0x4a>
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d00a      	beq.n	8007a30 <USBD_LL_SetupStage+0x5e>
 8007a1a:	e01d      	b.n	8007a58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fb77 	bl	8008118 <USBD_StdDevReq>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2e:	e020      	b.n	8007a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fbdf 	bl	80081fc <USBD_StdItfReq>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
      break;
 8007a42:	e016      	b.n	8007a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fc41 	bl	80082d4 <USBD_StdEPReq>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	e00c      	b.n	8007a72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fe58 	bl	800971c <USBD_LL_StallEP>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a70:	bf00      	nop
  }

  return ret;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	460b      	mov	r3, r1
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d177      	bne.n	8007b84 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f040 80a1 	bne.w	8007bea <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	8992      	ldrh	r2, [r2, #12]
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d91c      	bls.n	8007aee <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	8992      	ldrh	r2, [r2, #12]
 8007abc:	1a9a      	subs	r2, r3, r2
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	8992      	ldrh	r2, [r2, #12]
 8007aca:	441a      	add	r2, r3
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6919      	ldr	r1, [r3, #16]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	899b      	ldrh	r3, [r3, #12]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	bf38      	it	cc
 8007ae2:	4613      	movcc	r3, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f001 f9a8 	bl	8008e3c <USBD_CtlContinueRx>
 8007aec:	e07d      	b.n	8007bea <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d014      	beq.n	8007b26 <USBD_LL_DataOutStage+0xaa>
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d81d      	bhi.n	8007b3c <USBD_LL_DataOutStage+0xc0>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <USBD_LL_DataOutStage+0x8e>
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d003      	beq.n	8007b10 <USBD_LL_DataOutStage+0x94>
 8007b08:	e018      	b.n	8007b3c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	75bb      	strb	r3, [r7, #22]
            break;
 8007b0e:	e018      	b.n	8007b42 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 fa6e 	bl	8007ffc <USBD_CoreFindIF>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75bb      	strb	r3, [r7, #22]
            break;
 8007b24:	e00d      	b.n	8007b42 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fa70 	bl	8008016 <USBD_CoreFindEP>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75bb      	strb	r3, [r7, #22]
            break;
 8007b3a:	e002      	b.n	8007b42 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75bb      	strb	r3, [r7, #22]
            break;
 8007b40:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b42:	7dbb      	ldrb	r3, [r7, #22]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d119      	bne.n	8007b7c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d113      	bne.n	8007b7c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b54:	7dba      	ldrb	r2, [r7, #22]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	32ae      	adds	r2, #174	@ 0xae
 8007b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007b64:	7dba      	ldrb	r2, [r7, #22]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b6c:	7dba      	ldrb	r2, [r7, #22]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	32ae      	adds	r2, #174	@ 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f001 f96e 	bl	8008e5e <USBD_CtlSendStatus>
 8007b82:	e032      	b.n	8007bea <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fa41 	bl	8008016 <USBD_CoreFindEP>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b98:	7dbb      	ldrb	r3, [r7, #22]
 8007b9a:	2bff      	cmp	r3, #255	@ 0xff
 8007b9c:	d025      	beq.n	8007bea <USBD_LL_DataOutStage+0x16e>
 8007b9e:	7dbb      	ldrb	r3, [r7, #22]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d122      	bne.n	8007bea <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d117      	bne.n	8007be0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007bb0:	7dba      	ldrb	r2, [r7, #22]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	32ae      	adds	r2, #174	@ 0xae
 8007bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00f      	beq.n	8007be0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007bc0:	7dba      	ldrb	r2, [r7, #22]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007bc8:	7dba      	ldrb	r2, [r7, #22]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	32ae      	adds	r2, #174	@ 0xae
 8007bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	7afa      	ldrb	r2, [r7, #11]
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	4798      	blx	r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	e000      	b.n	8007bec <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d178      	bne.n	8007cfa <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d163      	bne.n	8007ce0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	8992      	ldrh	r2, [r2, #12]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d91c      	bls.n	8007c5e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	8992      	ldrh	r2, [r2, #12]
 8007c2c:	1a9a      	subs	r2, r3, r2
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	8992      	ldrh	r2, [r2, #12]
 8007c3a:	441a      	add	r2, r3
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	6919      	ldr	r1, [r3, #16]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f001 f8c4 	bl	8008dd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c50:	2300      	movs	r3, #0
 8007c52:	2200      	movs	r2, #0
 8007c54:	2100      	movs	r1, #0
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f001 fe0a 	bl	8009870 <USBD_LL_PrepareReceive>
 8007c5c:	e040      	b.n	8007ce0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	899b      	ldrh	r3, [r3, #12]
 8007c62:	461a      	mov	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d11c      	bne.n	8007ca6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d316      	bcc.n	8007ca6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d20f      	bcs.n	8007ca6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 f8a4 	bl	8008dd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 fde6 	bl	8009870 <USBD_LL_PrepareReceive>
 8007ca4:	e01c      	b.n	8007ce0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d10f      	bne.n	8007cd2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cd2:	2180      	movs	r1, #128	@ 0x80
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f001 fd21 	bl	800971c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f001 f8d2 	bl	8008e84 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d03a      	beq.n	8007d60 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fe30 	bl	8007950 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007cf8:	e032      	b.n	8007d60 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f986 	bl	8008016 <USBD_CoreFindEP>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	2bff      	cmp	r3, #255	@ 0xff
 8007d12:	d025      	beq.n	8007d60 <USBD_LL_DataInStage+0x16c>
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d122      	bne.n	8007d60 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d11c      	bne.n	8007d60 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d26:	7dfa      	ldrb	r2, [r7, #23]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	32ae      	adds	r2, #174	@ 0xae
 8007d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d014      	beq.n	8007d60 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007d36:	7dfa      	ldrb	r2, [r7, #23]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d3e:	7dfa      	ldrb	r2, [r7, #23]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	32ae      	adds	r2, #174	@ 0xae
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	7afa      	ldrb	r2, [r7, #11]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	4798      	blx	r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d56:	7dbb      	ldrb	r3, [r7, #22]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
 8007d5e:	e000      	b.n	8007d62 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d014      	beq.n	8007dd0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00e      	beq.n	8007dd0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6852      	ldr	r2, [r2, #4]
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dd0:	2340      	movs	r3, #64	@ 0x40
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 fc5b 	bl	8009692 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2240      	movs	r2, #64	@ 0x40
 8007de8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dec:	2340      	movs	r3, #64	@ 0x40
 8007dee:	2200      	movs	r2, #0
 8007df0:	2180      	movs	r1, #128	@ 0x80
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fc4d 	bl	8009692 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2240      	movs	r2, #64	@ 0x40
 8007e04:	841a      	strh	r2, [r3, #32]

  return ret;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	78fa      	ldrb	r2, [r7, #3]
 8007e20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d006      	beq.n	8007e52 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2204      	movs	r2, #4
 8007e56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d106      	bne.n	8007e8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d110      	bne.n	8007ece <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00b      	beq.n	8007ece <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	32ae      	adds	r2, #174	@ 0xae
 8007eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e01c      	b.n	8007f34 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d115      	bne.n	8007f32 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	32ae      	adds	r2, #174	@ 0xae
 8007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	32ae      	adds	r2, #174	@ 0xae
 8007f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32ae      	adds	r2, #174	@ 0xae
 8007f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e01c      	b.n	8007f98 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d115      	bne.n	8007f96 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32ae      	adds	r2, #174	@ 0xae
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	32ae      	adds	r2, #174	@ 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	4611      	mov	r1, r2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6852      	ldr	r2, [r2, #4]
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008008:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008022:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008044:	2300      	movs	r3, #0
 8008046:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	885b      	ldrh	r3, [r3, #2]
 800804c:	b29b      	uxth	r3, r3
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	7812      	ldrb	r2, [r2, #0]
 8008052:	4293      	cmp	r3, r2
 8008054:	d91f      	bls.n	8008096 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800805c:	e013      	b.n	8008086 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800805e:	f107 030a 	add.w	r3, r7, #10
 8008062:	4619      	mov	r1, r3
 8008064:	6978      	ldr	r0, [r7, #20]
 8008066:	f000 f81b 	bl	80080a0 <USBD_GetNextDesc>
 800806a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b05      	cmp	r3, #5
 8008072:	d108      	bne.n	8008086 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	429a      	cmp	r2, r3
 8008080:	d008      	beq.n	8008094 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	885b      	ldrh	r3, [r3, #2]
 800808a:	b29a      	uxth	r2, r3
 800808c:	897b      	ldrh	r3, [r7, #10]
 800808e:	429a      	cmp	r2, r3
 8008090:	d8e5      	bhi.n	800805e <USBD_GetEpDesc+0x2e>
 8008092:	e000      	b.n	8008096 <USBD_GetEpDesc+0x66>
          break;
 8008094:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008096:	693b      	ldr	r3, [r7, #16]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	4413      	add	r3, r2
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4413      	add	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080ca:	68fb      	ldr	r3, [r7, #12]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	3301      	adds	r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	b21a      	sxth	r2, r3
 80080fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008102:	4313      	orrs	r3, r2
 8008104:	b21b      	sxth	r3, r3
 8008106:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008108:	89fb      	ldrh	r3, [r7, #14]
}
 800810a:	4618      	mov	r0, r3
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800812e:	2b40      	cmp	r3, #64	@ 0x40
 8008130:	d005      	beq.n	800813e <USBD_StdDevReq+0x26>
 8008132:	2b40      	cmp	r3, #64	@ 0x40
 8008134:	d857      	bhi.n	80081e6 <USBD_StdDevReq+0xce>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00f      	beq.n	800815a <USBD_StdDevReq+0x42>
 800813a:	2b20      	cmp	r3, #32
 800813c:	d153      	bne.n	80081e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	32ae      	adds	r2, #174	@ 0xae
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
      break;
 8008158:	e04a      	b.n	80081f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b09      	cmp	r3, #9
 8008160:	d83b      	bhi.n	80081da <USBD_StdDevReq+0xc2>
 8008162:	a201      	add	r2, pc, #4	@ (adr r2, 8008168 <USBD_StdDevReq+0x50>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	080081bd 	.word	0x080081bd
 800816c:	080081d1 	.word	0x080081d1
 8008170:	080081db 	.word	0x080081db
 8008174:	080081c7 	.word	0x080081c7
 8008178:	080081db 	.word	0x080081db
 800817c:	0800819b 	.word	0x0800819b
 8008180:	08008191 	.word	0x08008191
 8008184:	080081db 	.word	0x080081db
 8008188:	080081b3 	.word	0x080081b3
 800818c:	080081a5 	.word	0x080081a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa3e 	bl	8008614 <USBD_GetDescriptor>
          break;
 8008198:	e024      	b.n	80081e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fba3 	bl	80088e8 <USBD_SetAddress>
          break;
 80081a2:	e01f      	b.n	80081e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fbe2 	bl	8008970 <USBD_SetConfig>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
          break;
 80081b0:	e018      	b.n	80081e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fc85 	bl	8008ac4 <USBD_GetConfig>
          break;
 80081ba:	e013      	b.n	80081e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fcb6 	bl	8008b30 <USBD_GetStatus>
          break;
 80081c4:	e00e      	b.n	80081e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fce5 	bl	8008b98 <USBD_SetFeature>
          break;
 80081ce:	e009      	b.n	80081e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fd09 	bl	8008bea <USBD_ClrFeature>
          break;
 80081d8:	e004      	b.n	80081e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fd60 	bl	8008ca2 <USBD_CtlError>
          break;
 80081e2:	bf00      	nop
      }
      break;
 80081e4:	e004      	b.n	80081f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fd5a 	bl	8008ca2 <USBD_CtlError>
      break;
 80081ee:	bf00      	nop
  }

  return ret;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop

080081fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008212:	2b40      	cmp	r3, #64	@ 0x40
 8008214:	d005      	beq.n	8008222 <USBD_StdItfReq+0x26>
 8008216:	2b40      	cmp	r3, #64	@ 0x40
 8008218:	d852      	bhi.n	80082c0 <USBD_StdItfReq+0xc4>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <USBD_StdItfReq+0x26>
 800821e:	2b20      	cmp	r3, #32
 8008220:	d14e      	bne.n	80082c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	2b02      	cmp	r3, #2
 800822e:	d840      	bhi.n	80082b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	889b      	ldrh	r3, [r3, #4]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	d836      	bhi.n	80082a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	889b      	ldrh	r3, [r3, #4]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff feda 	bl	8007ffc <USBD_CoreFindIF>
 8008248:	4603      	mov	r3, r0
 800824a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	2bff      	cmp	r3, #255	@ 0xff
 8008250:	d01d      	beq.n	800828e <USBD_StdItfReq+0x92>
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d11a      	bne.n	800828e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008258:	7bba      	ldrb	r2, [r7, #14]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	32ae      	adds	r2, #174	@ 0xae
 800825e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00f      	beq.n	8008288 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008268:	7bba      	ldrb	r2, [r7, #14]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008270:	7bba      	ldrb	r2, [r7, #14]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	32ae      	adds	r2, #174	@ 0xae
 8008276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008286:	e004      	b.n	8008292 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008288:	2303      	movs	r3, #3
 800828a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800828c:	e001      	b.n	8008292 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800828e:	2303      	movs	r3, #3
 8008290:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	88db      	ldrh	r3, [r3, #6]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d110      	bne.n	80082bc <USBD_StdItfReq+0xc0>
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10d      	bne.n	80082bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fddc 	bl	8008e5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082a6:	e009      	b.n	80082bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fcf9 	bl	8008ca2 <USBD_CtlError>
          break;
 80082b0:	e004      	b.n	80082bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fcf4 	bl	8008ca2 <USBD_CtlError>
          break;
 80082ba:	e000      	b.n	80082be <USBD_StdItfReq+0xc2>
          break;
 80082bc:	bf00      	nop
      }
      break;
 80082be:	e004      	b.n	80082ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fced 	bl	8008ca2 <USBD_CtlError>
      break;
 80082c8:	bf00      	nop
  }

  return ret;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082f0:	2b40      	cmp	r3, #64	@ 0x40
 80082f2:	d007      	beq.n	8008304 <USBD_StdEPReq+0x30>
 80082f4:	2b40      	cmp	r3, #64	@ 0x40
 80082f6:	f200 8181 	bhi.w	80085fc <USBD_StdEPReq+0x328>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d02a      	beq.n	8008354 <USBD_StdEPReq+0x80>
 80082fe:	2b20      	cmp	r3, #32
 8008300:	f040 817c 	bne.w	80085fc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fe84 	bl	8008016 <USBD_CoreFindEP>
 800830e:	4603      	mov	r3, r0
 8008310:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008312:	7b7b      	ldrb	r3, [r7, #13]
 8008314:	2bff      	cmp	r3, #255	@ 0xff
 8008316:	f000 8176 	beq.w	8008606 <USBD_StdEPReq+0x332>
 800831a:	7b7b      	ldrb	r3, [r7, #13]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 8172 	bne.w	8008606 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008322:	7b7a      	ldrb	r2, [r7, #13]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800832a:	7b7a      	ldrb	r2, [r7, #13]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	32ae      	adds	r2, #174	@ 0xae
 8008330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 8165 	beq.w	8008606 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800833c:	7b7a      	ldrb	r2, [r7, #13]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	32ae      	adds	r2, #174	@ 0xae
 8008342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4798      	blx	r3
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008352:	e158      	b.n	8008606 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b03      	cmp	r3, #3
 800835a:	d008      	beq.n	800836e <USBD_StdEPReq+0x9a>
 800835c:	2b03      	cmp	r3, #3
 800835e:	f300 8147 	bgt.w	80085f0 <USBD_StdEPReq+0x31c>
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 809b 	beq.w	800849e <USBD_StdEPReq+0x1ca>
 8008368:	2b01      	cmp	r3, #1
 800836a:	d03c      	beq.n	80083e6 <USBD_StdEPReq+0x112>
 800836c:	e140      	b.n	80085f0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d002      	beq.n	8008380 <USBD_StdEPReq+0xac>
 800837a:	2b03      	cmp	r3, #3
 800837c:	d016      	beq.n	80083ac <USBD_StdEPReq+0xd8>
 800837e:	e02c      	b.n	80083da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <USBD_StdEPReq+0xce>
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b80      	cmp	r3, #128	@ 0x80
 800838a:	d00a      	beq.n	80083a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f9c3 	bl	800971c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008396:	2180      	movs	r1, #128	@ 0x80
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f9bf 	bl	800971c <USBD_LL_StallEP>
 800839e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a0:	e020      	b.n	80083e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fc7c 	bl	8008ca2 <USBD_CtlError>
              break;
 80083aa:	e01b      	b.n	80083e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	885b      	ldrh	r3, [r3, #2]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10e      	bne.n	80083d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <USBD_StdEPReq+0xfe>
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b80      	cmp	r3, #128	@ 0x80
 80083be:	d008      	beq.n	80083d2 <USBD_StdEPReq+0xfe>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	88db      	ldrh	r3, [r3, #6]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f9a5 	bl	800971c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd43 	bl	8008e5e <USBD_CtlSendStatus>

              break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fc60 	bl	8008ca2 <USBD_CtlError>
              break;
 80083e2:	bf00      	nop
          }
          break;
 80083e4:	e109      	b.n	80085fa <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d002      	beq.n	80083f8 <USBD_StdEPReq+0x124>
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d016      	beq.n	8008424 <USBD_StdEPReq+0x150>
 80083f6:	e04b      	b.n	8008490 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <USBD_StdEPReq+0x146>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b80      	cmp	r3, #128	@ 0x80
 8008402:	d00a      	beq.n	800841a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 f987 	bl	800971c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800840e:	2180      	movs	r1, #128	@ 0x80
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 f983 	bl	800971c <USBD_LL_StallEP>
 8008416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008418:	e040      	b.n	800849c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc40 	bl	8008ca2 <USBD_CtlError>
              break;
 8008422:	e03b      	b.n	800849c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	885b      	ldrh	r3, [r3, #2]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d136      	bne.n	800849a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 f98d 	bl	800975a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fd0c 	bl	8008e5e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff fde3 	bl	8008016 <USBD_CoreFindEP>
 8008450:	4603      	mov	r3, r0
 8008452:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008454:	7b7b      	ldrb	r3, [r7, #13]
 8008456:	2bff      	cmp	r3, #255	@ 0xff
 8008458:	d01f      	beq.n	800849a <USBD_StdEPReq+0x1c6>
 800845a:	7b7b      	ldrb	r3, [r7, #13]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d11c      	bne.n	800849a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008460:	7b7a      	ldrb	r2, [r7, #13]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008468:	7b7a      	ldrb	r2, [r7, #13]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	32ae      	adds	r2, #174	@ 0xae
 800846e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d010      	beq.n	800849a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008478:	7b7a      	ldrb	r2, [r7, #13]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	32ae      	adds	r2, #174	@ 0xae
 800847e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
 800848a:	4603      	mov	r3, r0
 800848c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800848e:	e004      	b.n	800849a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fc05 	bl	8008ca2 <USBD_CtlError>
              break;
 8008498:	e000      	b.n	800849c <USBD_StdEPReq+0x1c8>
              break;
 800849a:	bf00      	nop
          }
          break;
 800849c:	e0ad      	b.n	80085fa <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d002      	beq.n	80084b0 <USBD_StdEPReq+0x1dc>
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d033      	beq.n	8008516 <USBD_StdEPReq+0x242>
 80084ae:	e099      	b.n	80085e4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <USBD_StdEPReq+0x1f2>
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b80      	cmp	r3, #128	@ 0x80
 80084ba:	d004      	beq.n	80084c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fbef 	bl	8008ca2 <USBD_CtlError>
                break;
 80084c4:	e093      	b.n	80085ee <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	da0b      	bge.n	80084e6 <USBD_StdEPReq+0x212>
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	3310      	adds	r3, #16
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	3304      	adds	r3, #4
 80084e4:	e00b      	b.n	80084fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	4413      	add	r3, r2
 80084fc:	3304      	adds	r3, #4
 80084fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2200      	movs	r2, #0
 8008504:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	330e      	adds	r3, #14
 800850a:	2202      	movs	r2, #2
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fc44 	bl	8008d9c <USBD_CtlSendData>
              break;
 8008514:	e06b      	b.n	80085ee <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da11      	bge.n	8008542 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	3323      	adds	r3, #35	@ 0x23
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d117      	bne.n	8008568 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fbb1 	bl	8008ca2 <USBD_CtlError>
                  break;
 8008540:	e055      	b.n	80085ee <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	f003 020f 	and.w	r2, r3, #15
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fb9e 	bl	8008ca2 <USBD_CtlError>
                  break;
 8008566:	e042      	b.n	80085ee <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da0b      	bge.n	8008588 <USBD_StdEPReq+0x2b4>
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	3310      	adds	r3, #16
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4413      	add	r3, r2
 8008584:	3304      	adds	r3, #4
 8008586:	e00b      	b.n	80085a0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	3304      	adds	r3, #4
 80085a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <USBD_StdEPReq+0x2da>
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b80      	cmp	r3, #128	@ 0x80
 80085ac:	d103      	bne.n	80085b6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2200      	movs	r2, #0
 80085b2:	739a      	strb	r2, [r3, #14]
 80085b4:	e00e      	b.n	80085d4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 f8ec 	bl	8009798 <USBD_LL_IsStallEP>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2201      	movs	r2, #1
 80085ca:	739a      	strb	r2, [r3, #14]
 80085cc:	e002      	b.n	80085d4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	330e      	adds	r3, #14
 80085d8:	2202      	movs	r2, #2
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fbdd 	bl	8008d9c <USBD_CtlSendData>
              break;
 80085e2:	e004      	b.n	80085ee <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fb5b 	bl	8008ca2 <USBD_CtlError>
              break;
 80085ec:	bf00      	nop
          }
          break;
 80085ee:	e004      	b.n	80085fa <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb55 	bl	8008ca2 <USBD_CtlError>
          break;
 80085f8:	bf00      	nop
      }
      break;
 80085fa:	e005      	b.n	8008608 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fb4f 	bl	8008ca2 <USBD_CtlError>
      break;
 8008604:	e000      	b.n	8008608 <USBD_StdEPReq+0x334>
      break;
 8008606:	bf00      	nop
  }

  return ret;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	2b06      	cmp	r3, #6
 8008636:	f200 8128 	bhi.w	800888a <USBD_GetDescriptor+0x276>
 800863a:	a201      	add	r2, pc, #4	@ (adr r2, 8008640 <USBD_GetDescriptor+0x2c>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	0800865d 	.word	0x0800865d
 8008644:	08008675 	.word	0x08008675
 8008648:	080086b5 	.word	0x080086b5
 800864c:	0800888b 	.word	0x0800888b
 8008650:	0800888b 	.word	0x0800888b
 8008654:	0800882b 	.word	0x0800882b
 8008658:	08008857 	.word	0x08008857
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
      break;
 8008672:	e112      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7c1b      	ldrb	r3, [r3, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10d      	bne.n	8008698 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008684:	f107 0208 	add.w	r2, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	2202      	movs	r2, #2
 8008694:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008696:	e100      	b.n	800889a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	f107 0208 	add.w	r2, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3301      	adds	r3, #1
 80086ae:	2202      	movs	r2, #2
 80086b0:	701a      	strb	r2, [r3, #0]
      break;
 80086b2:	e0f2      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	885b      	ldrh	r3, [r3, #2]
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	f200 80ac 	bhi.w	8008818 <USBD_GetDescriptor+0x204>
 80086c0:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <USBD_GetDescriptor+0xb4>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086e1 	.word	0x080086e1
 80086cc:	08008715 	.word	0x08008715
 80086d0:	08008749 	.word	0x08008749
 80086d4:	0800877d 	.word	0x0800877d
 80086d8:	080087b1 	.word	0x080087b1
 80086dc:	080087e5 	.word	0x080087e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00b      	beq.n	8008704 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7c12      	ldrb	r2, [r2, #16]
 80086f8:	f107 0108 	add.w	r1, r7, #8
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
 8008700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008702:	e091      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 facb 	bl	8008ca2 <USBD_CtlError>
            err++;
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	3301      	adds	r3, #1
 8008710:	72fb      	strb	r3, [r7, #11]
          break;
 8008712:	e089      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	7c12      	ldrb	r2, [r2, #16]
 800872c:	f107 0108 	add.w	r1, r7, #8
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
 8008734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008736:	e077      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fab1 	bl	8008ca2 <USBD_CtlError>
            err++;
 8008740:	7afb      	ldrb	r3, [r7, #11]
 8008742:	3301      	adds	r3, #1
 8008744:	72fb      	strb	r3, [r7, #11]
          break;
 8008746:	e06f      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7c12      	ldrb	r2, [r2, #16]
 8008760:	f107 0108 	add.w	r1, r7, #8
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
 8008768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876a:	e05d      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fa97 	bl	8008ca2 <USBD_CtlError>
            err++;
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	3301      	adds	r3, #1
 8008778:	72fb      	strb	r3, [r7, #11]
          break;
 800877a:	e055      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	7c12      	ldrb	r2, [r2, #16]
 8008794:	f107 0108 	add.w	r1, r7, #8
 8008798:	4610      	mov	r0, r2
 800879a:	4798      	blx	r3
 800879c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800879e:	e043      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fa7d 	bl	8008ca2 <USBD_CtlError>
            err++;
 80087a8:	7afb      	ldrb	r3, [r7, #11]
 80087aa:	3301      	adds	r3, #1
 80087ac:	72fb      	strb	r3, [r7, #11]
          break;
 80087ae:	e03b      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00b      	beq.n	80087d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	7c12      	ldrb	r2, [r2, #16]
 80087c8:	f107 0108 	add.w	r1, r7, #8
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
 80087d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d2:	e029      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa63 	bl	8008ca2 <USBD_CtlError>
            err++;
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	3301      	adds	r3, #1
 80087e0:	72fb      	strb	r3, [r7, #11]
          break;
 80087e2:	e021      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	7c12      	ldrb	r2, [r2, #16]
 80087fc:	f107 0108 	add.w	r1, r7, #8
 8008800:	4610      	mov	r0, r2
 8008802:	4798      	blx	r3
 8008804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008806:	e00f      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa49 	bl	8008ca2 <USBD_CtlError>
            err++;
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	3301      	adds	r3, #1
 8008814:	72fb      	strb	r3, [r7, #11]
          break;
 8008816:	e007      	b.n	8008828 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa41 	bl	8008ca2 <USBD_CtlError>
          err++;
 8008820:	7afb      	ldrb	r3, [r7, #11]
 8008822:	3301      	adds	r3, #1
 8008824:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008826:	bf00      	nop
      }
      break;
 8008828:	e037      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7c1b      	ldrb	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d109      	bne.n	8008846 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883a:	f107 0208 	add.w	r2, r7, #8
 800883e:	4610      	mov	r0, r2
 8008840:	4798      	blx	r3
 8008842:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008844:	e029      	b.n	800889a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa2a 	bl	8008ca2 <USBD_CtlError>
        err++;
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	3301      	adds	r3, #1
 8008852:	72fb      	strb	r3, [r7, #11]
      break;
 8008854:	e021      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7c1b      	ldrb	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10d      	bne.n	800887a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008866:	f107 0208 	add.w	r2, r7, #8
 800886a:	4610      	mov	r0, r2
 800886c:	4798      	blx	r3
 800886e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	2207      	movs	r2, #7
 8008876:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008878:	e00f      	b.n	800889a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fa10 	bl	8008ca2 <USBD_CtlError>
        err++;
 8008882:	7afb      	ldrb	r3, [r7, #11]
 8008884:	3301      	adds	r3, #1
 8008886:	72fb      	strb	r3, [r7, #11]
      break;
 8008888:	e007      	b.n	800889a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa08 	bl	8008ca2 <USBD_CtlError>
      err++;
 8008892:	7afb      	ldrb	r3, [r7, #11]
 8008894:	3301      	adds	r3, #1
 8008896:	72fb      	strb	r3, [r7, #11]
      break;
 8008898:	bf00      	nop
  }

  if (err != 0U)
 800889a:	7afb      	ldrb	r3, [r7, #11]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d11e      	bne.n	80088de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	88db      	ldrh	r3, [r3, #6]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d016      	beq.n	80088d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088a8:	893b      	ldrh	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00e      	beq.n	80088cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	88da      	ldrh	r2, [r3, #6]
 80088b2:	893b      	ldrh	r3, [r7, #8]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	bf28      	it	cs
 80088b8:	4613      	movcs	r3, r2
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088be:	893b      	ldrh	r3, [r7, #8]
 80088c0:	461a      	mov	r2, r3
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa69 	bl	8008d9c <USBD_CtlSendData>
 80088ca:	e009      	b.n	80088e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f9e7 	bl	8008ca2 <USBD_CtlError>
 80088d4:	e004      	b.n	80088e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fac1 	bl	8008e5e <USBD_CtlSendStatus>
 80088dc:	e000      	b.n	80088e0 <USBD_GetDescriptor+0x2cc>
    return;
 80088de:	bf00      	nop
  }
}
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop

080088e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	889b      	ldrh	r3, [r3, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d131      	bne.n	800895e <USBD_SetAddress+0x76>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	88db      	ldrh	r3, [r3, #6]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d12d      	bne.n	800895e <USBD_SetAddress+0x76>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	2b7f      	cmp	r3, #127	@ 0x7f
 8008908:	d829      	bhi.n	800895e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	885b      	ldrh	r3, [r3, #2]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008914:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b03      	cmp	r3, #3
 8008920:	d104      	bne.n	800892c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f9bc 	bl	8008ca2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	e01d      	b.n	8008968 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	7bfa      	ldrb	r2, [r7, #15]
 8008930:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 ff59 	bl	80097f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa8d 	bl	8008e5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d004      	beq.n	8008954 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008952:	e009      	b.n	8008968 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895c:	e004      	b.n	8008968 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f99e 	bl	8008ca2 <USBD_CtlError>
  }
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	b2da      	uxtb	r2, r3
 8008984:	4b4e      	ldr	r3, [pc, #312]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008988:	4b4d      	ldr	r3, [pc, #308]	@ (8008ac0 <USBD_SetConfig+0x150>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d905      	bls.n	800899c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f985 	bl	8008ca2 <USBD_CtlError>
    return USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	e08c      	b.n	8008ab6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d002      	beq.n	80089ae <USBD_SetConfig+0x3e>
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d029      	beq.n	8008a00 <USBD_SetConfig+0x90>
 80089ac:	e075      	b.n	8008a9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089ae:	4b44      	ldr	r3, [pc, #272]	@ (8008ac0 <USBD_SetConfig+0x150>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d020      	beq.n	80089f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80089b6:	4b42      	ldr	r3, [pc, #264]	@ (8008ac0 <USBD_SetConfig+0x150>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089c0:	4b3f      	ldr	r3, [pc, #252]	@ (8008ac0 <USBD_SetConfig+0x150>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fe ffcd 	bl	8007966 <USBD_SetClassConfig>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d008      	beq.n	80089e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f962 	bl	8008ca2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2202      	movs	r2, #2
 80089e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089e6:	e065      	b.n	8008ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa38 	bl	8008e5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2203      	movs	r2, #3
 80089f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80089f6:	e05d      	b.n	8008ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fa30 	bl	8008e5e <USBD_CtlSendStatus>
      break;
 80089fe:	e059      	b.n	8008ab4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a00:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d112      	bne.n	8008a2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008a10:	4b2b      	ldr	r3, [pc, #172]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a1a:	4b29      	ldr	r3, [pc, #164]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7fe ffbc 	bl	800799e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa19 	bl	8008e5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a2c:	e042      	b.n	8008ab4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a2e:	4b24      	ldr	r3, [pc, #144]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d02a      	beq.n	8008a92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7fe ffaa 	bl	800799e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a54:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fe ff83 	bl	8007966 <USBD_SetClassConfig>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00f      	beq.n	8008a8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f918 	bl	8008ca2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fe ff8f 	bl	800799e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a88:	e014      	b.n	8008ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9e7 	bl	8008e5e <USBD_CtlSendStatus>
      break;
 8008a90:	e010      	b.n	8008ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9e3 	bl	8008e5e <USBD_CtlSendStatus>
      break;
 8008a98:	e00c      	b.n	8008ab4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f900 	bl	8008ca2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aa2:	4b07      	ldr	r3, [pc, #28]	@ (8008ac0 <USBD_SetConfig+0x150>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fe ff78 	bl	800799e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000448 	.word	0x20000448

08008ac4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	88db      	ldrh	r3, [r3, #6]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d004      	beq.n	8008ae0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f8e2 	bl	8008ca2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ade:	e023      	b.n	8008b28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	dc02      	bgt.n	8008af2 <USBD_GetConfig+0x2e>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dc03      	bgt.n	8008af8 <USBD_GetConfig+0x34>
 8008af0:	e015      	b.n	8008b1e <USBD_GetConfig+0x5a>
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d00b      	beq.n	8008b0e <USBD_GetConfig+0x4a>
 8008af6:	e012      	b.n	8008b1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3308      	adds	r3, #8
 8008b02:	2201      	movs	r2, #1
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f948 	bl	8008d9c <USBD_CtlSendData>
        break;
 8008b0c:	e00c      	b.n	8008b28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3304      	adds	r3, #4
 8008b12:	2201      	movs	r2, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f940 	bl	8008d9c <USBD_CtlSendData>
        break;
 8008b1c:	e004      	b.n	8008b28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f8be 	bl	8008ca2 <USBD_CtlError>
        break;
 8008b26:	bf00      	nop
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d81e      	bhi.n	8008b86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	88db      	ldrh	r3, [r3, #6]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d004      	beq.n	8008b5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f8a5 	bl	8008ca2 <USBD_CtlError>
        break;
 8008b58:	e01a      	b.n	8008b90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f043 0202 	orr.w	r2, r3, #2
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	330c      	adds	r3, #12
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f90c 	bl	8008d9c <USBD_CtlSendData>
      break;
 8008b84:	e004      	b.n	8008b90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f88a 	bl	8008ca2 <USBD_CtlError>
      break;
 8008b8e:	bf00      	nop
  }
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d107      	bne.n	8008bba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f953 	bl	8008e5e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008bb8:	e013      	b.n	8008be2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	885b      	ldrh	r3, [r3, #2]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d10b      	bne.n	8008bda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	889b      	ldrh	r3, [r3, #4]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f943 	bl	8008e5e <USBD_CtlSendStatus>
}
 8008bd8:	e003      	b.n	8008be2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f860 	bl	8008ca2 <USBD_CtlError>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d80b      	bhi.n	8008c1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	885b      	ldrh	r3, [r3, #2]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d10c      	bne.n	8008c24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f923 	bl	8008e5e <USBD_CtlSendStatus>
      }
      break;
 8008c18:	e004      	b.n	8008c24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f840 	bl	8008ca2 <USBD_CtlError>
      break;
 8008c22:	e000      	b.n	8008c26 <USBD_ClrFeature+0x3c>
      break;
 8008c24:	bf00      	nop
  }
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	781a      	ldrb	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fa3d 	bl	80080d8 <SWAPBYTE>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fa30 	bl	80080d8 <SWAPBYTE>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff fa23 	bl	80080d8 <SWAPBYTE>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	80da      	strh	r2, [r3, #6]
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cac:	2180      	movs	r1, #128	@ 0x80
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fd34 	bl	800971c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fd30 	bl	800971c <USBD_LL_StallEP>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d042      	beq.n	8008d60 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008cde:	6938      	ldr	r0, [r7, #16]
 8008ce0:	f000 f842 	bl	8008d68 <USBD_GetLen>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cee:	d808      	bhi.n	8008d02 <USBD_GetString+0x3e>
 8008cf0:	6938      	ldr	r0, [r7, #16]
 8008cf2:	f000 f839 	bl	8008d68 <USBD_GetLen>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	e001      	b.n	8008d06 <USBD_GetString+0x42>
 8008d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	4413      	add	r3, r2
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	7812      	ldrb	r2, [r2, #0]
 8008d14:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	4413      	add	r3, r2
 8008d22:	2203      	movs	r2, #3
 8008d24:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d2c:	e013      	b.n	8008d56 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	4413      	add	r3, r2
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	613b      	str	r3, [r7, #16]
    idx++;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	3301      	adds	r3, #1
 8008d44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	3301      	adds	r3, #1
 8008d54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e7      	bne.n	8008d2e <USBD_GetString+0x6a>
 8008d5e:	e000      	b.n	8008d62 <USBD_GetString+0x9e>
    return;
 8008d60:	bf00      	nop
  }
}
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d78:	e005      	b.n	8008d86 <USBD_GetLen+0x1e>
  {
    len++;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	3301      	adds	r3, #1
 8008d84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f5      	bne.n	8008d7a <USBD_GetLen+0x12>
  }

  return len;
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fd30 	bl	800982e <USBD_LL_Transmit>

  return USBD_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	2100      	movs	r1, #0
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fd1f 	bl	800982e <USBD_LL_Transmit>

  return USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2203      	movs	r2, #3
 8008e0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fd1f 	bl	8009870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 fd0e 	bl	8009870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2204      	movs	r2, #4
 8008e6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2200      	movs	r2, #0
 8008e72:	2100      	movs	r1, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fcda 	bl	800982e <USBD_LL_Transmit>

  return USBD_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2205      	movs	r2, #5
 8008e90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e94:	2300      	movs	r3, #0
 8008e96:	2200      	movs	r2, #0
 8008e98:	2100      	movs	r1, #0
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fce8 	bl	8009870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4912      	ldr	r1, [pc, #72]	@ (8008efc <MX_USB_DEVICE_Init+0x50>)
 8008eb4:	4812      	ldr	r0, [pc, #72]	@ (8008f00 <MX_USB_DEVICE_Init+0x54>)
 8008eb6:	f7fe fcd9 	bl	800786c <USBD_Init>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ec0:	f7f8 fce6 	bl	8001890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ec4:	490f      	ldr	r1, [pc, #60]	@ (8008f04 <MX_USB_DEVICE_Init+0x58>)
 8008ec6:	480e      	ldr	r0, [pc, #56]	@ (8008f00 <MX_USB_DEVICE_Init+0x54>)
 8008ec8:	f7fe fd00 	bl	80078cc <USBD_RegisterClass>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ed2:	f7f8 fcdd 	bl	8001890 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ed6:	490c      	ldr	r1, [pc, #48]	@ (8008f08 <MX_USB_DEVICE_Init+0x5c>)
 8008ed8:	4809      	ldr	r0, [pc, #36]	@ (8008f00 <MX_USB_DEVICE_Init+0x54>)
 8008eda:	f7fe fbf7 	bl	80076cc <USBD_CDC_RegisterInterface>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ee4:	f7f8 fcd4 	bl	8001890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ee8:	4805      	ldr	r0, [pc, #20]	@ (8008f00 <MX_USB_DEVICE_Init+0x54>)
 8008eea:	f7fe fd25 	bl	8007938 <USBD_Start>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ef4:	f7f8 fccc 	bl	8001890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ef8:	bf00      	nop
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	200000c4 	.word	0x200000c4
 8008f00:	2000044c 	.word	0x2000044c
 8008f04:	20000030 	.word	0x20000030
 8008f08:	200000b0 	.word	0x200000b0

08008f0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f10:	2200      	movs	r2, #0
 8008f12:	4905      	ldr	r1, [pc, #20]	@ (8008f28 <CDC_Init_FS+0x1c>)
 8008f14:	4805      	ldr	r0, [pc, #20]	@ (8008f2c <CDC_Init_FS+0x20>)
 8008f16:	f7fe fbf3 	bl	8007700 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f1a:	4905      	ldr	r1, [pc, #20]	@ (8008f30 <CDC_Init_FS+0x24>)
 8008f1c:	4803      	ldr	r0, [pc, #12]	@ (8008f2c <CDC_Init_FS+0x20>)
 8008f1e:	f7fe fc11 	bl	8007744 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20000f28 	.word	0x20000f28
 8008f2c:	2000044c 	.word	0x2000044c
 8008f30:	20000728 	.word	0x20000728

08008f34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
 8008f50:	4613      	mov	r3, r2
 8008f52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	2b23      	cmp	r3, #35	@ 0x23
 8008f58:	d84a      	bhi.n	8008ff0 <CDC_Control_FS+0xac>
 8008f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f60 <CDC_Control_FS+0x1c>)
 8008f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f60:	08008ff1 	.word	0x08008ff1
 8008f64:	08008ff1 	.word	0x08008ff1
 8008f68:	08008ff1 	.word	0x08008ff1
 8008f6c:	08008ff1 	.word	0x08008ff1
 8008f70:	08008ff1 	.word	0x08008ff1
 8008f74:	08008ff1 	.word	0x08008ff1
 8008f78:	08008ff1 	.word	0x08008ff1
 8008f7c:	08008ff1 	.word	0x08008ff1
 8008f80:	08008ff1 	.word	0x08008ff1
 8008f84:	08008ff1 	.word	0x08008ff1
 8008f88:	08008ff1 	.word	0x08008ff1
 8008f8c:	08008ff1 	.word	0x08008ff1
 8008f90:	08008ff1 	.word	0x08008ff1
 8008f94:	08008ff1 	.word	0x08008ff1
 8008f98:	08008ff1 	.word	0x08008ff1
 8008f9c:	08008ff1 	.word	0x08008ff1
 8008fa0:	08008ff1 	.word	0x08008ff1
 8008fa4:	08008ff1 	.word	0x08008ff1
 8008fa8:	08008ff1 	.word	0x08008ff1
 8008fac:	08008ff1 	.word	0x08008ff1
 8008fb0:	08008ff1 	.word	0x08008ff1
 8008fb4:	08008ff1 	.word	0x08008ff1
 8008fb8:	08008ff1 	.word	0x08008ff1
 8008fbc:	08008ff1 	.word	0x08008ff1
 8008fc0:	08008ff1 	.word	0x08008ff1
 8008fc4:	08008ff1 	.word	0x08008ff1
 8008fc8:	08008ff1 	.word	0x08008ff1
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08008ff1 	.word	0x08008ff1
 8008fd4:	08008ff1 	.word	0x08008ff1
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08008ff1 	.word	0x08008ff1
 8008fe0:	08008ff1 	.word	0x08008ff1
 8008fe4:	08008ff1 	.word	0x08008ff1
 8008fe8:	08008ff1 	.word	0x08008ff1
 8008fec:	08008ff1 	.word	0x08008ff1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ff0:	bf00      	nop
  }

  return (USBD_OK);
 8008ff2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <CDC_Receive_FS>:
extern float targetVoltage;
extern float targetCurrent;
extern int output;
extern int feedback;
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
	Buf[*Len] = '\0';  // Null-terminate the received string
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	4413      	add	r3, r2
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]

	    // Example expected format: "V:5.12 I:300\n"
	    float v, i;
      int out,fb;
      if (sscanf((char*)Buf, "V:%f", &v) == 1) {
 8009016:	f107 0314 	add.w	r3, r7, #20
 800901a:	461a      	mov	r2, r3
 800901c:	491e      	ldr	r1, [pc, #120]	@ (8009098 <CDC_Receive_FS+0x98>)
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fc1c 	bl	800a85c <siscanf>
 8009024:	4603      	mov	r3, r0
 8009026:	2b01      	cmp	r3, #1
 8009028:	d102      	bne.n	8009030 <CDC_Receive_FS+0x30>
	    	targetVoltage = v;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	4a1b      	ldr	r2, [pc, #108]	@ (800909c <CDC_Receive_FS+0x9c>)
 800902e:	6013      	str	r3, [r2, #0]
	    }

      if (sscanf((char*)Buf, "I:%f",&i) == 1) {
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	461a      	mov	r2, r3
 8009036:	491a      	ldr	r1, [pc, #104]	@ (80090a0 <CDC_Receive_FS+0xa0>)
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fc0f 	bl	800a85c <siscanf>
 800903e:	4603      	mov	r3, r0
 8009040:	2b01      	cmp	r3, #1
 8009042:	d102      	bne.n	800904a <CDC_Receive_FS+0x4a>
	    	targetCurrent = i;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	4a17      	ldr	r2, [pc, #92]	@ (80090a4 <CDC_Receive_FS+0xa4>)
 8009048:	6013      	str	r3, [r2, #0]
	    }

      if (sscanf((char*)Buf, "O:%d", &out) == 1) {
 800904a:	f107 030c 	add.w	r3, r7, #12
 800904e:	461a      	mov	r2, r3
 8009050:	4915      	ldr	r1, [pc, #84]	@ (80090a8 <CDC_Receive_FS+0xa8>)
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fc02 	bl	800a85c <siscanf>
 8009058:	4603      	mov	r3, r0
 800905a:	2b01      	cmp	r3, #1
 800905c:	d102      	bne.n	8009064 <CDC_Receive_FS+0x64>
        output = out;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4a12      	ldr	r2, [pc, #72]	@ (80090ac <CDC_Receive_FS+0xac>)
 8009062:	6013      	str	r3, [r2, #0]
	    }

      if (sscanf((char*)Buf, "F:%d", &fb) == 1) {
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	461a      	mov	r2, r3
 800906a:	4911      	ldr	r1, [pc, #68]	@ (80090b0 <CDC_Receive_FS+0xb0>)
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 fbf5 	bl	800a85c <siscanf>
 8009072:	4603      	mov	r3, r0
 8009074:	2b01      	cmp	r3, #1
 8009076:	d102      	bne.n	800907e <CDC_Receive_FS+0x7e>
        feedback=fb;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4a0e      	ldr	r2, [pc, #56]	@ (80090b4 <CDC_Receive_FS+0xb4>)
 800907c:	6013      	str	r3, [r2, #0]
	    }

  

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	480d      	ldr	r0, [pc, #52]	@ (80090b8 <CDC_Receive_FS+0xb8>)
 8009082:	f7fe fb5f 	bl	8007744 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009086:	480c      	ldr	r0, [pc, #48]	@ (80090b8 <CDC_Receive_FS+0xb8>)
 8009088:	f7fe fbba 	bl	8007800 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800908c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	0800e938 	.word	0x0800e938
 800909c:	20000004 	.word	0x20000004
 80090a0:	0800e940 	.word	0x0800e940
 80090a4:	20000008 	.word	0x20000008
 80090a8:	0800e948 	.word	0x0800e948
 80090ac:	20000014 	.word	0x20000014
 80090b0:	0800e950 	.word	0x0800e950
 80090b4:	20000430 	.word	0x20000430
 80090b8:	2000044c 	.word	0x2000044c

080090bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009104 <CDC_Transmit_FS+0x48>)
 80090ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090de:	2301      	movs	r3, #1
 80090e0:	e00b      	b.n	80090fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090e2:	887b      	ldrh	r3, [r7, #2]
 80090e4:	461a      	mov	r2, r3
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4806      	ldr	r0, [pc, #24]	@ (8009104 <CDC_Transmit_FS+0x48>)
 80090ea:	f7fe fb09 	bl	8007700 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090ee:	4805      	ldr	r0, [pc, #20]	@ (8009104 <CDC_Transmit_FS+0x48>)
 80090f0:	f7fe fb46 	bl	8007780 <USBD_CDC_TransmitPacket>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	2000044c 	.word	0x2000044c

08009108 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	4613      	mov	r3, r2
 8009114:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800911a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800911e:	4618      	mov	r0, r3
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
	...

0800912c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2212      	movs	r2, #18
 800913c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800913e:	4b03      	ldr	r3, [pc, #12]	@ (800914c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	200000e0 	.word	0x200000e0

08009150 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2204      	movs	r2, #4
 8009160:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009162:	4b03      	ldr	r3, [pc, #12]	@ (8009170 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	200000f4 	.word	0x200000f4

08009174 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d105      	bne.n	8009192 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	4907      	ldr	r1, [pc, #28]	@ (80091a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800918a:	4808      	ldr	r0, [pc, #32]	@ (80091ac <USBD_FS_ProductStrDescriptor+0x38>)
 800918c:	f7ff fd9a 	bl	8008cc4 <USBD_GetString>
 8009190:	e004      	b.n	800919c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4904      	ldr	r1, [pc, #16]	@ (80091a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009196:	4805      	ldr	r0, [pc, #20]	@ (80091ac <USBD_FS_ProductStrDescriptor+0x38>)
 8009198:	f7ff fd94 	bl	8008cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800919c:	4b02      	ldr	r3, [pc, #8]	@ (80091a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20001728 	.word	0x20001728
 80091ac:	0800e958 	.word	0x0800e958

080091b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	4904      	ldr	r1, [pc, #16]	@ (80091d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091c0:	4804      	ldr	r0, [pc, #16]	@ (80091d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091c2:	f7ff fd7f 	bl	8008cc4 <USBD_GetString>
  return USBD_StrDesc;
 80091c6:	4b02      	ldr	r3, [pc, #8]	@ (80091d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20001728 	.word	0x20001728
 80091d4:	0800e970 	.word	0x0800e970

080091d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	6039      	str	r1, [r7, #0]
 80091e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	221a      	movs	r2, #26
 80091e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091ea:	f000 f843 	bl	8009274 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091ee:	4b02      	ldr	r3, [pc, #8]	@ (80091f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	200000f8 	.word	0x200000f8

080091fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	6039      	str	r1, [r7, #0]
 8009206:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d105      	bne.n	800921a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	4907      	ldr	r1, [pc, #28]	@ (8009230 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009212:	4808      	ldr	r0, [pc, #32]	@ (8009234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009214:	f7ff fd56 	bl	8008cc4 <USBD_GetString>
 8009218:	e004      	b.n	8009224 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	4904      	ldr	r1, [pc, #16]	@ (8009230 <USBD_FS_ConfigStrDescriptor+0x34>)
 800921e:	4805      	ldr	r0, [pc, #20]	@ (8009234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009220:	f7ff fd50 	bl	8008cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009224:	4b02      	ldr	r3, [pc, #8]	@ (8009230 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	20001728 	.word	0x20001728
 8009234:	0800e984 	.word	0x0800e984

08009238 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	6039      	str	r1, [r7, #0]
 8009242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d105      	bne.n	8009256 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4907      	ldr	r1, [pc, #28]	@ (800926c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800924e:	4808      	ldr	r0, [pc, #32]	@ (8009270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009250:	f7ff fd38 	bl	8008cc4 <USBD_GetString>
 8009254:	e004      	b.n	8009260 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	4904      	ldr	r1, [pc, #16]	@ (800926c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800925a:	4805      	ldr	r0, [pc, #20]	@ (8009270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800925c:	f7ff fd32 	bl	8008cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009260:	4b02      	ldr	r3, [pc, #8]	@ (800926c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20001728 	.word	0x20001728
 8009270:	0800e990 	.word	0x0800e990

08009274 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800927a:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <Get_SerialNum+0x44>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009280:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <Get_SerialNum+0x48>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009286:	4b0e      	ldr	r3, [pc, #56]	@ (80092c0 <Get_SerialNum+0x4c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4413      	add	r3, r2
 8009292:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800929a:	2208      	movs	r2, #8
 800929c:	4909      	ldr	r1, [pc, #36]	@ (80092c4 <Get_SerialNum+0x50>)
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 f814 	bl	80092cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092a4:	2204      	movs	r2, #4
 80092a6:	4908      	ldr	r1, [pc, #32]	@ (80092c8 <Get_SerialNum+0x54>)
 80092a8:	68b8      	ldr	r0, [r7, #8]
 80092aa:	f000 f80f 	bl	80092cc <IntToUnicode>
  }
}
 80092ae:	bf00      	nop
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	1fff7a10 	.word	0x1fff7a10
 80092bc:	1fff7a14 	.word	0x1fff7a14
 80092c0:	1fff7a18 	.word	0x1fff7a18
 80092c4:	200000fa 	.word	0x200000fa
 80092c8:	2000010a 	.word	0x2000010a

080092cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092de:	2300      	movs	r3, #0
 80092e0:	75fb      	strb	r3, [r7, #23]
 80092e2:	e027      	b.n	8009334 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	0f1b      	lsrs	r3, r3, #28
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d80b      	bhi.n	8009304 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	0f1b      	lsrs	r3, r3, #28
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4619      	mov	r1, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	440b      	add	r3, r1
 80092fc:	3230      	adds	r2, #48	@ 0x30
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	e00a      	b.n	800931a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	0f1b      	lsrs	r3, r3, #28
 8009308:	b2da      	uxtb	r2, r3
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	4619      	mov	r1, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	440b      	add	r3, r1
 8009314:	3237      	adds	r2, #55	@ 0x37
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	3301      	adds	r3, #1
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	4413      	add	r3, r2
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	3301      	adds	r3, #1
 8009332:	75fb      	strb	r3, [r7, #23]
 8009334:	7dfa      	ldrb	r2, [r7, #23]
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	429a      	cmp	r2, r3
 800933a:	d3d3      	bcc.n	80092e4 <IntToUnicode+0x18>
  }
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
	...

0800934c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	@ 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	609a      	str	r2, [r3, #8]
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800936c:	d13a      	bne.n	80093e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	4b1e      	ldr	r3, [pc, #120]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009376:	4a1d      	ldr	r2, [pc, #116]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 8009378:	f043 0301 	orr.w	r3, r3, #1
 800937c:	6313      	str	r3, [r2, #48]	@ 0x30
 800937e:	4b1b      	ldr	r3, [pc, #108]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800938a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800938e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009390:	2302      	movs	r3, #2
 8009392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009394:	2300      	movs	r3, #0
 8009396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009398:	2303      	movs	r3, #3
 800939a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800939c:	230a      	movs	r3, #10
 800939e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093a0:	f107 0314 	add.w	r3, r7, #20
 80093a4:	4619      	mov	r1, r3
 80093a6:	4812      	ldr	r0, [pc, #72]	@ (80093f0 <HAL_PCD_MspInit+0xa4>)
 80093a8:	f7f9 fa8e 	bl	80028c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093ac:	4b0f      	ldr	r3, [pc, #60]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 80093ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b0:	4a0e      	ldr	r2, [pc, #56]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 80093b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	4b0b      	ldr	r3, [pc, #44]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 80093be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c0:	4a0a      	ldr	r2, [pc, #40]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 80093c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80093c8:	4b08      	ldr	r3, [pc, #32]	@ (80093ec <HAL_PCD_MspInit+0xa0>)
 80093ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093d4:	2200      	movs	r2, #0
 80093d6:	2100      	movs	r1, #0
 80093d8:	2043      	movs	r0, #67	@ 0x43
 80093da:	f7f9 fa3e 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093de:	2043      	movs	r0, #67	@ 0x43
 80093e0:	f7f9 fa57 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093e4:	bf00      	nop
 80093e6:	3728      	adds	r7, #40	@ 0x28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	40023800 	.word	0x40023800
 80093f0:	40020000 	.word	0x40020000

080093f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009408:	4619      	mov	r1, r3
 800940a:	4610      	mov	r0, r2
 800940c:	f7fe fae1 	bl	80079d2 <USBD_LL_SetupStage>
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800942a:	78fa      	ldrb	r2, [r7, #3]
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	4619      	mov	r1, r3
 8009442:	f7fe fb1b 	bl	8007a7c <USBD_LL_DataOutStage>
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009460:	78fa      	ldrb	r2, [r7, #3]
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	4613      	mov	r3, r2
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	3320      	adds	r3, #32
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	4619      	mov	r1, r3
 8009476:	f7fe fbbd 	bl	8007bf4 <USBD_LL_DataInStage>
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009490:	4618      	mov	r0, r3
 8009492:	f7fe fd01 	bl	8007e98 <USBD_LL_SOF>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094a6:	2301      	movs	r3, #1
 80094a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	79db      	ldrb	r3, [r3, #7]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d001      	beq.n	80094b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094b2:	f7f8 f9ed 	bl	8001890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094bc:	7bfa      	ldrb	r2, [r7, #15]
 80094be:	4611      	mov	r1, r2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe fca5 	bl	8007e10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fe fc4c 	bl	8007d6a <USBD_LL_Reset>
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fca0 	bl	8007e30 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6812      	ldr	r2, [r2, #0]
 80094fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009502:	f043 0301 	orr.w	r3, r3, #1
 8009506:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7adb      	ldrb	r3, [r3, #11]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009510:	4b04      	ldr	r3, [pc, #16]	@ (8009524 <HAL_PCD_SuspendCallback+0x48>)
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	4a03      	ldr	r2, [pc, #12]	@ (8009524 <HAL_PCD_SuspendCallback+0x48>)
 8009516:	f043 0306 	orr.w	r3, r3, #6
 800951a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	e000ed00 	.word	0xe000ed00

08009528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fc96 	bl	8007e68 <USBD_LL_Resume>
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fcee 	bl	8007f3c <USBD_LL_IsoOUTIncomplete>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800957a:	78fa      	ldrb	r2, [r7, #3]
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fcaa 	bl	8007ed8 <USBD_LL_IsoINIncomplete>
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fd00 	bl	8007fa0 <USBD_LL_DevConnected>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fcfd 	bl	8007fb6 <USBD_LL_DevDisconnected>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d13c      	bne.n	800964e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095d4:	4a20      	ldr	r2, [pc, #128]	@ (8009658 <USBD_LL_Init+0x94>)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a1e      	ldr	r2, [pc, #120]	@ (8009658 <USBD_LL_Init+0x94>)
 80095e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009658 <USBD_LL_Init+0x94>)
 80095e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009658 <USBD_LL_Init+0x94>)
 80095ee:	2204      	movs	r2, #4
 80095f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095f2:	4b19      	ldr	r3, [pc, #100]	@ (8009658 <USBD_LL_Init+0x94>)
 80095f4:	2202      	movs	r2, #2
 80095f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095f8:	4b17      	ldr	r3, [pc, #92]	@ (8009658 <USBD_LL_Init+0x94>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095fe:	4b16      	ldr	r3, [pc, #88]	@ (8009658 <USBD_LL_Init+0x94>)
 8009600:	2202      	movs	r2, #2
 8009602:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009604:	4b14      	ldr	r3, [pc, #80]	@ (8009658 <USBD_LL_Init+0x94>)
 8009606:	2200      	movs	r2, #0
 8009608:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800960a:	4b13      	ldr	r3, [pc, #76]	@ (8009658 <USBD_LL_Init+0x94>)
 800960c:	2200      	movs	r2, #0
 800960e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009610:	4b11      	ldr	r3, [pc, #68]	@ (8009658 <USBD_LL_Init+0x94>)
 8009612:	2200      	movs	r2, #0
 8009614:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009616:	4b10      	ldr	r3, [pc, #64]	@ (8009658 <USBD_LL_Init+0x94>)
 8009618:	2200      	movs	r2, #0
 800961a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800961c:	4b0e      	ldr	r3, [pc, #56]	@ (8009658 <USBD_LL_Init+0x94>)
 800961e:	2200      	movs	r2, #0
 8009620:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009622:	480d      	ldr	r0, [pc, #52]	@ (8009658 <USBD_LL_Init+0x94>)
 8009624:	f7f9 fc4c 	bl	8002ec0 <HAL_PCD_Init>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800962e:	f7f8 f92f 	bl	8001890 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009632:	2180      	movs	r1, #128	@ 0x80
 8009634:	4808      	ldr	r0, [pc, #32]	@ (8009658 <USBD_LL_Init+0x94>)
 8009636:	f7fa fe78 	bl	800432a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800963a:	2240      	movs	r2, #64	@ 0x40
 800963c:	2100      	movs	r1, #0
 800963e:	4806      	ldr	r0, [pc, #24]	@ (8009658 <USBD_LL_Init+0x94>)
 8009640:	f7fa fe2c 	bl	800429c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009644:	2280      	movs	r2, #128	@ 0x80
 8009646:	2101      	movs	r1, #1
 8009648:	4803      	ldr	r0, [pc, #12]	@ (8009658 <USBD_LL_Init+0x94>)
 800964a:	f7fa fe27 	bl	800429c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20001928 	.word	0x20001928

0800965c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009672:	4618      	mov	r0, r3
 8009674:	f7f9 fd33 	bl	80030de <HAL_PCD_Start>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f942 	bl	8009908 <USBD_Get_USB_Status>
 8009684:	4603      	mov	r3, r0
 8009686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009688:	7bbb      	ldrb	r3, [r7, #14]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	4608      	mov	r0, r1
 800969c:	4611      	mov	r1, r2
 800969e:	461a      	mov	r2, r3
 80096a0:	4603      	mov	r3, r0
 80096a2:	70fb      	strb	r3, [r7, #3]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70bb      	strb	r3, [r7, #2]
 80096a8:	4613      	mov	r3, r2
 80096aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096ba:	78bb      	ldrb	r3, [r7, #2]
 80096bc:	883a      	ldrh	r2, [r7, #0]
 80096be:	78f9      	ldrb	r1, [r7, #3]
 80096c0:	f7fa fa07 	bl	8003ad2 <HAL_PCD_EP_Open>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f91c 	bl	8009908 <USBD_Get_USB_Status>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fa fa52 	bl	8003ba6 <HAL_PCD_EP_Close>
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	4618      	mov	r0, r3
 800970a:	f000 f8fd 	bl	8009908 <USBD_Get_USB_Status>
 800970e:	4603      	mov	r3, r0
 8009710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009712:	7bbb      	ldrb	r3, [r7, #14]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009736:	78fa      	ldrb	r2, [r7, #3]
 8009738:	4611      	mov	r1, r2
 800973a:	4618      	mov	r0, r3
 800973c:	f7fa fb0a 	bl	8003d54 <HAL_PCD_EP_SetStall>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f8de 	bl	8009908 <USBD_Get_USB_Status>
 800974c:	4603      	mov	r3, r0
 800974e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009750:	7bbb      	ldrb	r3, [r7, #14]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009774:	78fa      	ldrb	r2, [r7, #3]
 8009776:	4611      	mov	r1, r2
 8009778:	4618      	mov	r0, r3
 800977a:	f7fa fb4e 	bl	8003e1a <HAL_PCD_EP_ClrStall>
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f8bf 	bl	8009908 <USBD_Get_USB_Status>
 800978a:	4603      	mov	r3, r0
 800978c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da0b      	bge.n	80097cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	4613      	mov	r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	440b      	add	r3, r1
 80097c6:	3316      	adds	r3, #22
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	e00b      	b.n	80097e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	4613      	mov	r3, r2
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80097e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f7fa f93b 	bl	8003a8a <HAL_PCD_SetAddress>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f874 	bl	8009908 <USBD_Get_USB_Status>
 8009820:	4603      	mov	r3, r0
 8009822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009824:	7bbb      	ldrb	r3, [r7, #14]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
 800983a:	460b      	mov	r3, r1
 800983c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800984c:	7af9      	ldrb	r1, [r7, #11]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	f7fa fa45 	bl	8003ce0 <HAL_PCD_EP_Transmit>
 8009856:	4603      	mov	r3, r0
 8009858:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f853 	bl	8009908 <USBD_Get_USB_Status>
 8009862:	4603      	mov	r3, r0
 8009864:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009866:	7dbb      	ldrb	r3, [r7, #22]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	460b      	mov	r3, r1
 800987e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800988e:	7af9      	ldrb	r1, [r7, #11]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	f7fa f9d1 	bl	8003c3a <HAL_PCD_EP_Receive>
 8009898:	4603      	mov	r3, r0
 800989a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f832 	bl	8009908 <USBD_Get_USB_Status>
 80098a4:	4603      	mov	r3, r0
 80098a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098c4:	78fa      	ldrb	r2, [r7, #3]
 80098c6:	4611      	mov	r1, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fa f9f1 	bl	8003cb0 <HAL_PCD_EP_GetRxCount>
 80098ce:	4603      	mov	r3, r0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098e0:	4b03      	ldr	r3, [pc, #12]	@ (80098f0 <USBD_static_malloc+0x18>)
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	20001e0c 	.word	0x20001e0c

080098f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	2b03      	cmp	r3, #3
 800991a:	d817      	bhi.n	800994c <USBD_Get_USB_Status+0x44>
 800991c:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <USBD_Get_USB_Status+0x1c>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	08009935 	.word	0x08009935
 8009928:	0800993b 	.word	0x0800993b
 800992c:	08009941 	.word	0x08009941
 8009930:	08009947 	.word	0x08009947
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
    break;
 8009938:	e00b      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800993a:	2303      	movs	r3, #3
 800993c:	73fb      	strb	r3, [r7, #15]
    break;
 800993e:	e008      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009940:	2301      	movs	r3, #1
 8009942:	73fb      	strb	r3, [r7, #15]
    break;
 8009944:	e005      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009946:	2303      	movs	r3, #3
 8009948:	73fb      	strb	r3, [r7, #15]
    break;
 800994a:	e002      	b.n	8009952 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800994c:	2303      	movs	r3, #3
 800994e:	73fb      	strb	r3, [r7, #15]
    break;
 8009950:	bf00      	nop
  }
  return usb_status;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <__cvt>:
 8009960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009964:	ec57 6b10 	vmov	r6, r7, d0
 8009968:	2f00      	cmp	r7, #0
 800996a:	460c      	mov	r4, r1
 800996c:	4619      	mov	r1, r3
 800996e:	463b      	mov	r3, r7
 8009970:	bfbb      	ittet	lt
 8009972:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009976:	461f      	movlt	r7, r3
 8009978:	2300      	movge	r3, #0
 800997a:	232d      	movlt	r3, #45	@ 0x2d
 800997c:	700b      	strb	r3, [r1, #0]
 800997e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009980:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009984:	4691      	mov	r9, r2
 8009986:	f023 0820 	bic.w	r8, r3, #32
 800998a:	bfbc      	itt	lt
 800998c:	4632      	movlt	r2, r6
 800998e:	4616      	movlt	r6, r2
 8009990:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009994:	d005      	beq.n	80099a2 <__cvt+0x42>
 8009996:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800999a:	d100      	bne.n	800999e <__cvt+0x3e>
 800999c:	3401      	adds	r4, #1
 800999e:	2102      	movs	r1, #2
 80099a0:	e000      	b.n	80099a4 <__cvt+0x44>
 80099a2:	2103      	movs	r1, #3
 80099a4:	ab03      	add	r3, sp, #12
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	ab02      	add	r3, sp, #8
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	ec47 6b10 	vmov	d0, r6, r7
 80099b0:	4653      	mov	r3, sl
 80099b2:	4622      	mov	r2, r4
 80099b4:	f001 f8d4 	bl	800ab60 <_dtoa_r>
 80099b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80099bc:	4605      	mov	r5, r0
 80099be:	d119      	bne.n	80099f4 <__cvt+0x94>
 80099c0:	f019 0f01 	tst.w	r9, #1
 80099c4:	d00e      	beq.n	80099e4 <__cvt+0x84>
 80099c6:	eb00 0904 	add.w	r9, r0, r4
 80099ca:	2200      	movs	r2, #0
 80099cc:	2300      	movs	r3, #0
 80099ce:	4630      	mov	r0, r6
 80099d0:	4639      	mov	r1, r7
 80099d2:	f7f7 f881 	bl	8000ad8 <__aeabi_dcmpeq>
 80099d6:	b108      	cbz	r0, 80099dc <__cvt+0x7c>
 80099d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80099dc:	2230      	movs	r2, #48	@ 0x30
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	454b      	cmp	r3, r9
 80099e2:	d31e      	bcc.n	8009a22 <__cvt+0xc2>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099e8:	1b5b      	subs	r3, r3, r5
 80099ea:	4628      	mov	r0, r5
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	b004      	add	sp, #16
 80099f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099f8:	eb00 0904 	add.w	r9, r0, r4
 80099fc:	d1e5      	bne.n	80099ca <__cvt+0x6a>
 80099fe:	7803      	ldrb	r3, [r0, #0]
 8009a00:	2b30      	cmp	r3, #48	@ 0x30
 8009a02:	d10a      	bne.n	8009a1a <__cvt+0xba>
 8009a04:	2200      	movs	r2, #0
 8009a06:	2300      	movs	r3, #0
 8009a08:	4630      	mov	r0, r6
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f7f7 f864 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a10:	b918      	cbnz	r0, 8009a1a <__cvt+0xba>
 8009a12:	f1c4 0401 	rsb	r4, r4, #1
 8009a16:	f8ca 4000 	str.w	r4, [sl]
 8009a1a:	f8da 3000 	ldr.w	r3, [sl]
 8009a1e:	4499      	add	r9, r3
 8009a20:	e7d3      	b.n	80099ca <__cvt+0x6a>
 8009a22:	1c59      	adds	r1, r3, #1
 8009a24:	9103      	str	r1, [sp, #12]
 8009a26:	701a      	strb	r2, [r3, #0]
 8009a28:	e7d9      	b.n	80099de <__cvt+0x7e>

08009a2a <__exponent>:
 8009a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	bfba      	itte	lt
 8009a30:	4249      	neglt	r1, r1
 8009a32:	232d      	movlt	r3, #45	@ 0x2d
 8009a34:	232b      	movge	r3, #43	@ 0x2b
 8009a36:	2909      	cmp	r1, #9
 8009a38:	7002      	strb	r2, [r0, #0]
 8009a3a:	7043      	strb	r3, [r0, #1]
 8009a3c:	dd29      	ble.n	8009a92 <__exponent+0x68>
 8009a3e:	f10d 0307 	add.w	r3, sp, #7
 8009a42:	461d      	mov	r5, r3
 8009a44:	270a      	movs	r7, #10
 8009a46:	461a      	mov	r2, r3
 8009a48:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a4c:	fb07 1416 	mls	r4, r7, r6, r1
 8009a50:	3430      	adds	r4, #48	@ 0x30
 8009a52:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a56:	460c      	mov	r4, r1
 8009a58:	2c63      	cmp	r4, #99	@ 0x63
 8009a5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a5e:	4631      	mov	r1, r6
 8009a60:	dcf1      	bgt.n	8009a46 <__exponent+0x1c>
 8009a62:	3130      	adds	r1, #48	@ 0x30
 8009a64:	1e94      	subs	r4, r2, #2
 8009a66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a6a:	1c41      	adds	r1, r0, #1
 8009a6c:	4623      	mov	r3, r4
 8009a6e:	42ab      	cmp	r3, r5
 8009a70:	d30a      	bcc.n	8009a88 <__exponent+0x5e>
 8009a72:	f10d 0309 	add.w	r3, sp, #9
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	42ac      	cmp	r4, r5
 8009a7a:	bf88      	it	hi
 8009a7c:	2300      	movhi	r3, #0
 8009a7e:	3302      	adds	r3, #2
 8009a80:	4403      	add	r3, r0
 8009a82:	1a18      	subs	r0, r3, r0
 8009a84:	b003      	add	sp, #12
 8009a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a88:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a8c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a90:	e7ed      	b.n	8009a6e <__exponent+0x44>
 8009a92:	2330      	movs	r3, #48	@ 0x30
 8009a94:	3130      	adds	r1, #48	@ 0x30
 8009a96:	7083      	strb	r3, [r0, #2]
 8009a98:	70c1      	strb	r1, [r0, #3]
 8009a9a:	1d03      	adds	r3, r0, #4
 8009a9c:	e7f1      	b.n	8009a82 <__exponent+0x58>
	...

08009aa0 <_printf_float>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	b08d      	sub	sp, #52	@ 0x34
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009aac:	4616      	mov	r6, r2
 8009aae:	461f      	mov	r7, r3
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	f000 ff4d 	bl	800a950 <_localeconv_r>
 8009ab6:	6803      	ldr	r3, [r0, #0]
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f6 fbe0 	bl	8000280 <strlen>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac8:	9005      	str	r0, [sp, #20]
 8009aca:	3307      	adds	r3, #7
 8009acc:	f023 0307 	bic.w	r3, r3, #7
 8009ad0:	f103 0208 	add.w	r2, r3, #8
 8009ad4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ad8:	f8d4 b000 	ldr.w	fp, [r4]
 8009adc:	f8c8 2000 	str.w	r2, [r8]
 8009ae0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ae4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ae8:	9307      	str	r3, [sp, #28]
 8009aea:	f8cd 8018 	str.w	r8, [sp, #24]
 8009aee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009af6:	4b9c      	ldr	r3, [pc, #624]	@ (8009d68 <_printf_float+0x2c8>)
 8009af8:	f04f 32ff 	mov.w	r2, #4294967295
 8009afc:	f7f7 f81e 	bl	8000b3c <__aeabi_dcmpun>
 8009b00:	bb70      	cbnz	r0, 8009b60 <_printf_float+0xc0>
 8009b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b06:	4b98      	ldr	r3, [pc, #608]	@ (8009d68 <_printf_float+0x2c8>)
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0c:	f7f6 fff8 	bl	8000b00 <__aeabi_dcmple>
 8009b10:	bb30      	cbnz	r0, 8009b60 <_printf_float+0xc0>
 8009b12:	2200      	movs	r2, #0
 8009b14:	2300      	movs	r3, #0
 8009b16:	4640      	mov	r0, r8
 8009b18:	4649      	mov	r1, r9
 8009b1a:	f7f6 ffe7 	bl	8000aec <__aeabi_dcmplt>
 8009b1e:	b110      	cbz	r0, 8009b26 <_printf_float+0x86>
 8009b20:	232d      	movs	r3, #45	@ 0x2d
 8009b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b26:	4a91      	ldr	r2, [pc, #580]	@ (8009d6c <_printf_float+0x2cc>)
 8009b28:	4b91      	ldr	r3, [pc, #580]	@ (8009d70 <_printf_float+0x2d0>)
 8009b2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b2e:	bf8c      	ite	hi
 8009b30:	4690      	movhi	r8, r2
 8009b32:	4698      	movls	r8, r3
 8009b34:	2303      	movs	r3, #3
 8009b36:	6123      	str	r3, [r4, #16]
 8009b38:	f02b 0304 	bic.w	r3, fp, #4
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	f04f 0900 	mov.w	r9, #0
 8009b42:	9700      	str	r7, [sp, #0]
 8009b44:	4633      	mov	r3, r6
 8009b46:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f000 f9d2 	bl	8009ef4 <_printf_common>
 8009b50:	3001      	adds	r0, #1
 8009b52:	f040 808d 	bne.w	8009c70 <_printf_float+0x1d0>
 8009b56:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5a:	b00d      	add	sp, #52	@ 0x34
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b60:	4642      	mov	r2, r8
 8009b62:	464b      	mov	r3, r9
 8009b64:	4640      	mov	r0, r8
 8009b66:	4649      	mov	r1, r9
 8009b68:	f7f6 ffe8 	bl	8000b3c <__aeabi_dcmpun>
 8009b6c:	b140      	cbz	r0, 8009b80 <_printf_float+0xe0>
 8009b6e:	464b      	mov	r3, r9
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	bfbc      	itt	lt
 8009b74:	232d      	movlt	r3, #45	@ 0x2d
 8009b76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d74 <_printf_float+0x2d4>)
 8009b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8009d78 <_printf_float+0x2d8>)
 8009b7e:	e7d4      	b.n	8009b2a <_printf_float+0x8a>
 8009b80:	6863      	ldr	r3, [r4, #4]
 8009b82:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b86:	9206      	str	r2, [sp, #24]
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	d13b      	bne.n	8009c04 <_printf_float+0x164>
 8009b8c:	2306      	movs	r3, #6
 8009b8e:	6063      	str	r3, [r4, #4]
 8009b90:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b94:	2300      	movs	r3, #0
 8009b96:	6022      	str	r2, [r4, #0]
 8009b98:	9303      	str	r3, [sp, #12]
 8009b9a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b9c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ba0:	ab09      	add	r3, sp, #36	@ 0x24
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	6861      	ldr	r1, [r4, #4]
 8009ba6:	ec49 8b10 	vmov	d0, r8, r9
 8009baa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f7ff fed6 	bl	8009960 <__cvt>
 8009bb4:	9b06      	ldr	r3, [sp, #24]
 8009bb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bb8:	2b47      	cmp	r3, #71	@ 0x47
 8009bba:	4680      	mov	r8, r0
 8009bbc:	d129      	bne.n	8009c12 <_printf_float+0x172>
 8009bbe:	1cc8      	adds	r0, r1, #3
 8009bc0:	db02      	blt.n	8009bc8 <_printf_float+0x128>
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	dd41      	ble.n	8009c4c <_printf_float+0x1ac>
 8009bc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8009bcc:	fa5f fa8a 	uxtb.w	sl, sl
 8009bd0:	3901      	subs	r1, #1
 8009bd2:	4652      	mov	r2, sl
 8009bd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009bd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bda:	f7ff ff26 	bl	8009a2a <__exponent>
 8009bde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009be0:	1813      	adds	r3, r2, r0
 8009be2:	2a01      	cmp	r2, #1
 8009be4:	4681      	mov	r9, r0
 8009be6:	6123      	str	r3, [r4, #16]
 8009be8:	dc02      	bgt.n	8009bf0 <_printf_float+0x150>
 8009bea:	6822      	ldr	r2, [r4, #0]
 8009bec:	07d2      	lsls	r2, r2, #31
 8009bee:	d501      	bpl.n	8009bf4 <_printf_float+0x154>
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	6123      	str	r3, [r4, #16]
 8009bf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0a2      	beq.n	8009b42 <_printf_float+0xa2>
 8009bfc:	232d      	movs	r3, #45	@ 0x2d
 8009bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c02:	e79e      	b.n	8009b42 <_printf_float+0xa2>
 8009c04:	9a06      	ldr	r2, [sp, #24]
 8009c06:	2a47      	cmp	r2, #71	@ 0x47
 8009c08:	d1c2      	bne.n	8009b90 <_printf_float+0xf0>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1c0      	bne.n	8009b90 <_printf_float+0xf0>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e7bd      	b.n	8009b8e <_printf_float+0xee>
 8009c12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c16:	d9db      	bls.n	8009bd0 <_printf_float+0x130>
 8009c18:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c1c:	d118      	bne.n	8009c50 <_printf_float+0x1b0>
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	dd0b      	ble.n	8009c3c <_printf_float+0x19c>
 8009c24:	6121      	str	r1, [r4, #16]
 8009c26:	b913      	cbnz	r3, 8009c2e <_printf_float+0x18e>
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	07d0      	lsls	r0, r2, #31
 8009c2c:	d502      	bpl.n	8009c34 <_printf_float+0x194>
 8009c2e:	3301      	adds	r3, #1
 8009c30:	440b      	add	r3, r1
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c36:	f04f 0900 	mov.w	r9, #0
 8009c3a:	e7db      	b.n	8009bf4 <_printf_float+0x154>
 8009c3c:	b913      	cbnz	r3, 8009c44 <_printf_float+0x1a4>
 8009c3e:	6822      	ldr	r2, [r4, #0]
 8009c40:	07d2      	lsls	r2, r2, #31
 8009c42:	d501      	bpl.n	8009c48 <_printf_float+0x1a8>
 8009c44:	3302      	adds	r3, #2
 8009c46:	e7f4      	b.n	8009c32 <_printf_float+0x192>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e7f2      	b.n	8009c32 <_printf_float+0x192>
 8009c4c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c52:	4299      	cmp	r1, r3
 8009c54:	db05      	blt.n	8009c62 <_printf_float+0x1c2>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	6121      	str	r1, [r4, #16]
 8009c5a:	07d8      	lsls	r0, r3, #31
 8009c5c:	d5ea      	bpl.n	8009c34 <_printf_float+0x194>
 8009c5e:	1c4b      	adds	r3, r1, #1
 8009c60:	e7e7      	b.n	8009c32 <_printf_float+0x192>
 8009c62:	2900      	cmp	r1, #0
 8009c64:	bfd4      	ite	le
 8009c66:	f1c1 0202 	rsble	r2, r1, #2
 8009c6a:	2201      	movgt	r2, #1
 8009c6c:	4413      	add	r3, r2
 8009c6e:	e7e0      	b.n	8009c32 <_printf_float+0x192>
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	055a      	lsls	r2, r3, #21
 8009c74:	d407      	bmi.n	8009c86 <_printf_float+0x1e6>
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	4642      	mov	r2, r8
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	47b8      	blx	r7
 8009c80:	3001      	adds	r0, #1
 8009c82:	d12b      	bne.n	8009cdc <_printf_float+0x23c>
 8009c84:	e767      	b.n	8009b56 <_printf_float+0xb6>
 8009c86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c8a:	f240 80dd 	bls.w	8009e48 <_printf_float+0x3a8>
 8009c8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c92:	2200      	movs	r2, #0
 8009c94:	2300      	movs	r3, #0
 8009c96:	f7f6 ff1f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d033      	beq.n	8009d06 <_printf_float+0x266>
 8009c9e:	4a37      	ldr	r2, [pc, #220]	@ (8009d7c <_printf_float+0x2dc>)
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	47b8      	blx	r7
 8009ca8:	3001      	adds	r0, #1
 8009caa:	f43f af54 	beq.w	8009b56 <_printf_float+0xb6>
 8009cae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cb2:	4543      	cmp	r3, r8
 8009cb4:	db02      	blt.n	8009cbc <_printf_float+0x21c>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	07d8      	lsls	r0, r3, #31
 8009cba:	d50f      	bpl.n	8009cdc <_printf_float+0x23c>
 8009cbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f43f af45 	beq.w	8009b56 <_printf_float+0xb6>
 8009ccc:	f04f 0900 	mov.w	r9, #0
 8009cd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cd4:	f104 0a1a 	add.w	sl, r4, #26
 8009cd8:	45c8      	cmp	r8, r9
 8009cda:	dc09      	bgt.n	8009cf0 <_printf_float+0x250>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	079b      	lsls	r3, r3, #30
 8009ce0:	f100 8103 	bmi.w	8009eea <_printf_float+0x44a>
 8009ce4:	68e0      	ldr	r0, [r4, #12]
 8009ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ce8:	4298      	cmp	r0, r3
 8009cea:	bfb8      	it	lt
 8009cec:	4618      	movlt	r0, r3
 8009cee:	e734      	b.n	8009b5a <_printf_float+0xba>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f af2b 	beq.w	8009b56 <_printf_float+0xb6>
 8009d00:	f109 0901 	add.w	r9, r9, #1
 8009d04:	e7e8      	b.n	8009cd8 <_printf_float+0x238>
 8009d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dc39      	bgt.n	8009d80 <_printf_float+0x2e0>
 8009d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8009d7c <_printf_float+0x2dc>)
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af1d 	beq.w	8009b56 <_printf_float+0xb6>
 8009d1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d20:	ea59 0303 	orrs.w	r3, r9, r3
 8009d24:	d102      	bne.n	8009d2c <_printf_float+0x28c>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	07d9      	lsls	r1, r3, #31
 8009d2a:	d5d7      	bpl.n	8009cdc <_printf_float+0x23c>
 8009d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f af0d 	beq.w	8009b56 <_printf_float+0xb6>
 8009d3c:	f04f 0a00 	mov.w	sl, #0
 8009d40:	f104 0b1a 	add.w	fp, r4, #26
 8009d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d46:	425b      	negs	r3, r3
 8009d48:	4553      	cmp	r3, sl
 8009d4a:	dc01      	bgt.n	8009d50 <_printf_float+0x2b0>
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	e793      	b.n	8009c78 <_printf_float+0x1d8>
 8009d50:	2301      	movs	r3, #1
 8009d52:	465a      	mov	r2, fp
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f aefb 	beq.w	8009b56 <_printf_float+0xb6>
 8009d60:	f10a 0a01 	add.w	sl, sl, #1
 8009d64:	e7ee      	b.n	8009d44 <_printf_float+0x2a4>
 8009d66:	bf00      	nop
 8009d68:	7fefffff 	.word	0x7fefffff
 8009d6c:	0800e9c8 	.word	0x0800e9c8
 8009d70:	0800e9c4 	.word	0x0800e9c4
 8009d74:	0800e9d0 	.word	0x0800e9d0
 8009d78:	0800e9cc 	.word	0x0800e9cc
 8009d7c:	0800eb0a 	.word	0x0800eb0a
 8009d80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d86:	4553      	cmp	r3, sl
 8009d88:	bfa8      	it	ge
 8009d8a:	4653      	movge	r3, sl
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	4699      	mov	r9, r3
 8009d90:	dc36      	bgt.n	8009e00 <_printf_float+0x360>
 8009d92:	f04f 0b00 	mov.w	fp, #0
 8009d96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d9a:	f104 021a 	add.w	r2, r4, #26
 8009d9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009da0:	9306      	str	r3, [sp, #24]
 8009da2:	eba3 0309 	sub.w	r3, r3, r9
 8009da6:	455b      	cmp	r3, fp
 8009da8:	dc31      	bgt.n	8009e0e <_printf_float+0x36e>
 8009daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dac:	459a      	cmp	sl, r3
 8009dae:	dc3a      	bgt.n	8009e26 <_printf_float+0x386>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	07da      	lsls	r2, r3, #31
 8009db4:	d437      	bmi.n	8009e26 <_printf_float+0x386>
 8009db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db8:	ebaa 0903 	sub.w	r9, sl, r3
 8009dbc:	9b06      	ldr	r3, [sp, #24]
 8009dbe:	ebaa 0303 	sub.w	r3, sl, r3
 8009dc2:	4599      	cmp	r9, r3
 8009dc4:	bfa8      	it	ge
 8009dc6:	4699      	movge	r9, r3
 8009dc8:	f1b9 0f00 	cmp.w	r9, #0
 8009dcc:	dc33      	bgt.n	8009e36 <_printf_float+0x396>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dd6:	f104 0b1a 	add.w	fp, r4, #26
 8009dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ddc:	ebaa 0303 	sub.w	r3, sl, r3
 8009de0:	eba3 0309 	sub.w	r3, r3, r9
 8009de4:	4543      	cmp	r3, r8
 8009de6:	f77f af79 	ble.w	8009cdc <_printf_float+0x23c>
 8009dea:	2301      	movs	r3, #1
 8009dec:	465a      	mov	r2, fp
 8009dee:	4631      	mov	r1, r6
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b8      	blx	r7
 8009df4:	3001      	adds	r0, #1
 8009df6:	f43f aeae 	beq.w	8009b56 <_printf_float+0xb6>
 8009dfa:	f108 0801 	add.w	r8, r8, #1
 8009dfe:	e7ec      	b.n	8009dda <_printf_float+0x33a>
 8009e00:	4642      	mov	r2, r8
 8009e02:	4631      	mov	r1, r6
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b8      	blx	r7
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d1c2      	bne.n	8009d92 <_printf_float+0x2f2>
 8009e0c:	e6a3      	b.n	8009b56 <_printf_float+0xb6>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	9206      	str	r2, [sp, #24]
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f43f ae9c 	beq.w	8009b56 <_printf_float+0xb6>
 8009e1e:	9a06      	ldr	r2, [sp, #24]
 8009e20:	f10b 0b01 	add.w	fp, fp, #1
 8009e24:	e7bb      	b.n	8009d9e <_printf_float+0x2fe>
 8009e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	d1c0      	bne.n	8009db6 <_printf_float+0x316>
 8009e34:	e68f      	b.n	8009b56 <_printf_float+0xb6>
 8009e36:	9a06      	ldr	r2, [sp, #24]
 8009e38:	464b      	mov	r3, r9
 8009e3a:	4442      	add	r2, r8
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4628      	mov	r0, r5
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	d1c3      	bne.n	8009dce <_printf_float+0x32e>
 8009e46:	e686      	b.n	8009b56 <_printf_float+0xb6>
 8009e48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e4c:	f1ba 0f01 	cmp.w	sl, #1
 8009e50:	dc01      	bgt.n	8009e56 <_printf_float+0x3b6>
 8009e52:	07db      	lsls	r3, r3, #31
 8009e54:	d536      	bpl.n	8009ec4 <_printf_float+0x424>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	f43f ae78 	beq.w	8009b56 <_printf_float+0xb6>
 8009e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	47b8      	blx	r7
 8009e70:	3001      	adds	r0, #1
 8009e72:	f43f ae70 	beq.w	8009b56 <_printf_float+0xb6>
 8009e76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e82:	f7f6 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e86:	b9c0      	cbnz	r0, 8009eba <_printf_float+0x41a>
 8009e88:	4653      	mov	r3, sl
 8009e8a:	f108 0201 	add.w	r2, r8, #1
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b8      	blx	r7
 8009e94:	3001      	adds	r0, #1
 8009e96:	d10c      	bne.n	8009eb2 <_printf_float+0x412>
 8009e98:	e65d      	b.n	8009b56 <_printf_float+0xb6>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	465a      	mov	r2, fp
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b8      	blx	r7
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	f43f ae56 	beq.w	8009b56 <_printf_float+0xb6>
 8009eaa:	f108 0801 	add.w	r8, r8, #1
 8009eae:	45d0      	cmp	r8, sl
 8009eb0:	dbf3      	blt.n	8009e9a <_printf_float+0x3fa>
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009eb8:	e6df      	b.n	8009c7a <_printf_float+0x1da>
 8009eba:	f04f 0800 	mov.w	r8, #0
 8009ebe:	f104 0b1a 	add.w	fp, r4, #26
 8009ec2:	e7f4      	b.n	8009eae <_printf_float+0x40e>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4642      	mov	r2, r8
 8009ec8:	e7e1      	b.n	8009e8e <_printf_float+0x3ee>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	464a      	mov	r2, r9
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b8      	blx	r7
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	f43f ae3e 	beq.w	8009b56 <_printf_float+0xb6>
 8009eda:	f108 0801 	add.w	r8, r8, #1
 8009ede:	68e3      	ldr	r3, [r4, #12]
 8009ee0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ee2:	1a5b      	subs	r3, r3, r1
 8009ee4:	4543      	cmp	r3, r8
 8009ee6:	dcf0      	bgt.n	8009eca <_printf_float+0x42a>
 8009ee8:	e6fc      	b.n	8009ce4 <_printf_float+0x244>
 8009eea:	f04f 0800 	mov.w	r8, #0
 8009eee:	f104 0919 	add.w	r9, r4, #25
 8009ef2:	e7f4      	b.n	8009ede <_printf_float+0x43e>

08009ef4 <_printf_common>:
 8009ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef8:	4616      	mov	r6, r2
 8009efa:	4698      	mov	r8, r3
 8009efc:	688a      	ldr	r2, [r1, #8]
 8009efe:	690b      	ldr	r3, [r1, #16]
 8009f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f04:	4293      	cmp	r3, r2
 8009f06:	bfb8      	it	lt
 8009f08:	4613      	movlt	r3, r2
 8009f0a:	6033      	str	r3, [r6, #0]
 8009f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f10:	4607      	mov	r7, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	b10a      	cbz	r2, 8009f1a <_printf_common+0x26>
 8009f16:	3301      	adds	r3, #1
 8009f18:	6033      	str	r3, [r6, #0]
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	0699      	lsls	r1, r3, #26
 8009f1e:	bf42      	ittt	mi
 8009f20:	6833      	ldrmi	r3, [r6, #0]
 8009f22:	3302      	addmi	r3, #2
 8009f24:	6033      	strmi	r3, [r6, #0]
 8009f26:	6825      	ldr	r5, [r4, #0]
 8009f28:	f015 0506 	ands.w	r5, r5, #6
 8009f2c:	d106      	bne.n	8009f3c <_printf_common+0x48>
 8009f2e:	f104 0a19 	add.w	sl, r4, #25
 8009f32:	68e3      	ldr	r3, [r4, #12]
 8009f34:	6832      	ldr	r2, [r6, #0]
 8009f36:	1a9b      	subs	r3, r3, r2
 8009f38:	42ab      	cmp	r3, r5
 8009f3a:	dc26      	bgt.n	8009f8a <_printf_common+0x96>
 8009f3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f40:	6822      	ldr	r2, [r4, #0]
 8009f42:	3b00      	subs	r3, #0
 8009f44:	bf18      	it	ne
 8009f46:	2301      	movne	r3, #1
 8009f48:	0692      	lsls	r2, r2, #26
 8009f4a:	d42b      	bmi.n	8009fa4 <_printf_common+0xb0>
 8009f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f50:	4641      	mov	r1, r8
 8009f52:	4638      	mov	r0, r7
 8009f54:	47c8      	blx	r9
 8009f56:	3001      	adds	r0, #1
 8009f58:	d01e      	beq.n	8009f98 <_printf_common+0xa4>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	6922      	ldr	r2, [r4, #16]
 8009f5e:	f003 0306 	and.w	r3, r3, #6
 8009f62:	2b04      	cmp	r3, #4
 8009f64:	bf02      	ittt	eq
 8009f66:	68e5      	ldreq	r5, [r4, #12]
 8009f68:	6833      	ldreq	r3, [r6, #0]
 8009f6a:	1aed      	subeq	r5, r5, r3
 8009f6c:	68a3      	ldr	r3, [r4, #8]
 8009f6e:	bf0c      	ite	eq
 8009f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f74:	2500      	movne	r5, #0
 8009f76:	4293      	cmp	r3, r2
 8009f78:	bfc4      	itt	gt
 8009f7a:	1a9b      	subgt	r3, r3, r2
 8009f7c:	18ed      	addgt	r5, r5, r3
 8009f7e:	2600      	movs	r6, #0
 8009f80:	341a      	adds	r4, #26
 8009f82:	42b5      	cmp	r5, r6
 8009f84:	d11a      	bne.n	8009fbc <_printf_common+0xc8>
 8009f86:	2000      	movs	r0, #0
 8009f88:	e008      	b.n	8009f9c <_printf_common+0xa8>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4652      	mov	r2, sl
 8009f8e:	4641      	mov	r1, r8
 8009f90:	4638      	mov	r0, r7
 8009f92:	47c8      	blx	r9
 8009f94:	3001      	adds	r0, #1
 8009f96:	d103      	bne.n	8009fa0 <_printf_common+0xac>
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	e7c6      	b.n	8009f32 <_printf_common+0x3e>
 8009fa4:	18e1      	adds	r1, r4, r3
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	2030      	movs	r0, #48	@ 0x30
 8009faa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fae:	4422      	add	r2, r4
 8009fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fb8:	3302      	adds	r3, #2
 8009fba:	e7c7      	b.n	8009f4c <_printf_common+0x58>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	47c8      	blx	r9
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d0e6      	beq.n	8009f98 <_printf_common+0xa4>
 8009fca:	3601      	adds	r6, #1
 8009fcc:	e7d9      	b.n	8009f82 <_printf_common+0x8e>
	...

08009fd0 <_printf_i>:
 8009fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd4:	7e0f      	ldrb	r7, [r1, #24]
 8009fd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fd8:	2f78      	cmp	r7, #120	@ 0x78
 8009fda:	4691      	mov	r9, r2
 8009fdc:	4680      	mov	r8, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	469a      	mov	sl, r3
 8009fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fe6:	d807      	bhi.n	8009ff8 <_printf_i+0x28>
 8009fe8:	2f62      	cmp	r7, #98	@ 0x62
 8009fea:	d80a      	bhi.n	800a002 <_printf_i+0x32>
 8009fec:	2f00      	cmp	r7, #0
 8009fee:	f000 80d1 	beq.w	800a194 <_printf_i+0x1c4>
 8009ff2:	2f58      	cmp	r7, #88	@ 0x58
 8009ff4:	f000 80b8 	beq.w	800a168 <_printf_i+0x198>
 8009ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a000:	e03a      	b.n	800a078 <_printf_i+0xa8>
 800a002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a006:	2b15      	cmp	r3, #21
 800a008:	d8f6      	bhi.n	8009ff8 <_printf_i+0x28>
 800a00a:	a101      	add	r1, pc, #4	@ (adr r1, 800a010 <_printf_i+0x40>)
 800a00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a010:	0800a069 	.word	0x0800a069
 800a014:	0800a07d 	.word	0x0800a07d
 800a018:	08009ff9 	.word	0x08009ff9
 800a01c:	08009ff9 	.word	0x08009ff9
 800a020:	08009ff9 	.word	0x08009ff9
 800a024:	08009ff9 	.word	0x08009ff9
 800a028:	0800a07d 	.word	0x0800a07d
 800a02c:	08009ff9 	.word	0x08009ff9
 800a030:	08009ff9 	.word	0x08009ff9
 800a034:	08009ff9 	.word	0x08009ff9
 800a038:	08009ff9 	.word	0x08009ff9
 800a03c:	0800a17b 	.word	0x0800a17b
 800a040:	0800a0a7 	.word	0x0800a0a7
 800a044:	0800a135 	.word	0x0800a135
 800a048:	08009ff9 	.word	0x08009ff9
 800a04c:	08009ff9 	.word	0x08009ff9
 800a050:	0800a19d 	.word	0x0800a19d
 800a054:	08009ff9 	.word	0x08009ff9
 800a058:	0800a0a7 	.word	0x0800a0a7
 800a05c:	08009ff9 	.word	0x08009ff9
 800a060:	08009ff9 	.word	0x08009ff9
 800a064:	0800a13d 	.word	0x0800a13d
 800a068:	6833      	ldr	r3, [r6, #0]
 800a06a:	1d1a      	adds	r2, r3, #4
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6032      	str	r2, [r6, #0]
 800a070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a078:	2301      	movs	r3, #1
 800a07a:	e09c      	b.n	800a1b6 <_printf_i+0x1e6>
 800a07c:	6833      	ldr	r3, [r6, #0]
 800a07e:	6820      	ldr	r0, [r4, #0]
 800a080:	1d19      	adds	r1, r3, #4
 800a082:	6031      	str	r1, [r6, #0]
 800a084:	0606      	lsls	r6, r0, #24
 800a086:	d501      	bpl.n	800a08c <_printf_i+0xbc>
 800a088:	681d      	ldr	r5, [r3, #0]
 800a08a:	e003      	b.n	800a094 <_printf_i+0xc4>
 800a08c:	0645      	lsls	r5, r0, #25
 800a08e:	d5fb      	bpl.n	800a088 <_printf_i+0xb8>
 800a090:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a094:	2d00      	cmp	r5, #0
 800a096:	da03      	bge.n	800a0a0 <_printf_i+0xd0>
 800a098:	232d      	movs	r3, #45	@ 0x2d
 800a09a:	426d      	negs	r5, r5
 800a09c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0a0:	4858      	ldr	r0, [pc, #352]	@ (800a204 <_printf_i+0x234>)
 800a0a2:	230a      	movs	r3, #10
 800a0a4:	e011      	b.n	800a0ca <_printf_i+0xfa>
 800a0a6:	6821      	ldr	r1, [r4, #0]
 800a0a8:	6833      	ldr	r3, [r6, #0]
 800a0aa:	0608      	lsls	r0, r1, #24
 800a0ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0b0:	d402      	bmi.n	800a0b8 <_printf_i+0xe8>
 800a0b2:	0649      	lsls	r1, r1, #25
 800a0b4:	bf48      	it	mi
 800a0b6:	b2ad      	uxthmi	r5, r5
 800a0b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0ba:	4852      	ldr	r0, [pc, #328]	@ (800a204 <_printf_i+0x234>)
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	bf14      	ite	ne
 800a0c0:	230a      	movne	r3, #10
 800a0c2:	2308      	moveq	r3, #8
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0ca:	6866      	ldr	r6, [r4, #4]
 800a0cc:	60a6      	str	r6, [r4, #8]
 800a0ce:	2e00      	cmp	r6, #0
 800a0d0:	db05      	blt.n	800a0de <_printf_i+0x10e>
 800a0d2:	6821      	ldr	r1, [r4, #0]
 800a0d4:	432e      	orrs	r6, r5
 800a0d6:	f021 0104 	bic.w	r1, r1, #4
 800a0da:	6021      	str	r1, [r4, #0]
 800a0dc:	d04b      	beq.n	800a176 <_printf_i+0x1a6>
 800a0de:	4616      	mov	r6, r2
 800a0e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0e4:	fb03 5711 	mls	r7, r3, r1, r5
 800a0e8:	5dc7      	ldrb	r7, [r0, r7]
 800a0ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0ee:	462f      	mov	r7, r5
 800a0f0:	42bb      	cmp	r3, r7
 800a0f2:	460d      	mov	r5, r1
 800a0f4:	d9f4      	bls.n	800a0e0 <_printf_i+0x110>
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d10b      	bne.n	800a112 <_printf_i+0x142>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	07df      	lsls	r7, r3, #31
 800a0fe:	d508      	bpl.n	800a112 <_printf_i+0x142>
 800a100:	6923      	ldr	r3, [r4, #16]
 800a102:	6861      	ldr	r1, [r4, #4]
 800a104:	4299      	cmp	r1, r3
 800a106:	bfde      	ittt	le
 800a108:	2330      	movle	r3, #48	@ 0x30
 800a10a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a10e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a112:	1b92      	subs	r2, r2, r6
 800a114:	6122      	str	r2, [r4, #16]
 800a116:	f8cd a000 	str.w	sl, [sp]
 800a11a:	464b      	mov	r3, r9
 800a11c:	aa03      	add	r2, sp, #12
 800a11e:	4621      	mov	r1, r4
 800a120:	4640      	mov	r0, r8
 800a122:	f7ff fee7 	bl	8009ef4 <_printf_common>
 800a126:	3001      	adds	r0, #1
 800a128:	d14a      	bne.n	800a1c0 <_printf_i+0x1f0>
 800a12a:	f04f 30ff 	mov.w	r0, #4294967295
 800a12e:	b004      	add	sp, #16
 800a130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	f043 0320 	orr.w	r3, r3, #32
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	4832      	ldr	r0, [pc, #200]	@ (800a208 <_printf_i+0x238>)
 800a13e:	2778      	movs	r7, #120	@ 0x78
 800a140:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	6831      	ldr	r1, [r6, #0]
 800a148:	061f      	lsls	r7, r3, #24
 800a14a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a14e:	d402      	bmi.n	800a156 <_printf_i+0x186>
 800a150:	065f      	lsls	r7, r3, #25
 800a152:	bf48      	it	mi
 800a154:	b2ad      	uxthmi	r5, r5
 800a156:	6031      	str	r1, [r6, #0]
 800a158:	07d9      	lsls	r1, r3, #31
 800a15a:	bf44      	itt	mi
 800a15c:	f043 0320 	orrmi.w	r3, r3, #32
 800a160:	6023      	strmi	r3, [r4, #0]
 800a162:	b11d      	cbz	r5, 800a16c <_printf_i+0x19c>
 800a164:	2310      	movs	r3, #16
 800a166:	e7ad      	b.n	800a0c4 <_printf_i+0xf4>
 800a168:	4826      	ldr	r0, [pc, #152]	@ (800a204 <_printf_i+0x234>)
 800a16a:	e7e9      	b.n	800a140 <_printf_i+0x170>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	f023 0320 	bic.w	r3, r3, #32
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	e7f6      	b.n	800a164 <_printf_i+0x194>
 800a176:	4616      	mov	r6, r2
 800a178:	e7bd      	b.n	800a0f6 <_printf_i+0x126>
 800a17a:	6833      	ldr	r3, [r6, #0]
 800a17c:	6825      	ldr	r5, [r4, #0]
 800a17e:	6961      	ldr	r1, [r4, #20]
 800a180:	1d18      	adds	r0, r3, #4
 800a182:	6030      	str	r0, [r6, #0]
 800a184:	062e      	lsls	r6, r5, #24
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	d501      	bpl.n	800a18e <_printf_i+0x1be>
 800a18a:	6019      	str	r1, [r3, #0]
 800a18c:	e002      	b.n	800a194 <_printf_i+0x1c4>
 800a18e:	0668      	lsls	r0, r5, #25
 800a190:	d5fb      	bpl.n	800a18a <_printf_i+0x1ba>
 800a192:	8019      	strh	r1, [r3, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	4616      	mov	r6, r2
 800a19a:	e7bc      	b.n	800a116 <_printf_i+0x146>
 800a19c:	6833      	ldr	r3, [r6, #0]
 800a19e:	1d1a      	adds	r2, r3, #4
 800a1a0:	6032      	str	r2, [r6, #0]
 800a1a2:	681e      	ldr	r6, [r3, #0]
 800a1a4:	6862      	ldr	r2, [r4, #4]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7f6 f819 	bl	80001e0 <memchr>
 800a1ae:	b108      	cbz	r0, 800a1b4 <_printf_i+0x1e4>
 800a1b0:	1b80      	subs	r0, r0, r6
 800a1b2:	6060      	str	r0, [r4, #4]
 800a1b4:	6863      	ldr	r3, [r4, #4]
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1be:	e7aa      	b.n	800a116 <_printf_i+0x146>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	47d0      	blx	sl
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d0ad      	beq.n	800a12a <_printf_i+0x15a>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	079b      	lsls	r3, r3, #30
 800a1d2:	d413      	bmi.n	800a1fc <_printf_i+0x22c>
 800a1d4:	68e0      	ldr	r0, [r4, #12]
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	4298      	cmp	r0, r3
 800a1da:	bfb8      	it	lt
 800a1dc:	4618      	movlt	r0, r3
 800a1de:	e7a6      	b.n	800a12e <_printf_i+0x15e>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	47d0      	blx	sl
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d09d      	beq.n	800a12a <_printf_i+0x15a>
 800a1ee:	3501      	adds	r5, #1
 800a1f0:	68e3      	ldr	r3, [r4, #12]
 800a1f2:	9903      	ldr	r1, [sp, #12]
 800a1f4:	1a5b      	subs	r3, r3, r1
 800a1f6:	42ab      	cmp	r3, r5
 800a1f8:	dcf2      	bgt.n	800a1e0 <_printf_i+0x210>
 800a1fa:	e7eb      	b.n	800a1d4 <_printf_i+0x204>
 800a1fc:	2500      	movs	r5, #0
 800a1fe:	f104 0619 	add.w	r6, r4, #25
 800a202:	e7f5      	b.n	800a1f0 <_printf_i+0x220>
 800a204:	0800e9d4 	.word	0x0800e9d4
 800a208:	0800e9e5 	.word	0x0800e9e5

0800a20c <_scanf_float>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	b087      	sub	sp, #28
 800a212:	4691      	mov	r9, r2
 800a214:	9303      	str	r3, [sp, #12]
 800a216:	688b      	ldr	r3, [r1, #8]
 800a218:	1e5a      	subs	r2, r3, #1
 800a21a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a21e:	bf81      	itttt	hi
 800a220:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a224:	eb03 0b05 	addhi.w	fp, r3, r5
 800a228:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a22c:	608b      	strhi	r3, [r1, #8]
 800a22e:	680b      	ldr	r3, [r1, #0]
 800a230:	460a      	mov	r2, r1
 800a232:	f04f 0500 	mov.w	r5, #0
 800a236:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a23a:	f842 3b1c 	str.w	r3, [r2], #28
 800a23e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a242:	4680      	mov	r8, r0
 800a244:	460c      	mov	r4, r1
 800a246:	bf98      	it	ls
 800a248:	f04f 0b00 	movls.w	fp, #0
 800a24c:	9201      	str	r2, [sp, #4]
 800a24e:	4616      	mov	r6, r2
 800a250:	46aa      	mov	sl, r5
 800a252:	462f      	mov	r7, r5
 800a254:	9502      	str	r5, [sp, #8]
 800a256:	68a2      	ldr	r2, [r4, #8]
 800a258:	b15a      	cbz	r2, 800a272 <_scanf_float+0x66>
 800a25a:	f8d9 3000 	ldr.w	r3, [r9]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b4e      	cmp	r3, #78	@ 0x4e
 800a262:	d863      	bhi.n	800a32c <_scanf_float+0x120>
 800a264:	2b40      	cmp	r3, #64	@ 0x40
 800a266:	d83b      	bhi.n	800a2e0 <_scanf_float+0xd4>
 800a268:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a26c:	b2c8      	uxtb	r0, r1
 800a26e:	280e      	cmp	r0, #14
 800a270:	d939      	bls.n	800a2e6 <_scanf_float+0xda>
 800a272:	b11f      	cbz	r7, 800a27c <_scanf_float+0x70>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a280:	f1ba 0f01 	cmp.w	sl, #1
 800a284:	f200 8114 	bhi.w	800a4b0 <_scanf_float+0x2a4>
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	429e      	cmp	r6, r3
 800a28c:	f200 8105 	bhi.w	800a49a <_scanf_float+0x28e>
 800a290:	2001      	movs	r0, #1
 800a292:	b007      	add	sp, #28
 800a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a298:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a29c:	2a0d      	cmp	r2, #13
 800a29e:	d8e8      	bhi.n	800a272 <_scanf_float+0x66>
 800a2a0:	a101      	add	r1, pc, #4	@ (adr r1, 800a2a8 <_scanf_float+0x9c>)
 800a2a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a3f1 	.word	0x0800a3f1
 800a2ac:	0800a273 	.word	0x0800a273
 800a2b0:	0800a273 	.word	0x0800a273
 800a2b4:	0800a273 	.word	0x0800a273
 800a2b8:	0800a44d 	.word	0x0800a44d
 800a2bc:	0800a427 	.word	0x0800a427
 800a2c0:	0800a273 	.word	0x0800a273
 800a2c4:	0800a273 	.word	0x0800a273
 800a2c8:	0800a3ff 	.word	0x0800a3ff
 800a2cc:	0800a273 	.word	0x0800a273
 800a2d0:	0800a273 	.word	0x0800a273
 800a2d4:	0800a273 	.word	0x0800a273
 800a2d8:	0800a273 	.word	0x0800a273
 800a2dc:	0800a3bb 	.word	0x0800a3bb
 800a2e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a2e4:	e7da      	b.n	800a29c <_scanf_float+0x90>
 800a2e6:	290e      	cmp	r1, #14
 800a2e8:	d8c3      	bhi.n	800a272 <_scanf_float+0x66>
 800a2ea:	a001      	add	r0, pc, #4	@ (adr r0, 800a2f0 <_scanf_float+0xe4>)
 800a2ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a2f0:	0800a3ab 	.word	0x0800a3ab
 800a2f4:	0800a273 	.word	0x0800a273
 800a2f8:	0800a3ab 	.word	0x0800a3ab
 800a2fc:	0800a43b 	.word	0x0800a43b
 800a300:	0800a273 	.word	0x0800a273
 800a304:	0800a34d 	.word	0x0800a34d
 800a308:	0800a391 	.word	0x0800a391
 800a30c:	0800a391 	.word	0x0800a391
 800a310:	0800a391 	.word	0x0800a391
 800a314:	0800a391 	.word	0x0800a391
 800a318:	0800a391 	.word	0x0800a391
 800a31c:	0800a391 	.word	0x0800a391
 800a320:	0800a391 	.word	0x0800a391
 800a324:	0800a391 	.word	0x0800a391
 800a328:	0800a391 	.word	0x0800a391
 800a32c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a32e:	d809      	bhi.n	800a344 <_scanf_float+0x138>
 800a330:	2b60      	cmp	r3, #96	@ 0x60
 800a332:	d8b1      	bhi.n	800a298 <_scanf_float+0x8c>
 800a334:	2b54      	cmp	r3, #84	@ 0x54
 800a336:	d07b      	beq.n	800a430 <_scanf_float+0x224>
 800a338:	2b59      	cmp	r3, #89	@ 0x59
 800a33a:	d19a      	bne.n	800a272 <_scanf_float+0x66>
 800a33c:	2d07      	cmp	r5, #7
 800a33e:	d198      	bne.n	800a272 <_scanf_float+0x66>
 800a340:	2508      	movs	r5, #8
 800a342:	e02f      	b.n	800a3a4 <_scanf_float+0x198>
 800a344:	2b74      	cmp	r3, #116	@ 0x74
 800a346:	d073      	beq.n	800a430 <_scanf_float+0x224>
 800a348:	2b79      	cmp	r3, #121	@ 0x79
 800a34a:	e7f6      	b.n	800a33a <_scanf_float+0x12e>
 800a34c:	6821      	ldr	r1, [r4, #0]
 800a34e:	05c8      	lsls	r0, r1, #23
 800a350:	d51e      	bpl.n	800a390 <_scanf_float+0x184>
 800a352:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a356:	6021      	str	r1, [r4, #0]
 800a358:	3701      	adds	r7, #1
 800a35a:	f1bb 0f00 	cmp.w	fp, #0
 800a35e:	d003      	beq.n	800a368 <_scanf_float+0x15c>
 800a360:	3201      	adds	r2, #1
 800a362:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a366:	60a2      	str	r2, [r4, #8]
 800a368:	68a3      	ldr	r3, [r4, #8]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	60a3      	str	r3, [r4, #8]
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	3301      	adds	r3, #1
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a378:	3b01      	subs	r3, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f8c9 3004 	str.w	r3, [r9, #4]
 800a380:	f340 8082 	ble.w	800a488 <_scanf_float+0x27c>
 800a384:	f8d9 3000 	ldr.w	r3, [r9]
 800a388:	3301      	adds	r3, #1
 800a38a:	f8c9 3000 	str.w	r3, [r9]
 800a38e:	e762      	b.n	800a256 <_scanf_float+0x4a>
 800a390:	eb1a 0105 	adds.w	r1, sl, r5
 800a394:	f47f af6d 	bne.w	800a272 <_scanf_float+0x66>
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a39e:	6022      	str	r2, [r4, #0]
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	468a      	mov	sl, r1
 800a3a4:	f806 3b01 	strb.w	r3, [r6], #1
 800a3a8:	e7de      	b.n	800a368 <_scanf_float+0x15c>
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	0610      	lsls	r0, r2, #24
 800a3ae:	f57f af60 	bpl.w	800a272 <_scanf_float+0x66>
 800a3b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3b6:	6022      	str	r2, [r4, #0]
 800a3b8:	e7f4      	b.n	800a3a4 <_scanf_float+0x198>
 800a3ba:	f1ba 0f00 	cmp.w	sl, #0
 800a3be:	d10c      	bne.n	800a3da <_scanf_float+0x1ce>
 800a3c0:	b977      	cbnz	r7, 800a3e0 <_scanf_float+0x1d4>
 800a3c2:	6822      	ldr	r2, [r4, #0]
 800a3c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a3c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a3cc:	d108      	bne.n	800a3e0 <_scanf_float+0x1d4>
 800a3ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3d2:	6022      	str	r2, [r4, #0]
 800a3d4:	f04f 0a01 	mov.w	sl, #1
 800a3d8:	e7e4      	b.n	800a3a4 <_scanf_float+0x198>
 800a3da:	f1ba 0f02 	cmp.w	sl, #2
 800a3de:	d050      	beq.n	800a482 <_scanf_float+0x276>
 800a3e0:	2d01      	cmp	r5, #1
 800a3e2:	d002      	beq.n	800a3ea <_scanf_float+0x1de>
 800a3e4:	2d04      	cmp	r5, #4
 800a3e6:	f47f af44 	bne.w	800a272 <_scanf_float+0x66>
 800a3ea:	3501      	adds	r5, #1
 800a3ec:	b2ed      	uxtb	r5, r5
 800a3ee:	e7d9      	b.n	800a3a4 <_scanf_float+0x198>
 800a3f0:	f1ba 0f01 	cmp.w	sl, #1
 800a3f4:	f47f af3d 	bne.w	800a272 <_scanf_float+0x66>
 800a3f8:	f04f 0a02 	mov.w	sl, #2
 800a3fc:	e7d2      	b.n	800a3a4 <_scanf_float+0x198>
 800a3fe:	b975      	cbnz	r5, 800a41e <_scanf_float+0x212>
 800a400:	2f00      	cmp	r7, #0
 800a402:	f47f af37 	bne.w	800a274 <_scanf_float+0x68>
 800a406:	6822      	ldr	r2, [r4, #0]
 800a408:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a40c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a410:	f040 8103 	bne.w	800a61a <_scanf_float+0x40e>
 800a414:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a418:	6022      	str	r2, [r4, #0]
 800a41a:	2501      	movs	r5, #1
 800a41c:	e7c2      	b.n	800a3a4 <_scanf_float+0x198>
 800a41e:	2d03      	cmp	r5, #3
 800a420:	d0e3      	beq.n	800a3ea <_scanf_float+0x1de>
 800a422:	2d05      	cmp	r5, #5
 800a424:	e7df      	b.n	800a3e6 <_scanf_float+0x1da>
 800a426:	2d02      	cmp	r5, #2
 800a428:	f47f af23 	bne.w	800a272 <_scanf_float+0x66>
 800a42c:	2503      	movs	r5, #3
 800a42e:	e7b9      	b.n	800a3a4 <_scanf_float+0x198>
 800a430:	2d06      	cmp	r5, #6
 800a432:	f47f af1e 	bne.w	800a272 <_scanf_float+0x66>
 800a436:	2507      	movs	r5, #7
 800a438:	e7b4      	b.n	800a3a4 <_scanf_float+0x198>
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	0591      	lsls	r1, r2, #22
 800a43e:	f57f af18 	bpl.w	800a272 <_scanf_float+0x66>
 800a442:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a446:	6022      	str	r2, [r4, #0]
 800a448:	9702      	str	r7, [sp, #8]
 800a44a:	e7ab      	b.n	800a3a4 <_scanf_float+0x198>
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a452:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a456:	d005      	beq.n	800a464 <_scanf_float+0x258>
 800a458:	0550      	lsls	r0, r2, #21
 800a45a:	f57f af0a 	bpl.w	800a272 <_scanf_float+0x66>
 800a45e:	2f00      	cmp	r7, #0
 800a460:	f000 80db 	beq.w	800a61a <_scanf_float+0x40e>
 800a464:	0591      	lsls	r1, r2, #22
 800a466:	bf58      	it	pl
 800a468:	9902      	ldrpl	r1, [sp, #8]
 800a46a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a46e:	bf58      	it	pl
 800a470:	1a79      	subpl	r1, r7, r1
 800a472:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a476:	bf58      	it	pl
 800a478:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a47c:	6022      	str	r2, [r4, #0]
 800a47e:	2700      	movs	r7, #0
 800a480:	e790      	b.n	800a3a4 <_scanf_float+0x198>
 800a482:	f04f 0a03 	mov.w	sl, #3
 800a486:	e78d      	b.n	800a3a4 <_scanf_float+0x198>
 800a488:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a48c:	4649      	mov	r1, r9
 800a48e:	4640      	mov	r0, r8
 800a490:	4798      	blx	r3
 800a492:	2800      	cmp	r0, #0
 800a494:	f43f aedf 	beq.w	800a256 <_scanf_float+0x4a>
 800a498:	e6eb      	b.n	800a272 <_scanf_float+0x66>
 800a49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a49e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4a2:	464a      	mov	r2, r9
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	4798      	blx	r3
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	e6eb      	b.n	800a288 <_scanf_float+0x7c>
 800a4b0:	1e6b      	subs	r3, r5, #1
 800a4b2:	2b06      	cmp	r3, #6
 800a4b4:	d824      	bhi.n	800a500 <_scanf_float+0x2f4>
 800a4b6:	2d02      	cmp	r5, #2
 800a4b8:	d836      	bhi.n	800a528 <_scanf_float+0x31c>
 800a4ba:	9b01      	ldr	r3, [sp, #4]
 800a4bc:	429e      	cmp	r6, r3
 800a4be:	f67f aee7 	bls.w	800a290 <_scanf_float+0x84>
 800a4c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4ca:	464a      	mov	r2, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	4798      	blx	r3
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	6123      	str	r3, [r4, #16]
 800a4d6:	e7f0      	b.n	800a4ba <_scanf_float+0x2ae>
 800a4d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4dc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a4e0:	464a      	mov	r2, r9
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4798      	blx	r3
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	6123      	str	r3, [r4, #16]
 800a4ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4f0:	fa5f fa8a 	uxtb.w	sl, sl
 800a4f4:	f1ba 0f02 	cmp.w	sl, #2
 800a4f8:	d1ee      	bne.n	800a4d8 <_scanf_float+0x2cc>
 800a4fa:	3d03      	subs	r5, #3
 800a4fc:	b2ed      	uxtb	r5, r5
 800a4fe:	1b76      	subs	r6, r6, r5
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	05da      	lsls	r2, r3, #23
 800a504:	d530      	bpl.n	800a568 <_scanf_float+0x35c>
 800a506:	055b      	lsls	r3, r3, #21
 800a508:	d511      	bpl.n	800a52e <_scanf_float+0x322>
 800a50a:	9b01      	ldr	r3, [sp, #4]
 800a50c:	429e      	cmp	r6, r3
 800a50e:	f67f aebf 	bls.w	800a290 <_scanf_float+0x84>
 800a512:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a516:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a51a:	464a      	mov	r2, r9
 800a51c:	4640      	mov	r0, r8
 800a51e:	4798      	blx	r3
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	3b01      	subs	r3, #1
 800a524:	6123      	str	r3, [r4, #16]
 800a526:	e7f0      	b.n	800a50a <_scanf_float+0x2fe>
 800a528:	46aa      	mov	sl, r5
 800a52a:	46b3      	mov	fp, r6
 800a52c:	e7de      	b.n	800a4ec <_scanf_float+0x2e0>
 800a52e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a532:	6923      	ldr	r3, [r4, #16]
 800a534:	2965      	cmp	r1, #101	@ 0x65
 800a536:	f103 33ff 	add.w	r3, r3, #4294967295
 800a53a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a53e:	6123      	str	r3, [r4, #16]
 800a540:	d00c      	beq.n	800a55c <_scanf_float+0x350>
 800a542:	2945      	cmp	r1, #69	@ 0x45
 800a544:	d00a      	beq.n	800a55c <_scanf_float+0x350>
 800a546:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a54a:	464a      	mov	r2, r9
 800a54c:	4640      	mov	r0, r8
 800a54e:	4798      	blx	r3
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a556:	3b01      	subs	r3, #1
 800a558:	1eb5      	subs	r5, r6, #2
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a560:	464a      	mov	r2, r9
 800a562:	4640      	mov	r0, r8
 800a564:	4798      	blx	r3
 800a566:	462e      	mov	r6, r5
 800a568:	6822      	ldr	r2, [r4, #0]
 800a56a:	f012 0210 	ands.w	r2, r2, #16
 800a56e:	d001      	beq.n	800a574 <_scanf_float+0x368>
 800a570:	2000      	movs	r0, #0
 800a572:	e68e      	b.n	800a292 <_scanf_float+0x86>
 800a574:	7032      	strb	r2, [r6, #0]
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a57c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a580:	d125      	bne.n	800a5ce <_scanf_float+0x3c2>
 800a582:	9b02      	ldr	r3, [sp, #8]
 800a584:	429f      	cmp	r7, r3
 800a586:	d00a      	beq.n	800a59e <_scanf_float+0x392>
 800a588:	1bda      	subs	r2, r3, r7
 800a58a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a58e:	429e      	cmp	r6, r3
 800a590:	bf28      	it	cs
 800a592:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a596:	4922      	ldr	r1, [pc, #136]	@ (800a620 <_scanf_float+0x414>)
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f93d 	bl	800a818 <siprintf>
 800a59e:	9901      	ldr	r1, [sp, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f002 fc58 	bl	800ce58 <_strtod_r>
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	6821      	ldr	r1, [r4, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f011 0f02 	tst.w	r1, #2
 800a5b2:	ec57 6b10 	vmov	r6, r7, d0
 800a5b6:	f103 0204 	add.w	r2, r3, #4
 800a5ba:	d015      	beq.n	800a5e8 <_scanf_float+0x3dc>
 800a5bc:	9903      	ldr	r1, [sp, #12]
 800a5be:	600a      	str	r2, [r1, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	e9c3 6700 	strd	r6, r7, [r3]
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	60e3      	str	r3, [r4, #12]
 800a5cc:	e7d0      	b.n	800a570 <_scanf_float+0x364>
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0e4      	beq.n	800a59e <_scanf_float+0x392>
 800a5d4:	9905      	ldr	r1, [sp, #20]
 800a5d6:	230a      	movs	r3, #10
 800a5d8:	3101      	adds	r1, #1
 800a5da:	4640      	mov	r0, r8
 800a5dc:	f002 fcbc 	bl	800cf58 <_strtol_r>
 800a5e0:	9b04      	ldr	r3, [sp, #16]
 800a5e2:	9e05      	ldr	r6, [sp, #20]
 800a5e4:	1ac2      	subs	r2, r0, r3
 800a5e6:	e7d0      	b.n	800a58a <_scanf_float+0x37e>
 800a5e8:	f011 0f04 	tst.w	r1, #4
 800a5ec:	9903      	ldr	r1, [sp, #12]
 800a5ee:	600a      	str	r2, [r1, #0]
 800a5f0:	d1e6      	bne.n	800a5c0 <_scanf_float+0x3b4>
 800a5f2:	681d      	ldr	r5, [r3, #0]
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	463b      	mov	r3, r7
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7f6 fa9e 	bl	8000b3c <__aeabi_dcmpun>
 800a600:	b128      	cbz	r0, 800a60e <_scanf_float+0x402>
 800a602:	4808      	ldr	r0, [pc, #32]	@ (800a624 <_scanf_float+0x418>)
 800a604:	f000 fa1c 	bl	800aa40 <nanf>
 800a608:	ed85 0a00 	vstr	s0, [r5]
 800a60c:	e7db      	b.n	800a5c6 <_scanf_float+0x3ba>
 800a60e:	4630      	mov	r0, r6
 800a610:	4639      	mov	r1, r7
 800a612:	f7f6 faf1 	bl	8000bf8 <__aeabi_d2f>
 800a616:	6028      	str	r0, [r5, #0]
 800a618:	e7d5      	b.n	800a5c6 <_scanf_float+0x3ba>
 800a61a:	2700      	movs	r7, #0
 800a61c:	e62e      	b.n	800a27c <_scanf_float+0x70>
 800a61e:	bf00      	nop
 800a620:	0800e9f6 	.word	0x0800e9f6
 800a624:	0800eb52 	.word	0x0800eb52

0800a628 <std>:
 800a628:	2300      	movs	r3, #0
 800a62a:	b510      	push	{r4, lr}
 800a62c:	4604      	mov	r4, r0
 800a62e:	e9c0 3300 	strd	r3, r3, [r0]
 800a632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a636:	6083      	str	r3, [r0, #8]
 800a638:	8181      	strh	r1, [r0, #12]
 800a63a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a63c:	81c2      	strh	r2, [r0, #14]
 800a63e:	6183      	str	r3, [r0, #24]
 800a640:	4619      	mov	r1, r3
 800a642:	2208      	movs	r2, #8
 800a644:	305c      	adds	r0, #92	@ 0x5c
 800a646:	f000 f97a 	bl	800a93e <memset>
 800a64a:	4b0d      	ldr	r3, [pc, #52]	@ (800a680 <std+0x58>)
 800a64c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a64e:	4b0d      	ldr	r3, [pc, #52]	@ (800a684 <std+0x5c>)
 800a650:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a652:	4b0d      	ldr	r3, [pc, #52]	@ (800a688 <std+0x60>)
 800a654:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a656:	4b0d      	ldr	r3, [pc, #52]	@ (800a68c <std+0x64>)
 800a658:	6323      	str	r3, [r4, #48]	@ 0x30
 800a65a:	4b0d      	ldr	r3, [pc, #52]	@ (800a690 <std+0x68>)
 800a65c:	6224      	str	r4, [r4, #32]
 800a65e:	429c      	cmp	r4, r3
 800a660:	d006      	beq.n	800a670 <std+0x48>
 800a662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a666:	4294      	cmp	r4, r2
 800a668:	d002      	beq.n	800a670 <std+0x48>
 800a66a:	33d0      	adds	r3, #208	@ 0xd0
 800a66c:	429c      	cmp	r4, r3
 800a66e:	d105      	bne.n	800a67c <std+0x54>
 800a670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a678:	f000 b9de 	b.w	800aa38 <__retarget_lock_init_recursive>
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	bf00      	nop
 800a680:	0800a8b5 	.word	0x0800a8b5
 800a684:	0800a8db 	.word	0x0800a8db
 800a688:	0800a913 	.word	0x0800a913
 800a68c:	0800a937 	.word	0x0800a937
 800a690:	2000202c 	.word	0x2000202c

0800a694 <stdio_exit_handler>:
 800a694:	4a02      	ldr	r2, [pc, #8]	@ (800a6a0 <stdio_exit_handler+0xc>)
 800a696:	4903      	ldr	r1, [pc, #12]	@ (800a6a4 <stdio_exit_handler+0x10>)
 800a698:	4803      	ldr	r0, [pc, #12]	@ (800a6a8 <stdio_exit_handler+0x14>)
 800a69a:	f000 b869 	b.w	800a770 <_fwalk_sglue>
 800a69e:	bf00      	nop
 800a6a0:	20000114 	.word	0x20000114
 800a6a4:	0800d951 	.word	0x0800d951
 800a6a8:	20000124 	.word	0x20000124

0800a6ac <cleanup_stdio>:
 800a6ac:	6841      	ldr	r1, [r0, #4]
 800a6ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e0 <cleanup_stdio+0x34>)
 800a6b0:	4299      	cmp	r1, r3
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	d001      	beq.n	800a6bc <cleanup_stdio+0x10>
 800a6b8:	f003 f94a 	bl	800d950 <_fflush_r>
 800a6bc:	68a1      	ldr	r1, [r4, #8]
 800a6be:	4b09      	ldr	r3, [pc, #36]	@ (800a6e4 <cleanup_stdio+0x38>)
 800a6c0:	4299      	cmp	r1, r3
 800a6c2:	d002      	beq.n	800a6ca <cleanup_stdio+0x1e>
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f003 f943 	bl	800d950 <_fflush_r>
 800a6ca:	68e1      	ldr	r1, [r4, #12]
 800a6cc:	4b06      	ldr	r3, [pc, #24]	@ (800a6e8 <cleanup_stdio+0x3c>)
 800a6ce:	4299      	cmp	r1, r3
 800a6d0:	d004      	beq.n	800a6dc <cleanup_stdio+0x30>
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d8:	f003 b93a 	b.w	800d950 <_fflush_r>
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000202c 	.word	0x2000202c
 800a6e4:	20002094 	.word	0x20002094
 800a6e8:	200020fc 	.word	0x200020fc

0800a6ec <global_stdio_init.part.0>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a71c <global_stdio_init.part.0+0x30>)
 800a6f0:	4c0b      	ldr	r4, [pc, #44]	@ (800a720 <global_stdio_init.part.0+0x34>)
 800a6f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a724 <global_stdio_init.part.0+0x38>)
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2104      	movs	r1, #4
 800a6fc:	f7ff ff94 	bl	800a628 <std>
 800a700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a704:	2201      	movs	r2, #1
 800a706:	2109      	movs	r1, #9
 800a708:	f7ff ff8e 	bl	800a628 <std>
 800a70c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a710:	2202      	movs	r2, #2
 800a712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a716:	2112      	movs	r1, #18
 800a718:	f7ff bf86 	b.w	800a628 <std>
 800a71c:	20002164 	.word	0x20002164
 800a720:	2000202c 	.word	0x2000202c
 800a724:	0800a695 	.word	0x0800a695

0800a728 <__sfp_lock_acquire>:
 800a728:	4801      	ldr	r0, [pc, #4]	@ (800a730 <__sfp_lock_acquire+0x8>)
 800a72a:	f000 b986 	b.w	800aa3a <__retarget_lock_acquire_recursive>
 800a72e:	bf00      	nop
 800a730:	2000216d 	.word	0x2000216d

0800a734 <__sfp_lock_release>:
 800a734:	4801      	ldr	r0, [pc, #4]	@ (800a73c <__sfp_lock_release+0x8>)
 800a736:	f000 b981 	b.w	800aa3c <__retarget_lock_release_recursive>
 800a73a:	bf00      	nop
 800a73c:	2000216d 	.word	0x2000216d

0800a740 <__sinit>:
 800a740:	b510      	push	{r4, lr}
 800a742:	4604      	mov	r4, r0
 800a744:	f7ff fff0 	bl	800a728 <__sfp_lock_acquire>
 800a748:	6a23      	ldr	r3, [r4, #32]
 800a74a:	b11b      	cbz	r3, 800a754 <__sinit+0x14>
 800a74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a750:	f7ff bff0 	b.w	800a734 <__sfp_lock_release>
 800a754:	4b04      	ldr	r3, [pc, #16]	@ (800a768 <__sinit+0x28>)
 800a756:	6223      	str	r3, [r4, #32]
 800a758:	4b04      	ldr	r3, [pc, #16]	@ (800a76c <__sinit+0x2c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1f5      	bne.n	800a74c <__sinit+0xc>
 800a760:	f7ff ffc4 	bl	800a6ec <global_stdio_init.part.0>
 800a764:	e7f2      	b.n	800a74c <__sinit+0xc>
 800a766:	bf00      	nop
 800a768:	0800a6ad 	.word	0x0800a6ad
 800a76c:	20002164 	.word	0x20002164

0800a770 <_fwalk_sglue>:
 800a770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a774:	4607      	mov	r7, r0
 800a776:	4688      	mov	r8, r1
 800a778:	4614      	mov	r4, r2
 800a77a:	2600      	movs	r6, #0
 800a77c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a780:	f1b9 0901 	subs.w	r9, r9, #1
 800a784:	d505      	bpl.n	800a792 <_fwalk_sglue+0x22>
 800a786:	6824      	ldr	r4, [r4, #0]
 800a788:	2c00      	cmp	r4, #0
 800a78a:	d1f7      	bne.n	800a77c <_fwalk_sglue+0xc>
 800a78c:	4630      	mov	r0, r6
 800a78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d907      	bls.n	800a7a8 <_fwalk_sglue+0x38>
 800a798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a79c:	3301      	adds	r3, #1
 800a79e:	d003      	beq.n	800a7a8 <_fwalk_sglue+0x38>
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	47c0      	blx	r8
 800a7a6:	4306      	orrs	r6, r0
 800a7a8:	3568      	adds	r5, #104	@ 0x68
 800a7aa:	e7e9      	b.n	800a780 <_fwalk_sglue+0x10>

0800a7ac <sniprintf>:
 800a7ac:	b40c      	push	{r2, r3}
 800a7ae:	b530      	push	{r4, r5, lr}
 800a7b0:	4b18      	ldr	r3, [pc, #96]	@ (800a814 <sniprintf+0x68>)
 800a7b2:	1e0c      	subs	r4, r1, #0
 800a7b4:	681d      	ldr	r5, [r3, #0]
 800a7b6:	b09d      	sub	sp, #116	@ 0x74
 800a7b8:	da08      	bge.n	800a7cc <sniprintf+0x20>
 800a7ba:	238b      	movs	r3, #139	@ 0x8b
 800a7bc:	602b      	str	r3, [r5, #0]
 800a7be:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c2:	b01d      	add	sp, #116	@ 0x74
 800a7c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7c8:	b002      	add	sp, #8
 800a7ca:	4770      	bx	lr
 800a7cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a7d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7d4:	f04f 0300 	mov.w	r3, #0
 800a7d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a7da:	bf14      	ite	ne
 800a7dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a7e0:	4623      	moveq	r3, r4
 800a7e2:	9304      	str	r3, [sp, #16]
 800a7e4:	9307      	str	r3, [sp, #28]
 800a7e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7ea:	9002      	str	r0, [sp, #8]
 800a7ec:	9006      	str	r0, [sp, #24]
 800a7ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a7f4:	ab21      	add	r3, sp, #132	@ 0x84
 800a7f6:	a902      	add	r1, sp, #8
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	f002 fc0a 	bl	800d014 <_svfiprintf_r>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	bfbc      	itt	lt
 800a804:	238b      	movlt	r3, #139	@ 0x8b
 800a806:	602b      	strlt	r3, [r5, #0]
 800a808:	2c00      	cmp	r4, #0
 800a80a:	d0da      	beq.n	800a7c2 <sniprintf+0x16>
 800a80c:	9b02      	ldr	r3, [sp, #8]
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	e7d6      	b.n	800a7c2 <sniprintf+0x16>
 800a814:	20000120 	.word	0x20000120

0800a818 <siprintf>:
 800a818:	b40e      	push	{r1, r2, r3}
 800a81a:	b510      	push	{r4, lr}
 800a81c:	b09d      	sub	sp, #116	@ 0x74
 800a81e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a820:	9002      	str	r0, [sp, #8]
 800a822:	9006      	str	r0, [sp, #24]
 800a824:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a828:	480a      	ldr	r0, [pc, #40]	@ (800a854 <siprintf+0x3c>)
 800a82a:	9107      	str	r1, [sp, #28]
 800a82c:	9104      	str	r1, [sp, #16]
 800a82e:	490a      	ldr	r1, [pc, #40]	@ (800a858 <siprintf+0x40>)
 800a830:	f853 2b04 	ldr.w	r2, [r3], #4
 800a834:	9105      	str	r1, [sp, #20]
 800a836:	2400      	movs	r4, #0
 800a838:	a902      	add	r1, sp, #8
 800a83a:	6800      	ldr	r0, [r0, #0]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a840:	f002 fbe8 	bl	800d014 <_svfiprintf_r>
 800a844:	9b02      	ldr	r3, [sp, #8]
 800a846:	701c      	strb	r4, [r3, #0]
 800a848:	b01d      	add	sp, #116	@ 0x74
 800a84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a84e:	b003      	add	sp, #12
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20000120 	.word	0x20000120
 800a858:	ffff0208 	.word	0xffff0208

0800a85c <siscanf>:
 800a85c:	b40e      	push	{r1, r2, r3}
 800a85e:	b570      	push	{r4, r5, r6, lr}
 800a860:	b09d      	sub	sp, #116	@ 0x74
 800a862:	ac21      	add	r4, sp, #132	@ 0x84
 800a864:	2500      	movs	r5, #0
 800a866:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a86a:	f854 6b04 	ldr.w	r6, [r4], #4
 800a86e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a872:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a874:	9002      	str	r0, [sp, #8]
 800a876:	9006      	str	r0, [sp, #24]
 800a878:	f7f5 fd02 	bl	8000280 <strlen>
 800a87c:	4b0b      	ldr	r3, [pc, #44]	@ (800a8ac <siscanf+0x50>)
 800a87e:	9003      	str	r0, [sp, #12]
 800a880:	9007      	str	r0, [sp, #28]
 800a882:	480b      	ldr	r0, [pc, #44]	@ (800a8b0 <siscanf+0x54>)
 800a884:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a88a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a88e:	4632      	mov	r2, r6
 800a890:	4623      	mov	r3, r4
 800a892:	a902      	add	r1, sp, #8
 800a894:	6800      	ldr	r0, [r0, #0]
 800a896:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a898:	9514      	str	r5, [sp, #80]	@ 0x50
 800a89a:	9401      	str	r4, [sp, #4]
 800a89c:	f002 fd10 	bl	800d2c0 <__ssvfiscanf_r>
 800a8a0:	b01d      	add	sp, #116	@ 0x74
 800a8a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8a6:	b003      	add	sp, #12
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	0800a8d7 	.word	0x0800a8d7
 800a8b0:	20000120 	.word	0x20000120

0800a8b4 <__sread>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8bc:	f000 f86e 	bl	800a99c <_read_r>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	bfab      	itete	ge
 800a8c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8c8:	181b      	addge	r3, r3, r0
 800a8ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8ce:	bfac      	ite	ge
 800a8d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8d2:	81a3      	strhlt	r3, [r4, #12]
 800a8d4:	bd10      	pop	{r4, pc}

0800a8d6 <__seofread>:
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	4770      	bx	lr

0800a8da <__swrite>:
 800a8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	461f      	mov	r7, r3
 800a8e0:	898b      	ldrh	r3, [r1, #12]
 800a8e2:	05db      	lsls	r3, r3, #23
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	d505      	bpl.n	800a8f8 <__swrite+0x1e>
 800a8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f000 f840 	bl	800a978 <_lseek_r>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	4632      	mov	r2, r6
 800a906:	463b      	mov	r3, r7
 800a908:	4628      	mov	r0, r5
 800a90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a90e:	f000 b857 	b.w	800a9c0 <_write_r>

0800a912 <__sseek>:
 800a912:	b510      	push	{r4, lr}
 800a914:	460c      	mov	r4, r1
 800a916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91a:	f000 f82d 	bl	800a978 <_lseek_r>
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	bf15      	itete	ne
 800a924:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a92a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a92e:	81a3      	strheq	r3, [r4, #12]
 800a930:	bf18      	it	ne
 800a932:	81a3      	strhne	r3, [r4, #12]
 800a934:	bd10      	pop	{r4, pc}

0800a936 <__sclose>:
 800a936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93a:	f000 b80d 	b.w	800a958 <_close_r>

0800a93e <memset>:
 800a93e:	4402      	add	r2, r0
 800a940:	4603      	mov	r3, r0
 800a942:	4293      	cmp	r3, r2
 800a944:	d100      	bne.n	800a948 <memset+0xa>
 800a946:	4770      	bx	lr
 800a948:	f803 1b01 	strb.w	r1, [r3], #1
 800a94c:	e7f9      	b.n	800a942 <memset+0x4>
	...

0800a950 <_localeconv_r>:
 800a950:	4800      	ldr	r0, [pc, #0]	@ (800a954 <_localeconv_r+0x4>)
 800a952:	4770      	bx	lr
 800a954:	20000260 	.word	0x20000260

0800a958 <_close_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d06      	ldr	r5, [pc, #24]	@ (800a974 <_close_r+0x1c>)
 800a95c:	2300      	movs	r3, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	4608      	mov	r0, r1
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	f7f7 f970 	bl	8001c48 <_close>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_close_r+0x1a>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_close_r+0x1a>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	20002168 	.word	0x20002168

0800a978 <_lseek_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d07      	ldr	r5, [pc, #28]	@ (800a998 <_lseek_r+0x20>)
 800a97c:	4604      	mov	r4, r0
 800a97e:	4608      	mov	r0, r1
 800a980:	4611      	mov	r1, r2
 800a982:	2200      	movs	r2, #0
 800a984:	602a      	str	r2, [r5, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f7f7 f985 	bl	8001c96 <_lseek>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_lseek_r+0x1e>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_lseek_r+0x1e>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	20002168 	.word	0x20002168

0800a99c <_read_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d07      	ldr	r5, [pc, #28]	@ (800a9bc <_read_r+0x20>)
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	602a      	str	r2, [r5, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	f7f7 f913 	bl	8001bd6 <_read>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_read_r+0x1e>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_read_r+0x1e>
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	20002168 	.word	0x20002168

0800a9c0 <_write_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d07      	ldr	r5, [pc, #28]	@ (800a9e0 <_write_r+0x20>)
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	602a      	str	r2, [r5, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f7f7 f91e 	bl	8001c10 <_write>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_write_r+0x1e>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_write_r+0x1e>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20002168 	.word	0x20002168

0800a9e4 <__errno>:
 800a9e4:	4b01      	ldr	r3, [pc, #4]	@ (800a9ec <__errno+0x8>)
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20000120 	.word	0x20000120

0800a9f0 <__libc_init_array>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	4d0d      	ldr	r5, [pc, #52]	@ (800aa28 <__libc_init_array+0x38>)
 800a9f4:	4c0d      	ldr	r4, [pc, #52]	@ (800aa2c <__libc_init_array+0x3c>)
 800a9f6:	1b64      	subs	r4, r4, r5
 800a9f8:	10a4      	asrs	r4, r4, #2
 800a9fa:	2600      	movs	r6, #0
 800a9fc:	42a6      	cmp	r6, r4
 800a9fe:	d109      	bne.n	800aa14 <__libc_init_array+0x24>
 800aa00:	4d0b      	ldr	r5, [pc, #44]	@ (800aa30 <__libc_init_array+0x40>)
 800aa02:	4c0c      	ldr	r4, [pc, #48]	@ (800aa34 <__libc_init_array+0x44>)
 800aa04:	f003 ff7c 	bl	800e900 <_init>
 800aa08:	1b64      	subs	r4, r4, r5
 800aa0a:	10a4      	asrs	r4, r4, #2
 800aa0c:	2600      	movs	r6, #0
 800aa0e:	42a6      	cmp	r6, r4
 800aa10:	d105      	bne.n	800aa1e <__libc_init_array+0x2e>
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa18:	4798      	blx	r3
 800aa1a:	3601      	adds	r6, #1
 800aa1c:	e7ee      	b.n	800a9fc <__libc_init_array+0xc>
 800aa1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa22:	4798      	blx	r3
 800aa24:	3601      	adds	r6, #1
 800aa26:	e7f2      	b.n	800aa0e <__libc_init_array+0x1e>
 800aa28:	0800ee0c 	.word	0x0800ee0c
 800aa2c:	0800ee0c 	.word	0x0800ee0c
 800aa30:	0800ee0c 	.word	0x0800ee0c
 800aa34:	0800ee10 	.word	0x0800ee10

0800aa38 <__retarget_lock_init_recursive>:
 800aa38:	4770      	bx	lr

0800aa3a <__retarget_lock_acquire_recursive>:
 800aa3a:	4770      	bx	lr

0800aa3c <__retarget_lock_release_recursive>:
 800aa3c:	4770      	bx	lr
	...

0800aa40 <nanf>:
 800aa40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aa48 <nanf+0x8>
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	7fc00000 	.word	0x7fc00000

0800aa4c <quorem>:
 800aa4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	6903      	ldr	r3, [r0, #16]
 800aa52:	690c      	ldr	r4, [r1, #16]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	4607      	mov	r7, r0
 800aa58:	db7e      	blt.n	800ab58 <quorem+0x10c>
 800aa5a:	3c01      	subs	r4, #1
 800aa5c:	f101 0814 	add.w	r8, r1, #20
 800aa60:	00a3      	lsls	r3, r4, #2
 800aa62:	f100 0514 	add.w	r5, r0, #20
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa76:	3301      	adds	r3, #1
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa82:	d32e      	bcc.n	800aae2 <quorem+0x96>
 800aa84:	f04f 0a00 	mov.w	sl, #0
 800aa88:	46c4      	mov	ip, r8
 800aa8a:	46ae      	mov	lr, r5
 800aa8c:	46d3      	mov	fp, sl
 800aa8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa92:	b298      	uxth	r0, r3
 800aa94:	fb06 a000 	mla	r0, r6, r0, sl
 800aa98:	0c02      	lsrs	r2, r0, #16
 800aa9a:	0c1b      	lsrs	r3, r3, #16
 800aa9c:	fb06 2303 	mla	r3, r6, r3, r2
 800aaa0:	f8de 2000 	ldr.w	r2, [lr]
 800aaa4:	b280      	uxth	r0, r0
 800aaa6:	b292      	uxth	r2, r2
 800aaa8:	1a12      	subs	r2, r2, r0
 800aaaa:	445a      	add	r2, fp
 800aaac:	f8de 0000 	ldr.w	r0, [lr]
 800aab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aaba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aabe:	b292      	uxth	r2, r2
 800aac0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aac4:	45e1      	cmp	r9, ip
 800aac6:	f84e 2b04 	str.w	r2, [lr], #4
 800aaca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aace:	d2de      	bcs.n	800aa8e <quorem+0x42>
 800aad0:	9b00      	ldr	r3, [sp, #0]
 800aad2:	58eb      	ldr	r3, [r5, r3]
 800aad4:	b92b      	cbnz	r3, 800aae2 <quorem+0x96>
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	3b04      	subs	r3, #4
 800aada:	429d      	cmp	r5, r3
 800aadc:	461a      	mov	r2, r3
 800aade:	d32f      	bcc.n	800ab40 <quorem+0xf4>
 800aae0:	613c      	str	r4, [r7, #16]
 800aae2:	4638      	mov	r0, r7
 800aae4:	f001 f9c8 	bl	800be78 <__mcmp>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	db25      	blt.n	800ab38 <quorem+0xec>
 800aaec:	4629      	mov	r1, r5
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800aaf4:	f8d1 c000 	ldr.w	ip, [r1]
 800aaf8:	fa1f fe82 	uxth.w	lr, r2
 800aafc:	fa1f f38c 	uxth.w	r3, ip
 800ab00:	eba3 030e 	sub.w	r3, r3, lr
 800ab04:	4403      	add	r3, r0
 800ab06:	0c12      	lsrs	r2, r2, #16
 800ab08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab16:	45c1      	cmp	r9, r8
 800ab18:	f841 3b04 	str.w	r3, [r1], #4
 800ab1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab20:	d2e6      	bcs.n	800aaf0 <quorem+0xa4>
 800ab22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab2a:	b922      	cbnz	r2, 800ab36 <quorem+0xea>
 800ab2c:	3b04      	subs	r3, #4
 800ab2e:	429d      	cmp	r5, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	d30b      	bcc.n	800ab4c <quorem+0x100>
 800ab34:	613c      	str	r4, [r7, #16]
 800ab36:	3601      	adds	r6, #1
 800ab38:	4630      	mov	r0, r6
 800ab3a:	b003      	add	sp, #12
 800ab3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab40:	6812      	ldr	r2, [r2, #0]
 800ab42:	3b04      	subs	r3, #4
 800ab44:	2a00      	cmp	r2, #0
 800ab46:	d1cb      	bne.n	800aae0 <quorem+0x94>
 800ab48:	3c01      	subs	r4, #1
 800ab4a:	e7c6      	b.n	800aada <quorem+0x8e>
 800ab4c:	6812      	ldr	r2, [r2, #0]
 800ab4e:	3b04      	subs	r3, #4
 800ab50:	2a00      	cmp	r2, #0
 800ab52:	d1ef      	bne.n	800ab34 <quorem+0xe8>
 800ab54:	3c01      	subs	r4, #1
 800ab56:	e7ea      	b.n	800ab2e <quorem+0xe2>
 800ab58:	2000      	movs	r0, #0
 800ab5a:	e7ee      	b.n	800ab3a <quorem+0xee>
 800ab5c:	0000      	movs	r0, r0
	...

0800ab60 <_dtoa_r>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	69c7      	ldr	r7, [r0, #28]
 800ab66:	b097      	sub	sp, #92	@ 0x5c
 800ab68:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ab6c:	ec55 4b10 	vmov	r4, r5, d0
 800ab70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ab72:	9107      	str	r1, [sp, #28]
 800ab74:	4681      	mov	r9, r0
 800ab76:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab78:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab7a:	b97f      	cbnz	r7, 800ab9c <_dtoa_r+0x3c>
 800ab7c:	2010      	movs	r0, #16
 800ab7e:	f000 fe09 	bl	800b794 <malloc>
 800ab82:	4602      	mov	r2, r0
 800ab84:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab88:	b920      	cbnz	r0, 800ab94 <_dtoa_r+0x34>
 800ab8a:	4ba9      	ldr	r3, [pc, #676]	@ (800ae30 <_dtoa_r+0x2d0>)
 800ab8c:	21ef      	movs	r1, #239	@ 0xef
 800ab8e:	48a9      	ldr	r0, [pc, #676]	@ (800ae34 <_dtoa_r+0x2d4>)
 800ab90:	f002 ffce 	bl	800db30 <__assert_func>
 800ab94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab98:	6007      	str	r7, [r0, #0]
 800ab9a:	60c7      	str	r7, [r0, #12]
 800ab9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aba0:	6819      	ldr	r1, [r3, #0]
 800aba2:	b159      	cbz	r1, 800abbc <_dtoa_r+0x5c>
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	604a      	str	r2, [r1, #4]
 800aba8:	2301      	movs	r3, #1
 800abaa:	4093      	lsls	r3, r2
 800abac:	608b      	str	r3, [r1, #8]
 800abae:	4648      	mov	r0, r9
 800abb0:	f000 fee6 	bl	800b980 <_Bfree>
 800abb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	1e2b      	subs	r3, r5, #0
 800abbe:	bfb9      	ittee	lt
 800abc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800abc4:	9305      	strlt	r3, [sp, #20]
 800abc6:	2300      	movge	r3, #0
 800abc8:	6033      	strge	r3, [r6, #0]
 800abca:	9f05      	ldr	r7, [sp, #20]
 800abcc:	4b9a      	ldr	r3, [pc, #616]	@ (800ae38 <_dtoa_r+0x2d8>)
 800abce:	bfbc      	itt	lt
 800abd0:	2201      	movlt	r2, #1
 800abd2:	6032      	strlt	r2, [r6, #0]
 800abd4:	43bb      	bics	r3, r7
 800abd6:	d112      	bne.n	800abfe <_dtoa_r+0x9e>
 800abd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800abe4:	4323      	orrs	r3, r4
 800abe6:	f000 855a 	beq.w	800b69e <_dtoa_r+0xb3e>
 800abea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ae4c <_dtoa_r+0x2ec>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 855c 	beq.w	800b6ae <_dtoa_r+0xb4e>
 800abf6:	f10a 0303 	add.w	r3, sl, #3
 800abfa:	f000 bd56 	b.w	800b6aa <_dtoa_r+0xb4a>
 800abfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac02:	2200      	movs	r2, #0
 800ac04:	ec51 0b17 	vmov	r0, r1, d7
 800ac08:	2300      	movs	r3, #0
 800ac0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ac0e:	f7f5 ff63 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac12:	4680      	mov	r8, r0
 800ac14:	b158      	cbz	r0, 800ac2e <_dtoa_r+0xce>
 800ac16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac18:	2301      	movs	r3, #1
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac1e:	b113      	cbz	r3, 800ac26 <_dtoa_r+0xc6>
 800ac20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ac22:	4b86      	ldr	r3, [pc, #536]	@ (800ae3c <_dtoa_r+0x2dc>)
 800ac24:	6013      	str	r3, [r2, #0]
 800ac26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ae50 <_dtoa_r+0x2f0>
 800ac2a:	f000 bd40 	b.w	800b6ae <_dtoa_r+0xb4e>
 800ac2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ac32:	aa14      	add	r2, sp, #80	@ 0x50
 800ac34:	a915      	add	r1, sp, #84	@ 0x54
 800ac36:	4648      	mov	r0, r9
 800ac38:	f001 fa3e 	bl	800c0b8 <__d2b>
 800ac3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ac40:	9002      	str	r0, [sp, #8]
 800ac42:	2e00      	cmp	r6, #0
 800ac44:	d078      	beq.n	800ad38 <_dtoa_r+0x1d8>
 800ac46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ac4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ac5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac60:	4619      	mov	r1, r3
 800ac62:	2200      	movs	r2, #0
 800ac64:	4b76      	ldr	r3, [pc, #472]	@ (800ae40 <_dtoa_r+0x2e0>)
 800ac66:	f7f5 fb17 	bl	8000298 <__aeabi_dsub>
 800ac6a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ae18 <_dtoa_r+0x2b8>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fcca 	bl	8000608 <__aeabi_dmul>
 800ac74:	a36a      	add	r3, pc, #424	@ (adr r3, 800ae20 <_dtoa_r+0x2c0>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fb0f 	bl	800029c <__adddf3>
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4630      	mov	r0, r6
 800ac82:	460d      	mov	r5, r1
 800ac84:	f7f5 fc56 	bl	8000534 <__aeabi_i2d>
 800ac88:	a367      	add	r3, pc, #412	@ (adr r3, 800ae28 <_dtoa_r+0x2c8>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	f7f5 fcbb 	bl	8000608 <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4620      	mov	r0, r4
 800ac98:	4629      	mov	r1, r5
 800ac9a:	f7f5 faff 	bl	800029c <__adddf3>
 800ac9e:	4604      	mov	r4, r0
 800aca0:	460d      	mov	r5, r1
 800aca2:	f7f5 ff61 	bl	8000b68 <__aeabi_d2iz>
 800aca6:	2200      	movs	r2, #0
 800aca8:	4607      	mov	r7, r0
 800acaa:	2300      	movs	r3, #0
 800acac:	4620      	mov	r0, r4
 800acae:	4629      	mov	r1, r5
 800acb0:	f7f5 ff1c 	bl	8000aec <__aeabi_dcmplt>
 800acb4:	b140      	cbz	r0, 800acc8 <_dtoa_r+0x168>
 800acb6:	4638      	mov	r0, r7
 800acb8:	f7f5 fc3c 	bl	8000534 <__aeabi_i2d>
 800acbc:	4622      	mov	r2, r4
 800acbe:	462b      	mov	r3, r5
 800acc0:	f7f5 ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800acc4:	b900      	cbnz	r0, 800acc8 <_dtoa_r+0x168>
 800acc6:	3f01      	subs	r7, #1
 800acc8:	2f16      	cmp	r7, #22
 800acca:	d852      	bhi.n	800ad72 <_dtoa_r+0x212>
 800accc:	4b5d      	ldr	r3, [pc, #372]	@ (800ae44 <_dtoa_r+0x2e4>)
 800acce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800acda:	f7f5 ff07 	bl	8000aec <__aeabi_dcmplt>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d049      	beq.n	800ad76 <_dtoa_r+0x216>
 800ace2:	3f01      	subs	r7, #1
 800ace4:	2300      	movs	r3, #0
 800ace6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ace8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800acea:	1b9b      	subs	r3, r3, r6
 800acec:	1e5a      	subs	r2, r3, #1
 800acee:	bf45      	ittet	mi
 800acf0:	f1c3 0301 	rsbmi	r3, r3, #1
 800acf4:	9300      	strmi	r3, [sp, #0]
 800acf6:	2300      	movpl	r3, #0
 800acf8:	2300      	movmi	r3, #0
 800acfa:	9206      	str	r2, [sp, #24]
 800acfc:	bf54      	ite	pl
 800acfe:	9300      	strpl	r3, [sp, #0]
 800ad00:	9306      	strmi	r3, [sp, #24]
 800ad02:	2f00      	cmp	r7, #0
 800ad04:	db39      	blt.n	800ad7a <_dtoa_r+0x21a>
 800ad06:	9b06      	ldr	r3, [sp, #24]
 800ad08:	970d      	str	r7, [sp, #52]	@ 0x34
 800ad0a:	443b      	add	r3, r7
 800ad0c:	9306      	str	r3, [sp, #24]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	9308      	str	r3, [sp, #32]
 800ad12:	9b07      	ldr	r3, [sp, #28]
 800ad14:	2b09      	cmp	r3, #9
 800ad16:	d863      	bhi.n	800ade0 <_dtoa_r+0x280>
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	bfc4      	itt	gt
 800ad1c:	3b04      	subgt	r3, #4
 800ad1e:	9307      	strgt	r3, [sp, #28]
 800ad20:	9b07      	ldr	r3, [sp, #28]
 800ad22:	f1a3 0302 	sub.w	r3, r3, #2
 800ad26:	bfcc      	ite	gt
 800ad28:	2400      	movgt	r4, #0
 800ad2a:	2401      	movle	r4, #1
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d863      	bhi.n	800adf8 <_dtoa_r+0x298>
 800ad30:	e8df f003 	tbb	[pc, r3]
 800ad34:	2b375452 	.word	0x2b375452
 800ad38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ad3c:	441e      	add	r6, r3
 800ad3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ad42:	2b20      	cmp	r3, #32
 800ad44:	bfc1      	itttt	gt
 800ad46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ad4a:	409f      	lslgt	r7, r3
 800ad4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ad50:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ad54:	bfd6      	itet	le
 800ad56:	f1c3 0320 	rsble	r3, r3, #32
 800ad5a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ad5e:	fa04 f003 	lslle.w	r0, r4, r3
 800ad62:	f7f5 fbd7 	bl	8000514 <__aeabi_ui2d>
 800ad66:	2201      	movs	r2, #1
 800ad68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad6c:	3e01      	subs	r6, #1
 800ad6e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad70:	e776      	b.n	800ac60 <_dtoa_r+0x100>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e7b7      	b.n	800ace6 <_dtoa_r+0x186>
 800ad76:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad78:	e7b6      	b.n	800ace8 <_dtoa_r+0x188>
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	1bdb      	subs	r3, r3, r7
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	427b      	negs	r3, r7
 800ad82:	9308      	str	r3, [sp, #32]
 800ad84:	2300      	movs	r3, #0
 800ad86:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad88:	e7c3      	b.n	800ad12 <_dtoa_r+0x1b2>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad90:	eb07 0b03 	add.w	fp, r7, r3
 800ad94:	f10b 0301 	add.w	r3, fp, #1
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	bfb8      	it	lt
 800ad9e:	2301      	movlt	r3, #1
 800ada0:	e006      	b.n	800adb0 <_dtoa_r+0x250>
 800ada2:	2301      	movs	r3, #1
 800ada4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ada6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dd28      	ble.n	800adfe <_dtoa_r+0x29e>
 800adac:	469b      	mov	fp, r3
 800adae:	9303      	str	r3, [sp, #12]
 800adb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800adb4:	2100      	movs	r1, #0
 800adb6:	2204      	movs	r2, #4
 800adb8:	f102 0514 	add.w	r5, r2, #20
 800adbc:	429d      	cmp	r5, r3
 800adbe:	d926      	bls.n	800ae0e <_dtoa_r+0x2ae>
 800adc0:	6041      	str	r1, [r0, #4]
 800adc2:	4648      	mov	r0, r9
 800adc4:	f000 fd9c 	bl	800b900 <_Balloc>
 800adc8:	4682      	mov	sl, r0
 800adca:	2800      	cmp	r0, #0
 800adcc:	d142      	bne.n	800ae54 <_dtoa_r+0x2f4>
 800adce:	4b1e      	ldr	r3, [pc, #120]	@ (800ae48 <_dtoa_r+0x2e8>)
 800add0:	4602      	mov	r2, r0
 800add2:	f240 11af 	movw	r1, #431	@ 0x1af
 800add6:	e6da      	b.n	800ab8e <_dtoa_r+0x2e>
 800add8:	2300      	movs	r3, #0
 800adda:	e7e3      	b.n	800ada4 <_dtoa_r+0x244>
 800addc:	2300      	movs	r3, #0
 800adde:	e7d5      	b.n	800ad8c <_dtoa_r+0x22c>
 800ade0:	2401      	movs	r4, #1
 800ade2:	2300      	movs	r3, #0
 800ade4:	9307      	str	r3, [sp, #28]
 800ade6:	9409      	str	r4, [sp, #36]	@ 0x24
 800ade8:	f04f 3bff 	mov.w	fp, #4294967295
 800adec:	2200      	movs	r2, #0
 800adee:	f8cd b00c 	str.w	fp, [sp, #12]
 800adf2:	2312      	movs	r3, #18
 800adf4:	920c      	str	r2, [sp, #48]	@ 0x30
 800adf6:	e7db      	b.n	800adb0 <_dtoa_r+0x250>
 800adf8:	2301      	movs	r3, #1
 800adfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800adfc:	e7f4      	b.n	800ade8 <_dtoa_r+0x288>
 800adfe:	f04f 0b01 	mov.w	fp, #1
 800ae02:	f8cd b00c 	str.w	fp, [sp, #12]
 800ae06:	465b      	mov	r3, fp
 800ae08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ae0c:	e7d0      	b.n	800adb0 <_dtoa_r+0x250>
 800ae0e:	3101      	adds	r1, #1
 800ae10:	0052      	lsls	r2, r2, #1
 800ae12:	e7d1      	b.n	800adb8 <_dtoa_r+0x258>
 800ae14:	f3af 8000 	nop.w
 800ae18:	636f4361 	.word	0x636f4361
 800ae1c:	3fd287a7 	.word	0x3fd287a7
 800ae20:	8b60c8b3 	.word	0x8b60c8b3
 800ae24:	3fc68a28 	.word	0x3fc68a28
 800ae28:	509f79fb 	.word	0x509f79fb
 800ae2c:	3fd34413 	.word	0x3fd34413
 800ae30:	0800ea08 	.word	0x0800ea08
 800ae34:	0800ea1f 	.word	0x0800ea1f
 800ae38:	7ff00000 	.word	0x7ff00000
 800ae3c:	0800eb0b 	.word	0x0800eb0b
 800ae40:	3ff80000 	.word	0x3ff80000
 800ae44:	0800ebe8 	.word	0x0800ebe8
 800ae48:	0800ea77 	.word	0x0800ea77
 800ae4c:	0800ea04 	.word	0x0800ea04
 800ae50:	0800eb0a 	.word	0x0800eb0a
 800ae54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae58:	6018      	str	r0, [r3, #0]
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	2b0e      	cmp	r3, #14
 800ae5e:	f200 80a1 	bhi.w	800afa4 <_dtoa_r+0x444>
 800ae62:	2c00      	cmp	r4, #0
 800ae64:	f000 809e 	beq.w	800afa4 <_dtoa_r+0x444>
 800ae68:	2f00      	cmp	r7, #0
 800ae6a:	dd33      	ble.n	800aed4 <_dtoa_r+0x374>
 800ae6c:	4b9c      	ldr	r3, [pc, #624]	@ (800b0e0 <_dtoa_r+0x580>)
 800ae6e:	f007 020f 	and.w	r2, r7, #15
 800ae72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae76:	ed93 7b00 	vldr	d7, [r3]
 800ae7a:	05f8      	lsls	r0, r7, #23
 800ae7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae84:	d516      	bpl.n	800aeb4 <_dtoa_r+0x354>
 800ae86:	4b97      	ldr	r3, [pc, #604]	@ (800b0e4 <_dtoa_r+0x584>)
 800ae88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae90:	f7f5 fce4 	bl	800085c <__aeabi_ddiv>
 800ae94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae98:	f004 040f 	and.w	r4, r4, #15
 800ae9c:	2603      	movs	r6, #3
 800ae9e:	4d91      	ldr	r5, [pc, #580]	@ (800b0e4 <_dtoa_r+0x584>)
 800aea0:	b954      	cbnz	r4, 800aeb8 <_dtoa_r+0x358>
 800aea2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeaa:	f7f5 fcd7 	bl	800085c <__aeabi_ddiv>
 800aeae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeb2:	e028      	b.n	800af06 <_dtoa_r+0x3a6>
 800aeb4:	2602      	movs	r6, #2
 800aeb6:	e7f2      	b.n	800ae9e <_dtoa_r+0x33e>
 800aeb8:	07e1      	lsls	r1, r4, #31
 800aeba:	d508      	bpl.n	800aece <_dtoa_r+0x36e>
 800aebc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aec4:	f7f5 fba0 	bl	8000608 <__aeabi_dmul>
 800aec8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aecc:	3601      	adds	r6, #1
 800aece:	1064      	asrs	r4, r4, #1
 800aed0:	3508      	adds	r5, #8
 800aed2:	e7e5      	b.n	800aea0 <_dtoa_r+0x340>
 800aed4:	f000 80af 	beq.w	800b036 <_dtoa_r+0x4d6>
 800aed8:	427c      	negs	r4, r7
 800aeda:	4b81      	ldr	r3, [pc, #516]	@ (800b0e0 <_dtoa_r+0x580>)
 800aedc:	4d81      	ldr	r5, [pc, #516]	@ (800b0e4 <_dtoa_r+0x584>)
 800aede:	f004 020f 	and.w	r2, r4, #15
 800aee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aeee:	f7f5 fb8b 	bl	8000608 <__aeabi_dmul>
 800aef2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aef6:	1124      	asrs	r4, r4, #4
 800aef8:	2300      	movs	r3, #0
 800aefa:	2602      	movs	r6, #2
 800aefc:	2c00      	cmp	r4, #0
 800aefe:	f040 808f 	bne.w	800b020 <_dtoa_r+0x4c0>
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1d3      	bne.n	800aeae <_dtoa_r+0x34e>
 800af06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 8094 	beq.w	800b03a <_dtoa_r+0x4da>
 800af12:	4b75      	ldr	r3, [pc, #468]	@ (800b0e8 <_dtoa_r+0x588>)
 800af14:	2200      	movs	r2, #0
 800af16:	4620      	mov	r0, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	f7f5 fde7 	bl	8000aec <__aeabi_dcmplt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f000 808b 	beq.w	800b03a <_dtoa_r+0x4da>
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f000 8087 	beq.w	800b03a <_dtoa_r+0x4da>
 800af2c:	f1bb 0f00 	cmp.w	fp, #0
 800af30:	dd34      	ble.n	800af9c <_dtoa_r+0x43c>
 800af32:	4620      	mov	r0, r4
 800af34:	4b6d      	ldr	r3, [pc, #436]	@ (800b0ec <_dtoa_r+0x58c>)
 800af36:	2200      	movs	r2, #0
 800af38:	4629      	mov	r1, r5
 800af3a:	f7f5 fb65 	bl	8000608 <__aeabi_dmul>
 800af3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af42:	f107 38ff 	add.w	r8, r7, #4294967295
 800af46:	3601      	adds	r6, #1
 800af48:	465c      	mov	r4, fp
 800af4a:	4630      	mov	r0, r6
 800af4c:	f7f5 faf2 	bl	8000534 <__aeabi_i2d>
 800af50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af54:	f7f5 fb58 	bl	8000608 <__aeabi_dmul>
 800af58:	4b65      	ldr	r3, [pc, #404]	@ (800b0f0 <_dtoa_r+0x590>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	f7f5 f99e 	bl	800029c <__adddf3>
 800af60:	4605      	mov	r5, r0
 800af62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af66:	2c00      	cmp	r4, #0
 800af68:	d16a      	bne.n	800b040 <_dtoa_r+0x4e0>
 800af6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af6e:	4b61      	ldr	r3, [pc, #388]	@ (800b0f4 <_dtoa_r+0x594>)
 800af70:	2200      	movs	r2, #0
 800af72:	f7f5 f991 	bl	8000298 <__aeabi_dsub>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af7e:	462a      	mov	r2, r5
 800af80:	4633      	mov	r3, r6
 800af82:	f7f5 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 800af86:	2800      	cmp	r0, #0
 800af88:	f040 8298 	bne.w	800b4bc <_dtoa_r+0x95c>
 800af8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af90:	462a      	mov	r2, r5
 800af92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af96:	f7f5 fda9 	bl	8000aec <__aeabi_dcmplt>
 800af9a:	bb38      	cbnz	r0, 800afec <_dtoa_r+0x48c>
 800af9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800afa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800afa4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f2c0 8157 	blt.w	800b25a <_dtoa_r+0x6fa>
 800afac:	2f0e      	cmp	r7, #14
 800afae:	f300 8154 	bgt.w	800b25a <_dtoa_r+0x6fa>
 800afb2:	4b4b      	ldr	r3, [pc, #300]	@ (800b0e0 <_dtoa_r+0x580>)
 800afb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afb8:	ed93 7b00 	vldr	d7, [r3]
 800afbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	ed8d 7b00 	vstr	d7, [sp]
 800afc4:	f280 80e5 	bge.w	800b192 <_dtoa_r+0x632>
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f300 80e1 	bgt.w	800b192 <_dtoa_r+0x632>
 800afd0:	d10c      	bne.n	800afec <_dtoa_r+0x48c>
 800afd2:	4b48      	ldr	r3, [pc, #288]	@ (800b0f4 <_dtoa_r+0x594>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	ec51 0b17 	vmov	r0, r1, d7
 800afda:	f7f5 fb15 	bl	8000608 <__aeabi_dmul>
 800afde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe2:	f7f5 fd97 	bl	8000b14 <__aeabi_dcmpge>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f000 8266 	beq.w	800b4b8 <_dtoa_r+0x958>
 800afec:	2400      	movs	r4, #0
 800afee:	4625      	mov	r5, r4
 800aff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aff2:	4656      	mov	r6, sl
 800aff4:	ea6f 0803 	mvn.w	r8, r3
 800aff8:	2700      	movs	r7, #0
 800affa:	4621      	mov	r1, r4
 800affc:	4648      	mov	r0, r9
 800affe:	f000 fcbf 	bl	800b980 <_Bfree>
 800b002:	2d00      	cmp	r5, #0
 800b004:	f000 80bd 	beq.w	800b182 <_dtoa_r+0x622>
 800b008:	b12f      	cbz	r7, 800b016 <_dtoa_r+0x4b6>
 800b00a:	42af      	cmp	r7, r5
 800b00c:	d003      	beq.n	800b016 <_dtoa_r+0x4b6>
 800b00e:	4639      	mov	r1, r7
 800b010:	4648      	mov	r0, r9
 800b012:	f000 fcb5 	bl	800b980 <_Bfree>
 800b016:	4629      	mov	r1, r5
 800b018:	4648      	mov	r0, r9
 800b01a:	f000 fcb1 	bl	800b980 <_Bfree>
 800b01e:	e0b0      	b.n	800b182 <_dtoa_r+0x622>
 800b020:	07e2      	lsls	r2, r4, #31
 800b022:	d505      	bpl.n	800b030 <_dtoa_r+0x4d0>
 800b024:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b028:	f7f5 faee 	bl	8000608 <__aeabi_dmul>
 800b02c:	3601      	adds	r6, #1
 800b02e:	2301      	movs	r3, #1
 800b030:	1064      	asrs	r4, r4, #1
 800b032:	3508      	adds	r5, #8
 800b034:	e762      	b.n	800aefc <_dtoa_r+0x39c>
 800b036:	2602      	movs	r6, #2
 800b038:	e765      	b.n	800af06 <_dtoa_r+0x3a6>
 800b03a:	9c03      	ldr	r4, [sp, #12]
 800b03c:	46b8      	mov	r8, r7
 800b03e:	e784      	b.n	800af4a <_dtoa_r+0x3ea>
 800b040:	4b27      	ldr	r3, [pc, #156]	@ (800b0e0 <_dtoa_r+0x580>)
 800b042:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b044:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b048:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b04c:	4454      	add	r4, sl
 800b04e:	2900      	cmp	r1, #0
 800b050:	d054      	beq.n	800b0fc <_dtoa_r+0x59c>
 800b052:	4929      	ldr	r1, [pc, #164]	@ (800b0f8 <_dtoa_r+0x598>)
 800b054:	2000      	movs	r0, #0
 800b056:	f7f5 fc01 	bl	800085c <__aeabi_ddiv>
 800b05a:	4633      	mov	r3, r6
 800b05c:	462a      	mov	r2, r5
 800b05e:	f7f5 f91b 	bl	8000298 <__aeabi_dsub>
 800b062:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b066:	4656      	mov	r6, sl
 800b068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b06c:	f7f5 fd7c 	bl	8000b68 <__aeabi_d2iz>
 800b070:	4605      	mov	r5, r0
 800b072:	f7f5 fa5f 	bl	8000534 <__aeabi_i2d>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b07e:	f7f5 f90b 	bl	8000298 <__aeabi_dsub>
 800b082:	3530      	adds	r5, #48	@ 0x30
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b08c:	f806 5b01 	strb.w	r5, [r6], #1
 800b090:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b094:	f7f5 fd2a 	bl	8000aec <__aeabi_dcmplt>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d172      	bne.n	800b182 <_dtoa_r+0x622>
 800b09c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0a0:	4911      	ldr	r1, [pc, #68]	@ (800b0e8 <_dtoa_r+0x588>)
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	f7f5 f8f8 	bl	8000298 <__aeabi_dsub>
 800b0a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0ac:	f7f5 fd1e 	bl	8000aec <__aeabi_dcmplt>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f040 80b4 	bne.w	800b21e <_dtoa_r+0x6be>
 800b0b6:	42a6      	cmp	r6, r4
 800b0b8:	f43f af70 	beq.w	800af9c <_dtoa_r+0x43c>
 800b0bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0ec <_dtoa_r+0x58c>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f7f5 faa0 	bl	8000608 <__aeabi_dmul>
 800b0c8:	4b08      	ldr	r3, [pc, #32]	@ (800b0ec <_dtoa_r+0x58c>)
 800b0ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d4:	f7f5 fa98 	bl	8000608 <__aeabi_dmul>
 800b0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0dc:	e7c4      	b.n	800b068 <_dtoa_r+0x508>
 800b0de:	bf00      	nop
 800b0e0:	0800ebe8 	.word	0x0800ebe8
 800b0e4:	0800ebc0 	.word	0x0800ebc0
 800b0e8:	3ff00000 	.word	0x3ff00000
 800b0ec:	40240000 	.word	0x40240000
 800b0f0:	401c0000 	.word	0x401c0000
 800b0f4:	40140000 	.word	0x40140000
 800b0f8:	3fe00000 	.word	0x3fe00000
 800b0fc:	4631      	mov	r1, r6
 800b0fe:	4628      	mov	r0, r5
 800b100:	f7f5 fa82 	bl	8000608 <__aeabi_dmul>
 800b104:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b108:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b10a:	4656      	mov	r6, sl
 800b10c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b110:	f7f5 fd2a 	bl	8000b68 <__aeabi_d2iz>
 800b114:	4605      	mov	r5, r0
 800b116:	f7f5 fa0d 	bl	8000534 <__aeabi_i2d>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b122:	f7f5 f8b9 	bl	8000298 <__aeabi_dsub>
 800b126:	3530      	adds	r5, #48	@ 0x30
 800b128:	f806 5b01 	strb.w	r5, [r6], #1
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	42a6      	cmp	r6, r4
 800b132:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	d124      	bne.n	800b186 <_dtoa_r+0x626>
 800b13c:	4baf      	ldr	r3, [pc, #700]	@ (800b3fc <_dtoa_r+0x89c>)
 800b13e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b142:	f7f5 f8ab 	bl	800029c <__adddf3>
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b14e:	f7f5 fceb 	bl	8000b28 <__aeabi_dcmpgt>
 800b152:	2800      	cmp	r0, #0
 800b154:	d163      	bne.n	800b21e <_dtoa_r+0x6be>
 800b156:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b15a:	49a8      	ldr	r1, [pc, #672]	@ (800b3fc <_dtoa_r+0x89c>)
 800b15c:	2000      	movs	r0, #0
 800b15e:	f7f5 f89b 	bl	8000298 <__aeabi_dsub>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b16a:	f7f5 fcbf 	bl	8000aec <__aeabi_dcmplt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f43f af14 	beq.w	800af9c <_dtoa_r+0x43c>
 800b174:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b176:	1e73      	subs	r3, r6, #1
 800b178:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b17a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b17e:	2b30      	cmp	r3, #48	@ 0x30
 800b180:	d0f8      	beq.n	800b174 <_dtoa_r+0x614>
 800b182:	4647      	mov	r7, r8
 800b184:	e03b      	b.n	800b1fe <_dtoa_r+0x69e>
 800b186:	4b9e      	ldr	r3, [pc, #632]	@ (800b400 <_dtoa_r+0x8a0>)
 800b188:	f7f5 fa3e 	bl	8000608 <__aeabi_dmul>
 800b18c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b190:	e7bc      	b.n	800b10c <_dtoa_r+0x5ac>
 800b192:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b196:	4656      	mov	r6, sl
 800b198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19c:	4620      	mov	r0, r4
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7f5 fb5c 	bl	800085c <__aeabi_ddiv>
 800b1a4:	f7f5 fce0 	bl	8000b68 <__aeabi_d2iz>
 800b1a8:	4680      	mov	r8, r0
 800b1aa:	f7f5 f9c3 	bl	8000534 <__aeabi_i2d>
 800b1ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1b2:	f7f5 fa29 	bl	8000608 <__aeabi_dmul>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	4629      	mov	r1, r5
 800b1be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b1c2:	f7f5 f869 	bl	8000298 <__aeabi_dsub>
 800b1c6:	f806 4b01 	strb.w	r4, [r6], #1
 800b1ca:	9d03      	ldr	r5, [sp, #12]
 800b1cc:	eba6 040a 	sub.w	r4, r6, sl
 800b1d0:	42a5      	cmp	r5, r4
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	d133      	bne.n	800b240 <_dtoa_r+0x6e0>
 800b1d8:	f7f5 f860 	bl	800029c <__adddf3>
 800b1dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	f7f5 fca0 	bl	8000b28 <__aeabi_dcmpgt>
 800b1e8:	b9c0      	cbnz	r0, 800b21c <_dtoa_r+0x6bc>
 800b1ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 fc71 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f6:	b110      	cbz	r0, 800b1fe <_dtoa_r+0x69e>
 800b1f8:	f018 0f01 	tst.w	r8, #1
 800b1fc:	d10e      	bne.n	800b21c <_dtoa_r+0x6bc>
 800b1fe:	9902      	ldr	r1, [sp, #8]
 800b200:	4648      	mov	r0, r9
 800b202:	f000 fbbd 	bl	800b980 <_Bfree>
 800b206:	2300      	movs	r3, #0
 800b208:	7033      	strb	r3, [r6, #0]
 800b20a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b20c:	3701      	adds	r7, #1
 800b20e:	601f      	str	r7, [r3, #0]
 800b210:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 824b 	beq.w	800b6ae <_dtoa_r+0xb4e>
 800b218:	601e      	str	r6, [r3, #0]
 800b21a:	e248      	b.n	800b6ae <_dtoa_r+0xb4e>
 800b21c:	46b8      	mov	r8, r7
 800b21e:	4633      	mov	r3, r6
 800b220:	461e      	mov	r6, r3
 800b222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b226:	2a39      	cmp	r2, #57	@ 0x39
 800b228:	d106      	bne.n	800b238 <_dtoa_r+0x6d8>
 800b22a:	459a      	cmp	sl, r3
 800b22c:	d1f8      	bne.n	800b220 <_dtoa_r+0x6c0>
 800b22e:	2230      	movs	r2, #48	@ 0x30
 800b230:	f108 0801 	add.w	r8, r8, #1
 800b234:	f88a 2000 	strb.w	r2, [sl]
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	3201      	adds	r2, #1
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	e7a0      	b.n	800b182 <_dtoa_r+0x622>
 800b240:	4b6f      	ldr	r3, [pc, #444]	@ (800b400 <_dtoa_r+0x8a0>)
 800b242:	2200      	movs	r2, #0
 800b244:	f7f5 f9e0 	bl	8000608 <__aeabi_dmul>
 800b248:	2200      	movs	r2, #0
 800b24a:	2300      	movs	r3, #0
 800b24c:	4604      	mov	r4, r0
 800b24e:	460d      	mov	r5, r1
 800b250:	f7f5 fc42 	bl	8000ad8 <__aeabi_dcmpeq>
 800b254:	2800      	cmp	r0, #0
 800b256:	d09f      	beq.n	800b198 <_dtoa_r+0x638>
 800b258:	e7d1      	b.n	800b1fe <_dtoa_r+0x69e>
 800b25a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	f000 80ea 	beq.w	800b436 <_dtoa_r+0x8d6>
 800b262:	9a07      	ldr	r2, [sp, #28]
 800b264:	2a01      	cmp	r2, #1
 800b266:	f300 80cd 	bgt.w	800b404 <_dtoa_r+0x8a4>
 800b26a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	f000 80c1 	beq.w	800b3f4 <_dtoa_r+0x894>
 800b272:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b276:	9c08      	ldr	r4, [sp, #32]
 800b278:	9e00      	ldr	r6, [sp, #0]
 800b27a:	9a00      	ldr	r2, [sp, #0]
 800b27c:	441a      	add	r2, r3
 800b27e:	9200      	str	r2, [sp, #0]
 800b280:	9a06      	ldr	r2, [sp, #24]
 800b282:	2101      	movs	r1, #1
 800b284:	441a      	add	r2, r3
 800b286:	4648      	mov	r0, r9
 800b288:	9206      	str	r2, [sp, #24]
 800b28a:	f000 fc77 	bl	800bb7c <__i2b>
 800b28e:	4605      	mov	r5, r0
 800b290:	b166      	cbz	r6, 800b2ac <_dtoa_r+0x74c>
 800b292:	9b06      	ldr	r3, [sp, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	dd09      	ble.n	800b2ac <_dtoa_r+0x74c>
 800b298:	42b3      	cmp	r3, r6
 800b29a:	9a00      	ldr	r2, [sp, #0]
 800b29c:	bfa8      	it	ge
 800b29e:	4633      	movge	r3, r6
 800b2a0:	1ad2      	subs	r2, r2, r3
 800b2a2:	9200      	str	r2, [sp, #0]
 800b2a4:	9a06      	ldr	r2, [sp, #24]
 800b2a6:	1af6      	subs	r6, r6, r3
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	9306      	str	r3, [sp, #24]
 800b2ac:	9b08      	ldr	r3, [sp, #32]
 800b2ae:	b30b      	cbz	r3, 800b2f4 <_dtoa_r+0x794>
 800b2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f000 80c6 	beq.w	800b444 <_dtoa_r+0x8e4>
 800b2b8:	2c00      	cmp	r4, #0
 800b2ba:	f000 80c0 	beq.w	800b43e <_dtoa_r+0x8de>
 800b2be:	4629      	mov	r1, r5
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	4648      	mov	r0, r9
 800b2c4:	f000 fd12 	bl	800bcec <__pow5mult>
 800b2c8:	9a02      	ldr	r2, [sp, #8]
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	4648      	mov	r0, r9
 800b2d0:	f000 fc6a 	bl	800bba8 <__multiply>
 800b2d4:	9902      	ldr	r1, [sp, #8]
 800b2d6:	4680      	mov	r8, r0
 800b2d8:	4648      	mov	r0, r9
 800b2da:	f000 fb51 	bl	800b980 <_Bfree>
 800b2de:	9b08      	ldr	r3, [sp, #32]
 800b2e0:	1b1b      	subs	r3, r3, r4
 800b2e2:	9308      	str	r3, [sp, #32]
 800b2e4:	f000 80b1 	beq.w	800b44a <_dtoa_r+0x8ea>
 800b2e8:	9a08      	ldr	r2, [sp, #32]
 800b2ea:	4641      	mov	r1, r8
 800b2ec:	4648      	mov	r0, r9
 800b2ee:	f000 fcfd 	bl	800bcec <__pow5mult>
 800b2f2:	9002      	str	r0, [sp, #8]
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	4648      	mov	r0, r9
 800b2f8:	f000 fc40 	bl	800bb7c <__i2b>
 800b2fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2fe:	4604      	mov	r4, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 81d8 	beq.w	800b6b6 <_dtoa_r+0xb56>
 800b306:	461a      	mov	r2, r3
 800b308:	4601      	mov	r1, r0
 800b30a:	4648      	mov	r0, r9
 800b30c:	f000 fcee 	bl	800bcec <__pow5mult>
 800b310:	9b07      	ldr	r3, [sp, #28]
 800b312:	2b01      	cmp	r3, #1
 800b314:	4604      	mov	r4, r0
 800b316:	f300 809f 	bgt.w	800b458 <_dtoa_r+0x8f8>
 800b31a:	9b04      	ldr	r3, [sp, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 8097 	bne.w	800b450 <_dtoa_r+0x8f0>
 800b322:	9b05      	ldr	r3, [sp, #20]
 800b324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f040 8093 	bne.w	800b454 <_dtoa_r+0x8f4>
 800b32e:	9b05      	ldr	r3, [sp, #20]
 800b330:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b334:	0d1b      	lsrs	r3, r3, #20
 800b336:	051b      	lsls	r3, r3, #20
 800b338:	b133      	cbz	r3, 800b348 <_dtoa_r+0x7e8>
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	3301      	adds	r3, #1
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	9b06      	ldr	r3, [sp, #24]
 800b342:	3301      	adds	r3, #1
 800b344:	9306      	str	r3, [sp, #24]
 800b346:	2301      	movs	r3, #1
 800b348:	9308      	str	r3, [sp, #32]
 800b34a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 81b8 	beq.w	800b6c2 <_dtoa_r+0xb62>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b358:	6918      	ldr	r0, [r3, #16]
 800b35a:	f000 fbc3 	bl	800bae4 <__hi0bits>
 800b35e:	f1c0 0020 	rsb	r0, r0, #32
 800b362:	9b06      	ldr	r3, [sp, #24]
 800b364:	4418      	add	r0, r3
 800b366:	f010 001f 	ands.w	r0, r0, #31
 800b36a:	f000 8082 	beq.w	800b472 <_dtoa_r+0x912>
 800b36e:	f1c0 0320 	rsb	r3, r0, #32
 800b372:	2b04      	cmp	r3, #4
 800b374:	dd73      	ble.n	800b45e <_dtoa_r+0x8fe>
 800b376:	9b00      	ldr	r3, [sp, #0]
 800b378:	f1c0 001c 	rsb	r0, r0, #28
 800b37c:	4403      	add	r3, r0
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	9b06      	ldr	r3, [sp, #24]
 800b382:	4403      	add	r3, r0
 800b384:	4406      	add	r6, r0
 800b386:	9306      	str	r3, [sp, #24]
 800b388:	9b00      	ldr	r3, [sp, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dd05      	ble.n	800b39a <_dtoa_r+0x83a>
 800b38e:	9902      	ldr	r1, [sp, #8]
 800b390:	461a      	mov	r2, r3
 800b392:	4648      	mov	r0, r9
 800b394:	f000 fd04 	bl	800bda0 <__lshift>
 800b398:	9002      	str	r0, [sp, #8]
 800b39a:	9b06      	ldr	r3, [sp, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dd05      	ble.n	800b3ac <_dtoa_r+0x84c>
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	4648      	mov	r0, r9
 800b3a6:	f000 fcfb 	bl	800bda0 <__lshift>
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d061      	beq.n	800b476 <_dtoa_r+0x916>
 800b3b2:	9802      	ldr	r0, [sp, #8]
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	f000 fd5f 	bl	800be78 <__mcmp>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	da5b      	bge.n	800b476 <_dtoa_r+0x916>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	9902      	ldr	r1, [sp, #8]
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	4648      	mov	r0, r9
 800b3c6:	f000 fafd 	bl	800b9c4 <__multadd>
 800b3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3cc:	9002      	str	r0, [sp, #8]
 800b3ce:	f107 38ff 	add.w	r8, r7, #4294967295
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 8177 	beq.w	800b6c6 <_dtoa_r+0xb66>
 800b3d8:	4629      	mov	r1, r5
 800b3da:	2300      	movs	r3, #0
 800b3dc:	220a      	movs	r2, #10
 800b3de:	4648      	mov	r0, r9
 800b3e0:	f000 faf0 	bl	800b9c4 <__multadd>
 800b3e4:	f1bb 0f00 	cmp.w	fp, #0
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	dc6f      	bgt.n	800b4cc <_dtoa_r+0x96c>
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	dc49      	bgt.n	800b486 <_dtoa_r+0x926>
 800b3f2:	e06b      	b.n	800b4cc <_dtoa_r+0x96c>
 800b3f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b3fa:	e73c      	b.n	800b276 <_dtoa_r+0x716>
 800b3fc:	3fe00000 	.word	0x3fe00000
 800b400:	40240000 	.word	0x40240000
 800b404:	9b03      	ldr	r3, [sp, #12]
 800b406:	1e5c      	subs	r4, r3, #1
 800b408:	9b08      	ldr	r3, [sp, #32]
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	db09      	blt.n	800b422 <_dtoa_r+0x8c2>
 800b40e:	1b1c      	subs	r4, r3, r4
 800b410:	9b03      	ldr	r3, [sp, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	f6bf af30 	bge.w	800b278 <_dtoa_r+0x718>
 800b418:	9b00      	ldr	r3, [sp, #0]
 800b41a:	9a03      	ldr	r2, [sp, #12]
 800b41c:	1a9e      	subs	r6, r3, r2
 800b41e:	2300      	movs	r3, #0
 800b420:	e72b      	b.n	800b27a <_dtoa_r+0x71a>
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b426:	9408      	str	r4, [sp, #32]
 800b428:	1ae3      	subs	r3, r4, r3
 800b42a:	441a      	add	r2, r3
 800b42c:	9e00      	ldr	r6, [sp, #0]
 800b42e:	9b03      	ldr	r3, [sp, #12]
 800b430:	920d      	str	r2, [sp, #52]	@ 0x34
 800b432:	2400      	movs	r4, #0
 800b434:	e721      	b.n	800b27a <_dtoa_r+0x71a>
 800b436:	9c08      	ldr	r4, [sp, #32]
 800b438:	9e00      	ldr	r6, [sp, #0]
 800b43a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b43c:	e728      	b.n	800b290 <_dtoa_r+0x730>
 800b43e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b442:	e751      	b.n	800b2e8 <_dtoa_r+0x788>
 800b444:	9a08      	ldr	r2, [sp, #32]
 800b446:	9902      	ldr	r1, [sp, #8]
 800b448:	e750      	b.n	800b2ec <_dtoa_r+0x78c>
 800b44a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b44e:	e751      	b.n	800b2f4 <_dtoa_r+0x794>
 800b450:	2300      	movs	r3, #0
 800b452:	e779      	b.n	800b348 <_dtoa_r+0x7e8>
 800b454:	9b04      	ldr	r3, [sp, #16]
 800b456:	e777      	b.n	800b348 <_dtoa_r+0x7e8>
 800b458:	2300      	movs	r3, #0
 800b45a:	9308      	str	r3, [sp, #32]
 800b45c:	e779      	b.n	800b352 <_dtoa_r+0x7f2>
 800b45e:	d093      	beq.n	800b388 <_dtoa_r+0x828>
 800b460:	9a00      	ldr	r2, [sp, #0]
 800b462:	331c      	adds	r3, #28
 800b464:	441a      	add	r2, r3
 800b466:	9200      	str	r2, [sp, #0]
 800b468:	9a06      	ldr	r2, [sp, #24]
 800b46a:	441a      	add	r2, r3
 800b46c:	441e      	add	r6, r3
 800b46e:	9206      	str	r2, [sp, #24]
 800b470:	e78a      	b.n	800b388 <_dtoa_r+0x828>
 800b472:	4603      	mov	r3, r0
 800b474:	e7f4      	b.n	800b460 <_dtoa_r+0x900>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	46b8      	mov	r8, r7
 800b47c:	dc20      	bgt.n	800b4c0 <_dtoa_r+0x960>
 800b47e:	469b      	mov	fp, r3
 800b480:	9b07      	ldr	r3, [sp, #28]
 800b482:	2b02      	cmp	r3, #2
 800b484:	dd1e      	ble.n	800b4c4 <_dtoa_r+0x964>
 800b486:	f1bb 0f00 	cmp.w	fp, #0
 800b48a:	f47f adb1 	bne.w	800aff0 <_dtoa_r+0x490>
 800b48e:	4621      	mov	r1, r4
 800b490:	465b      	mov	r3, fp
 800b492:	2205      	movs	r2, #5
 800b494:	4648      	mov	r0, r9
 800b496:	f000 fa95 	bl	800b9c4 <__multadd>
 800b49a:	4601      	mov	r1, r0
 800b49c:	4604      	mov	r4, r0
 800b49e:	9802      	ldr	r0, [sp, #8]
 800b4a0:	f000 fcea 	bl	800be78 <__mcmp>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f77f ada3 	ble.w	800aff0 <_dtoa_r+0x490>
 800b4aa:	4656      	mov	r6, sl
 800b4ac:	2331      	movs	r3, #49	@ 0x31
 800b4ae:	f806 3b01 	strb.w	r3, [r6], #1
 800b4b2:	f108 0801 	add.w	r8, r8, #1
 800b4b6:	e59f      	b.n	800aff8 <_dtoa_r+0x498>
 800b4b8:	9c03      	ldr	r4, [sp, #12]
 800b4ba:	46b8      	mov	r8, r7
 800b4bc:	4625      	mov	r5, r4
 800b4be:	e7f4      	b.n	800b4aa <_dtoa_r+0x94a>
 800b4c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f000 8101 	beq.w	800b6ce <_dtoa_r+0xb6e>
 800b4cc:	2e00      	cmp	r6, #0
 800b4ce:	dd05      	ble.n	800b4dc <_dtoa_r+0x97c>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4632      	mov	r2, r6
 800b4d4:	4648      	mov	r0, r9
 800b4d6:	f000 fc63 	bl	800bda0 <__lshift>
 800b4da:	4605      	mov	r5, r0
 800b4dc:	9b08      	ldr	r3, [sp, #32]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d05c      	beq.n	800b59c <_dtoa_r+0xa3c>
 800b4e2:	6869      	ldr	r1, [r5, #4]
 800b4e4:	4648      	mov	r0, r9
 800b4e6:	f000 fa0b 	bl	800b900 <_Balloc>
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	b928      	cbnz	r0, 800b4fa <_dtoa_r+0x99a>
 800b4ee:	4b82      	ldr	r3, [pc, #520]	@ (800b6f8 <_dtoa_r+0xb98>)
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b4f6:	f7ff bb4a 	b.w	800ab8e <_dtoa_r+0x2e>
 800b4fa:	692a      	ldr	r2, [r5, #16]
 800b4fc:	3202      	adds	r2, #2
 800b4fe:	0092      	lsls	r2, r2, #2
 800b500:	f105 010c 	add.w	r1, r5, #12
 800b504:	300c      	adds	r0, #12
 800b506:	f002 fafb 	bl	800db00 <memcpy>
 800b50a:	2201      	movs	r2, #1
 800b50c:	4631      	mov	r1, r6
 800b50e:	4648      	mov	r0, r9
 800b510:	f000 fc46 	bl	800bda0 <__lshift>
 800b514:	f10a 0301 	add.w	r3, sl, #1
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	eb0a 030b 	add.w	r3, sl, fp
 800b51e:	9308      	str	r3, [sp, #32]
 800b520:	9b04      	ldr	r3, [sp, #16]
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	462f      	mov	r7, r5
 800b528:	9306      	str	r3, [sp, #24]
 800b52a:	4605      	mov	r5, r0
 800b52c:	9b00      	ldr	r3, [sp, #0]
 800b52e:	9802      	ldr	r0, [sp, #8]
 800b530:	4621      	mov	r1, r4
 800b532:	f103 3bff 	add.w	fp, r3, #4294967295
 800b536:	f7ff fa89 	bl	800aa4c <quorem>
 800b53a:	4603      	mov	r3, r0
 800b53c:	3330      	adds	r3, #48	@ 0x30
 800b53e:	9003      	str	r0, [sp, #12]
 800b540:	4639      	mov	r1, r7
 800b542:	9802      	ldr	r0, [sp, #8]
 800b544:	9309      	str	r3, [sp, #36]	@ 0x24
 800b546:	f000 fc97 	bl	800be78 <__mcmp>
 800b54a:	462a      	mov	r2, r5
 800b54c:	9004      	str	r0, [sp, #16]
 800b54e:	4621      	mov	r1, r4
 800b550:	4648      	mov	r0, r9
 800b552:	f000 fcad 	bl	800beb0 <__mdiff>
 800b556:	68c2      	ldr	r2, [r0, #12]
 800b558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b55a:	4606      	mov	r6, r0
 800b55c:	bb02      	cbnz	r2, 800b5a0 <_dtoa_r+0xa40>
 800b55e:	4601      	mov	r1, r0
 800b560:	9802      	ldr	r0, [sp, #8]
 800b562:	f000 fc89 	bl	800be78 <__mcmp>
 800b566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b568:	4602      	mov	r2, r0
 800b56a:	4631      	mov	r1, r6
 800b56c:	4648      	mov	r0, r9
 800b56e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b570:	9309      	str	r3, [sp, #36]	@ 0x24
 800b572:	f000 fa05 	bl	800b980 <_Bfree>
 800b576:	9b07      	ldr	r3, [sp, #28]
 800b578:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b57a:	9e00      	ldr	r6, [sp, #0]
 800b57c:	ea42 0103 	orr.w	r1, r2, r3
 800b580:	9b06      	ldr	r3, [sp, #24]
 800b582:	4319      	orrs	r1, r3
 800b584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b586:	d10d      	bne.n	800b5a4 <_dtoa_r+0xa44>
 800b588:	2b39      	cmp	r3, #57	@ 0x39
 800b58a:	d027      	beq.n	800b5dc <_dtoa_r+0xa7c>
 800b58c:	9a04      	ldr	r2, [sp, #16]
 800b58e:	2a00      	cmp	r2, #0
 800b590:	dd01      	ble.n	800b596 <_dtoa_r+0xa36>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	3331      	adds	r3, #49	@ 0x31
 800b596:	f88b 3000 	strb.w	r3, [fp]
 800b59a:	e52e      	b.n	800affa <_dtoa_r+0x49a>
 800b59c:	4628      	mov	r0, r5
 800b59e:	e7b9      	b.n	800b514 <_dtoa_r+0x9b4>
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	e7e2      	b.n	800b56a <_dtoa_r+0xa0a>
 800b5a4:	9904      	ldr	r1, [sp, #16]
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	db04      	blt.n	800b5b4 <_dtoa_r+0xa54>
 800b5aa:	9807      	ldr	r0, [sp, #28]
 800b5ac:	4301      	orrs	r1, r0
 800b5ae:	9806      	ldr	r0, [sp, #24]
 800b5b0:	4301      	orrs	r1, r0
 800b5b2:	d120      	bne.n	800b5f6 <_dtoa_r+0xa96>
 800b5b4:	2a00      	cmp	r2, #0
 800b5b6:	ddee      	ble.n	800b596 <_dtoa_r+0xa36>
 800b5b8:	9902      	ldr	r1, [sp, #8]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	4648      	mov	r0, r9
 800b5c0:	f000 fbee 	bl	800bda0 <__lshift>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	9002      	str	r0, [sp, #8]
 800b5c8:	f000 fc56 	bl	800be78 <__mcmp>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	9b00      	ldr	r3, [sp, #0]
 800b5d0:	dc02      	bgt.n	800b5d8 <_dtoa_r+0xa78>
 800b5d2:	d1e0      	bne.n	800b596 <_dtoa_r+0xa36>
 800b5d4:	07da      	lsls	r2, r3, #31
 800b5d6:	d5de      	bpl.n	800b596 <_dtoa_r+0xa36>
 800b5d8:	2b39      	cmp	r3, #57	@ 0x39
 800b5da:	d1da      	bne.n	800b592 <_dtoa_r+0xa32>
 800b5dc:	2339      	movs	r3, #57	@ 0x39
 800b5de:	f88b 3000 	strb.w	r3, [fp]
 800b5e2:	4633      	mov	r3, r6
 800b5e4:	461e      	mov	r6, r3
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b5ec:	2a39      	cmp	r2, #57	@ 0x39
 800b5ee:	d04e      	beq.n	800b68e <_dtoa_r+0xb2e>
 800b5f0:	3201      	adds	r2, #1
 800b5f2:	701a      	strb	r2, [r3, #0]
 800b5f4:	e501      	b.n	800affa <_dtoa_r+0x49a>
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	dd03      	ble.n	800b602 <_dtoa_r+0xaa2>
 800b5fa:	2b39      	cmp	r3, #57	@ 0x39
 800b5fc:	d0ee      	beq.n	800b5dc <_dtoa_r+0xa7c>
 800b5fe:	3301      	adds	r3, #1
 800b600:	e7c9      	b.n	800b596 <_dtoa_r+0xa36>
 800b602:	9a00      	ldr	r2, [sp, #0]
 800b604:	9908      	ldr	r1, [sp, #32]
 800b606:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b60a:	428a      	cmp	r2, r1
 800b60c:	d028      	beq.n	800b660 <_dtoa_r+0xb00>
 800b60e:	9902      	ldr	r1, [sp, #8]
 800b610:	2300      	movs	r3, #0
 800b612:	220a      	movs	r2, #10
 800b614:	4648      	mov	r0, r9
 800b616:	f000 f9d5 	bl	800b9c4 <__multadd>
 800b61a:	42af      	cmp	r7, r5
 800b61c:	9002      	str	r0, [sp, #8]
 800b61e:	f04f 0300 	mov.w	r3, #0
 800b622:	f04f 020a 	mov.w	r2, #10
 800b626:	4639      	mov	r1, r7
 800b628:	4648      	mov	r0, r9
 800b62a:	d107      	bne.n	800b63c <_dtoa_r+0xadc>
 800b62c:	f000 f9ca 	bl	800b9c4 <__multadd>
 800b630:	4607      	mov	r7, r0
 800b632:	4605      	mov	r5, r0
 800b634:	9b00      	ldr	r3, [sp, #0]
 800b636:	3301      	adds	r3, #1
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	e777      	b.n	800b52c <_dtoa_r+0x9cc>
 800b63c:	f000 f9c2 	bl	800b9c4 <__multadd>
 800b640:	4629      	mov	r1, r5
 800b642:	4607      	mov	r7, r0
 800b644:	2300      	movs	r3, #0
 800b646:	220a      	movs	r2, #10
 800b648:	4648      	mov	r0, r9
 800b64a:	f000 f9bb 	bl	800b9c4 <__multadd>
 800b64e:	4605      	mov	r5, r0
 800b650:	e7f0      	b.n	800b634 <_dtoa_r+0xad4>
 800b652:	f1bb 0f00 	cmp.w	fp, #0
 800b656:	bfcc      	ite	gt
 800b658:	465e      	movgt	r6, fp
 800b65a:	2601      	movle	r6, #1
 800b65c:	4456      	add	r6, sl
 800b65e:	2700      	movs	r7, #0
 800b660:	9902      	ldr	r1, [sp, #8]
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	2201      	movs	r2, #1
 800b666:	4648      	mov	r0, r9
 800b668:	f000 fb9a 	bl	800bda0 <__lshift>
 800b66c:	4621      	mov	r1, r4
 800b66e:	9002      	str	r0, [sp, #8]
 800b670:	f000 fc02 	bl	800be78 <__mcmp>
 800b674:	2800      	cmp	r0, #0
 800b676:	dcb4      	bgt.n	800b5e2 <_dtoa_r+0xa82>
 800b678:	d102      	bne.n	800b680 <_dtoa_r+0xb20>
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	07db      	lsls	r3, r3, #31
 800b67e:	d4b0      	bmi.n	800b5e2 <_dtoa_r+0xa82>
 800b680:	4633      	mov	r3, r6
 800b682:	461e      	mov	r6, r3
 800b684:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b688:	2a30      	cmp	r2, #48	@ 0x30
 800b68a:	d0fa      	beq.n	800b682 <_dtoa_r+0xb22>
 800b68c:	e4b5      	b.n	800affa <_dtoa_r+0x49a>
 800b68e:	459a      	cmp	sl, r3
 800b690:	d1a8      	bne.n	800b5e4 <_dtoa_r+0xa84>
 800b692:	2331      	movs	r3, #49	@ 0x31
 800b694:	f108 0801 	add.w	r8, r8, #1
 800b698:	f88a 3000 	strb.w	r3, [sl]
 800b69c:	e4ad      	b.n	800affa <_dtoa_r+0x49a>
 800b69e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b6fc <_dtoa_r+0xb9c>
 800b6a4:	b11b      	cbz	r3, 800b6ae <_dtoa_r+0xb4e>
 800b6a6:	f10a 0308 	add.w	r3, sl, #8
 800b6aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	b017      	add	sp, #92	@ 0x5c
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b6:	9b07      	ldr	r3, [sp, #28]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	f77f ae2e 	ble.w	800b31a <_dtoa_r+0x7ba>
 800b6be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	e64d      	b.n	800b362 <_dtoa_r+0x802>
 800b6c6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ca:	f77f aed9 	ble.w	800b480 <_dtoa_r+0x920>
 800b6ce:	4656      	mov	r6, sl
 800b6d0:	9802      	ldr	r0, [sp, #8]
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	f7ff f9ba 	bl	800aa4c <quorem>
 800b6d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b6dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b6e0:	eba6 020a 	sub.w	r2, r6, sl
 800b6e4:	4593      	cmp	fp, r2
 800b6e6:	ddb4      	ble.n	800b652 <_dtoa_r+0xaf2>
 800b6e8:	9902      	ldr	r1, [sp, #8]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	220a      	movs	r2, #10
 800b6ee:	4648      	mov	r0, r9
 800b6f0:	f000 f968 	bl	800b9c4 <__multadd>
 800b6f4:	9002      	str	r0, [sp, #8]
 800b6f6:	e7eb      	b.n	800b6d0 <_dtoa_r+0xb70>
 800b6f8:	0800ea77 	.word	0x0800ea77
 800b6fc:	0800e9fb 	.word	0x0800e9fb

0800b700 <_free_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4605      	mov	r5, r0
 800b704:	2900      	cmp	r1, #0
 800b706:	d041      	beq.n	800b78c <_free_r+0x8c>
 800b708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b70c:	1f0c      	subs	r4, r1, #4
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bfb8      	it	lt
 800b712:	18e4      	addlt	r4, r4, r3
 800b714:	f000 f8e8 	bl	800b8e8 <__malloc_lock>
 800b718:	4a1d      	ldr	r2, [pc, #116]	@ (800b790 <_free_r+0x90>)
 800b71a:	6813      	ldr	r3, [r2, #0]
 800b71c:	b933      	cbnz	r3, 800b72c <_free_r+0x2c>
 800b71e:	6063      	str	r3, [r4, #4]
 800b720:	6014      	str	r4, [r2, #0]
 800b722:	4628      	mov	r0, r5
 800b724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b728:	f000 b8e4 	b.w	800b8f4 <__malloc_unlock>
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	d908      	bls.n	800b742 <_free_r+0x42>
 800b730:	6820      	ldr	r0, [r4, #0]
 800b732:	1821      	adds	r1, r4, r0
 800b734:	428b      	cmp	r3, r1
 800b736:	bf01      	itttt	eq
 800b738:	6819      	ldreq	r1, [r3, #0]
 800b73a:	685b      	ldreq	r3, [r3, #4]
 800b73c:	1809      	addeq	r1, r1, r0
 800b73e:	6021      	streq	r1, [r4, #0]
 800b740:	e7ed      	b.n	800b71e <_free_r+0x1e>
 800b742:	461a      	mov	r2, r3
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	b10b      	cbz	r3, 800b74c <_free_r+0x4c>
 800b748:	42a3      	cmp	r3, r4
 800b74a:	d9fa      	bls.n	800b742 <_free_r+0x42>
 800b74c:	6811      	ldr	r1, [r2, #0]
 800b74e:	1850      	adds	r0, r2, r1
 800b750:	42a0      	cmp	r0, r4
 800b752:	d10b      	bne.n	800b76c <_free_r+0x6c>
 800b754:	6820      	ldr	r0, [r4, #0]
 800b756:	4401      	add	r1, r0
 800b758:	1850      	adds	r0, r2, r1
 800b75a:	4283      	cmp	r3, r0
 800b75c:	6011      	str	r1, [r2, #0]
 800b75e:	d1e0      	bne.n	800b722 <_free_r+0x22>
 800b760:	6818      	ldr	r0, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	6053      	str	r3, [r2, #4]
 800b766:	4408      	add	r0, r1
 800b768:	6010      	str	r0, [r2, #0]
 800b76a:	e7da      	b.n	800b722 <_free_r+0x22>
 800b76c:	d902      	bls.n	800b774 <_free_r+0x74>
 800b76e:	230c      	movs	r3, #12
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	e7d6      	b.n	800b722 <_free_r+0x22>
 800b774:	6820      	ldr	r0, [r4, #0]
 800b776:	1821      	adds	r1, r4, r0
 800b778:	428b      	cmp	r3, r1
 800b77a:	bf04      	itt	eq
 800b77c:	6819      	ldreq	r1, [r3, #0]
 800b77e:	685b      	ldreq	r3, [r3, #4]
 800b780:	6063      	str	r3, [r4, #4]
 800b782:	bf04      	itt	eq
 800b784:	1809      	addeq	r1, r1, r0
 800b786:	6021      	streq	r1, [r4, #0]
 800b788:	6054      	str	r4, [r2, #4]
 800b78a:	e7ca      	b.n	800b722 <_free_r+0x22>
 800b78c:	bd38      	pop	{r3, r4, r5, pc}
 800b78e:	bf00      	nop
 800b790:	20002174 	.word	0x20002174

0800b794 <malloc>:
 800b794:	4b02      	ldr	r3, [pc, #8]	@ (800b7a0 <malloc+0xc>)
 800b796:	4601      	mov	r1, r0
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	f000 b825 	b.w	800b7e8 <_malloc_r>
 800b79e:	bf00      	nop
 800b7a0:	20000120 	.word	0x20000120

0800b7a4 <sbrk_aligned>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	4e0f      	ldr	r6, [pc, #60]	@ (800b7e4 <sbrk_aligned+0x40>)
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	6831      	ldr	r1, [r6, #0]
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	b911      	cbnz	r1, 800b7b6 <sbrk_aligned+0x12>
 800b7b0:	f002 f996 	bl	800dae0 <_sbrk_r>
 800b7b4:	6030      	str	r0, [r6, #0]
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	f002 f991 	bl	800dae0 <_sbrk_r>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	d103      	bne.n	800b7ca <sbrk_aligned+0x26>
 800b7c2:	f04f 34ff 	mov.w	r4, #4294967295
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ca:	1cc4      	adds	r4, r0, #3
 800b7cc:	f024 0403 	bic.w	r4, r4, #3
 800b7d0:	42a0      	cmp	r0, r4
 800b7d2:	d0f8      	beq.n	800b7c6 <sbrk_aligned+0x22>
 800b7d4:	1a21      	subs	r1, r4, r0
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f002 f982 	bl	800dae0 <_sbrk_r>
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d1f2      	bne.n	800b7c6 <sbrk_aligned+0x22>
 800b7e0:	e7ef      	b.n	800b7c2 <sbrk_aligned+0x1e>
 800b7e2:	bf00      	nop
 800b7e4:	20002170 	.word	0x20002170

0800b7e8 <_malloc_r>:
 800b7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ec:	1ccd      	adds	r5, r1, #3
 800b7ee:	f025 0503 	bic.w	r5, r5, #3
 800b7f2:	3508      	adds	r5, #8
 800b7f4:	2d0c      	cmp	r5, #12
 800b7f6:	bf38      	it	cc
 800b7f8:	250c      	movcc	r5, #12
 800b7fa:	2d00      	cmp	r5, #0
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	db01      	blt.n	800b804 <_malloc_r+0x1c>
 800b800:	42a9      	cmp	r1, r5
 800b802:	d904      	bls.n	800b80e <_malloc_r+0x26>
 800b804:	230c      	movs	r3, #12
 800b806:	6033      	str	r3, [r6, #0]
 800b808:	2000      	movs	r0, #0
 800b80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8e4 <_malloc_r+0xfc>
 800b812:	f000 f869 	bl	800b8e8 <__malloc_lock>
 800b816:	f8d8 3000 	ldr.w	r3, [r8]
 800b81a:	461c      	mov	r4, r3
 800b81c:	bb44      	cbnz	r4, 800b870 <_malloc_r+0x88>
 800b81e:	4629      	mov	r1, r5
 800b820:	4630      	mov	r0, r6
 800b822:	f7ff ffbf 	bl	800b7a4 <sbrk_aligned>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	4604      	mov	r4, r0
 800b82a:	d158      	bne.n	800b8de <_malloc_r+0xf6>
 800b82c:	f8d8 4000 	ldr.w	r4, [r8]
 800b830:	4627      	mov	r7, r4
 800b832:	2f00      	cmp	r7, #0
 800b834:	d143      	bne.n	800b8be <_malloc_r+0xd6>
 800b836:	2c00      	cmp	r4, #0
 800b838:	d04b      	beq.n	800b8d2 <_malloc_r+0xea>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	4639      	mov	r1, r7
 800b83e:	4630      	mov	r0, r6
 800b840:	eb04 0903 	add.w	r9, r4, r3
 800b844:	f002 f94c 	bl	800dae0 <_sbrk_r>
 800b848:	4581      	cmp	r9, r0
 800b84a:	d142      	bne.n	800b8d2 <_malloc_r+0xea>
 800b84c:	6821      	ldr	r1, [r4, #0]
 800b84e:	1a6d      	subs	r5, r5, r1
 800b850:	4629      	mov	r1, r5
 800b852:	4630      	mov	r0, r6
 800b854:	f7ff ffa6 	bl	800b7a4 <sbrk_aligned>
 800b858:	3001      	adds	r0, #1
 800b85a:	d03a      	beq.n	800b8d2 <_malloc_r+0xea>
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	442b      	add	r3, r5
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	f8d8 3000 	ldr.w	r3, [r8]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	bb62      	cbnz	r2, 800b8c4 <_malloc_r+0xdc>
 800b86a:	f8c8 7000 	str.w	r7, [r8]
 800b86e:	e00f      	b.n	800b890 <_malloc_r+0xa8>
 800b870:	6822      	ldr	r2, [r4, #0]
 800b872:	1b52      	subs	r2, r2, r5
 800b874:	d420      	bmi.n	800b8b8 <_malloc_r+0xd0>
 800b876:	2a0b      	cmp	r2, #11
 800b878:	d917      	bls.n	800b8aa <_malloc_r+0xc2>
 800b87a:	1961      	adds	r1, r4, r5
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	6025      	str	r5, [r4, #0]
 800b880:	bf18      	it	ne
 800b882:	6059      	strne	r1, [r3, #4]
 800b884:	6863      	ldr	r3, [r4, #4]
 800b886:	bf08      	it	eq
 800b888:	f8c8 1000 	streq.w	r1, [r8]
 800b88c:	5162      	str	r2, [r4, r5]
 800b88e:	604b      	str	r3, [r1, #4]
 800b890:	4630      	mov	r0, r6
 800b892:	f000 f82f 	bl	800b8f4 <__malloc_unlock>
 800b896:	f104 000b 	add.w	r0, r4, #11
 800b89a:	1d23      	adds	r3, r4, #4
 800b89c:	f020 0007 	bic.w	r0, r0, #7
 800b8a0:	1ac2      	subs	r2, r0, r3
 800b8a2:	bf1c      	itt	ne
 800b8a4:	1a1b      	subne	r3, r3, r0
 800b8a6:	50a3      	strne	r3, [r4, r2]
 800b8a8:	e7af      	b.n	800b80a <_malloc_r+0x22>
 800b8aa:	6862      	ldr	r2, [r4, #4]
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	bf0c      	ite	eq
 800b8b0:	f8c8 2000 	streq.w	r2, [r8]
 800b8b4:	605a      	strne	r2, [r3, #4]
 800b8b6:	e7eb      	b.n	800b890 <_malloc_r+0xa8>
 800b8b8:	4623      	mov	r3, r4
 800b8ba:	6864      	ldr	r4, [r4, #4]
 800b8bc:	e7ae      	b.n	800b81c <_malloc_r+0x34>
 800b8be:	463c      	mov	r4, r7
 800b8c0:	687f      	ldr	r7, [r7, #4]
 800b8c2:	e7b6      	b.n	800b832 <_malloc_r+0x4a>
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	d1fb      	bne.n	800b8c4 <_malloc_r+0xdc>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	6053      	str	r3, [r2, #4]
 800b8d0:	e7de      	b.n	800b890 <_malloc_r+0xa8>
 800b8d2:	230c      	movs	r3, #12
 800b8d4:	6033      	str	r3, [r6, #0]
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f000 f80c 	bl	800b8f4 <__malloc_unlock>
 800b8dc:	e794      	b.n	800b808 <_malloc_r+0x20>
 800b8de:	6005      	str	r5, [r0, #0]
 800b8e0:	e7d6      	b.n	800b890 <_malloc_r+0xa8>
 800b8e2:	bf00      	nop
 800b8e4:	20002174 	.word	0x20002174

0800b8e8 <__malloc_lock>:
 800b8e8:	4801      	ldr	r0, [pc, #4]	@ (800b8f0 <__malloc_lock+0x8>)
 800b8ea:	f7ff b8a6 	b.w	800aa3a <__retarget_lock_acquire_recursive>
 800b8ee:	bf00      	nop
 800b8f0:	2000216c 	.word	0x2000216c

0800b8f4 <__malloc_unlock>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	@ (800b8fc <__malloc_unlock+0x8>)
 800b8f6:	f7ff b8a1 	b.w	800aa3c <__retarget_lock_release_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	2000216c 	.word	0x2000216c

0800b900 <_Balloc>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	69c6      	ldr	r6, [r0, #28]
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	b976      	cbnz	r6, 800b928 <_Balloc+0x28>
 800b90a:	2010      	movs	r0, #16
 800b90c:	f7ff ff42 	bl	800b794 <malloc>
 800b910:	4602      	mov	r2, r0
 800b912:	61e0      	str	r0, [r4, #28]
 800b914:	b920      	cbnz	r0, 800b920 <_Balloc+0x20>
 800b916:	4b18      	ldr	r3, [pc, #96]	@ (800b978 <_Balloc+0x78>)
 800b918:	4818      	ldr	r0, [pc, #96]	@ (800b97c <_Balloc+0x7c>)
 800b91a:	216b      	movs	r1, #107	@ 0x6b
 800b91c:	f002 f908 	bl	800db30 <__assert_func>
 800b920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b924:	6006      	str	r6, [r0, #0]
 800b926:	60c6      	str	r6, [r0, #12]
 800b928:	69e6      	ldr	r6, [r4, #28]
 800b92a:	68f3      	ldr	r3, [r6, #12]
 800b92c:	b183      	cbz	r3, 800b950 <_Balloc+0x50>
 800b92e:	69e3      	ldr	r3, [r4, #28]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b936:	b9b8      	cbnz	r0, 800b968 <_Balloc+0x68>
 800b938:	2101      	movs	r1, #1
 800b93a:	fa01 f605 	lsl.w	r6, r1, r5
 800b93e:	1d72      	adds	r2, r6, #5
 800b940:	0092      	lsls	r2, r2, #2
 800b942:	4620      	mov	r0, r4
 800b944:	f002 f912 	bl	800db6c <_calloc_r>
 800b948:	b160      	cbz	r0, 800b964 <_Balloc+0x64>
 800b94a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b94e:	e00e      	b.n	800b96e <_Balloc+0x6e>
 800b950:	2221      	movs	r2, #33	@ 0x21
 800b952:	2104      	movs	r1, #4
 800b954:	4620      	mov	r0, r4
 800b956:	f002 f909 	bl	800db6c <_calloc_r>
 800b95a:	69e3      	ldr	r3, [r4, #28]
 800b95c:	60f0      	str	r0, [r6, #12]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1e4      	bne.n	800b92e <_Balloc+0x2e>
 800b964:	2000      	movs	r0, #0
 800b966:	bd70      	pop	{r4, r5, r6, pc}
 800b968:	6802      	ldr	r2, [r0, #0]
 800b96a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b96e:	2300      	movs	r3, #0
 800b970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b974:	e7f7      	b.n	800b966 <_Balloc+0x66>
 800b976:	bf00      	nop
 800b978:	0800ea08 	.word	0x0800ea08
 800b97c:	0800ea88 	.word	0x0800ea88

0800b980 <_Bfree>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	69c6      	ldr	r6, [r0, #28]
 800b984:	4605      	mov	r5, r0
 800b986:	460c      	mov	r4, r1
 800b988:	b976      	cbnz	r6, 800b9a8 <_Bfree+0x28>
 800b98a:	2010      	movs	r0, #16
 800b98c:	f7ff ff02 	bl	800b794 <malloc>
 800b990:	4602      	mov	r2, r0
 800b992:	61e8      	str	r0, [r5, #28]
 800b994:	b920      	cbnz	r0, 800b9a0 <_Bfree+0x20>
 800b996:	4b09      	ldr	r3, [pc, #36]	@ (800b9bc <_Bfree+0x3c>)
 800b998:	4809      	ldr	r0, [pc, #36]	@ (800b9c0 <_Bfree+0x40>)
 800b99a:	218f      	movs	r1, #143	@ 0x8f
 800b99c:	f002 f8c8 	bl	800db30 <__assert_func>
 800b9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9a4:	6006      	str	r6, [r0, #0]
 800b9a6:	60c6      	str	r6, [r0, #12]
 800b9a8:	b13c      	cbz	r4, 800b9ba <_Bfree+0x3a>
 800b9aa:	69eb      	ldr	r3, [r5, #28]
 800b9ac:	6862      	ldr	r2, [r4, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9b4:	6021      	str	r1, [r4, #0]
 800b9b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	0800ea08 	.word	0x0800ea08
 800b9c0:	0800ea88 	.word	0x0800ea88

0800b9c4 <__multadd>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	690d      	ldr	r5, [r1, #16]
 800b9ca:	4607      	mov	r7, r0
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	461e      	mov	r6, r3
 800b9d0:	f101 0c14 	add.w	ip, r1, #20
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b9da:	b299      	uxth	r1, r3
 800b9dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b9e0:	0c1e      	lsrs	r6, r3, #16
 800b9e2:	0c0b      	lsrs	r3, r1, #16
 800b9e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b9e8:	b289      	uxth	r1, r1
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9f0:	4285      	cmp	r5, r0
 800b9f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b9f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9fa:	dcec      	bgt.n	800b9d6 <__multadd+0x12>
 800b9fc:	b30e      	cbz	r6, 800ba42 <__multadd+0x7e>
 800b9fe:	68a3      	ldr	r3, [r4, #8]
 800ba00:	42ab      	cmp	r3, r5
 800ba02:	dc19      	bgt.n	800ba38 <__multadd+0x74>
 800ba04:	6861      	ldr	r1, [r4, #4]
 800ba06:	4638      	mov	r0, r7
 800ba08:	3101      	adds	r1, #1
 800ba0a:	f7ff ff79 	bl	800b900 <_Balloc>
 800ba0e:	4680      	mov	r8, r0
 800ba10:	b928      	cbnz	r0, 800ba1e <__multadd+0x5a>
 800ba12:	4602      	mov	r2, r0
 800ba14:	4b0c      	ldr	r3, [pc, #48]	@ (800ba48 <__multadd+0x84>)
 800ba16:	480d      	ldr	r0, [pc, #52]	@ (800ba4c <__multadd+0x88>)
 800ba18:	21ba      	movs	r1, #186	@ 0xba
 800ba1a:	f002 f889 	bl	800db30 <__assert_func>
 800ba1e:	6922      	ldr	r2, [r4, #16]
 800ba20:	3202      	adds	r2, #2
 800ba22:	f104 010c 	add.w	r1, r4, #12
 800ba26:	0092      	lsls	r2, r2, #2
 800ba28:	300c      	adds	r0, #12
 800ba2a:	f002 f869 	bl	800db00 <memcpy>
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7ff ffa5 	bl	800b980 <_Bfree>
 800ba36:	4644      	mov	r4, r8
 800ba38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba3c:	3501      	adds	r5, #1
 800ba3e:	615e      	str	r6, [r3, #20]
 800ba40:	6125      	str	r5, [r4, #16]
 800ba42:	4620      	mov	r0, r4
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	0800ea77 	.word	0x0800ea77
 800ba4c:	0800ea88 	.word	0x0800ea88

0800ba50 <__s2b>:
 800ba50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba54:	460c      	mov	r4, r1
 800ba56:	4615      	mov	r5, r2
 800ba58:	461f      	mov	r7, r3
 800ba5a:	2209      	movs	r2, #9
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	4606      	mov	r6, r0
 800ba60:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba64:	2100      	movs	r1, #0
 800ba66:	2201      	movs	r2, #1
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	db09      	blt.n	800ba80 <__s2b+0x30>
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff ff47 	bl	800b900 <_Balloc>
 800ba72:	b940      	cbnz	r0, 800ba86 <__s2b+0x36>
 800ba74:	4602      	mov	r2, r0
 800ba76:	4b19      	ldr	r3, [pc, #100]	@ (800badc <__s2b+0x8c>)
 800ba78:	4819      	ldr	r0, [pc, #100]	@ (800bae0 <__s2b+0x90>)
 800ba7a:	21d3      	movs	r1, #211	@ 0xd3
 800ba7c:	f002 f858 	bl	800db30 <__assert_func>
 800ba80:	0052      	lsls	r2, r2, #1
 800ba82:	3101      	adds	r1, #1
 800ba84:	e7f0      	b.n	800ba68 <__s2b+0x18>
 800ba86:	9b08      	ldr	r3, [sp, #32]
 800ba88:	6143      	str	r3, [r0, #20]
 800ba8a:	2d09      	cmp	r5, #9
 800ba8c:	f04f 0301 	mov.w	r3, #1
 800ba90:	6103      	str	r3, [r0, #16]
 800ba92:	dd16      	ble.n	800bac2 <__s2b+0x72>
 800ba94:	f104 0909 	add.w	r9, r4, #9
 800ba98:	46c8      	mov	r8, r9
 800ba9a:	442c      	add	r4, r5
 800ba9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800baa0:	4601      	mov	r1, r0
 800baa2:	3b30      	subs	r3, #48	@ 0x30
 800baa4:	220a      	movs	r2, #10
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff ff8c 	bl	800b9c4 <__multadd>
 800baac:	45a0      	cmp	r8, r4
 800baae:	d1f5      	bne.n	800ba9c <__s2b+0x4c>
 800bab0:	f1a5 0408 	sub.w	r4, r5, #8
 800bab4:	444c      	add	r4, r9
 800bab6:	1b2d      	subs	r5, r5, r4
 800bab8:	1963      	adds	r3, r4, r5
 800baba:	42bb      	cmp	r3, r7
 800babc:	db04      	blt.n	800bac8 <__s2b+0x78>
 800babe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac2:	340a      	adds	r4, #10
 800bac4:	2509      	movs	r5, #9
 800bac6:	e7f6      	b.n	800bab6 <__s2b+0x66>
 800bac8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bacc:	4601      	mov	r1, r0
 800bace:	3b30      	subs	r3, #48	@ 0x30
 800bad0:	220a      	movs	r2, #10
 800bad2:	4630      	mov	r0, r6
 800bad4:	f7ff ff76 	bl	800b9c4 <__multadd>
 800bad8:	e7ee      	b.n	800bab8 <__s2b+0x68>
 800bada:	bf00      	nop
 800badc:	0800ea77 	.word	0x0800ea77
 800bae0:	0800ea88 	.word	0x0800ea88

0800bae4 <__hi0bits>:
 800bae4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bae8:	4603      	mov	r3, r0
 800baea:	bf36      	itet	cc
 800baec:	0403      	lslcc	r3, r0, #16
 800baee:	2000      	movcs	r0, #0
 800baf0:	2010      	movcc	r0, #16
 800baf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baf6:	bf3c      	itt	cc
 800baf8:	021b      	lslcc	r3, r3, #8
 800bafa:	3008      	addcc	r0, #8
 800bafc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb00:	bf3c      	itt	cc
 800bb02:	011b      	lslcc	r3, r3, #4
 800bb04:	3004      	addcc	r0, #4
 800bb06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb0a:	bf3c      	itt	cc
 800bb0c:	009b      	lslcc	r3, r3, #2
 800bb0e:	3002      	addcc	r0, #2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	db05      	blt.n	800bb20 <__hi0bits+0x3c>
 800bb14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb18:	f100 0001 	add.w	r0, r0, #1
 800bb1c:	bf08      	it	eq
 800bb1e:	2020      	moveq	r0, #32
 800bb20:	4770      	bx	lr

0800bb22 <__lo0bits>:
 800bb22:	6803      	ldr	r3, [r0, #0]
 800bb24:	4602      	mov	r2, r0
 800bb26:	f013 0007 	ands.w	r0, r3, #7
 800bb2a:	d00b      	beq.n	800bb44 <__lo0bits+0x22>
 800bb2c:	07d9      	lsls	r1, r3, #31
 800bb2e:	d421      	bmi.n	800bb74 <__lo0bits+0x52>
 800bb30:	0798      	lsls	r0, r3, #30
 800bb32:	bf49      	itett	mi
 800bb34:	085b      	lsrmi	r3, r3, #1
 800bb36:	089b      	lsrpl	r3, r3, #2
 800bb38:	2001      	movmi	r0, #1
 800bb3a:	6013      	strmi	r3, [r2, #0]
 800bb3c:	bf5c      	itt	pl
 800bb3e:	6013      	strpl	r3, [r2, #0]
 800bb40:	2002      	movpl	r0, #2
 800bb42:	4770      	bx	lr
 800bb44:	b299      	uxth	r1, r3
 800bb46:	b909      	cbnz	r1, 800bb4c <__lo0bits+0x2a>
 800bb48:	0c1b      	lsrs	r3, r3, #16
 800bb4a:	2010      	movs	r0, #16
 800bb4c:	b2d9      	uxtb	r1, r3
 800bb4e:	b909      	cbnz	r1, 800bb54 <__lo0bits+0x32>
 800bb50:	3008      	adds	r0, #8
 800bb52:	0a1b      	lsrs	r3, r3, #8
 800bb54:	0719      	lsls	r1, r3, #28
 800bb56:	bf04      	itt	eq
 800bb58:	091b      	lsreq	r3, r3, #4
 800bb5a:	3004      	addeq	r0, #4
 800bb5c:	0799      	lsls	r1, r3, #30
 800bb5e:	bf04      	itt	eq
 800bb60:	089b      	lsreq	r3, r3, #2
 800bb62:	3002      	addeq	r0, #2
 800bb64:	07d9      	lsls	r1, r3, #31
 800bb66:	d403      	bmi.n	800bb70 <__lo0bits+0x4e>
 800bb68:	085b      	lsrs	r3, r3, #1
 800bb6a:	f100 0001 	add.w	r0, r0, #1
 800bb6e:	d003      	beq.n	800bb78 <__lo0bits+0x56>
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	4770      	bx	lr
 800bb74:	2000      	movs	r0, #0
 800bb76:	4770      	bx	lr
 800bb78:	2020      	movs	r0, #32
 800bb7a:	4770      	bx	lr

0800bb7c <__i2b>:
 800bb7c:	b510      	push	{r4, lr}
 800bb7e:	460c      	mov	r4, r1
 800bb80:	2101      	movs	r1, #1
 800bb82:	f7ff febd 	bl	800b900 <_Balloc>
 800bb86:	4602      	mov	r2, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__i2b+0x1a>
 800bb8a:	4b05      	ldr	r3, [pc, #20]	@ (800bba0 <__i2b+0x24>)
 800bb8c:	4805      	ldr	r0, [pc, #20]	@ (800bba4 <__i2b+0x28>)
 800bb8e:	f240 1145 	movw	r1, #325	@ 0x145
 800bb92:	f001 ffcd 	bl	800db30 <__assert_func>
 800bb96:	2301      	movs	r3, #1
 800bb98:	6144      	str	r4, [r0, #20]
 800bb9a:	6103      	str	r3, [r0, #16]
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800ea77 	.word	0x0800ea77
 800bba4:	0800ea88 	.word	0x0800ea88

0800bba8 <__multiply>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	4617      	mov	r7, r2
 800bbae:	690a      	ldr	r2, [r1, #16]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	bfa8      	it	ge
 800bbb6:	463b      	movge	r3, r7
 800bbb8:	4689      	mov	r9, r1
 800bbba:	bfa4      	itt	ge
 800bbbc:	460f      	movge	r7, r1
 800bbbe:	4699      	movge	r9, r3
 800bbc0:	693d      	ldr	r5, [r7, #16]
 800bbc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	eb05 060a 	add.w	r6, r5, sl
 800bbce:	42b3      	cmp	r3, r6
 800bbd0:	b085      	sub	sp, #20
 800bbd2:	bfb8      	it	lt
 800bbd4:	3101      	addlt	r1, #1
 800bbd6:	f7ff fe93 	bl	800b900 <_Balloc>
 800bbda:	b930      	cbnz	r0, 800bbea <__multiply+0x42>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	4b41      	ldr	r3, [pc, #260]	@ (800bce4 <__multiply+0x13c>)
 800bbe0:	4841      	ldr	r0, [pc, #260]	@ (800bce8 <__multiply+0x140>)
 800bbe2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bbe6:	f001 ffa3 	bl	800db30 <__assert_func>
 800bbea:	f100 0414 	add.w	r4, r0, #20
 800bbee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bbf2:	4623      	mov	r3, r4
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	4573      	cmp	r3, lr
 800bbf8:	d320      	bcc.n	800bc3c <__multiply+0x94>
 800bbfa:	f107 0814 	add.w	r8, r7, #20
 800bbfe:	f109 0114 	add.w	r1, r9, #20
 800bc02:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bc06:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bc0a:	9302      	str	r3, [sp, #8]
 800bc0c:	1beb      	subs	r3, r5, r7
 800bc0e:	3b15      	subs	r3, #21
 800bc10:	f023 0303 	bic.w	r3, r3, #3
 800bc14:	3304      	adds	r3, #4
 800bc16:	3715      	adds	r7, #21
 800bc18:	42bd      	cmp	r5, r7
 800bc1a:	bf38      	it	cc
 800bc1c:	2304      	movcc	r3, #4
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	9103      	str	r1, [sp, #12]
 800bc24:	428b      	cmp	r3, r1
 800bc26:	d80c      	bhi.n	800bc42 <__multiply+0x9a>
 800bc28:	2e00      	cmp	r6, #0
 800bc2a:	dd03      	ble.n	800bc34 <__multiply+0x8c>
 800bc2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d055      	beq.n	800bce0 <__multiply+0x138>
 800bc34:	6106      	str	r6, [r0, #16]
 800bc36:	b005      	add	sp, #20
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	f843 2b04 	str.w	r2, [r3], #4
 800bc40:	e7d9      	b.n	800bbf6 <__multiply+0x4e>
 800bc42:	f8b1 a000 	ldrh.w	sl, [r1]
 800bc46:	f1ba 0f00 	cmp.w	sl, #0
 800bc4a:	d01f      	beq.n	800bc8c <__multiply+0xe4>
 800bc4c:	46c4      	mov	ip, r8
 800bc4e:	46a1      	mov	r9, r4
 800bc50:	2700      	movs	r7, #0
 800bc52:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc56:	f8d9 3000 	ldr.w	r3, [r9]
 800bc5a:	fa1f fb82 	uxth.w	fp, r2
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	fb0a 330b 	mla	r3, sl, fp, r3
 800bc64:	443b      	add	r3, r7
 800bc66:	f8d9 7000 	ldr.w	r7, [r9]
 800bc6a:	0c12      	lsrs	r2, r2, #16
 800bc6c:	0c3f      	lsrs	r7, r7, #16
 800bc6e:	fb0a 7202 	mla	r2, sl, r2, r7
 800bc72:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc7c:	4565      	cmp	r5, ip
 800bc7e:	f849 3b04 	str.w	r3, [r9], #4
 800bc82:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bc86:	d8e4      	bhi.n	800bc52 <__multiply+0xaa>
 800bc88:	9b01      	ldr	r3, [sp, #4]
 800bc8a:	50e7      	str	r7, [r4, r3]
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc92:	3104      	adds	r1, #4
 800bc94:	f1b9 0f00 	cmp.w	r9, #0
 800bc98:	d020      	beq.n	800bcdc <__multiply+0x134>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	4647      	mov	r7, r8
 800bc9e:	46a4      	mov	ip, r4
 800bca0:	f04f 0a00 	mov.w	sl, #0
 800bca4:	f8b7 b000 	ldrh.w	fp, [r7]
 800bca8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bcac:	fb09 220b 	mla	r2, r9, fp, r2
 800bcb0:	4452      	add	r2, sl
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcb8:	f84c 3b04 	str.w	r3, [ip], #4
 800bcbc:	f857 3b04 	ldr.w	r3, [r7], #4
 800bcc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcc4:	f8bc 3000 	ldrh.w	r3, [ip]
 800bcc8:	fb09 330a 	mla	r3, r9, sl, r3
 800bccc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bcd0:	42bd      	cmp	r5, r7
 800bcd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcd6:	d8e5      	bhi.n	800bca4 <__multiply+0xfc>
 800bcd8:	9a01      	ldr	r2, [sp, #4]
 800bcda:	50a3      	str	r3, [r4, r2]
 800bcdc:	3404      	adds	r4, #4
 800bcde:	e79f      	b.n	800bc20 <__multiply+0x78>
 800bce0:	3e01      	subs	r6, #1
 800bce2:	e7a1      	b.n	800bc28 <__multiply+0x80>
 800bce4:	0800ea77 	.word	0x0800ea77
 800bce8:	0800ea88 	.word	0x0800ea88

0800bcec <__pow5mult>:
 800bcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf0:	4615      	mov	r5, r2
 800bcf2:	f012 0203 	ands.w	r2, r2, #3
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	460e      	mov	r6, r1
 800bcfa:	d007      	beq.n	800bd0c <__pow5mult+0x20>
 800bcfc:	4c25      	ldr	r4, [pc, #148]	@ (800bd94 <__pow5mult+0xa8>)
 800bcfe:	3a01      	subs	r2, #1
 800bd00:	2300      	movs	r3, #0
 800bd02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd06:	f7ff fe5d 	bl	800b9c4 <__multadd>
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	10ad      	asrs	r5, r5, #2
 800bd0e:	d03d      	beq.n	800bd8c <__pow5mult+0xa0>
 800bd10:	69fc      	ldr	r4, [r7, #28]
 800bd12:	b97c      	cbnz	r4, 800bd34 <__pow5mult+0x48>
 800bd14:	2010      	movs	r0, #16
 800bd16:	f7ff fd3d 	bl	800b794 <malloc>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	61f8      	str	r0, [r7, #28]
 800bd1e:	b928      	cbnz	r0, 800bd2c <__pow5mult+0x40>
 800bd20:	4b1d      	ldr	r3, [pc, #116]	@ (800bd98 <__pow5mult+0xac>)
 800bd22:	481e      	ldr	r0, [pc, #120]	@ (800bd9c <__pow5mult+0xb0>)
 800bd24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd28:	f001 ff02 	bl	800db30 <__assert_func>
 800bd2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd30:	6004      	str	r4, [r0, #0]
 800bd32:	60c4      	str	r4, [r0, #12]
 800bd34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bd38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd3c:	b94c      	cbnz	r4, 800bd52 <__pow5mult+0x66>
 800bd3e:	f240 2171 	movw	r1, #625	@ 0x271
 800bd42:	4638      	mov	r0, r7
 800bd44:	f7ff ff1a 	bl	800bb7c <__i2b>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd4e:	4604      	mov	r4, r0
 800bd50:	6003      	str	r3, [r0, #0]
 800bd52:	f04f 0900 	mov.w	r9, #0
 800bd56:	07eb      	lsls	r3, r5, #31
 800bd58:	d50a      	bpl.n	800bd70 <__pow5mult+0x84>
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	4638      	mov	r0, r7
 800bd60:	f7ff ff22 	bl	800bba8 <__multiply>
 800bd64:	4631      	mov	r1, r6
 800bd66:	4680      	mov	r8, r0
 800bd68:	4638      	mov	r0, r7
 800bd6a:	f7ff fe09 	bl	800b980 <_Bfree>
 800bd6e:	4646      	mov	r6, r8
 800bd70:	106d      	asrs	r5, r5, #1
 800bd72:	d00b      	beq.n	800bd8c <__pow5mult+0xa0>
 800bd74:	6820      	ldr	r0, [r4, #0]
 800bd76:	b938      	cbnz	r0, 800bd88 <__pow5mult+0x9c>
 800bd78:	4622      	mov	r2, r4
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7ff ff13 	bl	800bba8 <__multiply>
 800bd82:	6020      	str	r0, [r4, #0]
 800bd84:	f8c0 9000 	str.w	r9, [r0]
 800bd88:	4604      	mov	r4, r0
 800bd8a:	e7e4      	b.n	800bd56 <__pow5mult+0x6a>
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd92:	bf00      	nop
 800bd94:	0800ebb4 	.word	0x0800ebb4
 800bd98:	0800ea08 	.word	0x0800ea08
 800bd9c:	0800ea88 	.word	0x0800ea88

0800bda0 <__lshift>:
 800bda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda4:	460c      	mov	r4, r1
 800bda6:	6849      	ldr	r1, [r1, #4]
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	4607      	mov	r7, r0
 800bdb2:	4691      	mov	r9, r2
 800bdb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdb8:	f108 0601 	add.w	r6, r8, #1
 800bdbc:	42b3      	cmp	r3, r6
 800bdbe:	db0b      	blt.n	800bdd8 <__lshift+0x38>
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f7ff fd9d 	bl	800b900 <_Balloc>
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	b948      	cbnz	r0, 800bdde <__lshift+0x3e>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	4b28      	ldr	r3, [pc, #160]	@ (800be70 <__lshift+0xd0>)
 800bdce:	4829      	ldr	r0, [pc, #164]	@ (800be74 <__lshift+0xd4>)
 800bdd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bdd4:	f001 feac 	bl	800db30 <__assert_func>
 800bdd8:	3101      	adds	r1, #1
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	e7ee      	b.n	800bdbc <__lshift+0x1c>
 800bdde:	2300      	movs	r3, #0
 800bde0:	f100 0114 	add.w	r1, r0, #20
 800bde4:	f100 0210 	add.w	r2, r0, #16
 800bde8:	4618      	mov	r0, r3
 800bdea:	4553      	cmp	r3, sl
 800bdec:	db33      	blt.n	800be56 <__lshift+0xb6>
 800bdee:	6920      	ldr	r0, [r4, #16]
 800bdf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdf4:	f104 0314 	add.w	r3, r4, #20
 800bdf8:	f019 091f 	ands.w	r9, r9, #31
 800bdfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be04:	d02b      	beq.n	800be5e <__lshift+0xbe>
 800be06:	f1c9 0e20 	rsb	lr, r9, #32
 800be0a:	468a      	mov	sl, r1
 800be0c:	2200      	movs	r2, #0
 800be0e:	6818      	ldr	r0, [r3, #0]
 800be10:	fa00 f009 	lsl.w	r0, r0, r9
 800be14:	4310      	orrs	r0, r2
 800be16:	f84a 0b04 	str.w	r0, [sl], #4
 800be1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1e:	459c      	cmp	ip, r3
 800be20:	fa22 f20e 	lsr.w	r2, r2, lr
 800be24:	d8f3      	bhi.n	800be0e <__lshift+0x6e>
 800be26:	ebac 0304 	sub.w	r3, ip, r4
 800be2a:	3b15      	subs	r3, #21
 800be2c:	f023 0303 	bic.w	r3, r3, #3
 800be30:	3304      	adds	r3, #4
 800be32:	f104 0015 	add.w	r0, r4, #21
 800be36:	4560      	cmp	r0, ip
 800be38:	bf88      	it	hi
 800be3a:	2304      	movhi	r3, #4
 800be3c:	50ca      	str	r2, [r1, r3]
 800be3e:	b10a      	cbz	r2, 800be44 <__lshift+0xa4>
 800be40:	f108 0602 	add.w	r6, r8, #2
 800be44:	3e01      	subs	r6, #1
 800be46:	4638      	mov	r0, r7
 800be48:	612e      	str	r6, [r5, #16]
 800be4a:	4621      	mov	r1, r4
 800be4c:	f7ff fd98 	bl	800b980 <_Bfree>
 800be50:	4628      	mov	r0, r5
 800be52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be56:	f842 0f04 	str.w	r0, [r2, #4]!
 800be5a:	3301      	adds	r3, #1
 800be5c:	e7c5      	b.n	800bdea <__lshift+0x4a>
 800be5e:	3904      	subs	r1, #4
 800be60:	f853 2b04 	ldr.w	r2, [r3], #4
 800be64:	f841 2f04 	str.w	r2, [r1, #4]!
 800be68:	459c      	cmp	ip, r3
 800be6a:	d8f9      	bhi.n	800be60 <__lshift+0xc0>
 800be6c:	e7ea      	b.n	800be44 <__lshift+0xa4>
 800be6e:	bf00      	nop
 800be70:	0800ea77 	.word	0x0800ea77
 800be74:	0800ea88 	.word	0x0800ea88

0800be78 <__mcmp>:
 800be78:	690a      	ldr	r2, [r1, #16]
 800be7a:	4603      	mov	r3, r0
 800be7c:	6900      	ldr	r0, [r0, #16]
 800be7e:	1a80      	subs	r0, r0, r2
 800be80:	b530      	push	{r4, r5, lr}
 800be82:	d10e      	bne.n	800bea2 <__mcmp+0x2a>
 800be84:	3314      	adds	r3, #20
 800be86:	3114      	adds	r1, #20
 800be88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be98:	4295      	cmp	r5, r2
 800be9a:	d003      	beq.n	800bea4 <__mcmp+0x2c>
 800be9c:	d205      	bcs.n	800beaa <__mcmp+0x32>
 800be9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bea2:	bd30      	pop	{r4, r5, pc}
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	d3f3      	bcc.n	800be90 <__mcmp+0x18>
 800bea8:	e7fb      	b.n	800bea2 <__mcmp+0x2a>
 800beaa:	2001      	movs	r0, #1
 800beac:	e7f9      	b.n	800bea2 <__mcmp+0x2a>
	...

0800beb0 <__mdiff>:
 800beb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	4689      	mov	r9, r1
 800beb6:	4606      	mov	r6, r0
 800beb8:	4611      	mov	r1, r2
 800beba:	4648      	mov	r0, r9
 800bebc:	4614      	mov	r4, r2
 800bebe:	f7ff ffdb 	bl	800be78 <__mcmp>
 800bec2:	1e05      	subs	r5, r0, #0
 800bec4:	d112      	bne.n	800beec <__mdiff+0x3c>
 800bec6:	4629      	mov	r1, r5
 800bec8:	4630      	mov	r0, r6
 800beca:	f7ff fd19 	bl	800b900 <_Balloc>
 800bece:	4602      	mov	r2, r0
 800bed0:	b928      	cbnz	r0, 800bede <__mdiff+0x2e>
 800bed2:	4b3f      	ldr	r3, [pc, #252]	@ (800bfd0 <__mdiff+0x120>)
 800bed4:	f240 2137 	movw	r1, #567	@ 0x237
 800bed8:	483e      	ldr	r0, [pc, #248]	@ (800bfd4 <__mdiff+0x124>)
 800beda:	f001 fe29 	bl	800db30 <__assert_func>
 800bede:	2301      	movs	r3, #1
 800bee0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bee4:	4610      	mov	r0, r2
 800bee6:	b003      	add	sp, #12
 800bee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beec:	bfbc      	itt	lt
 800beee:	464b      	movlt	r3, r9
 800bef0:	46a1      	movlt	r9, r4
 800bef2:	4630      	mov	r0, r6
 800bef4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bef8:	bfba      	itte	lt
 800befa:	461c      	movlt	r4, r3
 800befc:	2501      	movlt	r5, #1
 800befe:	2500      	movge	r5, #0
 800bf00:	f7ff fcfe 	bl	800b900 <_Balloc>
 800bf04:	4602      	mov	r2, r0
 800bf06:	b918      	cbnz	r0, 800bf10 <__mdiff+0x60>
 800bf08:	4b31      	ldr	r3, [pc, #196]	@ (800bfd0 <__mdiff+0x120>)
 800bf0a:	f240 2145 	movw	r1, #581	@ 0x245
 800bf0e:	e7e3      	b.n	800bed8 <__mdiff+0x28>
 800bf10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf14:	6926      	ldr	r6, [r4, #16]
 800bf16:	60c5      	str	r5, [r0, #12]
 800bf18:	f109 0310 	add.w	r3, r9, #16
 800bf1c:	f109 0514 	add.w	r5, r9, #20
 800bf20:	f104 0e14 	add.w	lr, r4, #20
 800bf24:	f100 0b14 	add.w	fp, r0, #20
 800bf28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	46d9      	mov	r9, fp
 800bf34:	f04f 0c00 	mov.w	ip, #0
 800bf38:	9b01      	ldr	r3, [sp, #4]
 800bf3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bf3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf42:	9301      	str	r3, [sp, #4]
 800bf44:	fa1f f38a 	uxth.w	r3, sl
 800bf48:	4619      	mov	r1, r3
 800bf4a:	b283      	uxth	r3, r0
 800bf4c:	1acb      	subs	r3, r1, r3
 800bf4e:	0c00      	lsrs	r0, r0, #16
 800bf50:	4463      	add	r3, ip
 800bf52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bf56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf60:	4576      	cmp	r6, lr
 800bf62:	f849 3b04 	str.w	r3, [r9], #4
 800bf66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf6a:	d8e5      	bhi.n	800bf38 <__mdiff+0x88>
 800bf6c:	1b33      	subs	r3, r6, r4
 800bf6e:	3b15      	subs	r3, #21
 800bf70:	f023 0303 	bic.w	r3, r3, #3
 800bf74:	3415      	adds	r4, #21
 800bf76:	3304      	adds	r3, #4
 800bf78:	42a6      	cmp	r6, r4
 800bf7a:	bf38      	it	cc
 800bf7c:	2304      	movcc	r3, #4
 800bf7e:	441d      	add	r5, r3
 800bf80:	445b      	add	r3, fp
 800bf82:	461e      	mov	r6, r3
 800bf84:	462c      	mov	r4, r5
 800bf86:	4544      	cmp	r4, r8
 800bf88:	d30e      	bcc.n	800bfa8 <__mdiff+0xf8>
 800bf8a:	f108 0103 	add.w	r1, r8, #3
 800bf8e:	1b49      	subs	r1, r1, r5
 800bf90:	f021 0103 	bic.w	r1, r1, #3
 800bf94:	3d03      	subs	r5, #3
 800bf96:	45a8      	cmp	r8, r5
 800bf98:	bf38      	it	cc
 800bf9a:	2100      	movcc	r1, #0
 800bf9c:	440b      	add	r3, r1
 800bf9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfa2:	b191      	cbz	r1, 800bfca <__mdiff+0x11a>
 800bfa4:	6117      	str	r7, [r2, #16]
 800bfa6:	e79d      	b.n	800bee4 <__mdiff+0x34>
 800bfa8:	f854 1b04 	ldr.w	r1, [r4], #4
 800bfac:	46e6      	mov	lr, ip
 800bfae:	0c08      	lsrs	r0, r1, #16
 800bfb0:	fa1c fc81 	uxtah	ip, ip, r1
 800bfb4:	4471      	add	r1, lr
 800bfb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bfba:	b289      	uxth	r1, r1
 800bfbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bfc0:	f846 1b04 	str.w	r1, [r6], #4
 800bfc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfc8:	e7dd      	b.n	800bf86 <__mdiff+0xd6>
 800bfca:	3f01      	subs	r7, #1
 800bfcc:	e7e7      	b.n	800bf9e <__mdiff+0xee>
 800bfce:	bf00      	nop
 800bfd0:	0800ea77 	.word	0x0800ea77
 800bfd4:	0800ea88 	.word	0x0800ea88

0800bfd8 <__ulp>:
 800bfd8:	b082      	sub	sp, #8
 800bfda:	ed8d 0b00 	vstr	d0, [sp]
 800bfde:	9a01      	ldr	r2, [sp, #4]
 800bfe0:	4b0f      	ldr	r3, [pc, #60]	@ (800c020 <__ulp+0x48>)
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	dc08      	bgt.n	800bffe <__ulp+0x26>
 800bfec:	425b      	negs	r3, r3
 800bfee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bff2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bff6:	da04      	bge.n	800c002 <__ulp+0x2a>
 800bff8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bffc:	4113      	asrs	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	e008      	b.n	800c014 <__ulp+0x3c>
 800c002:	f1a2 0314 	sub.w	r3, r2, #20
 800c006:	2b1e      	cmp	r3, #30
 800c008:	bfda      	itte	le
 800c00a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c00e:	40da      	lsrle	r2, r3
 800c010:	2201      	movgt	r2, #1
 800c012:	2300      	movs	r3, #0
 800c014:	4619      	mov	r1, r3
 800c016:	4610      	mov	r0, r2
 800c018:	ec41 0b10 	vmov	d0, r0, r1
 800c01c:	b002      	add	sp, #8
 800c01e:	4770      	bx	lr
 800c020:	7ff00000 	.word	0x7ff00000

0800c024 <__b2d>:
 800c024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c028:	6906      	ldr	r6, [r0, #16]
 800c02a:	f100 0814 	add.w	r8, r0, #20
 800c02e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c032:	1f37      	subs	r7, r6, #4
 800c034:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c038:	4610      	mov	r0, r2
 800c03a:	f7ff fd53 	bl	800bae4 <__hi0bits>
 800c03e:	f1c0 0320 	rsb	r3, r0, #32
 800c042:	280a      	cmp	r0, #10
 800c044:	600b      	str	r3, [r1, #0]
 800c046:	491b      	ldr	r1, [pc, #108]	@ (800c0b4 <__b2d+0x90>)
 800c048:	dc15      	bgt.n	800c076 <__b2d+0x52>
 800c04a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c04e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c052:	45b8      	cmp	r8, r7
 800c054:	ea43 0501 	orr.w	r5, r3, r1
 800c058:	bf34      	ite	cc
 800c05a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c05e:	2300      	movcs	r3, #0
 800c060:	3015      	adds	r0, #21
 800c062:	fa02 f000 	lsl.w	r0, r2, r0
 800c066:	fa23 f30c 	lsr.w	r3, r3, ip
 800c06a:	4303      	orrs	r3, r0
 800c06c:	461c      	mov	r4, r3
 800c06e:	ec45 4b10 	vmov	d0, r4, r5
 800c072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c076:	45b8      	cmp	r8, r7
 800c078:	bf3a      	itte	cc
 800c07a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c07e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c082:	2300      	movcs	r3, #0
 800c084:	380b      	subs	r0, #11
 800c086:	d012      	beq.n	800c0ae <__b2d+0x8a>
 800c088:	f1c0 0120 	rsb	r1, r0, #32
 800c08c:	fa23 f401 	lsr.w	r4, r3, r1
 800c090:	4082      	lsls	r2, r0
 800c092:	4322      	orrs	r2, r4
 800c094:	4547      	cmp	r7, r8
 800c096:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c09a:	bf8c      	ite	hi
 800c09c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c0a0:	2200      	movls	r2, #0
 800c0a2:	4083      	lsls	r3, r0
 800c0a4:	40ca      	lsrs	r2, r1
 800c0a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	e7de      	b.n	800c06c <__b2d+0x48>
 800c0ae:	ea42 0501 	orr.w	r5, r2, r1
 800c0b2:	e7db      	b.n	800c06c <__b2d+0x48>
 800c0b4:	3ff00000 	.word	0x3ff00000

0800c0b8 <__d2b>:
 800c0b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0bc:	460f      	mov	r7, r1
 800c0be:	2101      	movs	r1, #1
 800c0c0:	ec59 8b10 	vmov	r8, r9, d0
 800c0c4:	4616      	mov	r6, r2
 800c0c6:	f7ff fc1b 	bl	800b900 <_Balloc>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	b930      	cbnz	r0, 800c0dc <__d2b+0x24>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	4b23      	ldr	r3, [pc, #140]	@ (800c160 <__d2b+0xa8>)
 800c0d2:	4824      	ldr	r0, [pc, #144]	@ (800c164 <__d2b+0xac>)
 800c0d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c0d8:	f001 fd2a 	bl	800db30 <__assert_func>
 800c0dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0e4:	b10d      	cbz	r5, 800c0ea <__d2b+0x32>
 800c0e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	f1b8 0300 	subs.w	r3, r8, #0
 800c0f0:	d023      	beq.n	800c13a <__d2b+0x82>
 800c0f2:	4668      	mov	r0, sp
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	f7ff fd14 	bl	800bb22 <__lo0bits>
 800c0fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0fe:	b1d0      	cbz	r0, 800c136 <__d2b+0x7e>
 800c100:	f1c0 0320 	rsb	r3, r0, #32
 800c104:	fa02 f303 	lsl.w	r3, r2, r3
 800c108:	430b      	orrs	r3, r1
 800c10a:	40c2      	lsrs	r2, r0
 800c10c:	6163      	str	r3, [r4, #20]
 800c10e:	9201      	str	r2, [sp, #4]
 800c110:	9b01      	ldr	r3, [sp, #4]
 800c112:	61a3      	str	r3, [r4, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	bf0c      	ite	eq
 800c118:	2201      	moveq	r2, #1
 800c11a:	2202      	movne	r2, #2
 800c11c:	6122      	str	r2, [r4, #16]
 800c11e:	b1a5      	cbz	r5, 800c14a <__d2b+0x92>
 800c120:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c124:	4405      	add	r5, r0
 800c126:	603d      	str	r5, [r7, #0]
 800c128:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c12c:	6030      	str	r0, [r6, #0]
 800c12e:	4620      	mov	r0, r4
 800c130:	b003      	add	sp, #12
 800c132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c136:	6161      	str	r1, [r4, #20]
 800c138:	e7ea      	b.n	800c110 <__d2b+0x58>
 800c13a:	a801      	add	r0, sp, #4
 800c13c:	f7ff fcf1 	bl	800bb22 <__lo0bits>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	6163      	str	r3, [r4, #20]
 800c144:	3020      	adds	r0, #32
 800c146:	2201      	movs	r2, #1
 800c148:	e7e8      	b.n	800c11c <__d2b+0x64>
 800c14a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c14e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c152:	6038      	str	r0, [r7, #0]
 800c154:	6918      	ldr	r0, [r3, #16]
 800c156:	f7ff fcc5 	bl	800bae4 <__hi0bits>
 800c15a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c15e:	e7e5      	b.n	800c12c <__d2b+0x74>
 800c160:	0800ea77 	.word	0x0800ea77
 800c164:	0800ea88 	.word	0x0800ea88

0800c168 <__ratio>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	b085      	sub	sp, #20
 800c16e:	e9cd 1000 	strd	r1, r0, [sp]
 800c172:	a902      	add	r1, sp, #8
 800c174:	f7ff ff56 	bl	800c024 <__b2d>
 800c178:	9800      	ldr	r0, [sp, #0]
 800c17a:	a903      	add	r1, sp, #12
 800c17c:	ec55 4b10 	vmov	r4, r5, d0
 800c180:	f7ff ff50 	bl	800c024 <__b2d>
 800c184:	9b01      	ldr	r3, [sp, #4]
 800c186:	6919      	ldr	r1, [r3, #16]
 800c188:	9b00      	ldr	r3, [sp, #0]
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	1ac9      	subs	r1, r1, r3
 800c18e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c192:	1a9b      	subs	r3, r3, r2
 800c194:	ec5b ab10 	vmov	sl, fp, d0
 800c198:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	bfce      	itee	gt
 800c1a0:	462a      	movgt	r2, r5
 800c1a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1a6:	465a      	movle	r2, fp
 800c1a8:	462f      	mov	r7, r5
 800c1aa:	46d9      	mov	r9, fp
 800c1ac:	bfcc      	ite	gt
 800c1ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c1b6:	464b      	mov	r3, r9
 800c1b8:	4652      	mov	r2, sl
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4639      	mov	r1, r7
 800c1be:	f7f4 fb4d 	bl	800085c <__aeabi_ddiv>
 800c1c2:	ec41 0b10 	vmov	d0, r0, r1
 800c1c6:	b005      	add	sp, #20
 800c1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1cc <__copybits>:
 800c1cc:	3901      	subs	r1, #1
 800c1ce:	b570      	push	{r4, r5, r6, lr}
 800c1d0:	1149      	asrs	r1, r1, #5
 800c1d2:	6914      	ldr	r4, [r2, #16]
 800c1d4:	3101      	adds	r1, #1
 800c1d6:	f102 0314 	add.w	r3, r2, #20
 800c1da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1e2:	1f05      	subs	r5, r0, #4
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d30c      	bcc.n	800c202 <__copybits+0x36>
 800c1e8:	1aa3      	subs	r3, r4, r2
 800c1ea:	3b11      	subs	r3, #17
 800c1ec:	f023 0303 	bic.w	r3, r3, #3
 800c1f0:	3211      	adds	r2, #17
 800c1f2:	42a2      	cmp	r2, r4
 800c1f4:	bf88      	it	hi
 800c1f6:	2300      	movhi	r3, #0
 800c1f8:	4418      	add	r0, r3
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	4288      	cmp	r0, r1
 800c1fe:	d305      	bcc.n	800c20c <__copybits+0x40>
 800c200:	bd70      	pop	{r4, r5, r6, pc}
 800c202:	f853 6b04 	ldr.w	r6, [r3], #4
 800c206:	f845 6f04 	str.w	r6, [r5, #4]!
 800c20a:	e7eb      	b.n	800c1e4 <__copybits+0x18>
 800c20c:	f840 3b04 	str.w	r3, [r0], #4
 800c210:	e7f4      	b.n	800c1fc <__copybits+0x30>

0800c212 <__any_on>:
 800c212:	f100 0214 	add.w	r2, r0, #20
 800c216:	6900      	ldr	r0, [r0, #16]
 800c218:	114b      	asrs	r3, r1, #5
 800c21a:	4298      	cmp	r0, r3
 800c21c:	b510      	push	{r4, lr}
 800c21e:	db11      	blt.n	800c244 <__any_on+0x32>
 800c220:	dd0a      	ble.n	800c238 <__any_on+0x26>
 800c222:	f011 011f 	ands.w	r1, r1, #31
 800c226:	d007      	beq.n	800c238 <__any_on+0x26>
 800c228:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c22c:	fa24 f001 	lsr.w	r0, r4, r1
 800c230:	fa00 f101 	lsl.w	r1, r0, r1
 800c234:	428c      	cmp	r4, r1
 800c236:	d10b      	bne.n	800c250 <__any_on+0x3e>
 800c238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d803      	bhi.n	800c248 <__any_on+0x36>
 800c240:	2000      	movs	r0, #0
 800c242:	bd10      	pop	{r4, pc}
 800c244:	4603      	mov	r3, r0
 800c246:	e7f7      	b.n	800c238 <__any_on+0x26>
 800c248:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c24c:	2900      	cmp	r1, #0
 800c24e:	d0f5      	beq.n	800c23c <__any_on+0x2a>
 800c250:	2001      	movs	r0, #1
 800c252:	e7f6      	b.n	800c242 <__any_on+0x30>

0800c254 <sulp>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	4604      	mov	r4, r0
 800c258:	460d      	mov	r5, r1
 800c25a:	ec45 4b10 	vmov	d0, r4, r5
 800c25e:	4616      	mov	r6, r2
 800c260:	f7ff feba 	bl	800bfd8 <__ulp>
 800c264:	ec51 0b10 	vmov	r0, r1, d0
 800c268:	b17e      	cbz	r6, 800c28a <sulp+0x36>
 800c26a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c26e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c272:	2b00      	cmp	r3, #0
 800c274:	dd09      	ble.n	800c28a <sulp+0x36>
 800c276:	051b      	lsls	r3, r3, #20
 800c278:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c27c:	2400      	movs	r4, #0
 800c27e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c282:	4622      	mov	r2, r4
 800c284:	462b      	mov	r3, r5
 800c286:	f7f4 f9bf 	bl	8000608 <__aeabi_dmul>
 800c28a:	ec41 0b10 	vmov	d0, r0, r1
 800c28e:	bd70      	pop	{r4, r5, r6, pc}

0800c290 <_strtod_l>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	b09f      	sub	sp, #124	@ 0x7c
 800c296:	460c      	mov	r4, r1
 800c298:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c29a:	2200      	movs	r2, #0
 800c29c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c29e:	9005      	str	r0, [sp, #20]
 800c2a0:	f04f 0a00 	mov.w	sl, #0
 800c2a4:	f04f 0b00 	mov.w	fp, #0
 800c2a8:	460a      	mov	r2, r1
 800c2aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2ac:	7811      	ldrb	r1, [r2, #0]
 800c2ae:	292b      	cmp	r1, #43	@ 0x2b
 800c2b0:	d04a      	beq.n	800c348 <_strtod_l+0xb8>
 800c2b2:	d838      	bhi.n	800c326 <_strtod_l+0x96>
 800c2b4:	290d      	cmp	r1, #13
 800c2b6:	d832      	bhi.n	800c31e <_strtod_l+0x8e>
 800c2b8:	2908      	cmp	r1, #8
 800c2ba:	d832      	bhi.n	800c322 <_strtod_l+0x92>
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d03b      	beq.n	800c338 <_strtod_l+0xa8>
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c2c6:	782a      	ldrb	r2, [r5, #0]
 800c2c8:	2a30      	cmp	r2, #48	@ 0x30
 800c2ca:	f040 80b2 	bne.w	800c432 <_strtod_l+0x1a2>
 800c2ce:	786a      	ldrb	r2, [r5, #1]
 800c2d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c2d4:	2a58      	cmp	r2, #88	@ 0x58
 800c2d6:	d16e      	bne.n	800c3b6 <_strtod_l+0x126>
 800c2d8:	9302      	str	r3, [sp, #8]
 800c2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	ab1a      	add	r3, sp, #104	@ 0x68
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	4a8f      	ldr	r2, [pc, #572]	@ (800c520 <_strtod_l+0x290>)
 800c2e4:	9805      	ldr	r0, [sp, #20]
 800c2e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c2e8:	a919      	add	r1, sp, #100	@ 0x64
 800c2ea:	f001 fcbb 	bl	800dc64 <__gethex>
 800c2ee:	f010 060f 	ands.w	r6, r0, #15
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	d005      	beq.n	800c302 <_strtod_l+0x72>
 800c2f6:	2e06      	cmp	r6, #6
 800c2f8:	d128      	bne.n	800c34c <_strtod_l+0xbc>
 800c2fa:	3501      	adds	r5, #1
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800c300:	930e      	str	r3, [sp, #56]	@ 0x38
 800c302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c304:	2b00      	cmp	r3, #0
 800c306:	f040 858e 	bne.w	800ce26 <_strtod_l+0xb96>
 800c30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c30c:	b1cb      	cbz	r3, 800c342 <_strtod_l+0xb2>
 800c30e:	4652      	mov	r2, sl
 800c310:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c314:	ec43 2b10 	vmov	d0, r2, r3
 800c318:	b01f      	add	sp, #124	@ 0x7c
 800c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31e:	2920      	cmp	r1, #32
 800c320:	d1ce      	bne.n	800c2c0 <_strtod_l+0x30>
 800c322:	3201      	adds	r2, #1
 800c324:	e7c1      	b.n	800c2aa <_strtod_l+0x1a>
 800c326:	292d      	cmp	r1, #45	@ 0x2d
 800c328:	d1ca      	bne.n	800c2c0 <_strtod_l+0x30>
 800c32a:	2101      	movs	r1, #1
 800c32c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c32e:	1c51      	adds	r1, r2, #1
 800c330:	9119      	str	r1, [sp, #100]	@ 0x64
 800c332:	7852      	ldrb	r2, [r2, #1]
 800c334:	2a00      	cmp	r2, #0
 800c336:	d1c5      	bne.n	800c2c4 <_strtod_l+0x34>
 800c338:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c33a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f040 8570 	bne.w	800ce22 <_strtod_l+0xb92>
 800c342:	4652      	mov	r2, sl
 800c344:	465b      	mov	r3, fp
 800c346:	e7e5      	b.n	800c314 <_strtod_l+0x84>
 800c348:	2100      	movs	r1, #0
 800c34a:	e7ef      	b.n	800c32c <_strtod_l+0x9c>
 800c34c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c34e:	b13a      	cbz	r2, 800c360 <_strtod_l+0xd0>
 800c350:	2135      	movs	r1, #53	@ 0x35
 800c352:	a81c      	add	r0, sp, #112	@ 0x70
 800c354:	f7ff ff3a 	bl	800c1cc <__copybits>
 800c358:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c35a:	9805      	ldr	r0, [sp, #20]
 800c35c:	f7ff fb10 	bl	800b980 <_Bfree>
 800c360:	3e01      	subs	r6, #1
 800c362:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c364:	2e04      	cmp	r6, #4
 800c366:	d806      	bhi.n	800c376 <_strtod_l+0xe6>
 800c368:	e8df f006 	tbb	[pc, r6]
 800c36c:	201d0314 	.word	0x201d0314
 800c370:	14          	.byte	0x14
 800c371:	00          	.byte	0x00
 800c372:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c376:	05e1      	lsls	r1, r4, #23
 800c378:	bf48      	it	mi
 800c37a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c37e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c382:	0d1b      	lsrs	r3, r3, #20
 800c384:	051b      	lsls	r3, r3, #20
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1bb      	bne.n	800c302 <_strtod_l+0x72>
 800c38a:	f7fe fb2b 	bl	800a9e4 <__errno>
 800c38e:	2322      	movs	r3, #34	@ 0x22
 800c390:	6003      	str	r3, [r0, #0]
 800c392:	e7b6      	b.n	800c302 <_strtod_l+0x72>
 800c394:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c398:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c39c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c3a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c3a4:	e7e7      	b.n	800c376 <_strtod_l+0xe6>
 800c3a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c528 <_strtod_l+0x298>
 800c3aa:	e7e4      	b.n	800c376 <_strtod_l+0xe6>
 800c3ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c3b0:	f04f 3aff 	mov.w	sl, #4294967295
 800c3b4:	e7df      	b.n	800c376 <_strtod_l+0xe6>
 800c3b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3b8:	1c5a      	adds	r2, r3, #1
 800c3ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3bc:	785b      	ldrb	r3, [r3, #1]
 800c3be:	2b30      	cmp	r3, #48	@ 0x30
 800c3c0:	d0f9      	beq.n	800c3b6 <_strtod_l+0x126>
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d09d      	beq.n	800c302 <_strtod_l+0x72>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	2700      	movs	r7, #0
 800c3ca:	9308      	str	r3, [sp, #32]
 800c3cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3d0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c3d2:	46b9      	mov	r9, r7
 800c3d4:	220a      	movs	r2, #10
 800c3d6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c3d8:	7805      	ldrb	r5, [r0, #0]
 800c3da:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c3de:	b2d9      	uxtb	r1, r3
 800c3e0:	2909      	cmp	r1, #9
 800c3e2:	d928      	bls.n	800c436 <_strtod_l+0x1a6>
 800c3e4:	494f      	ldr	r1, [pc, #316]	@ (800c524 <_strtod_l+0x294>)
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f001 fb67 	bl	800daba <strncmp>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d032      	beq.n	800c456 <_strtod_l+0x1c6>
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	462a      	mov	r2, r5
 800c3f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3f6:	464d      	mov	r5, r9
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2a65      	cmp	r2, #101	@ 0x65
 800c3fc:	d001      	beq.n	800c402 <_strtod_l+0x172>
 800c3fe:	2a45      	cmp	r2, #69	@ 0x45
 800c400:	d114      	bne.n	800c42c <_strtod_l+0x19c>
 800c402:	b91d      	cbnz	r5, 800c40c <_strtod_l+0x17c>
 800c404:	9a08      	ldr	r2, [sp, #32]
 800c406:	4302      	orrs	r2, r0
 800c408:	d096      	beq.n	800c338 <_strtod_l+0xa8>
 800c40a:	2500      	movs	r5, #0
 800c40c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c40e:	1c62      	adds	r2, r4, #1
 800c410:	9219      	str	r2, [sp, #100]	@ 0x64
 800c412:	7862      	ldrb	r2, [r4, #1]
 800c414:	2a2b      	cmp	r2, #43	@ 0x2b
 800c416:	d07a      	beq.n	800c50e <_strtod_l+0x27e>
 800c418:	2a2d      	cmp	r2, #45	@ 0x2d
 800c41a:	d07e      	beq.n	800c51a <_strtod_l+0x28a>
 800c41c:	f04f 0c00 	mov.w	ip, #0
 800c420:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c424:	2909      	cmp	r1, #9
 800c426:	f240 8085 	bls.w	800c534 <_strtod_l+0x2a4>
 800c42a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c42c:	f04f 0800 	mov.w	r8, #0
 800c430:	e0a5      	b.n	800c57e <_strtod_l+0x2ee>
 800c432:	2300      	movs	r3, #0
 800c434:	e7c8      	b.n	800c3c8 <_strtod_l+0x138>
 800c436:	f1b9 0f08 	cmp.w	r9, #8
 800c43a:	bfd8      	it	le
 800c43c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c43e:	f100 0001 	add.w	r0, r0, #1
 800c442:	bfda      	itte	le
 800c444:	fb02 3301 	mlale	r3, r2, r1, r3
 800c448:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c44a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c44e:	f109 0901 	add.w	r9, r9, #1
 800c452:	9019      	str	r0, [sp, #100]	@ 0x64
 800c454:	e7bf      	b.n	800c3d6 <_strtod_l+0x146>
 800c456:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c45c:	785a      	ldrb	r2, [r3, #1]
 800c45e:	f1b9 0f00 	cmp.w	r9, #0
 800c462:	d03b      	beq.n	800c4dc <_strtod_l+0x24c>
 800c464:	900a      	str	r0, [sp, #40]	@ 0x28
 800c466:	464d      	mov	r5, r9
 800c468:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c46c:	2b09      	cmp	r3, #9
 800c46e:	d912      	bls.n	800c496 <_strtod_l+0x206>
 800c470:	2301      	movs	r3, #1
 800c472:	e7c2      	b.n	800c3fa <_strtod_l+0x16a>
 800c474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	9219      	str	r2, [sp, #100]	@ 0x64
 800c47a:	785a      	ldrb	r2, [r3, #1]
 800c47c:	3001      	adds	r0, #1
 800c47e:	2a30      	cmp	r2, #48	@ 0x30
 800c480:	d0f8      	beq.n	800c474 <_strtod_l+0x1e4>
 800c482:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c486:	2b08      	cmp	r3, #8
 800c488:	f200 84d2 	bhi.w	800ce30 <_strtod_l+0xba0>
 800c48c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c48e:	900a      	str	r0, [sp, #40]	@ 0x28
 800c490:	2000      	movs	r0, #0
 800c492:	930c      	str	r3, [sp, #48]	@ 0x30
 800c494:	4605      	mov	r5, r0
 800c496:	3a30      	subs	r2, #48	@ 0x30
 800c498:	f100 0301 	add.w	r3, r0, #1
 800c49c:	d018      	beq.n	800c4d0 <_strtod_l+0x240>
 800c49e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4a0:	4419      	add	r1, r3
 800c4a2:	910a      	str	r1, [sp, #40]	@ 0x28
 800c4a4:	462e      	mov	r6, r5
 800c4a6:	f04f 0e0a 	mov.w	lr, #10
 800c4aa:	1c71      	adds	r1, r6, #1
 800c4ac:	eba1 0c05 	sub.w	ip, r1, r5
 800c4b0:	4563      	cmp	r3, ip
 800c4b2:	dc15      	bgt.n	800c4e0 <_strtod_l+0x250>
 800c4b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c4b8:	182b      	adds	r3, r5, r0
 800c4ba:	2b08      	cmp	r3, #8
 800c4bc:	f105 0501 	add.w	r5, r5, #1
 800c4c0:	4405      	add	r5, r0
 800c4c2:	dc1a      	bgt.n	800c4fa <_strtod_l+0x26a>
 800c4c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4c6:	230a      	movs	r3, #10
 800c4c8:	fb03 2301 	mla	r3, r3, r1, r2
 800c4cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4d2:	1c51      	adds	r1, r2, #1
 800c4d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4d6:	7852      	ldrb	r2, [r2, #1]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	e7c5      	b.n	800c468 <_strtod_l+0x1d8>
 800c4dc:	4648      	mov	r0, r9
 800c4de:	e7ce      	b.n	800c47e <_strtod_l+0x1ee>
 800c4e0:	2e08      	cmp	r6, #8
 800c4e2:	dc05      	bgt.n	800c4f0 <_strtod_l+0x260>
 800c4e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c4e6:	fb0e f606 	mul.w	r6, lr, r6
 800c4ea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c4ec:	460e      	mov	r6, r1
 800c4ee:	e7dc      	b.n	800c4aa <_strtod_l+0x21a>
 800c4f0:	2910      	cmp	r1, #16
 800c4f2:	bfd8      	it	le
 800c4f4:	fb0e f707 	mulle.w	r7, lr, r7
 800c4f8:	e7f8      	b.n	800c4ec <_strtod_l+0x25c>
 800c4fa:	2b0f      	cmp	r3, #15
 800c4fc:	bfdc      	itt	le
 800c4fe:	230a      	movle	r3, #10
 800c500:	fb03 2707 	mlale	r7, r3, r7, r2
 800c504:	e7e3      	b.n	800c4ce <_strtod_l+0x23e>
 800c506:	2300      	movs	r3, #0
 800c508:	930a      	str	r3, [sp, #40]	@ 0x28
 800c50a:	2301      	movs	r3, #1
 800c50c:	e77a      	b.n	800c404 <_strtod_l+0x174>
 800c50e:	f04f 0c00 	mov.w	ip, #0
 800c512:	1ca2      	adds	r2, r4, #2
 800c514:	9219      	str	r2, [sp, #100]	@ 0x64
 800c516:	78a2      	ldrb	r2, [r4, #2]
 800c518:	e782      	b.n	800c420 <_strtod_l+0x190>
 800c51a:	f04f 0c01 	mov.w	ip, #1
 800c51e:	e7f8      	b.n	800c512 <_strtod_l+0x282>
 800c520:	0800ecc4 	.word	0x0800ecc4
 800c524:	0800eae1 	.word	0x0800eae1
 800c528:	7ff00000 	.word	0x7ff00000
 800c52c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c52e:	1c51      	adds	r1, r2, #1
 800c530:	9119      	str	r1, [sp, #100]	@ 0x64
 800c532:	7852      	ldrb	r2, [r2, #1]
 800c534:	2a30      	cmp	r2, #48	@ 0x30
 800c536:	d0f9      	beq.n	800c52c <_strtod_l+0x29c>
 800c538:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c53c:	2908      	cmp	r1, #8
 800c53e:	f63f af75 	bhi.w	800c42c <_strtod_l+0x19c>
 800c542:	3a30      	subs	r2, #48	@ 0x30
 800c544:	9209      	str	r2, [sp, #36]	@ 0x24
 800c546:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c548:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c54a:	f04f 080a 	mov.w	r8, #10
 800c54e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c550:	1c56      	adds	r6, r2, #1
 800c552:	9619      	str	r6, [sp, #100]	@ 0x64
 800c554:	7852      	ldrb	r2, [r2, #1]
 800c556:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c55a:	f1be 0f09 	cmp.w	lr, #9
 800c55e:	d939      	bls.n	800c5d4 <_strtod_l+0x344>
 800c560:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c562:	1a76      	subs	r6, r6, r1
 800c564:	2e08      	cmp	r6, #8
 800c566:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c56a:	dc03      	bgt.n	800c574 <_strtod_l+0x2e4>
 800c56c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c56e:	4588      	cmp	r8, r1
 800c570:	bfa8      	it	ge
 800c572:	4688      	movge	r8, r1
 800c574:	f1bc 0f00 	cmp.w	ip, #0
 800c578:	d001      	beq.n	800c57e <_strtod_l+0x2ee>
 800c57a:	f1c8 0800 	rsb	r8, r8, #0
 800c57e:	2d00      	cmp	r5, #0
 800c580:	d14e      	bne.n	800c620 <_strtod_l+0x390>
 800c582:	9908      	ldr	r1, [sp, #32]
 800c584:	4308      	orrs	r0, r1
 800c586:	f47f aebc 	bne.w	800c302 <_strtod_l+0x72>
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f47f aed4 	bne.w	800c338 <_strtod_l+0xa8>
 800c590:	2a69      	cmp	r2, #105	@ 0x69
 800c592:	d028      	beq.n	800c5e6 <_strtod_l+0x356>
 800c594:	dc25      	bgt.n	800c5e2 <_strtod_l+0x352>
 800c596:	2a49      	cmp	r2, #73	@ 0x49
 800c598:	d025      	beq.n	800c5e6 <_strtod_l+0x356>
 800c59a:	2a4e      	cmp	r2, #78	@ 0x4e
 800c59c:	f47f aecc 	bne.w	800c338 <_strtod_l+0xa8>
 800c5a0:	499a      	ldr	r1, [pc, #616]	@ (800c80c <_strtod_l+0x57c>)
 800c5a2:	a819      	add	r0, sp, #100	@ 0x64
 800c5a4:	f001 fd80 	bl	800e0a8 <__match>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	f43f aec5 	beq.w	800c338 <_strtod_l+0xa8>
 800c5ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b28      	cmp	r3, #40	@ 0x28
 800c5b4:	d12e      	bne.n	800c614 <_strtod_l+0x384>
 800c5b6:	4996      	ldr	r1, [pc, #600]	@ (800c810 <_strtod_l+0x580>)
 800c5b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5ba:	a819      	add	r0, sp, #100	@ 0x64
 800c5bc:	f001 fd88 	bl	800e0d0 <__hexnan>
 800c5c0:	2805      	cmp	r0, #5
 800c5c2:	d127      	bne.n	800c614 <_strtod_l+0x384>
 800c5c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c5c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c5ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c5ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c5d2:	e696      	b.n	800c302 <_strtod_l+0x72>
 800c5d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5d6:	fb08 2101 	mla	r1, r8, r1, r2
 800c5da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c5de:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5e0:	e7b5      	b.n	800c54e <_strtod_l+0x2be>
 800c5e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800c5e4:	e7da      	b.n	800c59c <_strtod_l+0x30c>
 800c5e6:	498b      	ldr	r1, [pc, #556]	@ (800c814 <_strtod_l+0x584>)
 800c5e8:	a819      	add	r0, sp, #100	@ 0x64
 800c5ea:	f001 fd5d 	bl	800e0a8 <__match>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f43f aea2 	beq.w	800c338 <_strtod_l+0xa8>
 800c5f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5f6:	4988      	ldr	r1, [pc, #544]	@ (800c818 <_strtod_l+0x588>)
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	a819      	add	r0, sp, #100	@ 0x64
 800c5fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800c5fe:	f001 fd53 	bl	800e0a8 <__match>
 800c602:	b910      	cbnz	r0, 800c60a <_strtod_l+0x37a>
 800c604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c606:	3301      	adds	r3, #1
 800c608:	9319      	str	r3, [sp, #100]	@ 0x64
 800c60a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c828 <_strtod_l+0x598>
 800c60e:	f04f 0a00 	mov.w	sl, #0
 800c612:	e676      	b.n	800c302 <_strtod_l+0x72>
 800c614:	4881      	ldr	r0, [pc, #516]	@ (800c81c <_strtod_l+0x58c>)
 800c616:	f001 fa83 	bl	800db20 <nan>
 800c61a:	ec5b ab10 	vmov	sl, fp, d0
 800c61e:	e670      	b.n	800c302 <_strtod_l+0x72>
 800c620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c622:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c624:	eba8 0303 	sub.w	r3, r8, r3
 800c628:	f1b9 0f00 	cmp.w	r9, #0
 800c62c:	bf08      	it	eq
 800c62e:	46a9      	moveq	r9, r5
 800c630:	2d10      	cmp	r5, #16
 800c632:	9309      	str	r3, [sp, #36]	@ 0x24
 800c634:	462c      	mov	r4, r5
 800c636:	bfa8      	it	ge
 800c638:	2410      	movge	r4, #16
 800c63a:	f7f3 ff6b 	bl	8000514 <__aeabi_ui2d>
 800c63e:	2d09      	cmp	r5, #9
 800c640:	4682      	mov	sl, r0
 800c642:	468b      	mov	fp, r1
 800c644:	dc13      	bgt.n	800c66e <_strtod_l+0x3de>
 800c646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f43f ae5a 	beq.w	800c302 <_strtod_l+0x72>
 800c64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c650:	dd78      	ble.n	800c744 <_strtod_l+0x4b4>
 800c652:	2b16      	cmp	r3, #22
 800c654:	dc5f      	bgt.n	800c716 <_strtod_l+0x486>
 800c656:	4972      	ldr	r1, [pc, #456]	@ (800c820 <_strtod_l+0x590>)
 800c658:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c660:	4652      	mov	r2, sl
 800c662:	465b      	mov	r3, fp
 800c664:	f7f3 ffd0 	bl	8000608 <__aeabi_dmul>
 800c668:	4682      	mov	sl, r0
 800c66a:	468b      	mov	fp, r1
 800c66c:	e649      	b.n	800c302 <_strtod_l+0x72>
 800c66e:	4b6c      	ldr	r3, [pc, #432]	@ (800c820 <_strtod_l+0x590>)
 800c670:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c674:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c678:	f7f3 ffc6 	bl	8000608 <__aeabi_dmul>
 800c67c:	4682      	mov	sl, r0
 800c67e:	4638      	mov	r0, r7
 800c680:	468b      	mov	fp, r1
 800c682:	f7f3 ff47 	bl	8000514 <__aeabi_ui2d>
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	4650      	mov	r0, sl
 800c68c:	4659      	mov	r1, fp
 800c68e:	f7f3 fe05 	bl	800029c <__adddf3>
 800c692:	2d0f      	cmp	r5, #15
 800c694:	4682      	mov	sl, r0
 800c696:	468b      	mov	fp, r1
 800c698:	ddd5      	ble.n	800c646 <_strtod_l+0x3b6>
 800c69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c69c:	1b2c      	subs	r4, r5, r4
 800c69e:	441c      	add	r4, r3
 800c6a0:	2c00      	cmp	r4, #0
 800c6a2:	f340 8093 	ble.w	800c7cc <_strtod_l+0x53c>
 800c6a6:	f014 030f 	ands.w	r3, r4, #15
 800c6aa:	d00a      	beq.n	800c6c2 <_strtod_l+0x432>
 800c6ac:	495c      	ldr	r1, [pc, #368]	@ (800c820 <_strtod_l+0x590>)
 800c6ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	465b      	mov	r3, fp
 800c6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ba:	f7f3 ffa5 	bl	8000608 <__aeabi_dmul>
 800c6be:	4682      	mov	sl, r0
 800c6c0:	468b      	mov	fp, r1
 800c6c2:	f034 040f 	bics.w	r4, r4, #15
 800c6c6:	d073      	beq.n	800c7b0 <_strtod_l+0x520>
 800c6c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c6cc:	dd49      	ble.n	800c762 <_strtod_l+0x4d2>
 800c6ce:	2400      	movs	r4, #0
 800c6d0:	46a0      	mov	r8, r4
 800c6d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c6d4:	46a1      	mov	r9, r4
 800c6d6:	9a05      	ldr	r2, [sp, #20]
 800c6d8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c828 <_strtod_l+0x598>
 800c6dc:	2322      	movs	r3, #34	@ 0x22
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	f04f 0a00 	mov.w	sl, #0
 800c6e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f43f ae0b 	beq.w	800c302 <_strtod_l+0x72>
 800c6ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6ee:	9805      	ldr	r0, [sp, #20]
 800c6f0:	f7ff f946 	bl	800b980 <_Bfree>
 800c6f4:	9805      	ldr	r0, [sp, #20]
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	f7ff f942 	bl	800b980 <_Bfree>
 800c6fc:	9805      	ldr	r0, [sp, #20]
 800c6fe:	4641      	mov	r1, r8
 800c700:	f7ff f93e 	bl	800b980 <_Bfree>
 800c704:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c706:	9805      	ldr	r0, [sp, #20]
 800c708:	f7ff f93a 	bl	800b980 <_Bfree>
 800c70c:	9805      	ldr	r0, [sp, #20]
 800c70e:	4621      	mov	r1, r4
 800c710:	f7ff f936 	bl	800b980 <_Bfree>
 800c714:	e5f5      	b.n	800c302 <_strtod_l+0x72>
 800c716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c718:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c71c:	4293      	cmp	r3, r2
 800c71e:	dbbc      	blt.n	800c69a <_strtod_l+0x40a>
 800c720:	4c3f      	ldr	r4, [pc, #252]	@ (800c820 <_strtod_l+0x590>)
 800c722:	f1c5 050f 	rsb	r5, r5, #15
 800c726:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c72a:	4652      	mov	r2, sl
 800c72c:	465b      	mov	r3, fp
 800c72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c732:	f7f3 ff69 	bl	8000608 <__aeabi_dmul>
 800c736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c738:	1b5d      	subs	r5, r3, r5
 800c73a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c73e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c742:	e78f      	b.n	800c664 <_strtod_l+0x3d4>
 800c744:	3316      	adds	r3, #22
 800c746:	dba8      	blt.n	800c69a <_strtod_l+0x40a>
 800c748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c74a:	eba3 0808 	sub.w	r8, r3, r8
 800c74e:	4b34      	ldr	r3, [pc, #208]	@ (800c820 <_strtod_l+0x590>)
 800c750:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c754:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c758:	4650      	mov	r0, sl
 800c75a:	4659      	mov	r1, fp
 800c75c:	f7f4 f87e 	bl	800085c <__aeabi_ddiv>
 800c760:	e782      	b.n	800c668 <_strtod_l+0x3d8>
 800c762:	2300      	movs	r3, #0
 800c764:	4f2f      	ldr	r7, [pc, #188]	@ (800c824 <_strtod_l+0x594>)
 800c766:	1124      	asrs	r4, r4, #4
 800c768:	4650      	mov	r0, sl
 800c76a:	4659      	mov	r1, fp
 800c76c:	461e      	mov	r6, r3
 800c76e:	2c01      	cmp	r4, #1
 800c770:	dc21      	bgt.n	800c7b6 <_strtod_l+0x526>
 800c772:	b10b      	cbz	r3, 800c778 <_strtod_l+0x4e8>
 800c774:	4682      	mov	sl, r0
 800c776:	468b      	mov	fp, r1
 800c778:	492a      	ldr	r1, [pc, #168]	@ (800c824 <_strtod_l+0x594>)
 800c77a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c77e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c782:	4652      	mov	r2, sl
 800c784:	465b      	mov	r3, fp
 800c786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c78a:	f7f3 ff3d 	bl	8000608 <__aeabi_dmul>
 800c78e:	4b26      	ldr	r3, [pc, #152]	@ (800c828 <_strtod_l+0x598>)
 800c790:	460a      	mov	r2, r1
 800c792:	400b      	ands	r3, r1
 800c794:	4925      	ldr	r1, [pc, #148]	@ (800c82c <_strtod_l+0x59c>)
 800c796:	428b      	cmp	r3, r1
 800c798:	4682      	mov	sl, r0
 800c79a:	d898      	bhi.n	800c6ce <_strtod_l+0x43e>
 800c79c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c7a0:	428b      	cmp	r3, r1
 800c7a2:	bf86      	itte	hi
 800c7a4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c830 <_strtod_l+0x5a0>
 800c7a8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c7ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	9308      	str	r3, [sp, #32]
 800c7b4:	e076      	b.n	800c8a4 <_strtod_l+0x614>
 800c7b6:	07e2      	lsls	r2, r4, #31
 800c7b8:	d504      	bpl.n	800c7c4 <_strtod_l+0x534>
 800c7ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7be:	f7f3 ff23 	bl	8000608 <__aeabi_dmul>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	3601      	adds	r6, #1
 800c7c6:	1064      	asrs	r4, r4, #1
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	e7d0      	b.n	800c76e <_strtod_l+0x4de>
 800c7cc:	d0f0      	beq.n	800c7b0 <_strtod_l+0x520>
 800c7ce:	4264      	negs	r4, r4
 800c7d0:	f014 020f 	ands.w	r2, r4, #15
 800c7d4:	d00a      	beq.n	800c7ec <_strtod_l+0x55c>
 800c7d6:	4b12      	ldr	r3, [pc, #72]	@ (800c820 <_strtod_l+0x590>)
 800c7d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7dc:	4650      	mov	r0, sl
 800c7de:	4659      	mov	r1, fp
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	f7f4 f83a 	bl	800085c <__aeabi_ddiv>
 800c7e8:	4682      	mov	sl, r0
 800c7ea:	468b      	mov	fp, r1
 800c7ec:	1124      	asrs	r4, r4, #4
 800c7ee:	d0df      	beq.n	800c7b0 <_strtod_l+0x520>
 800c7f0:	2c1f      	cmp	r4, #31
 800c7f2:	dd1f      	ble.n	800c834 <_strtod_l+0x5a4>
 800c7f4:	2400      	movs	r4, #0
 800c7f6:	46a0      	mov	r8, r4
 800c7f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c7fa:	46a1      	mov	r9, r4
 800c7fc:	9a05      	ldr	r2, [sp, #20]
 800c7fe:	2322      	movs	r3, #34	@ 0x22
 800c800:	f04f 0a00 	mov.w	sl, #0
 800c804:	f04f 0b00 	mov.w	fp, #0
 800c808:	6013      	str	r3, [r2, #0]
 800c80a:	e76b      	b.n	800c6e4 <_strtod_l+0x454>
 800c80c:	0800e9d1 	.word	0x0800e9d1
 800c810:	0800ecb0 	.word	0x0800ecb0
 800c814:	0800e9c9 	.word	0x0800e9c9
 800c818:	0800e9fe 	.word	0x0800e9fe
 800c81c:	0800eb52 	.word	0x0800eb52
 800c820:	0800ebe8 	.word	0x0800ebe8
 800c824:	0800ebc0 	.word	0x0800ebc0
 800c828:	7ff00000 	.word	0x7ff00000
 800c82c:	7ca00000 	.word	0x7ca00000
 800c830:	7fefffff 	.word	0x7fefffff
 800c834:	f014 0310 	ands.w	r3, r4, #16
 800c838:	bf18      	it	ne
 800c83a:	236a      	movne	r3, #106	@ 0x6a
 800c83c:	4ea9      	ldr	r6, [pc, #676]	@ (800cae4 <_strtod_l+0x854>)
 800c83e:	9308      	str	r3, [sp, #32]
 800c840:	4650      	mov	r0, sl
 800c842:	4659      	mov	r1, fp
 800c844:	2300      	movs	r3, #0
 800c846:	07e7      	lsls	r7, r4, #31
 800c848:	d504      	bpl.n	800c854 <_strtod_l+0x5c4>
 800c84a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c84e:	f7f3 fedb 	bl	8000608 <__aeabi_dmul>
 800c852:	2301      	movs	r3, #1
 800c854:	1064      	asrs	r4, r4, #1
 800c856:	f106 0608 	add.w	r6, r6, #8
 800c85a:	d1f4      	bne.n	800c846 <_strtod_l+0x5b6>
 800c85c:	b10b      	cbz	r3, 800c862 <_strtod_l+0x5d2>
 800c85e:	4682      	mov	sl, r0
 800c860:	468b      	mov	fp, r1
 800c862:	9b08      	ldr	r3, [sp, #32]
 800c864:	b1b3      	cbz	r3, 800c894 <_strtod_l+0x604>
 800c866:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c86a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c86e:	2b00      	cmp	r3, #0
 800c870:	4659      	mov	r1, fp
 800c872:	dd0f      	ble.n	800c894 <_strtod_l+0x604>
 800c874:	2b1f      	cmp	r3, #31
 800c876:	dd56      	ble.n	800c926 <_strtod_l+0x696>
 800c878:	2b34      	cmp	r3, #52	@ 0x34
 800c87a:	bfde      	ittt	le
 800c87c:	f04f 33ff 	movle.w	r3, #4294967295
 800c880:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c884:	4093      	lslle	r3, r2
 800c886:	f04f 0a00 	mov.w	sl, #0
 800c88a:	bfcc      	ite	gt
 800c88c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c890:	ea03 0b01 	andle.w	fp, r3, r1
 800c894:	2200      	movs	r2, #0
 800c896:	2300      	movs	r3, #0
 800c898:	4650      	mov	r0, sl
 800c89a:	4659      	mov	r1, fp
 800c89c:	f7f4 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d1a7      	bne.n	800c7f4 <_strtod_l+0x564>
 800c8a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c8aa:	9805      	ldr	r0, [sp, #20]
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	464a      	mov	r2, r9
 800c8b0:	f7ff f8ce 	bl	800ba50 <__s2b>
 800c8b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	f43f af09 	beq.w	800c6ce <_strtod_l+0x43e>
 800c8bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8c0:	2a00      	cmp	r2, #0
 800c8c2:	eba3 0308 	sub.w	r3, r3, r8
 800c8c6:	bfa8      	it	ge
 800c8c8:	2300      	movge	r3, #0
 800c8ca:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8cc:	2400      	movs	r4, #0
 800c8ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c8d2:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8d4:	46a0      	mov	r8, r4
 800c8d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8d8:	9805      	ldr	r0, [sp, #20]
 800c8da:	6859      	ldr	r1, [r3, #4]
 800c8dc:	f7ff f810 	bl	800b900 <_Balloc>
 800c8e0:	4681      	mov	r9, r0
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	f43f aef7 	beq.w	800c6d6 <_strtod_l+0x446>
 800c8e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8ea:	691a      	ldr	r2, [r3, #16]
 800c8ec:	3202      	adds	r2, #2
 800c8ee:	f103 010c 	add.w	r1, r3, #12
 800c8f2:	0092      	lsls	r2, r2, #2
 800c8f4:	300c      	adds	r0, #12
 800c8f6:	f001 f903 	bl	800db00 <memcpy>
 800c8fa:	ec4b ab10 	vmov	d0, sl, fp
 800c8fe:	9805      	ldr	r0, [sp, #20]
 800c900:	aa1c      	add	r2, sp, #112	@ 0x70
 800c902:	a91b      	add	r1, sp, #108	@ 0x6c
 800c904:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c908:	f7ff fbd6 	bl	800c0b8 <__d2b>
 800c90c:	901a      	str	r0, [sp, #104]	@ 0x68
 800c90e:	2800      	cmp	r0, #0
 800c910:	f43f aee1 	beq.w	800c6d6 <_strtod_l+0x446>
 800c914:	9805      	ldr	r0, [sp, #20]
 800c916:	2101      	movs	r1, #1
 800c918:	f7ff f930 	bl	800bb7c <__i2b>
 800c91c:	4680      	mov	r8, r0
 800c91e:	b948      	cbnz	r0, 800c934 <_strtod_l+0x6a4>
 800c920:	f04f 0800 	mov.w	r8, #0
 800c924:	e6d7      	b.n	800c6d6 <_strtod_l+0x446>
 800c926:	f04f 32ff 	mov.w	r2, #4294967295
 800c92a:	fa02 f303 	lsl.w	r3, r2, r3
 800c92e:	ea03 0a0a 	and.w	sl, r3, sl
 800c932:	e7af      	b.n	800c894 <_strtod_l+0x604>
 800c934:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c936:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c938:	2d00      	cmp	r5, #0
 800c93a:	bfab      	itete	ge
 800c93c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c93e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c940:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c942:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c944:	bfac      	ite	ge
 800c946:	18ef      	addge	r7, r5, r3
 800c948:	1b5e      	sublt	r6, r3, r5
 800c94a:	9b08      	ldr	r3, [sp, #32]
 800c94c:	1aed      	subs	r5, r5, r3
 800c94e:	4415      	add	r5, r2
 800c950:	4b65      	ldr	r3, [pc, #404]	@ (800cae8 <_strtod_l+0x858>)
 800c952:	3d01      	subs	r5, #1
 800c954:	429d      	cmp	r5, r3
 800c956:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c95a:	da50      	bge.n	800c9fe <_strtod_l+0x76e>
 800c95c:	1b5b      	subs	r3, r3, r5
 800c95e:	2b1f      	cmp	r3, #31
 800c960:	eba2 0203 	sub.w	r2, r2, r3
 800c964:	f04f 0101 	mov.w	r1, #1
 800c968:	dc3d      	bgt.n	800c9e6 <_strtod_l+0x756>
 800c96a:	fa01 f303 	lsl.w	r3, r1, r3
 800c96e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c970:	2300      	movs	r3, #0
 800c972:	9310      	str	r3, [sp, #64]	@ 0x40
 800c974:	18bd      	adds	r5, r7, r2
 800c976:	9b08      	ldr	r3, [sp, #32]
 800c978:	42af      	cmp	r7, r5
 800c97a:	4416      	add	r6, r2
 800c97c:	441e      	add	r6, r3
 800c97e:	463b      	mov	r3, r7
 800c980:	bfa8      	it	ge
 800c982:	462b      	movge	r3, r5
 800c984:	42b3      	cmp	r3, r6
 800c986:	bfa8      	it	ge
 800c988:	4633      	movge	r3, r6
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	bfc2      	ittt	gt
 800c98e:	1aed      	subgt	r5, r5, r3
 800c990:	1af6      	subgt	r6, r6, r3
 800c992:	1aff      	subgt	r7, r7, r3
 800c994:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c996:	2b00      	cmp	r3, #0
 800c998:	dd16      	ble.n	800c9c8 <_strtod_l+0x738>
 800c99a:	4641      	mov	r1, r8
 800c99c:	9805      	ldr	r0, [sp, #20]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f7ff f9a4 	bl	800bcec <__pow5mult>
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d0ba      	beq.n	800c920 <_strtod_l+0x690>
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9ae:	9805      	ldr	r0, [sp, #20]
 800c9b0:	f7ff f8fa 	bl	800bba8 <__multiply>
 800c9b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	f43f ae8d 	beq.w	800c6d6 <_strtod_l+0x446>
 800c9bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9be:	9805      	ldr	r0, [sp, #20]
 800c9c0:	f7fe ffde 	bl	800b980 <_Bfree>
 800c9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9c8:	2d00      	cmp	r5, #0
 800c9ca:	dc1d      	bgt.n	800ca08 <_strtod_l+0x778>
 800c9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd23      	ble.n	800ca1a <_strtod_l+0x78a>
 800c9d2:	4649      	mov	r1, r9
 800c9d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c9d6:	9805      	ldr	r0, [sp, #20]
 800c9d8:	f7ff f988 	bl	800bcec <__pow5mult>
 800c9dc:	4681      	mov	r9, r0
 800c9de:	b9e0      	cbnz	r0, 800ca1a <_strtod_l+0x78a>
 800c9e0:	f04f 0900 	mov.w	r9, #0
 800c9e4:	e677      	b.n	800c6d6 <_strtod_l+0x446>
 800c9e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c9ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c9ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c9f2:	35e2      	adds	r5, #226	@ 0xe2
 800c9f4:	fa01 f305 	lsl.w	r3, r1, r5
 800c9f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c9fc:	e7ba      	b.n	800c974 <_strtod_l+0x6e4>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca02:	2301      	movs	r3, #1
 800ca04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca06:	e7b5      	b.n	800c974 <_strtod_l+0x6e4>
 800ca08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca0a:	9805      	ldr	r0, [sp, #20]
 800ca0c:	462a      	mov	r2, r5
 800ca0e:	f7ff f9c7 	bl	800bda0 <__lshift>
 800ca12:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d1d9      	bne.n	800c9cc <_strtod_l+0x73c>
 800ca18:	e65d      	b.n	800c6d6 <_strtod_l+0x446>
 800ca1a:	2e00      	cmp	r6, #0
 800ca1c:	dd07      	ble.n	800ca2e <_strtod_l+0x79e>
 800ca1e:	4649      	mov	r1, r9
 800ca20:	9805      	ldr	r0, [sp, #20]
 800ca22:	4632      	mov	r2, r6
 800ca24:	f7ff f9bc 	bl	800bda0 <__lshift>
 800ca28:	4681      	mov	r9, r0
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d0d8      	beq.n	800c9e0 <_strtod_l+0x750>
 800ca2e:	2f00      	cmp	r7, #0
 800ca30:	dd08      	ble.n	800ca44 <_strtod_l+0x7b4>
 800ca32:	4641      	mov	r1, r8
 800ca34:	9805      	ldr	r0, [sp, #20]
 800ca36:	463a      	mov	r2, r7
 800ca38:	f7ff f9b2 	bl	800bda0 <__lshift>
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f43f ae49 	beq.w	800c6d6 <_strtod_l+0x446>
 800ca44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca46:	9805      	ldr	r0, [sp, #20]
 800ca48:	464a      	mov	r2, r9
 800ca4a:	f7ff fa31 	bl	800beb0 <__mdiff>
 800ca4e:	4604      	mov	r4, r0
 800ca50:	2800      	cmp	r0, #0
 800ca52:	f43f ae40 	beq.w	800c6d6 <_strtod_l+0x446>
 800ca56:	68c3      	ldr	r3, [r0, #12]
 800ca58:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60c3      	str	r3, [r0, #12]
 800ca5e:	4641      	mov	r1, r8
 800ca60:	f7ff fa0a 	bl	800be78 <__mcmp>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	da45      	bge.n	800caf4 <_strtod_l+0x864>
 800ca68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ca6e:	d16b      	bne.n	800cb48 <_strtod_l+0x8b8>
 800ca70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d167      	bne.n	800cb48 <_strtod_l+0x8b8>
 800ca78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca7c:	0d1b      	lsrs	r3, r3, #20
 800ca7e:	051b      	lsls	r3, r3, #20
 800ca80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca84:	d960      	bls.n	800cb48 <_strtod_l+0x8b8>
 800ca86:	6963      	ldr	r3, [r4, #20]
 800ca88:	b913      	cbnz	r3, 800ca90 <_strtod_l+0x800>
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	dd5b      	ble.n	800cb48 <_strtod_l+0x8b8>
 800ca90:	4621      	mov	r1, r4
 800ca92:	2201      	movs	r2, #1
 800ca94:	9805      	ldr	r0, [sp, #20]
 800ca96:	f7ff f983 	bl	800bda0 <__lshift>
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	f7ff f9eb 	bl	800be78 <__mcmp>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	dd50      	ble.n	800cb48 <_strtod_l+0x8b8>
 800caa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800caaa:	9a08      	ldr	r2, [sp, #32]
 800caac:	0d1b      	lsrs	r3, r3, #20
 800caae:	051b      	lsls	r3, r3, #20
 800cab0:	2a00      	cmp	r2, #0
 800cab2:	d06a      	beq.n	800cb8a <_strtod_l+0x8fa>
 800cab4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cab8:	d867      	bhi.n	800cb8a <_strtod_l+0x8fa>
 800caba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cabe:	f67f ae9d 	bls.w	800c7fc <_strtod_l+0x56c>
 800cac2:	4b0a      	ldr	r3, [pc, #40]	@ (800caec <_strtod_l+0x85c>)
 800cac4:	4650      	mov	r0, sl
 800cac6:	4659      	mov	r1, fp
 800cac8:	2200      	movs	r2, #0
 800caca:	f7f3 fd9d 	bl	8000608 <__aeabi_dmul>
 800cace:	4b08      	ldr	r3, [pc, #32]	@ (800caf0 <_strtod_l+0x860>)
 800cad0:	400b      	ands	r3, r1
 800cad2:	4682      	mov	sl, r0
 800cad4:	468b      	mov	fp, r1
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f47f ae08 	bne.w	800c6ec <_strtod_l+0x45c>
 800cadc:	9a05      	ldr	r2, [sp, #20]
 800cade:	2322      	movs	r3, #34	@ 0x22
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	e603      	b.n	800c6ec <_strtod_l+0x45c>
 800cae4:	0800ecd8 	.word	0x0800ecd8
 800cae8:	fffffc02 	.word	0xfffffc02
 800caec:	39500000 	.word	0x39500000
 800caf0:	7ff00000 	.word	0x7ff00000
 800caf4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800caf8:	d165      	bne.n	800cbc6 <_strtod_l+0x936>
 800cafa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cafc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb00:	b35a      	cbz	r2, 800cb5a <_strtod_l+0x8ca>
 800cb02:	4a9f      	ldr	r2, [pc, #636]	@ (800cd80 <_strtod_l+0xaf0>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d12b      	bne.n	800cb60 <_strtod_l+0x8d0>
 800cb08:	9b08      	ldr	r3, [sp, #32]
 800cb0a:	4651      	mov	r1, sl
 800cb0c:	b303      	cbz	r3, 800cb50 <_strtod_l+0x8c0>
 800cb0e:	4b9d      	ldr	r3, [pc, #628]	@ (800cd84 <_strtod_l+0xaf4>)
 800cb10:	465a      	mov	r2, fp
 800cb12:	4013      	ands	r3, r2
 800cb14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb18:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1c:	d81b      	bhi.n	800cb56 <_strtod_l+0x8c6>
 800cb1e:	0d1b      	lsrs	r3, r3, #20
 800cb20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb24:	fa02 f303 	lsl.w	r3, r2, r3
 800cb28:	4299      	cmp	r1, r3
 800cb2a:	d119      	bne.n	800cb60 <_strtod_l+0x8d0>
 800cb2c:	4b96      	ldr	r3, [pc, #600]	@ (800cd88 <_strtod_l+0xaf8>)
 800cb2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d102      	bne.n	800cb3a <_strtod_l+0x8aa>
 800cb34:	3101      	adds	r1, #1
 800cb36:	f43f adce 	beq.w	800c6d6 <_strtod_l+0x446>
 800cb3a:	4b92      	ldr	r3, [pc, #584]	@ (800cd84 <_strtod_l+0xaf4>)
 800cb3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb3e:	401a      	ands	r2, r3
 800cb40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cb44:	f04f 0a00 	mov.w	sl, #0
 800cb48:	9b08      	ldr	r3, [sp, #32]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1b9      	bne.n	800cac2 <_strtod_l+0x832>
 800cb4e:	e5cd      	b.n	800c6ec <_strtod_l+0x45c>
 800cb50:	f04f 33ff 	mov.w	r3, #4294967295
 800cb54:	e7e8      	b.n	800cb28 <_strtod_l+0x898>
 800cb56:	4613      	mov	r3, r2
 800cb58:	e7e6      	b.n	800cb28 <_strtod_l+0x898>
 800cb5a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb5e:	d0a2      	beq.n	800caa6 <_strtod_l+0x816>
 800cb60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb62:	b1db      	cbz	r3, 800cb9c <_strtod_l+0x90c>
 800cb64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb66:	4213      	tst	r3, r2
 800cb68:	d0ee      	beq.n	800cb48 <_strtod_l+0x8b8>
 800cb6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6c:	9a08      	ldr	r2, [sp, #32]
 800cb6e:	4650      	mov	r0, sl
 800cb70:	4659      	mov	r1, fp
 800cb72:	b1bb      	cbz	r3, 800cba4 <_strtod_l+0x914>
 800cb74:	f7ff fb6e 	bl	800c254 <sulp>
 800cb78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb7c:	ec53 2b10 	vmov	r2, r3, d0
 800cb80:	f7f3 fb8c 	bl	800029c <__adddf3>
 800cb84:	4682      	mov	sl, r0
 800cb86:	468b      	mov	fp, r1
 800cb88:	e7de      	b.n	800cb48 <_strtod_l+0x8b8>
 800cb8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb96:	f04f 3aff 	mov.w	sl, #4294967295
 800cb9a:	e7d5      	b.n	800cb48 <_strtod_l+0x8b8>
 800cb9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb9e:	ea13 0f0a 	tst.w	r3, sl
 800cba2:	e7e1      	b.n	800cb68 <_strtod_l+0x8d8>
 800cba4:	f7ff fb56 	bl	800c254 <sulp>
 800cba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbac:	ec53 2b10 	vmov	r2, r3, d0
 800cbb0:	f7f3 fb72 	bl	8000298 <__aeabi_dsub>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	4682      	mov	sl, r0
 800cbba:	468b      	mov	fp, r1
 800cbbc:	f7f3 ff8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d0c1      	beq.n	800cb48 <_strtod_l+0x8b8>
 800cbc4:	e61a      	b.n	800c7fc <_strtod_l+0x56c>
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f7ff facd 	bl	800c168 <__ratio>
 800cbce:	ec57 6b10 	vmov	r6, r7, d0
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4639      	mov	r1, r7
 800cbdc:	f7f3 ff90 	bl	8000b00 <__aeabi_dcmple>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d06f      	beq.n	800ccc4 <_strtod_l+0xa34>
 800cbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d17a      	bne.n	800cce0 <_strtod_l+0xa50>
 800cbea:	f1ba 0f00 	cmp.w	sl, #0
 800cbee:	d158      	bne.n	800cca2 <_strtod_l+0xa12>
 800cbf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d15a      	bne.n	800ccb0 <_strtod_l+0xa20>
 800cbfa:	4b64      	ldr	r3, [pc, #400]	@ (800cd8c <_strtod_l+0xafc>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	4630      	mov	r0, r6
 800cc00:	4639      	mov	r1, r7
 800cc02:	f7f3 ff73 	bl	8000aec <__aeabi_dcmplt>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d159      	bne.n	800ccbe <_strtod_l+0xa2e>
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	4b60      	ldr	r3, [pc, #384]	@ (800cd90 <_strtod_l+0xb00>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	f7f3 fcf9 	bl	8000608 <__aeabi_dmul>
 800cc16:	4606      	mov	r6, r0
 800cc18:	460f      	mov	r7, r1
 800cc1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cc1e:	9606      	str	r6, [sp, #24]
 800cc20:	9307      	str	r3, [sp, #28]
 800cc22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc26:	4d57      	ldr	r5, [pc, #348]	@ (800cd84 <_strtod_l+0xaf4>)
 800cc28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc2e:	401d      	ands	r5, r3
 800cc30:	4b58      	ldr	r3, [pc, #352]	@ (800cd94 <_strtod_l+0xb04>)
 800cc32:	429d      	cmp	r5, r3
 800cc34:	f040 80b2 	bne.w	800cd9c <_strtod_l+0xb0c>
 800cc38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cc3e:	ec4b ab10 	vmov	d0, sl, fp
 800cc42:	f7ff f9c9 	bl	800bfd8 <__ulp>
 800cc46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc4a:	ec51 0b10 	vmov	r0, r1, d0
 800cc4e:	f7f3 fcdb 	bl	8000608 <__aeabi_dmul>
 800cc52:	4652      	mov	r2, sl
 800cc54:	465b      	mov	r3, fp
 800cc56:	f7f3 fb21 	bl	800029c <__adddf3>
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4949      	ldr	r1, [pc, #292]	@ (800cd84 <_strtod_l+0xaf4>)
 800cc5e:	4a4e      	ldr	r2, [pc, #312]	@ (800cd98 <_strtod_l+0xb08>)
 800cc60:	4019      	ands	r1, r3
 800cc62:	4291      	cmp	r1, r2
 800cc64:	4682      	mov	sl, r0
 800cc66:	d942      	bls.n	800ccee <_strtod_l+0xa5e>
 800cc68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc6a:	4b47      	ldr	r3, [pc, #284]	@ (800cd88 <_strtod_l+0xaf8>)
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d103      	bne.n	800cc78 <_strtod_l+0x9e8>
 800cc70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc72:	3301      	adds	r3, #1
 800cc74:	f43f ad2f 	beq.w	800c6d6 <_strtod_l+0x446>
 800cc78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cd88 <_strtod_l+0xaf8>
 800cc7c:	f04f 3aff 	mov.w	sl, #4294967295
 800cc80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc82:	9805      	ldr	r0, [sp, #20]
 800cc84:	f7fe fe7c 	bl	800b980 <_Bfree>
 800cc88:	9805      	ldr	r0, [sp, #20]
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	f7fe fe78 	bl	800b980 <_Bfree>
 800cc90:	9805      	ldr	r0, [sp, #20]
 800cc92:	4641      	mov	r1, r8
 800cc94:	f7fe fe74 	bl	800b980 <_Bfree>
 800cc98:	9805      	ldr	r0, [sp, #20]
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	f7fe fe70 	bl	800b980 <_Bfree>
 800cca0:	e619      	b.n	800c8d6 <_strtod_l+0x646>
 800cca2:	f1ba 0f01 	cmp.w	sl, #1
 800cca6:	d103      	bne.n	800ccb0 <_strtod_l+0xa20>
 800cca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f43f ada6 	beq.w	800c7fc <_strtod_l+0x56c>
 800ccb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cd60 <_strtod_l+0xad0>
 800ccb4:	4f35      	ldr	r7, [pc, #212]	@ (800cd8c <_strtod_l+0xafc>)
 800ccb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ccba:	2600      	movs	r6, #0
 800ccbc:	e7b1      	b.n	800cc22 <_strtod_l+0x992>
 800ccbe:	4f34      	ldr	r7, [pc, #208]	@ (800cd90 <_strtod_l+0xb00>)
 800ccc0:	2600      	movs	r6, #0
 800ccc2:	e7aa      	b.n	800cc1a <_strtod_l+0x98a>
 800ccc4:	4b32      	ldr	r3, [pc, #200]	@ (800cd90 <_strtod_l+0xb00>)
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	2200      	movs	r2, #0
 800cccc:	f7f3 fc9c 	bl	8000608 <__aeabi_dmul>
 800ccd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	460f      	mov	r7, r1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d09f      	beq.n	800cc1a <_strtod_l+0x98a>
 800ccda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ccde:	e7a0      	b.n	800cc22 <_strtod_l+0x992>
 800cce0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cd68 <_strtod_l+0xad8>
 800cce4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cce8:	ec57 6b17 	vmov	r6, r7, d7
 800ccec:	e799      	b.n	800cc22 <_strtod_l+0x992>
 800ccee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ccf2:	9b08      	ldr	r3, [sp, #32]
 800ccf4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1c1      	bne.n	800cc80 <_strtod_l+0x9f0>
 800ccfc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd00:	0d1b      	lsrs	r3, r3, #20
 800cd02:	051b      	lsls	r3, r3, #20
 800cd04:	429d      	cmp	r5, r3
 800cd06:	d1bb      	bne.n	800cc80 <_strtod_l+0x9f0>
 800cd08:	4630      	mov	r0, r6
 800cd0a:	4639      	mov	r1, r7
 800cd0c:	f7f3 ffdc 	bl	8000cc8 <__aeabi_d2lz>
 800cd10:	f7f3 fc4c 	bl	80005ac <__aeabi_l2d>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f7f3 fabc 	bl	8000298 <__aeabi_dsub>
 800cd20:	460b      	mov	r3, r1
 800cd22:	4602      	mov	r2, r0
 800cd24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cd28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cd2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd2e:	ea46 060a 	orr.w	r6, r6, sl
 800cd32:	431e      	orrs	r6, r3
 800cd34:	d06f      	beq.n	800ce16 <_strtod_l+0xb86>
 800cd36:	a30e      	add	r3, pc, #56	@ (adr r3, 800cd70 <_strtod_l+0xae0>)
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	f7f3 fed6 	bl	8000aec <__aeabi_dcmplt>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	f47f acd3 	bne.w	800c6ec <_strtod_l+0x45c>
 800cd46:	a30c      	add	r3, pc, #48	@ (adr r3, 800cd78 <_strtod_l+0xae8>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd50:	f7f3 feea 	bl	8000b28 <__aeabi_dcmpgt>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d093      	beq.n	800cc80 <_strtod_l+0x9f0>
 800cd58:	e4c8      	b.n	800c6ec <_strtod_l+0x45c>
 800cd5a:	bf00      	nop
 800cd5c:	f3af 8000 	nop.w
 800cd60:	00000000 	.word	0x00000000
 800cd64:	bff00000 	.word	0xbff00000
 800cd68:	00000000 	.word	0x00000000
 800cd6c:	3ff00000 	.word	0x3ff00000
 800cd70:	94a03595 	.word	0x94a03595
 800cd74:	3fdfffff 	.word	0x3fdfffff
 800cd78:	35afe535 	.word	0x35afe535
 800cd7c:	3fe00000 	.word	0x3fe00000
 800cd80:	000fffff 	.word	0x000fffff
 800cd84:	7ff00000 	.word	0x7ff00000
 800cd88:	7fefffff 	.word	0x7fefffff
 800cd8c:	3ff00000 	.word	0x3ff00000
 800cd90:	3fe00000 	.word	0x3fe00000
 800cd94:	7fe00000 	.word	0x7fe00000
 800cd98:	7c9fffff 	.word	0x7c9fffff
 800cd9c:	9b08      	ldr	r3, [sp, #32]
 800cd9e:	b323      	cbz	r3, 800cdea <_strtod_l+0xb5a>
 800cda0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cda4:	d821      	bhi.n	800cdea <_strtod_l+0xb5a>
 800cda6:	a328      	add	r3, pc, #160	@ (adr r3, 800ce48 <_strtod_l+0xbb8>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	4630      	mov	r0, r6
 800cdae:	4639      	mov	r1, r7
 800cdb0:	f7f3 fea6 	bl	8000b00 <__aeabi_dcmple>
 800cdb4:	b1a0      	cbz	r0, 800cde0 <_strtod_l+0xb50>
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7f3 fefd 	bl	8000bb8 <__aeabi_d2uiz>
 800cdbe:	2801      	cmp	r0, #1
 800cdc0:	bf38      	it	cc
 800cdc2:	2001      	movcc	r0, #1
 800cdc4:	f7f3 fba6 	bl	8000514 <__aeabi_ui2d>
 800cdc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdca:	4606      	mov	r6, r0
 800cdcc:	460f      	mov	r7, r1
 800cdce:	b9fb      	cbnz	r3, 800ce10 <_strtod_l+0xb80>
 800cdd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cdd4:	9014      	str	r0, [sp, #80]	@ 0x50
 800cdd6:	9315      	str	r3, [sp, #84]	@ 0x54
 800cdd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cddc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cde0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cde2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cde6:	1b5b      	subs	r3, r3, r5
 800cde8:	9311      	str	r3, [sp, #68]	@ 0x44
 800cdea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cdee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cdf2:	f7ff f8f1 	bl	800bfd8 <__ulp>
 800cdf6:	4650      	mov	r0, sl
 800cdf8:	ec53 2b10 	vmov	r2, r3, d0
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	f7f3 fc03 	bl	8000608 <__aeabi_dmul>
 800ce02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ce06:	f7f3 fa49 	bl	800029c <__adddf3>
 800ce0a:	4682      	mov	sl, r0
 800ce0c:	468b      	mov	fp, r1
 800ce0e:	e770      	b.n	800ccf2 <_strtod_l+0xa62>
 800ce10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ce14:	e7e0      	b.n	800cdd8 <_strtod_l+0xb48>
 800ce16:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce50 <_strtod_l+0xbc0>)
 800ce18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1c:	f7f3 fe66 	bl	8000aec <__aeabi_dcmplt>
 800ce20:	e798      	b.n	800cd54 <_strtod_l+0xac4>
 800ce22:	2300      	movs	r3, #0
 800ce24:	930e      	str	r3, [sp, #56]	@ 0x38
 800ce26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ce28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce2a:	6013      	str	r3, [r2, #0]
 800ce2c:	f7ff ba6d 	b.w	800c30a <_strtod_l+0x7a>
 800ce30:	2a65      	cmp	r2, #101	@ 0x65
 800ce32:	f43f ab68 	beq.w	800c506 <_strtod_l+0x276>
 800ce36:	2a45      	cmp	r2, #69	@ 0x45
 800ce38:	f43f ab65 	beq.w	800c506 <_strtod_l+0x276>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	f7ff bba0 	b.w	800c582 <_strtod_l+0x2f2>
 800ce42:	bf00      	nop
 800ce44:	f3af 8000 	nop.w
 800ce48:	ffc00000 	.word	0xffc00000
 800ce4c:	41dfffff 	.word	0x41dfffff
 800ce50:	94a03595 	.word	0x94a03595
 800ce54:	3fcfffff 	.word	0x3fcfffff

0800ce58 <_strtod_r>:
 800ce58:	4b01      	ldr	r3, [pc, #4]	@ (800ce60 <_strtod_r+0x8>)
 800ce5a:	f7ff ba19 	b.w	800c290 <_strtod_l>
 800ce5e:	bf00      	nop
 800ce60:	20000170 	.word	0x20000170

0800ce64 <_strtol_l.isra.0>:
 800ce64:	2b24      	cmp	r3, #36	@ 0x24
 800ce66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce6a:	4686      	mov	lr, r0
 800ce6c:	4690      	mov	r8, r2
 800ce6e:	d801      	bhi.n	800ce74 <_strtol_l.isra.0+0x10>
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d106      	bne.n	800ce82 <_strtol_l.isra.0+0x1e>
 800ce74:	f7fd fdb6 	bl	800a9e4 <__errno>
 800ce78:	2316      	movs	r3, #22
 800ce7a:	6003      	str	r3, [r0, #0]
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce82:	4834      	ldr	r0, [pc, #208]	@ (800cf54 <_strtol_l.isra.0+0xf0>)
 800ce84:	460d      	mov	r5, r1
 800ce86:	462a      	mov	r2, r5
 800ce88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce8c:	5d06      	ldrb	r6, [r0, r4]
 800ce8e:	f016 0608 	ands.w	r6, r6, #8
 800ce92:	d1f8      	bne.n	800ce86 <_strtol_l.isra.0+0x22>
 800ce94:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce96:	d110      	bne.n	800ceba <_strtol_l.isra.0+0x56>
 800ce98:	782c      	ldrb	r4, [r5, #0]
 800ce9a:	2601      	movs	r6, #1
 800ce9c:	1c95      	adds	r5, r2, #2
 800ce9e:	f033 0210 	bics.w	r2, r3, #16
 800cea2:	d115      	bne.n	800ced0 <_strtol_l.isra.0+0x6c>
 800cea4:	2c30      	cmp	r4, #48	@ 0x30
 800cea6:	d10d      	bne.n	800cec4 <_strtol_l.isra.0+0x60>
 800cea8:	782a      	ldrb	r2, [r5, #0]
 800ceaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ceae:	2a58      	cmp	r2, #88	@ 0x58
 800ceb0:	d108      	bne.n	800cec4 <_strtol_l.isra.0+0x60>
 800ceb2:	786c      	ldrb	r4, [r5, #1]
 800ceb4:	3502      	adds	r5, #2
 800ceb6:	2310      	movs	r3, #16
 800ceb8:	e00a      	b.n	800ced0 <_strtol_l.isra.0+0x6c>
 800ceba:	2c2b      	cmp	r4, #43	@ 0x2b
 800cebc:	bf04      	itt	eq
 800cebe:	782c      	ldrbeq	r4, [r5, #0]
 800cec0:	1c95      	addeq	r5, r2, #2
 800cec2:	e7ec      	b.n	800ce9e <_strtol_l.isra.0+0x3a>
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1f6      	bne.n	800ceb6 <_strtol_l.isra.0+0x52>
 800cec8:	2c30      	cmp	r4, #48	@ 0x30
 800ceca:	bf14      	ite	ne
 800cecc:	230a      	movne	r3, #10
 800cece:	2308      	moveq	r3, #8
 800ced0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ced4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ced8:	2200      	movs	r2, #0
 800ceda:	fbbc f9f3 	udiv	r9, ip, r3
 800cede:	4610      	mov	r0, r2
 800cee0:	fb03 ca19 	mls	sl, r3, r9, ip
 800cee4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cee8:	2f09      	cmp	r7, #9
 800ceea:	d80f      	bhi.n	800cf0c <_strtol_l.isra.0+0xa8>
 800ceec:	463c      	mov	r4, r7
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	dd1b      	ble.n	800cf2a <_strtol_l.isra.0+0xc6>
 800cef2:	1c57      	adds	r7, r2, #1
 800cef4:	d007      	beq.n	800cf06 <_strtol_l.isra.0+0xa2>
 800cef6:	4581      	cmp	r9, r0
 800cef8:	d314      	bcc.n	800cf24 <_strtol_l.isra.0+0xc0>
 800cefa:	d101      	bne.n	800cf00 <_strtol_l.isra.0+0x9c>
 800cefc:	45a2      	cmp	sl, r4
 800cefe:	db11      	blt.n	800cf24 <_strtol_l.isra.0+0xc0>
 800cf00:	fb00 4003 	mla	r0, r0, r3, r4
 800cf04:	2201      	movs	r2, #1
 800cf06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf0a:	e7eb      	b.n	800cee4 <_strtol_l.isra.0+0x80>
 800cf0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf10:	2f19      	cmp	r7, #25
 800cf12:	d801      	bhi.n	800cf18 <_strtol_l.isra.0+0xb4>
 800cf14:	3c37      	subs	r4, #55	@ 0x37
 800cf16:	e7ea      	b.n	800ceee <_strtol_l.isra.0+0x8a>
 800cf18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf1c:	2f19      	cmp	r7, #25
 800cf1e:	d804      	bhi.n	800cf2a <_strtol_l.isra.0+0xc6>
 800cf20:	3c57      	subs	r4, #87	@ 0x57
 800cf22:	e7e4      	b.n	800ceee <_strtol_l.isra.0+0x8a>
 800cf24:	f04f 32ff 	mov.w	r2, #4294967295
 800cf28:	e7ed      	b.n	800cf06 <_strtol_l.isra.0+0xa2>
 800cf2a:	1c53      	adds	r3, r2, #1
 800cf2c:	d108      	bne.n	800cf40 <_strtol_l.isra.0+0xdc>
 800cf2e:	2322      	movs	r3, #34	@ 0x22
 800cf30:	f8ce 3000 	str.w	r3, [lr]
 800cf34:	4660      	mov	r0, ip
 800cf36:	f1b8 0f00 	cmp.w	r8, #0
 800cf3a:	d0a0      	beq.n	800ce7e <_strtol_l.isra.0+0x1a>
 800cf3c:	1e69      	subs	r1, r5, #1
 800cf3e:	e006      	b.n	800cf4e <_strtol_l.isra.0+0xea>
 800cf40:	b106      	cbz	r6, 800cf44 <_strtol_l.isra.0+0xe0>
 800cf42:	4240      	negs	r0, r0
 800cf44:	f1b8 0f00 	cmp.w	r8, #0
 800cf48:	d099      	beq.n	800ce7e <_strtol_l.isra.0+0x1a>
 800cf4a:	2a00      	cmp	r2, #0
 800cf4c:	d1f6      	bne.n	800cf3c <_strtol_l.isra.0+0xd8>
 800cf4e:	f8c8 1000 	str.w	r1, [r8]
 800cf52:	e794      	b.n	800ce7e <_strtol_l.isra.0+0x1a>
 800cf54:	0800ed01 	.word	0x0800ed01

0800cf58 <_strtol_r>:
 800cf58:	f7ff bf84 	b.w	800ce64 <_strtol_l.isra.0>

0800cf5c <__ssputs_r>:
 800cf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf60:	688e      	ldr	r6, [r1, #8]
 800cf62:	461f      	mov	r7, r3
 800cf64:	42be      	cmp	r6, r7
 800cf66:	680b      	ldr	r3, [r1, #0]
 800cf68:	4682      	mov	sl, r0
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	4690      	mov	r8, r2
 800cf6e:	d82d      	bhi.n	800cfcc <__ssputs_r+0x70>
 800cf70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf78:	d026      	beq.n	800cfc8 <__ssputs_r+0x6c>
 800cf7a:	6965      	ldr	r5, [r4, #20]
 800cf7c:	6909      	ldr	r1, [r1, #16]
 800cf7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf82:	eba3 0901 	sub.w	r9, r3, r1
 800cf86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf8a:	1c7b      	adds	r3, r7, #1
 800cf8c:	444b      	add	r3, r9
 800cf8e:	106d      	asrs	r5, r5, #1
 800cf90:	429d      	cmp	r5, r3
 800cf92:	bf38      	it	cc
 800cf94:	461d      	movcc	r5, r3
 800cf96:	0553      	lsls	r3, r2, #21
 800cf98:	d527      	bpl.n	800cfea <__ssputs_r+0x8e>
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f7fe fc24 	bl	800b7e8 <_malloc_r>
 800cfa0:	4606      	mov	r6, r0
 800cfa2:	b360      	cbz	r0, 800cffe <__ssputs_r+0xa2>
 800cfa4:	6921      	ldr	r1, [r4, #16]
 800cfa6:	464a      	mov	r2, r9
 800cfa8:	f000 fdaa 	bl	800db00 <memcpy>
 800cfac:	89a3      	ldrh	r3, [r4, #12]
 800cfae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfb6:	81a3      	strh	r3, [r4, #12]
 800cfb8:	6126      	str	r6, [r4, #16]
 800cfba:	6165      	str	r5, [r4, #20]
 800cfbc:	444e      	add	r6, r9
 800cfbe:	eba5 0509 	sub.w	r5, r5, r9
 800cfc2:	6026      	str	r6, [r4, #0]
 800cfc4:	60a5      	str	r5, [r4, #8]
 800cfc6:	463e      	mov	r6, r7
 800cfc8:	42be      	cmp	r6, r7
 800cfca:	d900      	bls.n	800cfce <__ssputs_r+0x72>
 800cfcc:	463e      	mov	r6, r7
 800cfce:	6820      	ldr	r0, [r4, #0]
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	4641      	mov	r1, r8
 800cfd4:	f000 fd57 	bl	800da86 <memmove>
 800cfd8:	68a3      	ldr	r3, [r4, #8]
 800cfda:	1b9b      	subs	r3, r3, r6
 800cfdc:	60a3      	str	r3, [r4, #8]
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	4433      	add	r3, r6
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfea:	462a      	mov	r2, r5
 800cfec:	f001 f91d 	bl	800e22a <_realloc_r>
 800cff0:	4606      	mov	r6, r0
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d1e0      	bne.n	800cfb8 <__ssputs_r+0x5c>
 800cff6:	6921      	ldr	r1, [r4, #16]
 800cff8:	4650      	mov	r0, sl
 800cffa:	f7fe fb81 	bl	800b700 <_free_r>
 800cffe:	230c      	movs	r3, #12
 800d000:	f8ca 3000 	str.w	r3, [sl]
 800d004:	89a3      	ldrh	r3, [r4, #12]
 800d006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	f04f 30ff 	mov.w	r0, #4294967295
 800d010:	e7e9      	b.n	800cfe6 <__ssputs_r+0x8a>
	...

0800d014 <_svfiprintf_r>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	4698      	mov	r8, r3
 800d01a:	898b      	ldrh	r3, [r1, #12]
 800d01c:	061b      	lsls	r3, r3, #24
 800d01e:	b09d      	sub	sp, #116	@ 0x74
 800d020:	4607      	mov	r7, r0
 800d022:	460d      	mov	r5, r1
 800d024:	4614      	mov	r4, r2
 800d026:	d510      	bpl.n	800d04a <_svfiprintf_r+0x36>
 800d028:	690b      	ldr	r3, [r1, #16]
 800d02a:	b973      	cbnz	r3, 800d04a <_svfiprintf_r+0x36>
 800d02c:	2140      	movs	r1, #64	@ 0x40
 800d02e:	f7fe fbdb 	bl	800b7e8 <_malloc_r>
 800d032:	6028      	str	r0, [r5, #0]
 800d034:	6128      	str	r0, [r5, #16]
 800d036:	b930      	cbnz	r0, 800d046 <_svfiprintf_r+0x32>
 800d038:	230c      	movs	r3, #12
 800d03a:	603b      	str	r3, [r7, #0]
 800d03c:	f04f 30ff 	mov.w	r0, #4294967295
 800d040:	b01d      	add	sp, #116	@ 0x74
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	2340      	movs	r3, #64	@ 0x40
 800d048:	616b      	str	r3, [r5, #20]
 800d04a:	2300      	movs	r3, #0
 800d04c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d04e:	2320      	movs	r3, #32
 800d050:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d054:	f8cd 800c 	str.w	r8, [sp, #12]
 800d058:	2330      	movs	r3, #48	@ 0x30
 800d05a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d1f8 <_svfiprintf_r+0x1e4>
 800d05e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d062:	f04f 0901 	mov.w	r9, #1
 800d066:	4623      	mov	r3, r4
 800d068:	469a      	mov	sl, r3
 800d06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d06e:	b10a      	cbz	r2, 800d074 <_svfiprintf_r+0x60>
 800d070:	2a25      	cmp	r2, #37	@ 0x25
 800d072:	d1f9      	bne.n	800d068 <_svfiprintf_r+0x54>
 800d074:	ebba 0b04 	subs.w	fp, sl, r4
 800d078:	d00b      	beq.n	800d092 <_svfiprintf_r+0x7e>
 800d07a:	465b      	mov	r3, fp
 800d07c:	4622      	mov	r2, r4
 800d07e:	4629      	mov	r1, r5
 800d080:	4638      	mov	r0, r7
 800d082:	f7ff ff6b 	bl	800cf5c <__ssputs_r>
 800d086:	3001      	adds	r0, #1
 800d088:	f000 80a7 	beq.w	800d1da <_svfiprintf_r+0x1c6>
 800d08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d08e:	445a      	add	r2, fp
 800d090:	9209      	str	r2, [sp, #36]	@ 0x24
 800d092:	f89a 3000 	ldrb.w	r3, [sl]
 800d096:	2b00      	cmp	r3, #0
 800d098:	f000 809f 	beq.w	800d1da <_svfiprintf_r+0x1c6>
 800d09c:	2300      	movs	r3, #0
 800d09e:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0a6:	f10a 0a01 	add.w	sl, sl, #1
 800d0aa:	9304      	str	r3, [sp, #16]
 800d0ac:	9307      	str	r3, [sp, #28]
 800d0ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0b4:	4654      	mov	r4, sl
 800d0b6:	2205      	movs	r2, #5
 800d0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0bc:	484e      	ldr	r0, [pc, #312]	@ (800d1f8 <_svfiprintf_r+0x1e4>)
 800d0be:	f7f3 f88f 	bl	80001e0 <memchr>
 800d0c2:	9a04      	ldr	r2, [sp, #16]
 800d0c4:	b9d8      	cbnz	r0, 800d0fe <_svfiprintf_r+0xea>
 800d0c6:	06d0      	lsls	r0, r2, #27
 800d0c8:	bf44      	itt	mi
 800d0ca:	2320      	movmi	r3, #32
 800d0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0d0:	0711      	lsls	r1, r2, #28
 800d0d2:	bf44      	itt	mi
 800d0d4:	232b      	movmi	r3, #43	@ 0x2b
 800d0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0da:	f89a 3000 	ldrb.w	r3, [sl]
 800d0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0e0:	d015      	beq.n	800d10e <_svfiprintf_r+0xfa>
 800d0e2:	9a07      	ldr	r2, [sp, #28]
 800d0e4:	4654      	mov	r4, sl
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	f04f 0c0a 	mov.w	ip, #10
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0f2:	3b30      	subs	r3, #48	@ 0x30
 800d0f4:	2b09      	cmp	r3, #9
 800d0f6:	d94b      	bls.n	800d190 <_svfiprintf_r+0x17c>
 800d0f8:	b1b0      	cbz	r0, 800d128 <_svfiprintf_r+0x114>
 800d0fa:	9207      	str	r2, [sp, #28]
 800d0fc:	e014      	b.n	800d128 <_svfiprintf_r+0x114>
 800d0fe:	eba0 0308 	sub.w	r3, r0, r8
 800d102:	fa09 f303 	lsl.w	r3, r9, r3
 800d106:	4313      	orrs	r3, r2
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	46a2      	mov	sl, r4
 800d10c:	e7d2      	b.n	800d0b4 <_svfiprintf_r+0xa0>
 800d10e:	9b03      	ldr	r3, [sp, #12]
 800d110:	1d19      	adds	r1, r3, #4
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	9103      	str	r1, [sp, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	bfbb      	ittet	lt
 800d11a:	425b      	neglt	r3, r3
 800d11c:	f042 0202 	orrlt.w	r2, r2, #2
 800d120:	9307      	strge	r3, [sp, #28]
 800d122:	9307      	strlt	r3, [sp, #28]
 800d124:	bfb8      	it	lt
 800d126:	9204      	strlt	r2, [sp, #16]
 800d128:	7823      	ldrb	r3, [r4, #0]
 800d12a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d12c:	d10a      	bne.n	800d144 <_svfiprintf_r+0x130>
 800d12e:	7863      	ldrb	r3, [r4, #1]
 800d130:	2b2a      	cmp	r3, #42	@ 0x2a
 800d132:	d132      	bne.n	800d19a <_svfiprintf_r+0x186>
 800d134:	9b03      	ldr	r3, [sp, #12]
 800d136:	1d1a      	adds	r2, r3, #4
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	9203      	str	r2, [sp, #12]
 800d13c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d140:	3402      	adds	r4, #2
 800d142:	9305      	str	r3, [sp, #20]
 800d144:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d208 <_svfiprintf_r+0x1f4>
 800d148:	7821      	ldrb	r1, [r4, #0]
 800d14a:	2203      	movs	r2, #3
 800d14c:	4650      	mov	r0, sl
 800d14e:	f7f3 f847 	bl	80001e0 <memchr>
 800d152:	b138      	cbz	r0, 800d164 <_svfiprintf_r+0x150>
 800d154:	9b04      	ldr	r3, [sp, #16]
 800d156:	eba0 000a 	sub.w	r0, r0, sl
 800d15a:	2240      	movs	r2, #64	@ 0x40
 800d15c:	4082      	lsls	r2, r0
 800d15e:	4313      	orrs	r3, r2
 800d160:	3401      	adds	r4, #1
 800d162:	9304      	str	r3, [sp, #16]
 800d164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d168:	4824      	ldr	r0, [pc, #144]	@ (800d1fc <_svfiprintf_r+0x1e8>)
 800d16a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d16e:	2206      	movs	r2, #6
 800d170:	f7f3 f836 	bl	80001e0 <memchr>
 800d174:	2800      	cmp	r0, #0
 800d176:	d036      	beq.n	800d1e6 <_svfiprintf_r+0x1d2>
 800d178:	4b21      	ldr	r3, [pc, #132]	@ (800d200 <_svfiprintf_r+0x1ec>)
 800d17a:	bb1b      	cbnz	r3, 800d1c4 <_svfiprintf_r+0x1b0>
 800d17c:	9b03      	ldr	r3, [sp, #12]
 800d17e:	3307      	adds	r3, #7
 800d180:	f023 0307 	bic.w	r3, r3, #7
 800d184:	3308      	adds	r3, #8
 800d186:	9303      	str	r3, [sp, #12]
 800d188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d18a:	4433      	add	r3, r6
 800d18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d18e:	e76a      	b.n	800d066 <_svfiprintf_r+0x52>
 800d190:	fb0c 3202 	mla	r2, ip, r2, r3
 800d194:	460c      	mov	r4, r1
 800d196:	2001      	movs	r0, #1
 800d198:	e7a8      	b.n	800d0ec <_svfiprintf_r+0xd8>
 800d19a:	2300      	movs	r3, #0
 800d19c:	3401      	adds	r4, #1
 800d19e:	9305      	str	r3, [sp, #20]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	f04f 0c0a 	mov.w	ip, #10
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ac:	3a30      	subs	r2, #48	@ 0x30
 800d1ae:	2a09      	cmp	r2, #9
 800d1b0:	d903      	bls.n	800d1ba <_svfiprintf_r+0x1a6>
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d0c6      	beq.n	800d144 <_svfiprintf_r+0x130>
 800d1b6:	9105      	str	r1, [sp, #20]
 800d1b8:	e7c4      	b.n	800d144 <_svfiprintf_r+0x130>
 800d1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1be:	4604      	mov	r4, r0
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e7f0      	b.n	800d1a6 <_svfiprintf_r+0x192>
 800d1c4:	ab03      	add	r3, sp, #12
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	462a      	mov	r2, r5
 800d1ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d204 <_svfiprintf_r+0x1f0>)
 800d1cc:	a904      	add	r1, sp, #16
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	f7fc fc66 	bl	8009aa0 <_printf_float>
 800d1d4:	1c42      	adds	r2, r0, #1
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	d1d6      	bne.n	800d188 <_svfiprintf_r+0x174>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	065b      	lsls	r3, r3, #25
 800d1de:	f53f af2d 	bmi.w	800d03c <_svfiprintf_r+0x28>
 800d1e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1e4:	e72c      	b.n	800d040 <_svfiprintf_r+0x2c>
 800d1e6:	ab03      	add	r3, sp, #12
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	462a      	mov	r2, r5
 800d1ec:	4b05      	ldr	r3, [pc, #20]	@ (800d204 <_svfiprintf_r+0x1f0>)
 800d1ee:	a904      	add	r1, sp, #16
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f7fc feed 	bl	8009fd0 <_printf_i>
 800d1f6:	e7ed      	b.n	800d1d4 <_svfiprintf_r+0x1c0>
 800d1f8:	0800eae3 	.word	0x0800eae3
 800d1fc:	0800eaed 	.word	0x0800eaed
 800d200:	08009aa1 	.word	0x08009aa1
 800d204:	0800cf5d 	.word	0x0800cf5d
 800d208:	0800eae9 	.word	0x0800eae9

0800d20c <_sungetc_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	1c4b      	adds	r3, r1, #1
 800d210:	4614      	mov	r4, r2
 800d212:	d103      	bne.n	800d21c <_sungetc_r+0x10>
 800d214:	f04f 35ff 	mov.w	r5, #4294967295
 800d218:	4628      	mov	r0, r5
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	8993      	ldrh	r3, [r2, #12]
 800d21e:	f023 0320 	bic.w	r3, r3, #32
 800d222:	8193      	strh	r3, [r2, #12]
 800d224:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d226:	6852      	ldr	r2, [r2, #4]
 800d228:	b2cd      	uxtb	r5, r1
 800d22a:	b18b      	cbz	r3, 800d250 <_sungetc_r+0x44>
 800d22c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d22e:	4293      	cmp	r3, r2
 800d230:	dd08      	ble.n	800d244 <_sungetc_r+0x38>
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	1e5a      	subs	r2, r3, #1
 800d236:	6022      	str	r2, [r4, #0]
 800d238:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d23c:	6863      	ldr	r3, [r4, #4]
 800d23e:	3301      	adds	r3, #1
 800d240:	6063      	str	r3, [r4, #4]
 800d242:	e7e9      	b.n	800d218 <_sungetc_r+0xc>
 800d244:	4621      	mov	r1, r4
 800d246:	f000 fbe4 	bl	800da12 <__submore>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d0f1      	beq.n	800d232 <_sungetc_r+0x26>
 800d24e:	e7e1      	b.n	800d214 <_sungetc_r+0x8>
 800d250:	6921      	ldr	r1, [r4, #16]
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	b151      	cbz	r1, 800d26c <_sungetc_r+0x60>
 800d256:	4299      	cmp	r1, r3
 800d258:	d208      	bcs.n	800d26c <_sungetc_r+0x60>
 800d25a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d25e:	42a9      	cmp	r1, r5
 800d260:	d104      	bne.n	800d26c <_sungetc_r+0x60>
 800d262:	3b01      	subs	r3, #1
 800d264:	3201      	adds	r2, #1
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	6062      	str	r2, [r4, #4]
 800d26a:	e7d5      	b.n	800d218 <_sungetc_r+0xc>
 800d26c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d274:	6363      	str	r3, [r4, #52]	@ 0x34
 800d276:	2303      	movs	r3, #3
 800d278:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d27a:	4623      	mov	r3, r4
 800d27c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	2301      	movs	r3, #1
 800d284:	e7dc      	b.n	800d240 <_sungetc_r+0x34>

0800d286 <__ssrefill_r>:
 800d286:	b510      	push	{r4, lr}
 800d288:	460c      	mov	r4, r1
 800d28a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d28c:	b169      	cbz	r1, 800d2aa <__ssrefill_r+0x24>
 800d28e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d292:	4299      	cmp	r1, r3
 800d294:	d001      	beq.n	800d29a <__ssrefill_r+0x14>
 800d296:	f7fe fa33 	bl	800b700 <_free_r>
 800d29a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d29c:	6063      	str	r3, [r4, #4]
 800d29e:	2000      	movs	r0, #0
 800d2a0:	6360      	str	r0, [r4, #52]	@ 0x34
 800d2a2:	b113      	cbz	r3, 800d2aa <__ssrefill_r+0x24>
 800d2a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d2a6:	6023      	str	r3, [r4, #0]
 800d2a8:	bd10      	pop	{r4, pc}
 800d2aa:	6923      	ldr	r3, [r4, #16]
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6063      	str	r3, [r4, #4]
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f043 0320 	orr.w	r3, r3, #32
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d2be:	e7f3      	b.n	800d2a8 <__ssrefill_r+0x22>

0800d2c0 <__ssvfiscanf_r>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d2d0:	49a6      	ldr	r1, [pc, #664]	@ (800d56c <__ssvfiscanf_r+0x2ac>)
 800d2d2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d2d4:	f10d 0804 	add.w	r8, sp, #4
 800d2d8:	49a5      	ldr	r1, [pc, #660]	@ (800d570 <__ssvfiscanf_r+0x2b0>)
 800d2da:	4fa6      	ldr	r7, [pc, #664]	@ (800d574 <__ssvfiscanf_r+0x2b4>)
 800d2dc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	f892 9000 	ldrb.w	r9, [r2]
 800d2ea:	f1b9 0f00 	cmp.w	r9, #0
 800d2ee:	f000 8158 	beq.w	800d5a2 <__ssvfiscanf_r+0x2e2>
 800d2f2:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d2f6:	f013 0308 	ands.w	r3, r3, #8
 800d2fa:	f102 0501 	add.w	r5, r2, #1
 800d2fe:	d019      	beq.n	800d334 <__ssvfiscanf_r+0x74>
 800d300:	6863      	ldr	r3, [r4, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	dd0f      	ble.n	800d326 <__ssvfiscanf_r+0x66>
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	781a      	ldrb	r2, [r3, #0]
 800d30a:	5cba      	ldrb	r2, [r7, r2]
 800d30c:	0712      	lsls	r2, r2, #28
 800d30e:	d401      	bmi.n	800d314 <__ssvfiscanf_r+0x54>
 800d310:	462a      	mov	r2, r5
 800d312:	e7e8      	b.n	800d2e6 <__ssvfiscanf_r+0x26>
 800d314:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d316:	3201      	adds	r2, #1
 800d318:	9245      	str	r2, [sp, #276]	@ 0x114
 800d31a:	6862      	ldr	r2, [r4, #4]
 800d31c:	3301      	adds	r3, #1
 800d31e:	3a01      	subs	r2, #1
 800d320:	6062      	str	r2, [r4, #4]
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	e7ec      	b.n	800d300 <__ssvfiscanf_r+0x40>
 800d326:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d328:	4621      	mov	r1, r4
 800d32a:	4630      	mov	r0, r6
 800d32c:	4798      	blx	r3
 800d32e:	2800      	cmp	r0, #0
 800d330:	d0e9      	beq.n	800d306 <__ssvfiscanf_r+0x46>
 800d332:	e7ed      	b.n	800d310 <__ssvfiscanf_r+0x50>
 800d334:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d338:	f040 8085 	bne.w	800d446 <__ssvfiscanf_r+0x186>
 800d33c:	9341      	str	r3, [sp, #260]	@ 0x104
 800d33e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d340:	7853      	ldrb	r3, [r2, #1]
 800d342:	2b2a      	cmp	r3, #42	@ 0x2a
 800d344:	bf02      	ittt	eq
 800d346:	2310      	moveq	r3, #16
 800d348:	1c95      	addeq	r5, r2, #2
 800d34a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d34c:	220a      	movs	r2, #10
 800d34e:	46aa      	mov	sl, r5
 800d350:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d354:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d358:	2b09      	cmp	r3, #9
 800d35a:	d91e      	bls.n	800d39a <__ssvfiscanf_r+0xda>
 800d35c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d578 <__ssvfiscanf_r+0x2b8>
 800d360:	2203      	movs	r2, #3
 800d362:	4658      	mov	r0, fp
 800d364:	f7f2 ff3c 	bl	80001e0 <memchr>
 800d368:	b138      	cbz	r0, 800d37a <__ssvfiscanf_r+0xba>
 800d36a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d36c:	eba0 000b 	sub.w	r0, r0, fp
 800d370:	2301      	movs	r3, #1
 800d372:	4083      	lsls	r3, r0
 800d374:	4313      	orrs	r3, r2
 800d376:	9341      	str	r3, [sp, #260]	@ 0x104
 800d378:	4655      	mov	r5, sl
 800d37a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d37e:	2b78      	cmp	r3, #120	@ 0x78
 800d380:	d806      	bhi.n	800d390 <__ssvfiscanf_r+0xd0>
 800d382:	2b57      	cmp	r3, #87	@ 0x57
 800d384:	d810      	bhi.n	800d3a8 <__ssvfiscanf_r+0xe8>
 800d386:	2b25      	cmp	r3, #37	@ 0x25
 800d388:	d05d      	beq.n	800d446 <__ssvfiscanf_r+0x186>
 800d38a:	d857      	bhi.n	800d43c <__ssvfiscanf_r+0x17c>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d075      	beq.n	800d47c <__ssvfiscanf_r+0x1bc>
 800d390:	2303      	movs	r3, #3
 800d392:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d394:	230a      	movs	r3, #10
 800d396:	9342      	str	r3, [sp, #264]	@ 0x108
 800d398:	e088      	b.n	800d4ac <__ssvfiscanf_r+0x1ec>
 800d39a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d39c:	fb02 1103 	mla	r1, r2, r3, r1
 800d3a0:	3930      	subs	r1, #48	@ 0x30
 800d3a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d3a4:	4655      	mov	r5, sl
 800d3a6:	e7d2      	b.n	800d34e <__ssvfiscanf_r+0x8e>
 800d3a8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d3ac:	2a20      	cmp	r2, #32
 800d3ae:	d8ef      	bhi.n	800d390 <__ssvfiscanf_r+0xd0>
 800d3b0:	a101      	add	r1, pc, #4	@ (adr r1, 800d3b8 <__ssvfiscanf_r+0xf8>)
 800d3b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d3b6:	bf00      	nop
 800d3b8:	0800d48b 	.word	0x0800d48b
 800d3bc:	0800d391 	.word	0x0800d391
 800d3c0:	0800d391 	.word	0x0800d391
 800d3c4:	0800d4e5 	.word	0x0800d4e5
 800d3c8:	0800d391 	.word	0x0800d391
 800d3cc:	0800d391 	.word	0x0800d391
 800d3d0:	0800d391 	.word	0x0800d391
 800d3d4:	0800d391 	.word	0x0800d391
 800d3d8:	0800d391 	.word	0x0800d391
 800d3dc:	0800d391 	.word	0x0800d391
 800d3e0:	0800d391 	.word	0x0800d391
 800d3e4:	0800d4fb 	.word	0x0800d4fb
 800d3e8:	0800d4e1 	.word	0x0800d4e1
 800d3ec:	0800d443 	.word	0x0800d443
 800d3f0:	0800d443 	.word	0x0800d443
 800d3f4:	0800d443 	.word	0x0800d443
 800d3f8:	0800d391 	.word	0x0800d391
 800d3fc:	0800d49d 	.word	0x0800d49d
 800d400:	0800d391 	.word	0x0800d391
 800d404:	0800d391 	.word	0x0800d391
 800d408:	0800d391 	.word	0x0800d391
 800d40c:	0800d391 	.word	0x0800d391
 800d410:	0800d50b 	.word	0x0800d50b
 800d414:	0800d4a5 	.word	0x0800d4a5
 800d418:	0800d483 	.word	0x0800d483
 800d41c:	0800d391 	.word	0x0800d391
 800d420:	0800d391 	.word	0x0800d391
 800d424:	0800d507 	.word	0x0800d507
 800d428:	0800d391 	.word	0x0800d391
 800d42c:	0800d4e1 	.word	0x0800d4e1
 800d430:	0800d391 	.word	0x0800d391
 800d434:	0800d391 	.word	0x0800d391
 800d438:	0800d48b 	.word	0x0800d48b
 800d43c:	3b45      	subs	r3, #69	@ 0x45
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d8a6      	bhi.n	800d390 <__ssvfiscanf_r+0xd0>
 800d442:	2305      	movs	r3, #5
 800d444:	e031      	b.n	800d4aa <__ssvfiscanf_r+0x1ea>
 800d446:	6863      	ldr	r3, [r4, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	dd0d      	ble.n	800d468 <__ssvfiscanf_r+0x1a8>
 800d44c:	6823      	ldr	r3, [r4, #0]
 800d44e:	781a      	ldrb	r2, [r3, #0]
 800d450:	454a      	cmp	r2, r9
 800d452:	f040 80a6 	bne.w	800d5a2 <__ssvfiscanf_r+0x2e2>
 800d456:	3301      	adds	r3, #1
 800d458:	6862      	ldr	r2, [r4, #4]
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d45e:	3a01      	subs	r2, #1
 800d460:	3301      	adds	r3, #1
 800d462:	6062      	str	r2, [r4, #4]
 800d464:	9345      	str	r3, [sp, #276]	@ 0x114
 800d466:	e753      	b.n	800d310 <__ssvfiscanf_r+0x50>
 800d468:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d46a:	4621      	mov	r1, r4
 800d46c:	4630      	mov	r0, r6
 800d46e:	4798      	blx	r3
 800d470:	2800      	cmp	r0, #0
 800d472:	d0eb      	beq.n	800d44c <__ssvfiscanf_r+0x18c>
 800d474:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d476:	2800      	cmp	r0, #0
 800d478:	f040 808b 	bne.w	800d592 <__ssvfiscanf_r+0x2d2>
 800d47c:	f04f 30ff 	mov.w	r0, #4294967295
 800d480:	e08b      	b.n	800d59a <__ssvfiscanf_r+0x2da>
 800d482:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d484:	f042 0220 	orr.w	r2, r2, #32
 800d488:	9241      	str	r2, [sp, #260]	@ 0x104
 800d48a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d48c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d490:	9241      	str	r2, [sp, #260]	@ 0x104
 800d492:	2210      	movs	r2, #16
 800d494:	2b6e      	cmp	r3, #110	@ 0x6e
 800d496:	9242      	str	r2, [sp, #264]	@ 0x108
 800d498:	d902      	bls.n	800d4a0 <__ssvfiscanf_r+0x1e0>
 800d49a:	e005      	b.n	800d4a8 <__ssvfiscanf_r+0x1e8>
 800d49c:	2300      	movs	r3, #0
 800d49e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	e002      	b.n	800d4aa <__ssvfiscanf_r+0x1ea>
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800d4a8:	2304      	movs	r3, #4
 800d4aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d4ac:	6863      	ldr	r3, [r4, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dd39      	ble.n	800d526 <__ssvfiscanf_r+0x266>
 800d4b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d4b4:	0659      	lsls	r1, r3, #25
 800d4b6:	d404      	bmi.n	800d4c2 <__ssvfiscanf_r+0x202>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	781a      	ldrb	r2, [r3, #0]
 800d4bc:	5cba      	ldrb	r2, [r7, r2]
 800d4be:	0712      	lsls	r2, r2, #28
 800d4c0:	d438      	bmi.n	800d534 <__ssvfiscanf_r+0x274>
 800d4c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	dc47      	bgt.n	800d558 <__ssvfiscanf_r+0x298>
 800d4c8:	466b      	mov	r3, sp
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	a941      	add	r1, sp, #260	@ 0x104
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f000 f86c 	bl	800d5ac <_scanf_chars>
 800d4d4:	2801      	cmp	r0, #1
 800d4d6:	d064      	beq.n	800d5a2 <__ssvfiscanf_r+0x2e2>
 800d4d8:	2802      	cmp	r0, #2
 800d4da:	f47f af19 	bne.w	800d310 <__ssvfiscanf_r+0x50>
 800d4de:	e7c9      	b.n	800d474 <__ssvfiscanf_r+0x1b4>
 800d4e0:	220a      	movs	r2, #10
 800d4e2:	e7d7      	b.n	800d494 <__ssvfiscanf_r+0x1d4>
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	f000 fa5a 	bl	800d9a0 <__sccl>
 800d4ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4f2:	9341      	str	r3, [sp, #260]	@ 0x104
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e7d7      	b.n	800d4aa <__ssvfiscanf_r+0x1ea>
 800d4fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d4fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d500:	9341      	str	r3, [sp, #260]	@ 0x104
 800d502:	2300      	movs	r3, #0
 800d504:	e7d1      	b.n	800d4aa <__ssvfiscanf_r+0x1ea>
 800d506:	2302      	movs	r3, #2
 800d508:	e7cf      	b.n	800d4aa <__ssvfiscanf_r+0x1ea>
 800d50a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d50c:	06c3      	lsls	r3, r0, #27
 800d50e:	f53f aeff 	bmi.w	800d310 <__ssvfiscanf_r+0x50>
 800d512:	9b00      	ldr	r3, [sp, #0]
 800d514:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d516:	1d19      	adds	r1, r3, #4
 800d518:	9100      	str	r1, [sp, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	07c0      	lsls	r0, r0, #31
 800d51e:	bf4c      	ite	mi
 800d520:	801a      	strhmi	r2, [r3, #0]
 800d522:	601a      	strpl	r2, [r3, #0]
 800d524:	e6f4      	b.n	800d310 <__ssvfiscanf_r+0x50>
 800d526:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d528:	4621      	mov	r1, r4
 800d52a:	4630      	mov	r0, r6
 800d52c:	4798      	blx	r3
 800d52e:	2800      	cmp	r0, #0
 800d530:	d0bf      	beq.n	800d4b2 <__ssvfiscanf_r+0x1f2>
 800d532:	e79f      	b.n	800d474 <__ssvfiscanf_r+0x1b4>
 800d534:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d536:	3201      	adds	r2, #1
 800d538:	9245      	str	r2, [sp, #276]	@ 0x114
 800d53a:	6862      	ldr	r2, [r4, #4]
 800d53c:	3a01      	subs	r2, #1
 800d53e:	2a00      	cmp	r2, #0
 800d540:	6062      	str	r2, [r4, #4]
 800d542:	dd02      	ble.n	800d54a <__ssvfiscanf_r+0x28a>
 800d544:	3301      	adds	r3, #1
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	e7b6      	b.n	800d4b8 <__ssvfiscanf_r+0x1f8>
 800d54a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d54c:	4621      	mov	r1, r4
 800d54e:	4630      	mov	r0, r6
 800d550:	4798      	blx	r3
 800d552:	2800      	cmp	r0, #0
 800d554:	d0b0      	beq.n	800d4b8 <__ssvfiscanf_r+0x1f8>
 800d556:	e78d      	b.n	800d474 <__ssvfiscanf_r+0x1b4>
 800d558:	2b04      	cmp	r3, #4
 800d55a:	dc0f      	bgt.n	800d57c <__ssvfiscanf_r+0x2bc>
 800d55c:	466b      	mov	r3, sp
 800d55e:	4622      	mov	r2, r4
 800d560:	a941      	add	r1, sp, #260	@ 0x104
 800d562:	4630      	mov	r0, r6
 800d564:	f000 f87c 	bl	800d660 <_scanf_i>
 800d568:	e7b4      	b.n	800d4d4 <__ssvfiscanf_r+0x214>
 800d56a:	bf00      	nop
 800d56c:	0800d20d 	.word	0x0800d20d
 800d570:	0800d287 	.word	0x0800d287
 800d574:	0800ed01 	.word	0x0800ed01
 800d578:	0800eae9 	.word	0x0800eae9
 800d57c:	4b0a      	ldr	r3, [pc, #40]	@ (800d5a8 <__ssvfiscanf_r+0x2e8>)
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f43f aec6 	beq.w	800d310 <__ssvfiscanf_r+0x50>
 800d584:	466b      	mov	r3, sp
 800d586:	4622      	mov	r2, r4
 800d588:	a941      	add	r1, sp, #260	@ 0x104
 800d58a:	4630      	mov	r0, r6
 800d58c:	f7fc fe3e 	bl	800a20c <_scanf_float>
 800d590:	e7a0      	b.n	800d4d4 <__ssvfiscanf_r+0x214>
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	065b      	lsls	r3, r3, #25
 800d596:	f53f af71 	bmi.w	800d47c <__ssvfiscanf_r+0x1bc>
 800d59a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d5a4:	e7f9      	b.n	800d59a <__ssvfiscanf_r+0x2da>
 800d5a6:	bf00      	nop
 800d5a8:	0800a20d 	.word	0x0800a20d

0800d5ac <_scanf_chars>:
 800d5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	4615      	mov	r5, r2
 800d5b2:	688a      	ldr	r2, [r1, #8]
 800d5b4:	4680      	mov	r8, r0
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	b932      	cbnz	r2, 800d5c8 <_scanf_chars+0x1c>
 800d5ba:	698a      	ldr	r2, [r1, #24]
 800d5bc:	2a00      	cmp	r2, #0
 800d5be:	bf14      	ite	ne
 800d5c0:	f04f 32ff 	movne.w	r2, #4294967295
 800d5c4:	2201      	moveq	r2, #1
 800d5c6:	608a      	str	r2, [r1, #8]
 800d5c8:	6822      	ldr	r2, [r4, #0]
 800d5ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d65c <_scanf_chars+0xb0>
 800d5ce:	06d1      	lsls	r1, r2, #27
 800d5d0:	bf5f      	itttt	pl
 800d5d2:	681a      	ldrpl	r2, [r3, #0]
 800d5d4:	1d11      	addpl	r1, r2, #4
 800d5d6:	6019      	strpl	r1, [r3, #0]
 800d5d8:	6816      	ldrpl	r6, [r2, #0]
 800d5da:	2700      	movs	r7, #0
 800d5dc:	69a0      	ldr	r0, [r4, #24]
 800d5de:	b188      	cbz	r0, 800d604 <_scanf_chars+0x58>
 800d5e0:	2801      	cmp	r0, #1
 800d5e2:	d107      	bne.n	800d5f4 <_scanf_chars+0x48>
 800d5e4:	682b      	ldr	r3, [r5, #0]
 800d5e6:	781a      	ldrb	r2, [r3, #0]
 800d5e8:	6963      	ldr	r3, [r4, #20]
 800d5ea:	5c9b      	ldrb	r3, [r3, r2]
 800d5ec:	b953      	cbnz	r3, 800d604 <_scanf_chars+0x58>
 800d5ee:	2f00      	cmp	r7, #0
 800d5f0:	d031      	beq.n	800d656 <_scanf_chars+0xaa>
 800d5f2:	e022      	b.n	800d63a <_scanf_chars+0x8e>
 800d5f4:	2802      	cmp	r0, #2
 800d5f6:	d120      	bne.n	800d63a <_scanf_chars+0x8e>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d600:	071b      	lsls	r3, r3, #28
 800d602:	d41a      	bmi.n	800d63a <_scanf_chars+0x8e>
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	06da      	lsls	r2, r3, #27
 800d608:	bf5e      	ittt	pl
 800d60a:	682b      	ldrpl	r3, [r5, #0]
 800d60c:	781b      	ldrbpl	r3, [r3, #0]
 800d60e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d612:	682a      	ldr	r2, [r5, #0]
 800d614:	686b      	ldr	r3, [r5, #4]
 800d616:	3201      	adds	r2, #1
 800d618:	602a      	str	r2, [r5, #0]
 800d61a:	68a2      	ldr	r2, [r4, #8]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	3a01      	subs	r2, #1
 800d620:	606b      	str	r3, [r5, #4]
 800d622:	3701      	adds	r7, #1
 800d624:	60a2      	str	r2, [r4, #8]
 800d626:	b142      	cbz	r2, 800d63a <_scanf_chars+0x8e>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	dcd7      	bgt.n	800d5dc <_scanf_chars+0x30>
 800d62c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d630:	4629      	mov	r1, r5
 800d632:	4640      	mov	r0, r8
 800d634:	4798      	blx	r3
 800d636:	2800      	cmp	r0, #0
 800d638:	d0d0      	beq.n	800d5dc <_scanf_chars+0x30>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	f013 0310 	ands.w	r3, r3, #16
 800d640:	d105      	bne.n	800d64e <_scanf_chars+0xa2>
 800d642:	68e2      	ldr	r2, [r4, #12]
 800d644:	3201      	adds	r2, #1
 800d646:	60e2      	str	r2, [r4, #12]
 800d648:	69a2      	ldr	r2, [r4, #24]
 800d64a:	b102      	cbz	r2, 800d64e <_scanf_chars+0xa2>
 800d64c:	7033      	strb	r3, [r6, #0]
 800d64e:	6923      	ldr	r3, [r4, #16]
 800d650:	443b      	add	r3, r7
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	2000      	movs	r0, #0
 800d656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d65a:	bf00      	nop
 800d65c:	0800ed01 	.word	0x0800ed01

0800d660 <_scanf_i>:
 800d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d664:	4698      	mov	r8, r3
 800d666:	4b74      	ldr	r3, [pc, #464]	@ (800d838 <_scanf_i+0x1d8>)
 800d668:	460c      	mov	r4, r1
 800d66a:	4682      	mov	sl, r0
 800d66c:	4616      	mov	r6, r2
 800d66e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d672:	b087      	sub	sp, #28
 800d674:	ab03      	add	r3, sp, #12
 800d676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d67a:	4b70      	ldr	r3, [pc, #448]	@ (800d83c <_scanf_i+0x1dc>)
 800d67c:	69a1      	ldr	r1, [r4, #24]
 800d67e:	4a70      	ldr	r2, [pc, #448]	@ (800d840 <_scanf_i+0x1e0>)
 800d680:	2903      	cmp	r1, #3
 800d682:	bf08      	it	eq
 800d684:	461a      	moveq	r2, r3
 800d686:	68a3      	ldr	r3, [r4, #8]
 800d688:	9201      	str	r2, [sp, #4]
 800d68a:	1e5a      	subs	r2, r3, #1
 800d68c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d690:	bf88      	it	hi
 800d692:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d696:	4627      	mov	r7, r4
 800d698:	bf82      	ittt	hi
 800d69a:	eb03 0905 	addhi.w	r9, r3, r5
 800d69e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d6a2:	60a3      	strhi	r3, [r4, #8]
 800d6a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d6a8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d6ac:	bf98      	it	ls
 800d6ae:	f04f 0900 	movls.w	r9, #0
 800d6b2:	6023      	str	r3, [r4, #0]
 800d6b4:	463d      	mov	r5, r7
 800d6b6:	f04f 0b00 	mov.w	fp, #0
 800d6ba:	6831      	ldr	r1, [r6, #0]
 800d6bc:	ab03      	add	r3, sp, #12
 800d6be:	7809      	ldrb	r1, [r1, #0]
 800d6c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	f7f2 fd8b 	bl	80001e0 <memchr>
 800d6ca:	b328      	cbz	r0, 800d718 <_scanf_i+0xb8>
 800d6cc:	f1bb 0f01 	cmp.w	fp, #1
 800d6d0:	d159      	bne.n	800d786 <_scanf_i+0x126>
 800d6d2:	6862      	ldr	r2, [r4, #4]
 800d6d4:	b92a      	cbnz	r2, 800d6e2 <_scanf_i+0x82>
 800d6d6:	6822      	ldr	r2, [r4, #0]
 800d6d8:	2108      	movs	r1, #8
 800d6da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6de:	6061      	str	r1, [r4, #4]
 800d6e0:	6022      	str	r2, [r4, #0]
 800d6e2:	6822      	ldr	r2, [r4, #0]
 800d6e4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d6e8:	6022      	str	r2, [r4, #0]
 800d6ea:	68a2      	ldr	r2, [r4, #8]
 800d6ec:	1e51      	subs	r1, r2, #1
 800d6ee:	60a1      	str	r1, [r4, #8]
 800d6f0:	b192      	cbz	r2, 800d718 <_scanf_i+0xb8>
 800d6f2:	6832      	ldr	r2, [r6, #0]
 800d6f4:	1c51      	adds	r1, r2, #1
 800d6f6:	6031      	str	r1, [r6, #0]
 800d6f8:	7812      	ldrb	r2, [r2, #0]
 800d6fa:	f805 2b01 	strb.w	r2, [r5], #1
 800d6fe:	6872      	ldr	r2, [r6, #4]
 800d700:	3a01      	subs	r2, #1
 800d702:	2a00      	cmp	r2, #0
 800d704:	6072      	str	r2, [r6, #4]
 800d706:	dc07      	bgt.n	800d718 <_scanf_i+0xb8>
 800d708:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d70c:	4631      	mov	r1, r6
 800d70e:	4650      	mov	r0, sl
 800d710:	4790      	blx	r2
 800d712:	2800      	cmp	r0, #0
 800d714:	f040 8085 	bne.w	800d822 <_scanf_i+0x1c2>
 800d718:	f10b 0b01 	add.w	fp, fp, #1
 800d71c:	f1bb 0f03 	cmp.w	fp, #3
 800d720:	d1cb      	bne.n	800d6ba <_scanf_i+0x5a>
 800d722:	6863      	ldr	r3, [r4, #4]
 800d724:	b90b      	cbnz	r3, 800d72a <_scanf_i+0xca>
 800d726:	230a      	movs	r3, #10
 800d728:	6063      	str	r3, [r4, #4]
 800d72a:	6863      	ldr	r3, [r4, #4]
 800d72c:	4945      	ldr	r1, [pc, #276]	@ (800d844 <_scanf_i+0x1e4>)
 800d72e:	6960      	ldr	r0, [r4, #20]
 800d730:	1ac9      	subs	r1, r1, r3
 800d732:	f000 f935 	bl	800d9a0 <__sccl>
 800d736:	f04f 0b00 	mov.w	fp, #0
 800d73a:	68a3      	ldr	r3, [r4, #8]
 800d73c:	6822      	ldr	r2, [r4, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d03d      	beq.n	800d7be <_scanf_i+0x15e>
 800d742:	6831      	ldr	r1, [r6, #0]
 800d744:	6960      	ldr	r0, [r4, #20]
 800d746:	f891 c000 	ldrb.w	ip, [r1]
 800d74a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d74e:	2800      	cmp	r0, #0
 800d750:	d035      	beq.n	800d7be <_scanf_i+0x15e>
 800d752:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d756:	d124      	bne.n	800d7a2 <_scanf_i+0x142>
 800d758:	0510      	lsls	r0, r2, #20
 800d75a:	d522      	bpl.n	800d7a2 <_scanf_i+0x142>
 800d75c:	f10b 0b01 	add.w	fp, fp, #1
 800d760:	f1b9 0f00 	cmp.w	r9, #0
 800d764:	d003      	beq.n	800d76e <_scanf_i+0x10e>
 800d766:	3301      	adds	r3, #1
 800d768:	f109 39ff 	add.w	r9, r9, #4294967295
 800d76c:	60a3      	str	r3, [r4, #8]
 800d76e:	6873      	ldr	r3, [r6, #4]
 800d770:	3b01      	subs	r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	6073      	str	r3, [r6, #4]
 800d776:	dd1b      	ble.n	800d7b0 <_scanf_i+0x150>
 800d778:	6833      	ldr	r3, [r6, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	6033      	str	r3, [r6, #0]
 800d77e:	68a3      	ldr	r3, [r4, #8]
 800d780:	3b01      	subs	r3, #1
 800d782:	60a3      	str	r3, [r4, #8]
 800d784:	e7d9      	b.n	800d73a <_scanf_i+0xda>
 800d786:	f1bb 0f02 	cmp.w	fp, #2
 800d78a:	d1ae      	bne.n	800d6ea <_scanf_i+0x8a>
 800d78c:	6822      	ldr	r2, [r4, #0]
 800d78e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d792:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d796:	d1c4      	bne.n	800d722 <_scanf_i+0xc2>
 800d798:	2110      	movs	r1, #16
 800d79a:	6061      	str	r1, [r4, #4]
 800d79c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d7a0:	e7a2      	b.n	800d6e8 <_scanf_i+0x88>
 800d7a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d7a6:	6022      	str	r2, [r4, #0]
 800d7a8:	780b      	ldrb	r3, [r1, #0]
 800d7aa:	f805 3b01 	strb.w	r3, [r5], #1
 800d7ae:	e7de      	b.n	800d76e <_scanf_i+0x10e>
 800d7b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4650      	mov	r0, sl
 800d7b8:	4798      	blx	r3
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d0df      	beq.n	800d77e <_scanf_i+0x11e>
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	05d9      	lsls	r1, r3, #23
 800d7c2:	d50d      	bpl.n	800d7e0 <_scanf_i+0x180>
 800d7c4:	42bd      	cmp	r5, r7
 800d7c6:	d909      	bls.n	800d7dc <_scanf_i+0x17c>
 800d7c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d7cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d7d0:	4632      	mov	r2, r6
 800d7d2:	4650      	mov	r0, sl
 800d7d4:	4798      	blx	r3
 800d7d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800d7da:	464d      	mov	r5, r9
 800d7dc:	42bd      	cmp	r5, r7
 800d7de:	d028      	beq.n	800d832 <_scanf_i+0x1d2>
 800d7e0:	6822      	ldr	r2, [r4, #0]
 800d7e2:	f012 0210 	ands.w	r2, r2, #16
 800d7e6:	d113      	bne.n	800d810 <_scanf_i+0x1b0>
 800d7e8:	702a      	strb	r2, [r5, #0]
 800d7ea:	6863      	ldr	r3, [r4, #4]
 800d7ec:	9e01      	ldr	r6, [sp, #4]
 800d7ee:	4639      	mov	r1, r7
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	47b0      	blx	r6
 800d7f4:	f8d8 3000 	ldr.w	r3, [r8]
 800d7f8:	6821      	ldr	r1, [r4, #0]
 800d7fa:	1d1a      	adds	r2, r3, #4
 800d7fc:	f8c8 2000 	str.w	r2, [r8]
 800d800:	f011 0f20 	tst.w	r1, #32
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	d00f      	beq.n	800d828 <_scanf_i+0x1c8>
 800d808:	6018      	str	r0, [r3, #0]
 800d80a:	68e3      	ldr	r3, [r4, #12]
 800d80c:	3301      	adds	r3, #1
 800d80e:	60e3      	str	r3, [r4, #12]
 800d810:	6923      	ldr	r3, [r4, #16]
 800d812:	1bed      	subs	r5, r5, r7
 800d814:	445d      	add	r5, fp
 800d816:	442b      	add	r3, r5
 800d818:	6123      	str	r3, [r4, #16]
 800d81a:	2000      	movs	r0, #0
 800d81c:	b007      	add	sp, #28
 800d81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d822:	f04f 0b00 	mov.w	fp, #0
 800d826:	e7ca      	b.n	800d7be <_scanf_i+0x15e>
 800d828:	07ca      	lsls	r2, r1, #31
 800d82a:	bf4c      	ite	mi
 800d82c:	8018      	strhmi	r0, [r3, #0]
 800d82e:	6018      	strpl	r0, [r3, #0]
 800d830:	e7eb      	b.n	800d80a <_scanf_i+0x1aa>
 800d832:	2001      	movs	r0, #1
 800d834:	e7f2      	b.n	800d81c <_scanf_i+0x1bc>
 800d836:	bf00      	nop
 800d838:	0800e9a0 	.word	0x0800e9a0
 800d83c:	0800cf59 	.word	0x0800cf59
 800d840:	0800e365 	.word	0x0800e365
 800d844:	0800eb04 	.word	0x0800eb04

0800d848 <__sflush_r>:
 800d848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d850:	0716      	lsls	r6, r2, #28
 800d852:	4605      	mov	r5, r0
 800d854:	460c      	mov	r4, r1
 800d856:	d454      	bmi.n	800d902 <__sflush_r+0xba>
 800d858:	684b      	ldr	r3, [r1, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	dc02      	bgt.n	800d864 <__sflush_r+0x1c>
 800d85e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d860:	2b00      	cmp	r3, #0
 800d862:	dd48      	ble.n	800d8f6 <__sflush_r+0xae>
 800d864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d866:	2e00      	cmp	r6, #0
 800d868:	d045      	beq.n	800d8f6 <__sflush_r+0xae>
 800d86a:	2300      	movs	r3, #0
 800d86c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d870:	682f      	ldr	r7, [r5, #0]
 800d872:	6a21      	ldr	r1, [r4, #32]
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	d030      	beq.n	800d8da <__sflush_r+0x92>
 800d878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	0759      	lsls	r1, r3, #29
 800d87e:	d505      	bpl.n	800d88c <__sflush_r+0x44>
 800d880:	6863      	ldr	r3, [r4, #4]
 800d882:	1ad2      	subs	r2, r2, r3
 800d884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d886:	b10b      	cbz	r3, 800d88c <__sflush_r+0x44>
 800d888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d88a:	1ad2      	subs	r2, r2, r3
 800d88c:	2300      	movs	r3, #0
 800d88e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d890:	6a21      	ldr	r1, [r4, #32]
 800d892:	4628      	mov	r0, r5
 800d894:	47b0      	blx	r6
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	89a3      	ldrh	r3, [r4, #12]
 800d89a:	d106      	bne.n	800d8aa <__sflush_r+0x62>
 800d89c:	6829      	ldr	r1, [r5, #0]
 800d89e:	291d      	cmp	r1, #29
 800d8a0:	d82b      	bhi.n	800d8fa <__sflush_r+0xb2>
 800d8a2:	4a2a      	ldr	r2, [pc, #168]	@ (800d94c <__sflush_r+0x104>)
 800d8a4:	40ca      	lsrs	r2, r1
 800d8a6:	07d6      	lsls	r6, r2, #31
 800d8a8:	d527      	bpl.n	800d8fa <__sflush_r+0xb2>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	6062      	str	r2, [r4, #4]
 800d8ae:	04d9      	lsls	r1, r3, #19
 800d8b0:	6922      	ldr	r2, [r4, #16]
 800d8b2:	6022      	str	r2, [r4, #0]
 800d8b4:	d504      	bpl.n	800d8c0 <__sflush_r+0x78>
 800d8b6:	1c42      	adds	r2, r0, #1
 800d8b8:	d101      	bne.n	800d8be <__sflush_r+0x76>
 800d8ba:	682b      	ldr	r3, [r5, #0]
 800d8bc:	b903      	cbnz	r3, 800d8c0 <__sflush_r+0x78>
 800d8be:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8c2:	602f      	str	r7, [r5, #0]
 800d8c4:	b1b9      	cbz	r1, 800d8f6 <__sflush_r+0xae>
 800d8c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8ca:	4299      	cmp	r1, r3
 800d8cc:	d002      	beq.n	800d8d4 <__sflush_r+0x8c>
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f7fd ff16 	bl	800b700 <_free_r>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8d8:	e00d      	b.n	800d8f6 <__sflush_r+0xae>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	4628      	mov	r0, r5
 800d8de:	47b0      	blx	r6
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	1c50      	adds	r0, r2, #1
 800d8e4:	d1c9      	bne.n	800d87a <__sflush_r+0x32>
 800d8e6:	682b      	ldr	r3, [r5, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d0c6      	beq.n	800d87a <__sflush_r+0x32>
 800d8ec:	2b1d      	cmp	r3, #29
 800d8ee:	d001      	beq.n	800d8f4 <__sflush_r+0xac>
 800d8f0:	2b16      	cmp	r3, #22
 800d8f2:	d11e      	bne.n	800d932 <__sflush_r+0xea>
 800d8f4:	602f      	str	r7, [r5, #0]
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	e022      	b.n	800d940 <__sflush_r+0xf8>
 800d8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8fe:	b21b      	sxth	r3, r3
 800d900:	e01b      	b.n	800d93a <__sflush_r+0xf2>
 800d902:	690f      	ldr	r7, [r1, #16]
 800d904:	2f00      	cmp	r7, #0
 800d906:	d0f6      	beq.n	800d8f6 <__sflush_r+0xae>
 800d908:	0793      	lsls	r3, r2, #30
 800d90a:	680e      	ldr	r6, [r1, #0]
 800d90c:	bf08      	it	eq
 800d90e:	694b      	ldreq	r3, [r1, #20]
 800d910:	600f      	str	r7, [r1, #0]
 800d912:	bf18      	it	ne
 800d914:	2300      	movne	r3, #0
 800d916:	eba6 0807 	sub.w	r8, r6, r7
 800d91a:	608b      	str	r3, [r1, #8]
 800d91c:	f1b8 0f00 	cmp.w	r8, #0
 800d920:	dde9      	ble.n	800d8f6 <__sflush_r+0xae>
 800d922:	6a21      	ldr	r1, [r4, #32]
 800d924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d926:	4643      	mov	r3, r8
 800d928:	463a      	mov	r2, r7
 800d92a:	4628      	mov	r0, r5
 800d92c:	47b0      	blx	r6
 800d92e:	2800      	cmp	r0, #0
 800d930:	dc08      	bgt.n	800d944 <__sflush_r+0xfc>
 800d932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d93a:	81a3      	strh	r3, [r4, #12]
 800d93c:	f04f 30ff 	mov.w	r0, #4294967295
 800d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d944:	4407      	add	r7, r0
 800d946:	eba8 0800 	sub.w	r8, r8, r0
 800d94a:	e7e7      	b.n	800d91c <__sflush_r+0xd4>
 800d94c:	20400001 	.word	0x20400001

0800d950 <_fflush_r>:
 800d950:	b538      	push	{r3, r4, r5, lr}
 800d952:	690b      	ldr	r3, [r1, #16]
 800d954:	4605      	mov	r5, r0
 800d956:	460c      	mov	r4, r1
 800d958:	b913      	cbnz	r3, 800d960 <_fflush_r+0x10>
 800d95a:	2500      	movs	r5, #0
 800d95c:	4628      	mov	r0, r5
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	b118      	cbz	r0, 800d96a <_fflush_r+0x1a>
 800d962:	6a03      	ldr	r3, [r0, #32]
 800d964:	b90b      	cbnz	r3, 800d96a <_fflush_r+0x1a>
 800d966:	f7fc feeb 	bl	800a740 <__sinit>
 800d96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0f3      	beq.n	800d95a <_fflush_r+0xa>
 800d972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d974:	07d0      	lsls	r0, r2, #31
 800d976:	d404      	bmi.n	800d982 <_fflush_r+0x32>
 800d978:	0599      	lsls	r1, r3, #22
 800d97a:	d402      	bmi.n	800d982 <_fflush_r+0x32>
 800d97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d97e:	f7fd f85c 	bl	800aa3a <__retarget_lock_acquire_recursive>
 800d982:	4628      	mov	r0, r5
 800d984:	4621      	mov	r1, r4
 800d986:	f7ff ff5f 	bl	800d848 <__sflush_r>
 800d98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d98c:	07da      	lsls	r2, r3, #31
 800d98e:	4605      	mov	r5, r0
 800d990:	d4e4      	bmi.n	800d95c <_fflush_r+0xc>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	059b      	lsls	r3, r3, #22
 800d996:	d4e1      	bmi.n	800d95c <_fflush_r+0xc>
 800d998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d99a:	f7fd f84f 	bl	800aa3c <__retarget_lock_release_recursive>
 800d99e:	e7dd      	b.n	800d95c <_fflush_r+0xc>

0800d9a0 <__sccl>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	780b      	ldrb	r3, [r1, #0]
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	2b5e      	cmp	r3, #94	@ 0x5e
 800d9a8:	bf0b      	itete	eq
 800d9aa:	784b      	ldrbeq	r3, [r1, #1]
 800d9ac:	1c4a      	addne	r2, r1, #1
 800d9ae:	1c8a      	addeq	r2, r1, #2
 800d9b0:	2100      	movne	r1, #0
 800d9b2:	bf08      	it	eq
 800d9b4:	2101      	moveq	r1, #1
 800d9b6:	3801      	subs	r0, #1
 800d9b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d9bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d9c0:	42a8      	cmp	r0, r5
 800d9c2:	d1fb      	bne.n	800d9bc <__sccl+0x1c>
 800d9c4:	b90b      	cbnz	r3, 800d9ca <__sccl+0x2a>
 800d9c6:	1e50      	subs	r0, r2, #1
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	f081 0101 	eor.w	r1, r1, #1
 800d9ce:	54e1      	strb	r1, [r4, r3]
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d9d8:	2d2d      	cmp	r5, #45	@ 0x2d
 800d9da:	d005      	beq.n	800d9e8 <__sccl+0x48>
 800d9dc:	2d5d      	cmp	r5, #93	@ 0x5d
 800d9de:	d016      	beq.n	800da0e <__sccl+0x6e>
 800d9e0:	2d00      	cmp	r5, #0
 800d9e2:	d0f1      	beq.n	800d9c8 <__sccl+0x28>
 800d9e4:	462b      	mov	r3, r5
 800d9e6:	e7f2      	b.n	800d9ce <__sccl+0x2e>
 800d9e8:	7846      	ldrb	r6, [r0, #1]
 800d9ea:	2e5d      	cmp	r6, #93	@ 0x5d
 800d9ec:	d0fa      	beq.n	800d9e4 <__sccl+0x44>
 800d9ee:	42b3      	cmp	r3, r6
 800d9f0:	dcf8      	bgt.n	800d9e4 <__sccl+0x44>
 800d9f2:	3002      	adds	r0, #2
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	3201      	adds	r2, #1
 800d9f8:	4296      	cmp	r6, r2
 800d9fa:	54a1      	strb	r1, [r4, r2]
 800d9fc:	dcfb      	bgt.n	800d9f6 <__sccl+0x56>
 800d9fe:	1af2      	subs	r2, r6, r3
 800da00:	3a01      	subs	r2, #1
 800da02:	1c5d      	adds	r5, r3, #1
 800da04:	42b3      	cmp	r3, r6
 800da06:	bfa8      	it	ge
 800da08:	2200      	movge	r2, #0
 800da0a:	18ab      	adds	r3, r5, r2
 800da0c:	e7e1      	b.n	800d9d2 <__sccl+0x32>
 800da0e:	4610      	mov	r0, r2
 800da10:	e7da      	b.n	800d9c8 <__sccl+0x28>

0800da12 <__submore>:
 800da12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da16:	460c      	mov	r4, r1
 800da18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800da1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da1e:	4299      	cmp	r1, r3
 800da20:	d11d      	bne.n	800da5e <__submore+0x4c>
 800da22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800da26:	f7fd fedf 	bl	800b7e8 <_malloc_r>
 800da2a:	b918      	cbnz	r0, 800da34 <__submore+0x22>
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295
 800da30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da38:	63a3      	str	r3, [r4, #56]	@ 0x38
 800da3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800da3e:	6360      	str	r0, [r4, #52]	@ 0x34
 800da40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800da44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800da48:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800da4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800da50:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800da54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800da58:	6020      	str	r0, [r4, #0]
 800da5a:	2000      	movs	r0, #0
 800da5c:	e7e8      	b.n	800da30 <__submore+0x1e>
 800da5e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800da60:	0077      	lsls	r7, r6, #1
 800da62:	463a      	mov	r2, r7
 800da64:	f000 fbe1 	bl	800e22a <_realloc_r>
 800da68:	4605      	mov	r5, r0
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d0de      	beq.n	800da2c <__submore+0x1a>
 800da6e:	eb00 0806 	add.w	r8, r0, r6
 800da72:	4601      	mov	r1, r0
 800da74:	4632      	mov	r2, r6
 800da76:	4640      	mov	r0, r8
 800da78:	f000 f842 	bl	800db00 <memcpy>
 800da7c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800da80:	f8c4 8000 	str.w	r8, [r4]
 800da84:	e7e9      	b.n	800da5a <__submore+0x48>

0800da86 <memmove>:
 800da86:	4288      	cmp	r0, r1
 800da88:	b510      	push	{r4, lr}
 800da8a:	eb01 0402 	add.w	r4, r1, r2
 800da8e:	d902      	bls.n	800da96 <memmove+0x10>
 800da90:	4284      	cmp	r4, r0
 800da92:	4623      	mov	r3, r4
 800da94:	d807      	bhi.n	800daa6 <memmove+0x20>
 800da96:	1e43      	subs	r3, r0, #1
 800da98:	42a1      	cmp	r1, r4
 800da9a:	d008      	beq.n	800daae <memmove+0x28>
 800da9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daa4:	e7f8      	b.n	800da98 <memmove+0x12>
 800daa6:	4402      	add	r2, r0
 800daa8:	4601      	mov	r1, r0
 800daaa:	428a      	cmp	r2, r1
 800daac:	d100      	bne.n	800dab0 <memmove+0x2a>
 800daae:	bd10      	pop	{r4, pc}
 800dab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dab4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dab8:	e7f7      	b.n	800daaa <memmove+0x24>

0800daba <strncmp>:
 800daba:	b510      	push	{r4, lr}
 800dabc:	b16a      	cbz	r2, 800dada <strncmp+0x20>
 800dabe:	3901      	subs	r1, #1
 800dac0:	1884      	adds	r4, r0, r2
 800dac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dac6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800daca:	429a      	cmp	r2, r3
 800dacc:	d103      	bne.n	800dad6 <strncmp+0x1c>
 800dace:	42a0      	cmp	r0, r4
 800dad0:	d001      	beq.n	800dad6 <strncmp+0x1c>
 800dad2:	2a00      	cmp	r2, #0
 800dad4:	d1f5      	bne.n	800dac2 <strncmp+0x8>
 800dad6:	1ad0      	subs	r0, r2, r3
 800dad8:	bd10      	pop	{r4, pc}
 800dada:	4610      	mov	r0, r2
 800dadc:	e7fc      	b.n	800dad8 <strncmp+0x1e>
	...

0800dae0 <_sbrk_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d06      	ldr	r5, [pc, #24]	@ (800dafc <_sbrk_r+0x1c>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	602b      	str	r3, [r5, #0]
 800daec:	f7f4 f8e0 	bl	8001cb0 <_sbrk>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_sbrk_r+0x1a>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_sbrk_r+0x1a>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	20002168 	.word	0x20002168

0800db00 <memcpy>:
 800db00:	440a      	add	r2, r1
 800db02:	4291      	cmp	r1, r2
 800db04:	f100 33ff 	add.w	r3, r0, #4294967295
 800db08:	d100      	bne.n	800db0c <memcpy+0xc>
 800db0a:	4770      	bx	lr
 800db0c:	b510      	push	{r4, lr}
 800db0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db16:	4291      	cmp	r1, r2
 800db18:	d1f9      	bne.n	800db0e <memcpy+0xe>
 800db1a:	bd10      	pop	{r4, pc}
 800db1c:	0000      	movs	r0, r0
	...

0800db20 <nan>:
 800db20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800db28 <nan+0x8>
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	00000000 	.word	0x00000000
 800db2c:	7ff80000 	.word	0x7ff80000

0800db30 <__assert_func>:
 800db30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db32:	4614      	mov	r4, r2
 800db34:	461a      	mov	r2, r3
 800db36:	4b09      	ldr	r3, [pc, #36]	@ (800db5c <__assert_func+0x2c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4605      	mov	r5, r0
 800db3c:	68d8      	ldr	r0, [r3, #12]
 800db3e:	b14c      	cbz	r4, 800db54 <__assert_func+0x24>
 800db40:	4b07      	ldr	r3, [pc, #28]	@ (800db60 <__assert_func+0x30>)
 800db42:	9100      	str	r1, [sp, #0]
 800db44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db48:	4906      	ldr	r1, [pc, #24]	@ (800db64 <__assert_func+0x34>)
 800db4a:	462b      	mov	r3, r5
 800db4c:	f000 fc1a 	bl	800e384 <fiprintf>
 800db50:	f000 fc2a 	bl	800e3a8 <abort>
 800db54:	4b04      	ldr	r3, [pc, #16]	@ (800db68 <__assert_func+0x38>)
 800db56:	461c      	mov	r4, r3
 800db58:	e7f3      	b.n	800db42 <__assert_func+0x12>
 800db5a:	bf00      	nop
 800db5c:	20000120 	.word	0x20000120
 800db60:	0800eb17 	.word	0x0800eb17
 800db64:	0800eb24 	.word	0x0800eb24
 800db68:	0800eb52 	.word	0x0800eb52

0800db6c <_calloc_r>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	fba1 5402 	umull	r5, r4, r1, r2
 800db72:	b934      	cbnz	r4, 800db82 <_calloc_r+0x16>
 800db74:	4629      	mov	r1, r5
 800db76:	f7fd fe37 	bl	800b7e8 <_malloc_r>
 800db7a:	4606      	mov	r6, r0
 800db7c:	b928      	cbnz	r0, 800db8a <_calloc_r+0x1e>
 800db7e:	4630      	mov	r0, r6
 800db80:	bd70      	pop	{r4, r5, r6, pc}
 800db82:	220c      	movs	r2, #12
 800db84:	6002      	str	r2, [r0, #0]
 800db86:	2600      	movs	r6, #0
 800db88:	e7f9      	b.n	800db7e <_calloc_r+0x12>
 800db8a:	462a      	mov	r2, r5
 800db8c:	4621      	mov	r1, r4
 800db8e:	f7fc fed6 	bl	800a93e <memset>
 800db92:	e7f4      	b.n	800db7e <_calloc_r+0x12>

0800db94 <rshift>:
 800db94:	6903      	ldr	r3, [r0, #16]
 800db96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dba2:	f100 0414 	add.w	r4, r0, #20
 800dba6:	dd45      	ble.n	800dc34 <rshift+0xa0>
 800dba8:	f011 011f 	ands.w	r1, r1, #31
 800dbac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dbb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dbb4:	d10c      	bne.n	800dbd0 <rshift+0x3c>
 800dbb6:	f100 0710 	add.w	r7, r0, #16
 800dbba:	4629      	mov	r1, r5
 800dbbc:	42b1      	cmp	r1, r6
 800dbbe:	d334      	bcc.n	800dc2a <rshift+0x96>
 800dbc0:	1a9b      	subs	r3, r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	1eea      	subs	r2, r5, #3
 800dbc6:	4296      	cmp	r6, r2
 800dbc8:	bf38      	it	cc
 800dbca:	2300      	movcc	r3, #0
 800dbcc:	4423      	add	r3, r4
 800dbce:	e015      	b.n	800dbfc <rshift+0x68>
 800dbd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dbd4:	f1c1 0820 	rsb	r8, r1, #32
 800dbd8:	40cf      	lsrs	r7, r1
 800dbda:	f105 0e04 	add.w	lr, r5, #4
 800dbde:	46a1      	mov	r9, r4
 800dbe0:	4576      	cmp	r6, lr
 800dbe2:	46f4      	mov	ip, lr
 800dbe4:	d815      	bhi.n	800dc12 <rshift+0x7e>
 800dbe6:	1a9a      	subs	r2, r3, r2
 800dbe8:	0092      	lsls	r2, r2, #2
 800dbea:	3a04      	subs	r2, #4
 800dbec:	3501      	adds	r5, #1
 800dbee:	42ae      	cmp	r6, r5
 800dbf0:	bf38      	it	cc
 800dbf2:	2200      	movcc	r2, #0
 800dbf4:	18a3      	adds	r3, r4, r2
 800dbf6:	50a7      	str	r7, [r4, r2]
 800dbf8:	b107      	cbz	r7, 800dbfc <rshift+0x68>
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	1b1a      	subs	r2, r3, r4
 800dbfe:	42a3      	cmp	r3, r4
 800dc00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc04:	bf08      	it	eq
 800dc06:	2300      	moveq	r3, #0
 800dc08:	6102      	str	r2, [r0, #16]
 800dc0a:	bf08      	it	eq
 800dc0c:	6143      	streq	r3, [r0, #20]
 800dc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc12:	f8dc c000 	ldr.w	ip, [ip]
 800dc16:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc1a:	ea4c 0707 	orr.w	r7, ip, r7
 800dc1e:	f849 7b04 	str.w	r7, [r9], #4
 800dc22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc26:	40cf      	lsrs	r7, r1
 800dc28:	e7da      	b.n	800dbe0 <rshift+0x4c>
 800dc2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc32:	e7c3      	b.n	800dbbc <rshift+0x28>
 800dc34:	4623      	mov	r3, r4
 800dc36:	e7e1      	b.n	800dbfc <rshift+0x68>

0800dc38 <__hexdig_fun>:
 800dc38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dc3c:	2b09      	cmp	r3, #9
 800dc3e:	d802      	bhi.n	800dc46 <__hexdig_fun+0xe>
 800dc40:	3820      	subs	r0, #32
 800dc42:	b2c0      	uxtb	r0, r0
 800dc44:	4770      	bx	lr
 800dc46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dc4a:	2b05      	cmp	r3, #5
 800dc4c:	d801      	bhi.n	800dc52 <__hexdig_fun+0x1a>
 800dc4e:	3847      	subs	r0, #71	@ 0x47
 800dc50:	e7f7      	b.n	800dc42 <__hexdig_fun+0xa>
 800dc52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dc56:	2b05      	cmp	r3, #5
 800dc58:	d801      	bhi.n	800dc5e <__hexdig_fun+0x26>
 800dc5a:	3827      	subs	r0, #39	@ 0x27
 800dc5c:	e7f1      	b.n	800dc42 <__hexdig_fun+0xa>
 800dc5e:	2000      	movs	r0, #0
 800dc60:	4770      	bx	lr
	...

0800dc64 <__gethex>:
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc68:	b085      	sub	sp, #20
 800dc6a:	468a      	mov	sl, r1
 800dc6c:	9302      	str	r3, [sp, #8]
 800dc6e:	680b      	ldr	r3, [r1, #0]
 800dc70:	9001      	str	r0, [sp, #4]
 800dc72:	4690      	mov	r8, r2
 800dc74:	1c9c      	adds	r4, r3, #2
 800dc76:	46a1      	mov	r9, r4
 800dc78:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dc7c:	2830      	cmp	r0, #48	@ 0x30
 800dc7e:	d0fa      	beq.n	800dc76 <__gethex+0x12>
 800dc80:	eba9 0303 	sub.w	r3, r9, r3
 800dc84:	f1a3 0b02 	sub.w	fp, r3, #2
 800dc88:	f7ff ffd6 	bl	800dc38 <__hexdig_fun>
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d168      	bne.n	800dd64 <__gethex+0x100>
 800dc92:	49a0      	ldr	r1, [pc, #640]	@ (800df14 <__gethex+0x2b0>)
 800dc94:	2201      	movs	r2, #1
 800dc96:	4648      	mov	r0, r9
 800dc98:	f7ff ff0f 	bl	800daba <strncmp>
 800dc9c:	4607      	mov	r7, r0
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d167      	bne.n	800dd72 <__gethex+0x10e>
 800dca2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dca6:	4626      	mov	r6, r4
 800dca8:	f7ff ffc6 	bl	800dc38 <__hexdig_fun>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d062      	beq.n	800dd76 <__gethex+0x112>
 800dcb0:	4623      	mov	r3, r4
 800dcb2:	7818      	ldrb	r0, [r3, #0]
 800dcb4:	2830      	cmp	r0, #48	@ 0x30
 800dcb6:	4699      	mov	r9, r3
 800dcb8:	f103 0301 	add.w	r3, r3, #1
 800dcbc:	d0f9      	beq.n	800dcb2 <__gethex+0x4e>
 800dcbe:	f7ff ffbb 	bl	800dc38 <__hexdig_fun>
 800dcc2:	fab0 f580 	clz	r5, r0
 800dcc6:	096d      	lsrs	r5, r5, #5
 800dcc8:	f04f 0b01 	mov.w	fp, #1
 800dccc:	464a      	mov	r2, r9
 800dcce:	4616      	mov	r6, r2
 800dcd0:	3201      	adds	r2, #1
 800dcd2:	7830      	ldrb	r0, [r6, #0]
 800dcd4:	f7ff ffb0 	bl	800dc38 <__hexdig_fun>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d1f8      	bne.n	800dcce <__gethex+0x6a>
 800dcdc:	498d      	ldr	r1, [pc, #564]	@ (800df14 <__gethex+0x2b0>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	4630      	mov	r0, r6
 800dce2:	f7ff feea 	bl	800daba <strncmp>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	d13f      	bne.n	800dd6a <__gethex+0x106>
 800dcea:	b944      	cbnz	r4, 800dcfe <__gethex+0x9a>
 800dcec:	1c74      	adds	r4, r6, #1
 800dcee:	4622      	mov	r2, r4
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	3201      	adds	r2, #1
 800dcf4:	7830      	ldrb	r0, [r6, #0]
 800dcf6:	f7ff ff9f 	bl	800dc38 <__hexdig_fun>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d1f8      	bne.n	800dcf0 <__gethex+0x8c>
 800dcfe:	1ba4      	subs	r4, r4, r6
 800dd00:	00a7      	lsls	r7, r4, #2
 800dd02:	7833      	ldrb	r3, [r6, #0]
 800dd04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd08:	2b50      	cmp	r3, #80	@ 0x50
 800dd0a:	d13e      	bne.n	800dd8a <__gethex+0x126>
 800dd0c:	7873      	ldrb	r3, [r6, #1]
 800dd0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd10:	d033      	beq.n	800dd7a <__gethex+0x116>
 800dd12:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd14:	d034      	beq.n	800dd80 <__gethex+0x11c>
 800dd16:	1c71      	adds	r1, r6, #1
 800dd18:	2400      	movs	r4, #0
 800dd1a:	7808      	ldrb	r0, [r1, #0]
 800dd1c:	f7ff ff8c 	bl	800dc38 <__hexdig_fun>
 800dd20:	1e43      	subs	r3, r0, #1
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b18      	cmp	r3, #24
 800dd26:	d830      	bhi.n	800dd8a <__gethex+0x126>
 800dd28:	f1a0 0210 	sub.w	r2, r0, #16
 800dd2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd30:	f7ff ff82 	bl	800dc38 <__hexdig_fun>
 800dd34:	f100 3cff 	add.w	ip, r0, #4294967295
 800dd38:	fa5f fc8c 	uxtb.w	ip, ip
 800dd3c:	f1bc 0f18 	cmp.w	ip, #24
 800dd40:	f04f 030a 	mov.w	r3, #10
 800dd44:	d91e      	bls.n	800dd84 <__gethex+0x120>
 800dd46:	b104      	cbz	r4, 800dd4a <__gethex+0xe6>
 800dd48:	4252      	negs	r2, r2
 800dd4a:	4417      	add	r7, r2
 800dd4c:	f8ca 1000 	str.w	r1, [sl]
 800dd50:	b1ed      	cbz	r5, 800dd8e <__gethex+0x12a>
 800dd52:	f1bb 0f00 	cmp.w	fp, #0
 800dd56:	bf0c      	ite	eq
 800dd58:	2506      	moveq	r5, #6
 800dd5a:	2500      	movne	r5, #0
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	b005      	add	sp, #20
 800dd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd64:	2500      	movs	r5, #0
 800dd66:	462c      	mov	r4, r5
 800dd68:	e7b0      	b.n	800dccc <__gethex+0x68>
 800dd6a:	2c00      	cmp	r4, #0
 800dd6c:	d1c7      	bne.n	800dcfe <__gethex+0x9a>
 800dd6e:	4627      	mov	r7, r4
 800dd70:	e7c7      	b.n	800dd02 <__gethex+0x9e>
 800dd72:	464e      	mov	r6, r9
 800dd74:	462f      	mov	r7, r5
 800dd76:	2501      	movs	r5, #1
 800dd78:	e7c3      	b.n	800dd02 <__gethex+0x9e>
 800dd7a:	2400      	movs	r4, #0
 800dd7c:	1cb1      	adds	r1, r6, #2
 800dd7e:	e7cc      	b.n	800dd1a <__gethex+0xb6>
 800dd80:	2401      	movs	r4, #1
 800dd82:	e7fb      	b.n	800dd7c <__gethex+0x118>
 800dd84:	fb03 0002 	mla	r0, r3, r2, r0
 800dd88:	e7ce      	b.n	800dd28 <__gethex+0xc4>
 800dd8a:	4631      	mov	r1, r6
 800dd8c:	e7de      	b.n	800dd4c <__gethex+0xe8>
 800dd8e:	eba6 0309 	sub.w	r3, r6, r9
 800dd92:	3b01      	subs	r3, #1
 800dd94:	4629      	mov	r1, r5
 800dd96:	2b07      	cmp	r3, #7
 800dd98:	dc0a      	bgt.n	800ddb0 <__gethex+0x14c>
 800dd9a:	9801      	ldr	r0, [sp, #4]
 800dd9c:	f7fd fdb0 	bl	800b900 <_Balloc>
 800dda0:	4604      	mov	r4, r0
 800dda2:	b940      	cbnz	r0, 800ddb6 <__gethex+0x152>
 800dda4:	4b5c      	ldr	r3, [pc, #368]	@ (800df18 <__gethex+0x2b4>)
 800dda6:	4602      	mov	r2, r0
 800dda8:	21e4      	movs	r1, #228	@ 0xe4
 800ddaa:	485c      	ldr	r0, [pc, #368]	@ (800df1c <__gethex+0x2b8>)
 800ddac:	f7ff fec0 	bl	800db30 <__assert_func>
 800ddb0:	3101      	adds	r1, #1
 800ddb2:	105b      	asrs	r3, r3, #1
 800ddb4:	e7ef      	b.n	800dd96 <__gethex+0x132>
 800ddb6:	f100 0a14 	add.w	sl, r0, #20
 800ddba:	2300      	movs	r3, #0
 800ddbc:	4655      	mov	r5, sl
 800ddbe:	469b      	mov	fp, r3
 800ddc0:	45b1      	cmp	r9, r6
 800ddc2:	d337      	bcc.n	800de34 <__gethex+0x1d0>
 800ddc4:	f845 bb04 	str.w	fp, [r5], #4
 800ddc8:	eba5 050a 	sub.w	r5, r5, sl
 800ddcc:	10ad      	asrs	r5, r5, #2
 800ddce:	6125      	str	r5, [r4, #16]
 800ddd0:	4658      	mov	r0, fp
 800ddd2:	f7fd fe87 	bl	800bae4 <__hi0bits>
 800ddd6:	016d      	lsls	r5, r5, #5
 800ddd8:	f8d8 6000 	ldr.w	r6, [r8]
 800dddc:	1a2d      	subs	r5, r5, r0
 800ddde:	42b5      	cmp	r5, r6
 800dde0:	dd54      	ble.n	800de8c <__gethex+0x228>
 800dde2:	1bad      	subs	r5, r5, r6
 800dde4:	4629      	mov	r1, r5
 800dde6:	4620      	mov	r0, r4
 800dde8:	f7fe fa13 	bl	800c212 <__any_on>
 800ddec:	4681      	mov	r9, r0
 800ddee:	b178      	cbz	r0, 800de10 <__gethex+0x1ac>
 800ddf0:	1e6b      	subs	r3, r5, #1
 800ddf2:	1159      	asrs	r1, r3, #5
 800ddf4:	f003 021f 	and.w	r2, r3, #31
 800ddf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ddfc:	f04f 0901 	mov.w	r9, #1
 800de00:	fa09 f202 	lsl.w	r2, r9, r2
 800de04:	420a      	tst	r2, r1
 800de06:	d003      	beq.n	800de10 <__gethex+0x1ac>
 800de08:	454b      	cmp	r3, r9
 800de0a:	dc36      	bgt.n	800de7a <__gethex+0x216>
 800de0c:	f04f 0902 	mov.w	r9, #2
 800de10:	4629      	mov	r1, r5
 800de12:	4620      	mov	r0, r4
 800de14:	f7ff febe 	bl	800db94 <rshift>
 800de18:	442f      	add	r7, r5
 800de1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de1e:	42bb      	cmp	r3, r7
 800de20:	da42      	bge.n	800dea8 <__gethex+0x244>
 800de22:	9801      	ldr	r0, [sp, #4]
 800de24:	4621      	mov	r1, r4
 800de26:	f7fd fdab 	bl	800b980 <_Bfree>
 800de2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de2c:	2300      	movs	r3, #0
 800de2e:	6013      	str	r3, [r2, #0]
 800de30:	25a3      	movs	r5, #163	@ 0xa3
 800de32:	e793      	b.n	800dd5c <__gethex+0xf8>
 800de34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800de38:	2a2e      	cmp	r2, #46	@ 0x2e
 800de3a:	d012      	beq.n	800de62 <__gethex+0x1fe>
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	d104      	bne.n	800de4a <__gethex+0x1e6>
 800de40:	f845 bb04 	str.w	fp, [r5], #4
 800de44:	f04f 0b00 	mov.w	fp, #0
 800de48:	465b      	mov	r3, fp
 800de4a:	7830      	ldrb	r0, [r6, #0]
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	f7ff fef3 	bl	800dc38 <__hexdig_fun>
 800de52:	9b03      	ldr	r3, [sp, #12]
 800de54:	f000 000f 	and.w	r0, r0, #15
 800de58:	4098      	lsls	r0, r3
 800de5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800de5e:	3304      	adds	r3, #4
 800de60:	e7ae      	b.n	800ddc0 <__gethex+0x15c>
 800de62:	45b1      	cmp	r9, r6
 800de64:	d8ea      	bhi.n	800de3c <__gethex+0x1d8>
 800de66:	492b      	ldr	r1, [pc, #172]	@ (800df14 <__gethex+0x2b0>)
 800de68:	9303      	str	r3, [sp, #12]
 800de6a:	2201      	movs	r2, #1
 800de6c:	4630      	mov	r0, r6
 800de6e:	f7ff fe24 	bl	800daba <strncmp>
 800de72:	9b03      	ldr	r3, [sp, #12]
 800de74:	2800      	cmp	r0, #0
 800de76:	d1e1      	bne.n	800de3c <__gethex+0x1d8>
 800de78:	e7a2      	b.n	800ddc0 <__gethex+0x15c>
 800de7a:	1ea9      	subs	r1, r5, #2
 800de7c:	4620      	mov	r0, r4
 800de7e:	f7fe f9c8 	bl	800c212 <__any_on>
 800de82:	2800      	cmp	r0, #0
 800de84:	d0c2      	beq.n	800de0c <__gethex+0x1a8>
 800de86:	f04f 0903 	mov.w	r9, #3
 800de8a:	e7c1      	b.n	800de10 <__gethex+0x1ac>
 800de8c:	da09      	bge.n	800dea2 <__gethex+0x23e>
 800de8e:	1b75      	subs	r5, r6, r5
 800de90:	4621      	mov	r1, r4
 800de92:	9801      	ldr	r0, [sp, #4]
 800de94:	462a      	mov	r2, r5
 800de96:	f7fd ff83 	bl	800bda0 <__lshift>
 800de9a:	1b7f      	subs	r7, r7, r5
 800de9c:	4604      	mov	r4, r0
 800de9e:	f100 0a14 	add.w	sl, r0, #20
 800dea2:	f04f 0900 	mov.w	r9, #0
 800dea6:	e7b8      	b.n	800de1a <__gethex+0x1b6>
 800dea8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800deac:	42bd      	cmp	r5, r7
 800deae:	dd6f      	ble.n	800df90 <__gethex+0x32c>
 800deb0:	1bed      	subs	r5, r5, r7
 800deb2:	42ae      	cmp	r6, r5
 800deb4:	dc34      	bgt.n	800df20 <__gethex+0x2bc>
 800deb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800deba:	2b02      	cmp	r3, #2
 800debc:	d022      	beq.n	800df04 <__gethex+0x2a0>
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d024      	beq.n	800df0c <__gethex+0x2a8>
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d115      	bne.n	800def2 <__gethex+0x28e>
 800dec6:	42ae      	cmp	r6, r5
 800dec8:	d113      	bne.n	800def2 <__gethex+0x28e>
 800deca:	2e01      	cmp	r6, #1
 800decc:	d10b      	bne.n	800dee6 <__gethex+0x282>
 800dece:	9a02      	ldr	r2, [sp, #8]
 800ded0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	2301      	movs	r3, #1
 800ded8:	6123      	str	r3, [r4, #16]
 800deda:	f8ca 3000 	str.w	r3, [sl]
 800dede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dee0:	2562      	movs	r5, #98	@ 0x62
 800dee2:	601c      	str	r4, [r3, #0]
 800dee4:	e73a      	b.n	800dd5c <__gethex+0xf8>
 800dee6:	1e71      	subs	r1, r6, #1
 800dee8:	4620      	mov	r0, r4
 800deea:	f7fe f992 	bl	800c212 <__any_on>
 800deee:	2800      	cmp	r0, #0
 800def0:	d1ed      	bne.n	800dece <__gethex+0x26a>
 800def2:	9801      	ldr	r0, [sp, #4]
 800def4:	4621      	mov	r1, r4
 800def6:	f7fd fd43 	bl	800b980 <_Bfree>
 800defa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800defc:	2300      	movs	r3, #0
 800defe:	6013      	str	r3, [r2, #0]
 800df00:	2550      	movs	r5, #80	@ 0x50
 800df02:	e72b      	b.n	800dd5c <__gethex+0xf8>
 800df04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1f3      	bne.n	800def2 <__gethex+0x28e>
 800df0a:	e7e0      	b.n	800dece <__gethex+0x26a>
 800df0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1dd      	bne.n	800dece <__gethex+0x26a>
 800df12:	e7ee      	b.n	800def2 <__gethex+0x28e>
 800df14:	0800eae1 	.word	0x0800eae1
 800df18:	0800ea77 	.word	0x0800ea77
 800df1c:	0800eb53 	.word	0x0800eb53
 800df20:	1e6f      	subs	r7, r5, #1
 800df22:	f1b9 0f00 	cmp.w	r9, #0
 800df26:	d130      	bne.n	800df8a <__gethex+0x326>
 800df28:	b127      	cbz	r7, 800df34 <__gethex+0x2d0>
 800df2a:	4639      	mov	r1, r7
 800df2c:	4620      	mov	r0, r4
 800df2e:	f7fe f970 	bl	800c212 <__any_on>
 800df32:	4681      	mov	r9, r0
 800df34:	117a      	asrs	r2, r7, #5
 800df36:	2301      	movs	r3, #1
 800df38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800df3c:	f007 071f 	and.w	r7, r7, #31
 800df40:	40bb      	lsls	r3, r7
 800df42:	4213      	tst	r3, r2
 800df44:	4629      	mov	r1, r5
 800df46:	4620      	mov	r0, r4
 800df48:	bf18      	it	ne
 800df4a:	f049 0902 	orrne.w	r9, r9, #2
 800df4e:	f7ff fe21 	bl	800db94 <rshift>
 800df52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800df56:	1b76      	subs	r6, r6, r5
 800df58:	2502      	movs	r5, #2
 800df5a:	f1b9 0f00 	cmp.w	r9, #0
 800df5e:	d047      	beq.n	800dff0 <__gethex+0x38c>
 800df60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df64:	2b02      	cmp	r3, #2
 800df66:	d015      	beq.n	800df94 <__gethex+0x330>
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d017      	beq.n	800df9c <__gethex+0x338>
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d109      	bne.n	800df84 <__gethex+0x320>
 800df70:	f019 0f02 	tst.w	r9, #2
 800df74:	d006      	beq.n	800df84 <__gethex+0x320>
 800df76:	f8da 3000 	ldr.w	r3, [sl]
 800df7a:	ea49 0903 	orr.w	r9, r9, r3
 800df7e:	f019 0f01 	tst.w	r9, #1
 800df82:	d10e      	bne.n	800dfa2 <__gethex+0x33e>
 800df84:	f045 0510 	orr.w	r5, r5, #16
 800df88:	e032      	b.n	800dff0 <__gethex+0x38c>
 800df8a:	f04f 0901 	mov.w	r9, #1
 800df8e:	e7d1      	b.n	800df34 <__gethex+0x2d0>
 800df90:	2501      	movs	r5, #1
 800df92:	e7e2      	b.n	800df5a <__gethex+0x2f6>
 800df94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df96:	f1c3 0301 	rsb	r3, r3, #1
 800df9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0f0      	beq.n	800df84 <__gethex+0x320>
 800dfa2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dfa6:	f104 0314 	add.w	r3, r4, #20
 800dfaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dfae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dfb2:	f04f 0c00 	mov.w	ip, #0
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dfc0:	d01b      	beq.n	800dffa <__gethex+0x396>
 800dfc2:	3201      	adds	r2, #1
 800dfc4:	6002      	str	r2, [r0, #0]
 800dfc6:	2d02      	cmp	r5, #2
 800dfc8:	f104 0314 	add.w	r3, r4, #20
 800dfcc:	d13c      	bne.n	800e048 <__gethex+0x3e4>
 800dfce:	f8d8 2000 	ldr.w	r2, [r8]
 800dfd2:	3a01      	subs	r2, #1
 800dfd4:	42b2      	cmp	r2, r6
 800dfd6:	d109      	bne.n	800dfec <__gethex+0x388>
 800dfd8:	1171      	asrs	r1, r6, #5
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfe0:	f006 061f 	and.w	r6, r6, #31
 800dfe4:	fa02 f606 	lsl.w	r6, r2, r6
 800dfe8:	421e      	tst	r6, r3
 800dfea:	d13a      	bne.n	800e062 <__gethex+0x3fe>
 800dfec:	f045 0520 	orr.w	r5, r5, #32
 800dff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dff2:	601c      	str	r4, [r3, #0]
 800dff4:	9b02      	ldr	r3, [sp, #8]
 800dff6:	601f      	str	r7, [r3, #0]
 800dff8:	e6b0      	b.n	800dd5c <__gethex+0xf8>
 800dffa:	4299      	cmp	r1, r3
 800dffc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e000:	d8d9      	bhi.n	800dfb6 <__gethex+0x352>
 800e002:	68a3      	ldr	r3, [r4, #8]
 800e004:	459b      	cmp	fp, r3
 800e006:	db17      	blt.n	800e038 <__gethex+0x3d4>
 800e008:	6861      	ldr	r1, [r4, #4]
 800e00a:	9801      	ldr	r0, [sp, #4]
 800e00c:	3101      	adds	r1, #1
 800e00e:	f7fd fc77 	bl	800b900 <_Balloc>
 800e012:	4681      	mov	r9, r0
 800e014:	b918      	cbnz	r0, 800e01e <__gethex+0x3ba>
 800e016:	4b1a      	ldr	r3, [pc, #104]	@ (800e080 <__gethex+0x41c>)
 800e018:	4602      	mov	r2, r0
 800e01a:	2184      	movs	r1, #132	@ 0x84
 800e01c:	e6c5      	b.n	800ddaa <__gethex+0x146>
 800e01e:	6922      	ldr	r2, [r4, #16]
 800e020:	3202      	adds	r2, #2
 800e022:	f104 010c 	add.w	r1, r4, #12
 800e026:	0092      	lsls	r2, r2, #2
 800e028:	300c      	adds	r0, #12
 800e02a:	f7ff fd69 	bl	800db00 <memcpy>
 800e02e:	4621      	mov	r1, r4
 800e030:	9801      	ldr	r0, [sp, #4]
 800e032:	f7fd fca5 	bl	800b980 <_Bfree>
 800e036:	464c      	mov	r4, r9
 800e038:	6923      	ldr	r3, [r4, #16]
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e040:	6122      	str	r2, [r4, #16]
 800e042:	2201      	movs	r2, #1
 800e044:	615a      	str	r2, [r3, #20]
 800e046:	e7be      	b.n	800dfc6 <__gethex+0x362>
 800e048:	6922      	ldr	r2, [r4, #16]
 800e04a:	455a      	cmp	r2, fp
 800e04c:	dd0b      	ble.n	800e066 <__gethex+0x402>
 800e04e:	2101      	movs	r1, #1
 800e050:	4620      	mov	r0, r4
 800e052:	f7ff fd9f 	bl	800db94 <rshift>
 800e056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e05a:	3701      	adds	r7, #1
 800e05c:	42bb      	cmp	r3, r7
 800e05e:	f6ff aee0 	blt.w	800de22 <__gethex+0x1be>
 800e062:	2501      	movs	r5, #1
 800e064:	e7c2      	b.n	800dfec <__gethex+0x388>
 800e066:	f016 061f 	ands.w	r6, r6, #31
 800e06a:	d0fa      	beq.n	800e062 <__gethex+0x3fe>
 800e06c:	4453      	add	r3, sl
 800e06e:	f1c6 0620 	rsb	r6, r6, #32
 800e072:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e076:	f7fd fd35 	bl	800bae4 <__hi0bits>
 800e07a:	42b0      	cmp	r0, r6
 800e07c:	dbe7      	blt.n	800e04e <__gethex+0x3ea>
 800e07e:	e7f0      	b.n	800e062 <__gethex+0x3fe>
 800e080:	0800ea77 	.word	0x0800ea77

0800e084 <L_shift>:
 800e084:	f1c2 0208 	rsb	r2, r2, #8
 800e088:	0092      	lsls	r2, r2, #2
 800e08a:	b570      	push	{r4, r5, r6, lr}
 800e08c:	f1c2 0620 	rsb	r6, r2, #32
 800e090:	6843      	ldr	r3, [r0, #4]
 800e092:	6804      	ldr	r4, [r0, #0]
 800e094:	fa03 f506 	lsl.w	r5, r3, r6
 800e098:	432c      	orrs	r4, r5
 800e09a:	40d3      	lsrs	r3, r2
 800e09c:	6004      	str	r4, [r0, #0]
 800e09e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e0a2:	4288      	cmp	r0, r1
 800e0a4:	d3f4      	bcc.n	800e090 <L_shift+0xc>
 800e0a6:	bd70      	pop	{r4, r5, r6, pc}

0800e0a8 <__match>:
 800e0a8:	b530      	push	{r4, r5, lr}
 800e0aa:	6803      	ldr	r3, [r0, #0]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0b2:	b914      	cbnz	r4, 800e0ba <__match+0x12>
 800e0b4:	6003      	str	r3, [r0, #0]
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	bd30      	pop	{r4, r5, pc}
 800e0ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e0c2:	2d19      	cmp	r5, #25
 800e0c4:	bf98      	it	ls
 800e0c6:	3220      	addls	r2, #32
 800e0c8:	42a2      	cmp	r2, r4
 800e0ca:	d0f0      	beq.n	800e0ae <__match+0x6>
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	e7f3      	b.n	800e0b8 <__match+0x10>

0800e0d0 <__hexnan>:
 800e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	680b      	ldr	r3, [r1, #0]
 800e0d6:	6801      	ldr	r1, [r0, #0]
 800e0d8:	115e      	asrs	r6, r3, #5
 800e0da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e0de:	f013 031f 	ands.w	r3, r3, #31
 800e0e2:	b087      	sub	sp, #28
 800e0e4:	bf18      	it	ne
 800e0e6:	3604      	addne	r6, #4
 800e0e8:	2500      	movs	r5, #0
 800e0ea:	1f37      	subs	r7, r6, #4
 800e0ec:	4682      	mov	sl, r0
 800e0ee:	4690      	mov	r8, r2
 800e0f0:	9301      	str	r3, [sp, #4]
 800e0f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e0f6:	46b9      	mov	r9, r7
 800e0f8:	463c      	mov	r4, r7
 800e0fa:	9502      	str	r5, [sp, #8]
 800e0fc:	46ab      	mov	fp, r5
 800e0fe:	784a      	ldrb	r2, [r1, #1]
 800e100:	1c4b      	adds	r3, r1, #1
 800e102:	9303      	str	r3, [sp, #12]
 800e104:	b342      	cbz	r2, 800e158 <__hexnan+0x88>
 800e106:	4610      	mov	r0, r2
 800e108:	9105      	str	r1, [sp, #20]
 800e10a:	9204      	str	r2, [sp, #16]
 800e10c:	f7ff fd94 	bl	800dc38 <__hexdig_fun>
 800e110:	2800      	cmp	r0, #0
 800e112:	d151      	bne.n	800e1b8 <__hexnan+0xe8>
 800e114:	9a04      	ldr	r2, [sp, #16]
 800e116:	9905      	ldr	r1, [sp, #20]
 800e118:	2a20      	cmp	r2, #32
 800e11a:	d818      	bhi.n	800e14e <__hexnan+0x7e>
 800e11c:	9b02      	ldr	r3, [sp, #8]
 800e11e:	459b      	cmp	fp, r3
 800e120:	dd13      	ble.n	800e14a <__hexnan+0x7a>
 800e122:	454c      	cmp	r4, r9
 800e124:	d206      	bcs.n	800e134 <__hexnan+0x64>
 800e126:	2d07      	cmp	r5, #7
 800e128:	dc04      	bgt.n	800e134 <__hexnan+0x64>
 800e12a:	462a      	mov	r2, r5
 800e12c:	4649      	mov	r1, r9
 800e12e:	4620      	mov	r0, r4
 800e130:	f7ff ffa8 	bl	800e084 <L_shift>
 800e134:	4544      	cmp	r4, r8
 800e136:	d952      	bls.n	800e1de <__hexnan+0x10e>
 800e138:	2300      	movs	r3, #0
 800e13a:	f1a4 0904 	sub.w	r9, r4, #4
 800e13e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e142:	f8cd b008 	str.w	fp, [sp, #8]
 800e146:	464c      	mov	r4, r9
 800e148:	461d      	mov	r5, r3
 800e14a:	9903      	ldr	r1, [sp, #12]
 800e14c:	e7d7      	b.n	800e0fe <__hexnan+0x2e>
 800e14e:	2a29      	cmp	r2, #41	@ 0x29
 800e150:	d157      	bne.n	800e202 <__hexnan+0x132>
 800e152:	3102      	adds	r1, #2
 800e154:	f8ca 1000 	str.w	r1, [sl]
 800e158:	f1bb 0f00 	cmp.w	fp, #0
 800e15c:	d051      	beq.n	800e202 <__hexnan+0x132>
 800e15e:	454c      	cmp	r4, r9
 800e160:	d206      	bcs.n	800e170 <__hexnan+0xa0>
 800e162:	2d07      	cmp	r5, #7
 800e164:	dc04      	bgt.n	800e170 <__hexnan+0xa0>
 800e166:	462a      	mov	r2, r5
 800e168:	4649      	mov	r1, r9
 800e16a:	4620      	mov	r0, r4
 800e16c:	f7ff ff8a 	bl	800e084 <L_shift>
 800e170:	4544      	cmp	r4, r8
 800e172:	d936      	bls.n	800e1e2 <__hexnan+0x112>
 800e174:	f1a8 0204 	sub.w	r2, r8, #4
 800e178:	4623      	mov	r3, r4
 800e17a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e17e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e182:	429f      	cmp	r7, r3
 800e184:	d2f9      	bcs.n	800e17a <__hexnan+0xaa>
 800e186:	1b3b      	subs	r3, r7, r4
 800e188:	f023 0303 	bic.w	r3, r3, #3
 800e18c:	3304      	adds	r3, #4
 800e18e:	3401      	adds	r4, #1
 800e190:	3e03      	subs	r6, #3
 800e192:	42b4      	cmp	r4, r6
 800e194:	bf88      	it	hi
 800e196:	2304      	movhi	r3, #4
 800e198:	4443      	add	r3, r8
 800e19a:	2200      	movs	r2, #0
 800e19c:	f843 2b04 	str.w	r2, [r3], #4
 800e1a0:	429f      	cmp	r7, r3
 800e1a2:	d2fb      	bcs.n	800e19c <__hexnan+0xcc>
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	b91b      	cbnz	r3, 800e1b0 <__hexnan+0xe0>
 800e1a8:	4547      	cmp	r7, r8
 800e1aa:	d128      	bne.n	800e1fe <__hexnan+0x12e>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	2005      	movs	r0, #5
 800e1b2:	b007      	add	sp, #28
 800e1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b8:	3501      	adds	r5, #1
 800e1ba:	2d08      	cmp	r5, #8
 800e1bc:	f10b 0b01 	add.w	fp, fp, #1
 800e1c0:	dd06      	ble.n	800e1d0 <__hexnan+0x100>
 800e1c2:	4544      	cmp	r4, r8
 800e1c4:	d9c1      	bls.n	800e14a <__hexnan+0x7a>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1cc:	2501      	movs	r5, #1
 800e1ce:	3c04      	subs	r4, #4
 800e1d0:	6822      	ldr	r2, [r4, #0]
 800e1d2:	f000 000f 	and.w	r0, r0, #15
 800e1d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e1da:	6020      	str	r0, [r4, #0]
 800e1dc:	e7b5      	b.n	800e14a <__hexnan+0x7a>
 800e1de:	2508      	movs	r5, #8
 800e1e0:	e7b3      	b.n	800e14a <__hexnan+0x7a>
 800e1e2:	9b01      	ldr	r3, [sp, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d0dd      	beq.n	800e1a4 <__hexnan+0xd4>
 800e1e8:	f1c3 0320 	rsb	r3, r3, #32
 800e1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f0:	40da      	lsrs	r2, r3
 800e1f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e1fc:	e7d2      	b.n	800e1a4 <__hexnan+0xd4>
 800e1fe:	3f04      	subs	r7, #4
 800e200:	e7d0      	b.n	800e1a4 <__hexnan+0xd4>
 800e202:	2004      	movs	r0, #4
 800e204:	e7d5      	b.n	800e1b2 <__hexnan+0xe2>

0800e206 <__ascii_mbtowc>:
 800e206:	b082      	sub	sp, #8
 800e208:	b901      	cbnz	r1, 800e20c <__ascii_mbtowc+0x6>
 800e20a:	a901      	add	r1, sp, #4
 800e20c:	b142      	cbz	r2, 800e220 <__ascii_mbtowc+0x1a>
 800e20e:	b14b      	cbz	r3, 800e224 <__ascii_mbtowc+0x1e>
 800e210:	7813      	ldrb	r3, [r2, #0]
 800e212:	600b      	str	r3, [r1, #0]
 800e214:	7812      	ldrb	r2, [r2, #0]
 800e216:	1e10      	subs	r0, r2, #0
 800e218:	bf18      	it	ne
 800e21a:	2001      	movne	r0, #1
 800e21c:	b002      	add	sp, #8
 800e21e:	4770      	bx	lr
 800e220:	4610      	mov	r0, r2
 800e222:	e7fb      	b.n	800e21c <__ascii_mbtowc+0x16>
 800e224:	f06f 0001 	mvn.w	r0, #1
 800e228:	e7f8      	b.n	800e21c <__ascii_mbtowc+0x16>

0800e22a <_realloc_r>:
 800e22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22e:	4607      	mov	r7, r0
 800e230:	4614      	mov	r4, r2
 800e232:	460d      	mov	r5, r1
 800e234:	b921      	cbnz	r1, 800e240 <_realloc_r+0x16>
 800e236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e23a:	4611      	mov	r1, r2
 800e23c:	f7fd bad4 	b.w	800b7e8 <_malloc_r>
 800e240:	b92a      	cbnz	r2, 800e24e <_realloc_r+0x24>
 800e242:	f7fd fa5d 	bl	800b700 <_free_r>
 800e246:	4625      	mov	r5, r4
 800e248:	4628      	mov	r0, r5
 800e24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24e:	f000 f8b2 	bl	800e3b6 <_malloc_usable_size_r>
 800e252:	4284      	cmp	r4, r0
 800e254:	4606      	mov	r6, r0
 800e256:	d802      	bhi.n	800e25e <_realloc_r+0x34>
 800e258:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e25c:	d8f4      	bhi.n	800e248 <_realloc_r+0x1e>
 800e25e:	4621      	mov	r1, r4
 800e260:	4638      	mov	r0, r7
 800e262:	f7fd fac1 	bl	800b7e8 <_malloc_r>
 800e266:	4680      	mov	r8, r0
 800e268:	b908      	cbnz	r0, 800e26e <_realloc_r+0x44>
 800e26a:	4645      	mov	r5, r8
 800e26c:	e7ec      	b.n	800e248 <_realloc_r+0x1e>
 800e26e:	42b4      	cmp	r4, r6
 800e270:	4622      	mov	r2, r4
 800e272:	4629      	mov	r1, r5
 800e274:	bf28      	it	cs
 800e276:	4632      	movcs	r2, r6
 800e278:	f7ff fc42 	bl	800db00 <memcpy>
 800e27c:	4629      	mov	r1, r5
 800e27e:	4638      	mov	r0, r7
 800e280:	f7fd fa3e 	bl	800b700 <_free_r>
 800e284:	e7f1      	b.n	800e26a <_realloc_r+0x40>
	...

0800e288 <_strtoul_l.isra.0>:
 800e288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e28c:	4e34      	ldr	r6, [pc, #208]	@ (800e360 <_strtoul_l.isra.0+0xd8>)
 800e28e:	4686      	mov	lr, r0
 800e290:	460d      	mov	r5, r1
 800e292:	4628      	mov	r0, r5
 800e294:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e298:	5d37      	ldrb	r7, [r6, r4]
 800e29a:	f017 0708 	ands.w	r7, r7, #8
 800e29e:	d1f8      	bne.n	800e292 <_strtoul_l.isra.0+0xa>
 800e2a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800e2a2:	d110      	bne.n	800e2c6 <_strtoul_l.isra.0+0x3e>
 800e2a4:	782c      	ldrb	r4, [r5, #0]
 800e2a6:	2701      	movs	r7, #1
 800e2a8:	1c85      	adds	r5, r0, #2
 800e2aa:	f033 0010 	bics.w	r0, r3, #16
 800e2ae:	d115      	bne.n	800e2dc <_strtoul_l.isra.0+0x54>
 800e2b0:	2c30      	cmp	r4, #48	@ 0x30
 800e2b2:	d10d      	bne.n	800e2d0 <_strtoul_l.isra.0+0x48>
 800e2b4:	7828      	ldrb	r0, [r5, #0]
 800e2b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e2ba:	2858      	cmp	r0, #88	@ 0x58
 800e2bc:	d108      	bne.n	800e2d0 <_strtoul_l.isra.0+0x48>
 800e2be:	786c      	ldrb	r4, [r5, #1]
 800e2c0:	3502      	adds	r5, #2
 800e2c2:	2310      	movs	r3, #16
 800e2c4:	e00a      	b.n	800e2dc <_strtoul_l.isra.0+0x54>
 800e2c6:	2c2b      	cmp	r4, #43	@ 0x2b
 800e2c8:	bf04      	itt	eq
 800e2ca:	782c      	ldrbeq	r4, [r5, #0]
 800e2cc:	1c85      	addeq	r5, r0, #2
 800e2ce:	e7ec      	b.n	800e2aa <_strtoul_l.isra.0+0x22>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1f6      	bne.n	800e2c2 <_strtoul_l.isra.0+0x3a>
 800e2d4:	2c30      	cmp	r4, #48	@ 0x30
 800e2d6:	bf14      	ite	ne
 800e2d8:	230a      	movne	r3, #10
 800e2da:	2308      	moveq	r3, #8
 800e2dc:	f04f 38ff 	mov.w	r8, #4294967295
 800e2e0:	2600      	movs	r6, #0
 800e2e2:	fbb8 f8f3 	udiv	r8, r8, r3
 800e2e6:	fb03 f908 	mul.w	r9, r3, r8
 800e2ea:	ea6f 0909 	mvn.w	r9, r9
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e2f4:	f1bc 0f09 	cmp.w	ip, #9
 800e2f8:	d810      	bhi.n	800e31c <_strtoul_l.isra.0+0x94>
 800e2fa:	4664      	mov	r4, ip
 800e2fc:	42a3      	cmp	r3, r4
 800e2fe:	dd1e      	ble.n	800e33e <_strtoul_l.isra.0+0xb6>
 800e300:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e304:	d007      	beq.n	800e316 <_strtoul_l.isra.0+0x8e>
 800e306:	4580      	cmp	r8, r0
 800e308:	d316      	bcc.n	800e338 <_strtoul_l.isra.0+0xb0>
 800e30a:	d101      	bne.n	800e310 <_strtoul_l.isra.0+0x88>
 800e30c:	45a1      	cmp	r9, r4
 800e30e:	db13      	blt.n	800e338 <_strtoul_l.isra.0+0xb0>
 800e310:	fb00 4003 	mla	r0, r0, r3, r4
 800e314:	2601      	movs	r6, #1
 800e316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e31a:	e7e9      	b.n	800e2f0 <_strtoul_l.isra.0+0x68>
 800e31c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e320:	f1bc 0f19 	cmp.w	ip, #25
 800e324:	d801      	bhi.n	800e32a <_strtoul_l.isra.0+0xa2>
 800e326:	3c37      	subs	r4, #55	@ 0x37
 800e328:	e7e8      	b.n	800e2fc <_strtoul_l.isra.0+0x74>
 800e32a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e32e:	f1bc 0f19 	cmp.w	ip, #25
 800e332:	d804      	bhi.n	800e33e <_strtoul_l.isra.0+0xb6>
 800e334:	3c57      	subs	r4, #87	@ 0x57
 800e336:	e7e1      	b.n	800e2fc <_strtoul_l.isra.0+0x74>
 800e338:	f04f 36ff 	mov.w	r6, #4294967295
 800e33c:	e7eb      	b.n	800e316 <_strtoul_l.isra.0+0x8e>
 800e33e:	1c73      	adds	r3, r6, #1
 800e340:	d106      	bne.n	800e350 <_strtoul_l.isra.0+0xc8>
 800e342:	2322      	movs	r3, #34	@ 0x22
 800e344:	f8ce 3000 	str.w	r3, [lr]
 800e348:	4630      	mov	r0, r6
 800e34a:	b932      	cbnz	r2, 800e35a <_strtoul_l.isra.0+0xd2>
 800e34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e350:	b107      	cbz	r7, 800e354 <_strtoul_l.isra.0+0xcc>
 800e352:	4240      	negs	r0, r0
 800e354:	2a00      	cmp	r2, #0
 800e356:	d0f9      	beq.n	800e34c <_strtoul_l.isra.0+0xc4>
 800e358:	b106      	cbz	r6, 800e35c <_strtoul_l.isra.0+0xd4>
 800e35a:	1e69      	subs	r1, r5, #1
 800e35c:	6011      	str	r1, [r2, #0]
 800e35e:	e7f5      	b.n	800e34c <_strtoul_l.isra.0+0xc4>
 800e360:	0800ed01 	.word	0x0800ed01

0800e364 <_strtoul_r>:
 800e364:	f7ff bf90 	b.w	800e288 <_strtoul_l.isra.0>

0800e368 <__ascii_wctomb>:
 800e368:	4603      	mov	r3, r0
 800e36a:	4608      	mov	r0, r1
 800e36c:	b141      	cbz	r1, 800e380 <__ascii_wctomb+0x18>
 800e36e:	2aff      	cmp	r2, #255	@ 0xff
 800e370:	d904      	bls.n	800e37c <__ascii_wctomb+0x14>
 800e372:	228a      	movs	r2, #138	@ 0x8a
 800e374:	601a      	str	r2, [r3, #0]
 800e376:	f04f 30ff 	mov.w	r0, #4294967295
 800e37a:	4770      	bx	lr
 800e37c:	700a      	strb	r2, [r1, #0]
 800e37e:	2001      	movs	r0, #1
 800e380:	4770      	bx	lr
	...

0800e384 <fiprintf>:
 800e384:	b40e      	push	{r1, r2, r3}
 800e386:	b503      	push	{r0, r1, lr}
 800e388:	4601      	mov	r1, r0
 800e38a:	ab03      	add	r3, sp, #12
 800e38c:	4805      	ldr	r0, [pc, #20]	@ (800e3a4 <fiprintf+0x20>)
 800e38e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e392:	6800      	ldr	r0, [r0, #0]
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	f000 f83f 	bl	800e418 <_vfiprintf_r>
 800e39a:	b002      	add	sp, #8
 800e39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a0:	b003      	add	sp, #12
 800e3a2:	4770      	bx	lr
 800e3a4:	20000120 	.word	0x20000120

0800e3a8 <abort>:
 800e3a8:	b508      	push	{r3, lr}
 800e3aa:	2006      	movs	r0, #6
 800e3ac:	f000 fa08 	bl	800e7c0 <raise>
 800e3b0:	2001      	movs	r0, #1
 800e3b2:	f7f3 fc05 	bl	8001bc0 <_exit>

0800e3b6 <_malloc_usable_size_r>:
 800e3b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ba:	1f18      	subs	r0, r3, #4
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	bfbc      	itt	lt
 800e3c0:	580b      	ldrlt	r3, [r1, r0]
 800e3c2:	18c0      	addlt	r0, r0, r3
 800e3c4:	4770      	bx	lr

0800e3c6 <__sfputc_r>:
 800e3c6:	6893      	ldr	r3, [r2, #8]
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	b410      	push	{r4}
 800e3ce:	6093      	str	r3, [r2, #8]
 800e3d0:	da08      	bge.n	800e3e4 <__sfputc_r+0x1e>
 800e3d2:	6994      	ldr	r4, [r2, #24]
 800e3d4:	42a3      	cmp	r3, r4
 800e3d6:	db01      	blt.n	800e3dc <__sfputc_r+0x16>
 800e3d8:	290a      	cmp	r1, #10
 800e3da:	d103      	bne.n	800e3e4 <__sfputc_r+0x1e>
 800e3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3e0:	f000 b932 	b.w	800e648 <__swbuf_r>
 800e3e4:	6813      	ldr	r3, [r2, #0]
 800e3e6:	1c58      	adds	r0, r3, #1
 800e3e8:	6010      	str	r0, [r2, #0]
 800e3ea:	7019      	strb	r1, [r3, #0]
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <__sfputs_r>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	460f      	mov	r7, r1
 800e3fa:	4614      	mov	r4, r2
 800e3fc:	18d5      	adds	r5, r2, r3
 800e3fe:	42ac      	cmp	r4, r5
 800e400:	d101      	bne.n	800e406 <__sfputs_r+0x12>
 800e402:	2000      	movs	r0, #0
 800e404:	e007      	b.n	800e416 <__sfputs_r+0x22>
 800e406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e40a:	463a      	mov	r2, r7
 800e40c:	4630      	mov	r0, r6
 800e40e:	f7ff ffda 	bl	800e3c6 <__sfputc_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d1f3      	bne.n	800e3fe <__sfputs_r+0xa>
 800e416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e418 <_vfiprintf_r>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	460d      	mov	r5, r1
 800e41e:	b09d      	sub	sp, #116	@ 0x74
 800e420:	4614      	mov	r4, r2
 800e422:	4698      	mov	r8, r3
 800e424:	4606      	mov	r6, r0
 800e426:	b118      	cbz	r0, 800e430 <_vfiprintf_r+0x18>
 800e428:	6a03      	ldr	r3, [r0, #32]
 800e42a:	b90b      	cbnz	r3, 800e430 <_vfiprintf_r+0x18>
 800e42c:	f7fc f988 	bl	800a740 <__sinit>
 800e430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e432:	07d9      	lsls	r1, r3, #31
 800e434:	d405      	bmi.n	800e442 <_vfiprintf_r+0x2a>
 800e436:	89ab      	ldrh	r3, [r5, #12]
 800e438:	059a      	lsls	r2, r3, #22
 800e43a:	d402      	bmi.n	800e442 <_vfiprintf_r+0x2a>
 800e43c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e43e:	f7fc fafc 	bl	800aa3a <__retarget_lock_acquire_recursive>
 800e442:	89ab      	ldrh	r3, [r5, #12]
 800e444:	071b      	lsls	r3, r3, #28
 800e446:	d501      	bpl.n	800e44c <_vfiprintf_r+0x34>
 800e448:	692b      	ldr	r3, [r5, #16]
 800e44a:	b99b      	cbnz	r3, 800e474 <_vfiprintf_r+0x5c>
 800e44c:	4629      	mov	r1, r5
 800e44e:	4630      	mov	r0, r6
 800e450:	f000 f938 	bl	800e6c4 <__swsetup_r>
 800e454:	b170      	cbz	r0, 800e474 <_vfiprintf_r+0x5c>
 800e456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e458:	07dc      	lsls	r4, r3, #31
 800e45a:	d504      	bpl.n	800e466 <_vfiprintf_r+0x4e>
 800e45c:	f04f 30ff 	mov.w	r0, #4294967295
 800e460:	b01d      	add	sp, #116	@ 0x74
 800e462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e466:	89ab      	ldrh	r3, [r5, #12]
 800e468:	0598      	lsls	r0, r3, #22
 800e46a:	d4f7      	bmi.n	800e45c <_vfiprintf_r+0x44>
 800e46c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e46e:	f7fc fae5 	bl	800aa3c <__retarget_lock_release_recursive>
 800e472:	e7f3      	b.n	800e45c <_vfiprintf_r+0x44>
 800e474:	2300      	movs	r3, #0
 800e476:	9309      	str	r3, [sp, #36]	@ 0x24
 800e478:	2320      	movs	r3, #32
 800e47a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e47e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e482:	2330      	movs	r3, #48	@ 0x30
 800e484:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e634 <_vfiprintf_r+0x21c>
 800e488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e48c:	f04f 0901 	mov.w	r9, #1
 800e490:	4623      	mov	r3, r4
 800e492:	469a      	mov	sl, r3
 800e494:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e498:	b10a      	cbz	r2, 800e49e <_vfiprintf_r+0x86>
 800e49a:	2a25      	cmp	r2, #37	@ 0x25
 800e49c:	d1f9      	bne.n	800e492 <_vfiprintf_r+0x7a>
 800e49e:	ebba 0b04 	subs.w	fp, sl, r4
 800e4a2:	d00b      	beq.n	800e4bc <_vfiprintf_r+0xa4>
 800e4a4:	465b      	mov	r3, fp
 800e4a6:	4622      	mov	r2, r4
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f7ff ffa2 	bl	800e3f4 <__sfputs_r>
 800e4b0:	3001      	adds	r0, #1
 800e4b2:	f000 80a7 	beq.w	800e604 <_vfiprintf_r+0x1ec>
 800e4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4b8:	445a      	add	r2, fp
 800e4ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 809f 	beq.w	800e604 <_vfiprintf_r+0x1ec>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4d0:	f10a 0a01 	add.w	sl, sl, #1
 800e4d4:	9304      	str	r3, [sp, #16]
 800e4d6:	9307      	str	r3, [sp, #28]
 800e4d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4de:	4654      	mov	r4, sl
 800e4e0:	2205      	movs	r2, #5
 800e4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e6:	4853      	ldr	r0, [pc, #332]	@ (800e634 <_vfiprintf_r+0x21c>)
 800e4e8:	f7f1 fe7a 	bl	80001e0 <memchr>
 800e4ec:	9a04      	ldr	r2, [sp, #16]
 800e4ee:	b9d8      	cbnz	r0, 800e528 <_vfiprintf_r+0x110>
 800e4f0:	06d1      	lsls	r1, r2, #27
 800e4f2:	bf44      	itt	mi
 800e4f4:	2320      	movmi	r3, #32
 800e4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4fa:	0713      	lsls	r3, r2, #28
 800e4fc:	bf44      	itt	mi
 800e4fe:	232b      	movmi	r3, #43	@ 0x2b
 800e500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e504:	f89a 3000 	ldrb.w	r3, [sl]
 800e508:	2b2a      	cmp	r3, #42	@ 0x2a
 800e50a:	d015      	beq.n	800e538 <_vfiprintf_r+0x120>
 800e50c:	9a07      	ldr	r2, [sp, #28]
 800e50e:	4654      	mov	r4, sl
 800e510:	2000      	movs	r0, #0
 800e512:	f04f 0c0a 	mov.w	ip, #10
 800e516:	4621      	mov	r1, r4
 800e518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e51c:	3b30      	subs	r3, #48	@ 0x30
 800e51e:	2b09      	cmp	r3, #9
 800e520:	d94b      	bls.n	800e5ba <_vfiprintf_r+0x1a2>
 800e522:	b1b0      	cbz	r0, 800e552 <_vfiprintf_r+0x13a>
 800e524:	9207      	str	r2, [sp, #28]
 800e526:	e014      	b.n	800e552 <_vfiprintf_r+0x13a>
 800e528:	eba0 0308 	sub.w	r3, r0, r8
 800e52c:	fa09 f303 	lsl.w	r3, r9, r3
 800e530:	4313      	orrs	r3, r2
 800e532:	9304      	str	r3, [sp, #16]
 800e534:	46a2      	mov	sl, r4
 800e536:	e7d2      	b.n	800e4de <_vfiprintf_r+0xc6>
 800e538:	9b03      	ldr	r3, [sp, #12]
 800e53a:	1d19      	adds	r1, r3, #4
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	9103      	str	r1, [sp, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	bfbb      	ittet	lt
 800e544:	425b      	neglt	r3, r3
 800e546:	f042 0202 	orrlt.w	r2, r2, #2
 800e54a:	9307      	strge	r3, [sp, #28]
 800e54c:	9307      	strlt	r3, [sp, #28]
 800e54e:	bfb8      	it	lt
 800e550:	9204      	strlt	r2, [sp, #16]
 800e552:	7823      	ldrb	r3, [r4, #0]
 800e554:	2b2e      	cmp	r3, #46	@ 0x2e
 800e556:	d10a      	bne.n	800e56e <_vfiprintf_r+0x156>
 800e558:	7863      	ldrb	r3, [r4, #1]
 800e55a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e55c:	d132      	bne.n	800e5c4 <_vfiprintf_r+0x1ac>
 800e55e:	9b03      	ldr	r3, [sp, #12]
 800e560:	1d1a      	adds	r2, r3, #4
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	9203      	str	r2, [sp, #12]
 800e566:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e56a:	3402      	adds	r4, #2
 800e56c:	9305      	str	r3, [sp, #20]
 800e56e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e644 <_vfiprintf_r+0x22c>
 800e572:	7821      	ldrb	r1, [r4, #0]
 800e574:	2203      	movs	r2, #3
 800e576:	4650      	mov	r0, sl
 800e578:	f7f1 fe32 	bl	80001e0 <memchr>
 800e57c:	b138      	cbz	r0, 800e58e <_vfiprintf_r+0x176>
 800e57e:	9b04      	ldr	r3, [sp, #16]
 800e580:	eba0 000a 	sub.w	r0, r0, sl
 800e584:	2240      	movs	r2, #64	@ 0x40
 800e586:	4082      	lsls	r2, r0
 800e588:	4313      	orrs	r3, r2
 800e58a:	3401      	adds	r4, #1
 800e58c:	9304      	str	r3, [sp, #16]
 800e58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e592:	4829      	ldr	r0, [pc, #164]	@ (800e638 <_vfiprintf_r+0x220>)
 800e594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e598:	2206      	movs	r2, #6
 800e59a:	f7f1 fe21 	bl	80001e0 <memchr>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d03f      	beq.n	800e622 <_vfiprintf_r+0x20a>
 800e5a2:	4b26      	ldr	r3, [pc, #152]	@ (800e63c <_vfiprintf_r+0x224>)
 800e5a4:	bb1b      	cbnz	r3, 800e5ee <_vfiprintf_r+0x1d6>
 800e5a6:	9b03      	ldr	r3, [sp, #12]
 800e5a8:	3307      	adds	r3, #7
 800e5aa:	f023 0307 	bic.w	r3, r3, #7
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	9303      	str	r3, [sp, #12]
 800e5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b4:	443b      	add	r3, r7
 800e5b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5b8:	e76a      	b.n	800e490 <_vfiprintf_r+0x78>
 800e5ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5be:	460c      	mov	r4, r1
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	e7a8      	b.n	800e516 <_vfiprintf_r+0xfe>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	3401      	adds	r4, #1
 800e5c8:	9305      	str	r3, [sp, #20]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	f04f 0c0a 	mov.w	ip, #10
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5d6:	3a30      	subs	r2, #48	@ 0x30
 800e5d8:	2a09      	cmp	r2, #9
 800e5da:	d903      	bls.n	800e5e4 <_vfiprintf_r+0x1cc>
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d0c6      	beq.n	800e56e <_vfiprintf_r+0x156>
 800e5e0:	9105      	str	r1, [sp, #20]
 800e5e2:	e7c4      	b.n	800e56e <_vfiprintf_r+0x156>
 800e5e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e7f0      	b.n	800e5d0 <_vfiprintf_r+0x1b8>
 800e5ee:	ab03      	add	r3, sp, #12
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	4b12      	ldr	r3, [pc, #72]	@ (800e640 <_vfiprintf_r+0x228>)
 800e5f6:	a904      	add	r1, sp, #16
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f7fb fa51 	bl	8009aa0 <_printf_float>
 800e5fe:	4607      	mov	r7, r0
 800e600:	1c78      	adds	r0, r7, #1
 800e602:	d1d6      	bne.n	800e5b2 <_vfiprintf_r+0x19a>
 800e604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e606:	07d9      	lsls	r1, r3, #31
 800e608:	d405      	bmi.n	800e616 <_vfiprintf_r+0x1fe>
 800e60a:	89ab      	ldrh	r3, [r5, #12]
 800e60c:	059a      	lsls	r2, r3, #22
 800e60e:	d402      	bmi.n	800e616 <_vfiprintf_r+0x1fe>
 800e610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e612:	f7fc fa13 	bl	800aa3c <__retarget_lock_release_recursive>
 800e616:	89ab      	ldrh	r3, [r5, #12]
 800e618:	065b      	lsls	r3, r3, #25
 800e61a:	f53f af1f 	bmi.w	800e45c <_vfiprintf_r+0x44>
 800e61e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e620:	e71e      	b.n	800e460 <_vfiprintf_r+0x48>
 800e622:	ab03      	add	r3, sp, #12
 800e624:	9300      	str	r3, [sp, #0]
 800e626:	462a      	mov	r2, r5
 800e628:	4b05      	ldr	r3, [pc, #20]	@ (800e640 <_vfiprintf_r+0x228>)
 800e62a:	a904      	add	r1, sp, #16
 800e62c:	4630      	mov	r0, r6
 800e62e:	f7fb fccf 	bl	8009fd0 <_printf_i>
 800e632:	e7e4      	b.n	800e5fe <_vfiprintf_r+0x1e6>
 800e634:	0800eae3 	.word	0x0800eae3
 800e638:	0800eaed 	.word	0x0800eaed
 800e63c:	08009aa1 	.word	0x08009aa1
 800e640:	0800e3f5 	.word	0x0800e3f5
 800e644:	0800eae9 	.word	0x0800eae9

0800e648 <__swbuf_r>:
 800e648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64a:	460e      	mov	r6, r1
 800e64c:	4614      	mov	r4, r2
 800e64e:	4605      	mov	r5, r0
 800e650:	b118      	cbz	r0, 800e65a <__swbuf_r+0x12>
 800e652:	6a03      	ldr	r3, [r0, #32]
 800e654:	b90b      	cbnz	r3, 800e65a <__swbuf_r+0x12>
 800e656:	f7fc f873 	bl	800a740 <__sinit>
 800e65a:	69a3      	ldr	r3, [r4, #24]
 800e65c:	60a3      	str	r3, [r4, #8]
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	071a      	lsls	r2, r3, #28
 800e662:	d501      	bpl.n	800e668 <__swbuf_r+0x20>
 800e664:	6923      	ldr	r3, [r4, #16]
 800e666:	b943      	cbnz	r3, 800e67a <__swbuf_r+0x32>
 800e668:	4621      	mov	r1, r4
 800e66a:	4628      	mov	r0, r5
 800e66c:	f000 f82a 	bl	800e6c4 <__swsetup_r>
 800e670:	b118      	cbz	r0, 800e67a <__swbuf_r+0x32>
 800e672:	f04f 37ff 	mov.w	r7, #4294967295
 800e676:	4638      	mov	r0, r7
 800e678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e67a:	6823      	ldr	r3, [r4, #0]
 800e67c:	6922      	ldr	r2, [r4, #16]
 800e67e:	1a98      	subs	r0, r3, r2
 800e680:	6963      	ldr	r3, [r4, #20]
 800e682:	b2f6      	uxtb	r6, r6
 800e684:	4283      	cmp	r3, r0
 800e686:	4637      	mov	r7, r6
 800e688:	dc05      	bgt.n	800e696 <__swbuf_r+0x4e>
 800e68a:	4621      	mov	r1, r4
 800e68c:	4628      	mov	r0, r5
 800e68e:	f7ff f95f 	bl	800d950 <_fflush_r>
 800e692:	2800      	cmp	r0, #0
 800e694:	d1ed      	bne.n	800e672 <__swbuf_r+0x2a>
 800e696:	68a3      	ldr	r3, [r4, #8]
 800e698:	3b01      	subs	r3, #1
 800e69a:	60a3      	str	r3, [r4, #8]
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	6022      	str	r2, [r4, #0]
 800e6a2:	701e      	strb	r6, [r3, #0]
 800e6a4:	6962      	ldr	r2, [r4, #20]
 800e6a6:	1c43      	adds	r3, r0, #1
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d004      	beq.n	800e6b6 <__swbuf_r+0x6e>
 800e6ac:	89a3      	ldrh	r3, [r4, #12]
 800e6ae:	07db      	lsls	r3, r3, #31
 800e6b0:	d5e1      	bpl.n	800e676 <__swbuf_r+0x2e>
 800e6b2:	2e0a      	cmp	r6, #10
 800e6b4:	d1df      	bne.n	800e676 <__swbuf_r+0x2e>
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	f7ff f949 	bl	800d950 <_fflush_r>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d0d9      	beq.n	800e676 <__swbuf_r+0x2e>
 800e6c2:	e7d6      	b.n	800e672 <__swbuf_r+0x2a>

0800e6c4 <__swsetup_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4b29      	ldr	r3, [pc, #164]	@ (800e76c <__swsetup_r+0xa8>)
 800e6c8:	4605      	mov	r5, r0
 800e6ca:	6818      	ldr	r0, [r3, #0]
 800e6cc:	460c      	mov	r4, r1
 800e6ce:	b118      	cbz	r0, 800e6d8 <__swsetup_r+0x14>
 800e6d0:	6a03      	ldr	r3, [r0, #32]
 800e6d2:	b90b      	cbnz	r3, 800e6d8 <__swsetup_r+0x14>
 800e6d4:	f7fc f834 	bl	800a740 <__sinit>
 800e6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6dc:	0719      	lsls	r1, r3, #28
 800e6de:	d422      	bmi.n	800e726 <__swsetup_r+0x62>
 800e6e0:	06da      	lsls	r2, r3, #27
 800e6e2:	d407      	bmi.n	800e6f4 <__swsetup_r+0x30>
 800e6e4:	2209      	movs	r2, #9
 800e6e6:	602a      	str	r2, [r5, #0]
 800e6e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ec:	81a3      	strh	r3, [r4, #12]
 800e6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f2:	e033      	b.n	800e75c <__swsetup_r+0x98>
 800e6f4:	0758      	lsls	r0, r3, #29
 800e6f6:	d512      	bpl.n	800e71e <__swsetup_r+0x5a>
 800e6f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6fa:	b141      	cbz	r1, 800e70e <__swsetup_r+0x4a>
 800e6fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e700:	4299      	cmp	r1, r3
 800e702:	d002      	beq.n	800e70a <__swsetup_r+0x46>
 800e704:	4628      	mov	r0, r5
 800e706:	f7fc fffb 	bl	800b700 <_free_r>
 800e70a:	2300      	movs	r3, #0
 800e70c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e714:	81a3      	strh	r3, [r4, #12]
 800e716:	2300      	movs	r3, #0
 800e718:	6063      	str	r3, [r4, #4]
 800e71a:	6923      	ldr	r3, [r4, #16]
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	f043 0308 	orr.w	r3, r3, #8
 800e724:	81a3      	strh	r3, [r4, #12]
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	b94b      	cbnz	r3, 800e73e <__swsetup_r+0x7a>
 800e72a:	89a3      	ldrh	r3, [r4, #12]
 800e72c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e734:	d003      	beq.n	800e73e <__swsetup_r+0x7a>
 800e736:	4621      	mov	r1, r4
 800e738:	4628      	mov	r0, r5
 800e73a:	f000 f883 	bl	800e844 <__smakebuf_r>
 800e73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e742:	f013 0201 	ands.w	r2, r3, #1
 800e746:	d00a      	beq.n	800e75e <__swsetup_r+0x9a>
 800e748:	2200      	movs	r2, #0
 800e74a:	60a2      	str	r2, [r4, #8]
 800e74c:	6962      	ldr	r2, [r4, #20]
 800e74e:	4252      	negs	r2, r2
 800e750:	61a2      	str	r2, [r4, #24]
 800e752:	6922      	ldr	r2, [r4, #16]
 800e754:	b942      	cbnz	r2, 800e768 <__swsetup_r+0xa4>
 800e756:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e75a:	d1c5      	bne.n	800e6e8 <__swsetup_r+0x24>
 800e75c:	bd38      	pop	{r3, r4, r5, pc}
 800e75e:	0799      	lsls	r1, r3, #30
 800e760:	bf58      	it	pl
 800e762:	6962      	ldrpl	r2, [r4, #20]
 800e764:	60a2      	str	r2, [r4, #8]
 800e766:	e7f4      	b.n	800e752 <__swsetup_r+0x8e>
 800e768:	2000      	movs	r0, #0
 800e76a:	e7f7      	b.n	800e75c <__swsetup_r+0x98>
 800e76c:	20000120 	.word	0x20000120

0800e770 <_raise_r>:
 800e770:	291f      	cmp	r1, #31
 800e772:	b538      	push	{r3, r4, r5, lr}
 800e774:	4605      	mov	r5, r0
 800e776:	460c      	mov	r4, r1
 800e778:	d904      	bls.n	800e784 <_raise_r+0x14>
 800e77a:	2316      	movs	r3, #22
 800e77c:	6003      	str	r3, [r0, #0]
 800e77e:	f04f 30ff 	mov.w	r0, #4294967295
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e786:	b112      	cbz	r2, 800e78e <_raise_r+0x1e>
 800e788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e78c:	b94b      	cbnz	r3, 800e7a2 <_raise_r+0x32>
 800e78e:	4628      	mov	r0, r5
 800e790:	f000 f830 	bl	800e7f4 <_getpid_r>
 800e794:	4622      	mov	r2, r4
 800e796:	4601      	mov	r1, r0
 800e798:	4628      	mov	r0, r5
 800e79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e79e:	f000 b817 	b.w	800e7d0 <_kill_r>
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d00a      	beq.n	800e7bc <_raise_r+0x4c>
 800e7a6:	1c59      	adds	r1, r3, #1
 800e7a8:	d103      	bne.n	800e7b2 <_raise_r+0x42>
 800e7aa:	2316      	movs	r3, #22
 800e7ac:	6003      	str	r3, [r0, #0]
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	e7e7      	b.n	800e782 <_raise_r+0x12>
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	4798      	blx	r3
 800e7bc:	2000      	movs	r0, #0
 800e7be:	e7e0      	b.n	800e782 <_raise_r+0x12>

0800e7c0 <raise>:
 800e7c0:	4b02      	ldr	r3, [pc, #8]	@ (800e7cc <raise+0xc>)
 800e7c2:	4601      	mov	r1, r0
 800e7c4:	6818      	ldr	r0, [r3, #0]
 800e7c6:	f7ff bfd3 	b.w	800e770 <_raise_r>
 800e7ca:	bf00      	nop
 800e7cc:	20000120 	.word	0x20000120

0800e7d0 <_kill_r>:
 800e7d0:	b538      	push	{r3, r4, r5, lr}
 800e7d2:	4d07      	ldr	r5, [pc, #28]	@ (800e7f0 <_kill_r+0x20>)
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	4608      	mov	r0, r1
 800e7da:	4611      	mov	r1, r2
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	f7f3 f9df 	bl	8001ba0 <_kill>
 800e7e2:	1c43      	adds	r3, r0, #1
 800e7e4:	d102      	bne.n	800e7ec <_kill_r+0x1c>
 800e7e6:	682b      	ldr	r3, [r5, #0]
 800e7e8:	b103      	cbz	r3, 800e7ec <_kill_r+0x1c>
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	bd38      	pop	{r3, r4, r5, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20002168 	.word	0x20002168

0800e7f4 <_getpid_r>:
 800e7f4:	f7f3 b9cc 	b.w	8001b90 <_getpid>

0800e7f8 <__swhatbuf_r>:
 800e7f8:	b570      	push	{r4, r5, r6, lr}
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e800:	2900      	cmp	r1, #0
 800e802:	b096      	sub	sp, #88	@ 0x58
 800e804:	4615      	mov	r5, r2
 800e806:	461e      	mov	r6, r3
 800e808:	da0d      	bge.n	800e826 <__swhatbuf_r+0x2e>
 800e80a:	89a3      	ldrh	r3, [r4, #12]
 800e80c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e810:	f04f 0100 	mov.w	r1, #0
 800e814:	bf14      	ite	ne
 800e816:	2340      	movne	r3, #64	@ 0x40
 800e818:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e81c:	2000      	movs	r0, #0
 800e81e:	6031      	str	r1, [r6, #0]
 800e820:	602b      	str	r3, [r5, #0]
 800e822:	b016      	add	sp, #88	@ 0x58
 800e824:	bd70      	pop	{r4, r5, r6, pc}
 800e826:	466a      	mov	r2, sp
 800e828:	f000 f848 	bl	800e8bc <_fstat_r>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	dbec      	blt.n	800e80a <__swhatbuf_r+0x12>
 800e830:	9901      	ldr	r1, [sp, #4]
 800e832:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e836:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e83a:	4259      	negs	r1, r3
 800e83c:	4159      	adcs	r1, r3
 800e83e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e842:	e7eb      	b.n	800e81c <__swhatbuf_r+0x24>

0800e844 <__smakebuf_r>:
 800e844:	898b      	ldrh	r3, [r1, #12]
 800e846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e848:	079d      	lsls	r5, r3, #30
 800e84a:	4606      	mov	r6, r0
 800e84c:	460c      	mov	r4, r1
 800e84e:	d507      	bpl.n	800e860 <__smakebuf_r+0x1c>
 800e850:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	2301      	movs	r3, #1
 800e85a:	6163      	str	r3, [r4, #20]
 800e85c:	b003      	add	sp, #12
 800e85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e860:	ab01      	add	r3, sp, #4
 800e862:	466a      	mov	r2, sp
 800e864:	f7ff ffc8 	bl	800e7f8 <__swhatbuf_r>
 800e868:	9f00      	ldr	r7, [sp, #0]
 800e86a:	4605      	mov	r5, r0
 800e86c:	4639      	mov	r1, r7
 800e86e:	4630      	mov	r0, r6
 800e870:	f7fc ffba 	bl	800b7e8 <_malloc_r>
 800e874:	b948      	cbnz	r0, 800e88a <__smakebuf_r+0x46>
 800e876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e87a:	059a      	lsls	r2, r3, #22
 800e87c:	d4ee      	bmi.n	800e85c <__smakebuf_r+0x18>
 800e87e:	f023 0303 	bic.w	r3, r3, #3
 800e882:	f043 0302 	orr.w	r3, r3, #2
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	e7e2      	b.n	800e850 <__smakebuf_r+0xc>
 800e88a:	89a3      	ldrh	r3, [r4, #12]
 800e88c:	6020      	str	r0, [r4, #0]
 800e88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e892:	81a3      	strh	r3, [r4, #12]
 800e894:	9b01      	ldr	r3, [sp, #4]
 800e896:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e89a:	b15b      	cbz	r3, 800e8b4 <__smakebuf_r+0x70>
 800e89c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f000 f81d 	bl	800e8e0 <_isatty_r>
 800e8a6:	b128      	cbz	r0, 800e8b4 <__smakebuf_r+0x70>
 800e8a8:	89a3      	ldrh	r3, [r4, #12]
 800e8aa:	f023 0303 	bic.w	r3, r3, #3
 800e8ae:	f043 0301 	orr.w	r3, r3, #1
 800e8b2:	81a3      	strh	r3, [r4, #12]
 800e8b4:	89a3      	ldrh	r3, [r4, #12]
 800e8b6:	431d      	orrs	r5, r3
 800e8b8:	81a5      	strh	r5, [r4, #12]
 800e8ba:	e7cf      	b.n	800e85c <__smakebuf_r+0x18>

0800e8bc <_fstat_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d07      	ldr	r5, [pc, #28]	@ (800e8dc <_fstat_r+0x20>)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	f7f3 f9c9 	bl	8001c60 <_fstat>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	d102      	bne.n	800e8d8 <_fstat_r+0x1c>
 800e8d2:	682b      	ldr	r3, [r5, #0]
 800e8d4:	b103      	cbz	r3, 800e8d8 <_fstat_r+0x1c>
 800e8d6:	6023      	str	r3, [r4, #0]
 800e8d8:	bd38      	pop	{r3, r4, r5, pc}
 800e8da:	bf00      	nop
 800e8dc:	20002168 	.word	0x20002168

0800e8e0 <_isatty_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4d06      	ldr	r5, [pc, #24]	@ (800e8fc <_isatty_r+0x1c>)
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	4608      	mov	r0, r1
 800e8ea:	602b      	str	r3, [r5, #0]
 800e8ec:	f7f3 f9c8 	bl	8001c80 <_isatty>
 800e8f0:	1c43      	adds	r3, r0, #1
 800e8f2:	d102      	bne.n	800e8fa <_isatty_r+0x1a>
 800e8f4:	682b      	ldr	r3, [r5, #0]
 800e8f6:	b103      	cbz	r3, 800e8fa <_isatty_r+0x1a>
 800e8f8:	6023      	str	r3, [r4, #0]
 800e8fa:	bd38      	pop	{r3, r4, r5, pc}
 800e8fc:	20002168 	.word	0x20002168

0800e900 <_init>:
 800e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e902:	bf00      	nop
 800e904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e906:	bc08      	pop	{r3}
 800e908:	469e      	mov	lr, r3
 800e90a:	4770      	bx	lr

0800e90c <_fini>:
 800e90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90e:	bf00      	nop
 800e910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e912:	bc08      	pop	{r3}
 800e914:	469e      	mov	lr, r3
 800e916:	4770      	bx	lr
