
Custom-Batterry-Charger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f50  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080090e8  080090e8  0000a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009148  08009148  0000b110  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009148  08009148  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009150  08009150  0000b110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009150  08009150  0000a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009154  08009154  0000a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08009158  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000110  08009268  0000b110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e4c  08009268  0000be4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016206  00000000  00000000  0000b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003609  00000000  00000000  00021346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00024950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fde  00000000  00000000  00025dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a73a  00000000  00000000  00026db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f99  00000000  00000000  000414f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df02  00000000  00000000  0005a489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f838b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  000f83d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fdc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000110 	.word	0x20000110
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080090d0 	.word	0x080090d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000114 	.word	0x20000114
 80001d4:	080090d0 	.word	0x080090d0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000854:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000858:	f000 b988 	b.w	8000b6c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	468e      	mov	lr, r1
 800087c:	4604      	mov	r4, r0
 800087e:	4688      	mov	r8, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d962      	bls.n	8000950 <__udivmoddi4+0xdc>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	b14e      	cbz	r6, 80008a4 <__udivmoddi4+0x30>
 8000890:	f1c6 0320 	rsb	r3, r6, #32
 8000894:	fa01 f806 	lsl.w	r8, r1, r6
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	40b7      	lsls	r7, r6
 800089e:	ea43 0808 	orr.w	r8, r3, r8
 80008a2:	40b4      	lsls	r4, r6
 80008a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a8:	fa1f fc87 	uxth.w	ip, r7
 80008ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80008b0:	0c23      	lsrs	r3, r4, #16
 80008b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ba:	fb01 f20c 	mul.w	r2, r1, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80008c8:	f080 80ea 	bcs.w	8000aa0 <__udivmoddi4+0x22c>
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f240 80e7 	bls.w	8000aa0 <__udivmoddi4+0x22c>
 80008d2:	3902      	subs	r1, #2
 80008d4:	443b      	add	r3, r7
 80008d6:	1a9a      	subs	r2, r3, r2
 80008d8:	b2a3      	uxth	r3, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ea:	459c      	cmp	ip, r3
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0x8e>
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80008f4:	f080 80d6 	bcs.w	8000aa4 <__udivmoddi4+0x230>
 80008f8:	459c      	cmp	ip, r3
 80008fa:	f240 80d3 	bls.w	8000aa4 <__udivmoddi4+0x230>
 80008fe:	443b      	add	r3, r7
 8000900:	3802      	subs	r0, #2
 8000902:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000906:	eba3 030c 	sub.w	r3, r3, ip
 800090a:	2100      	movs	r1, #0
 800090c:	b11d      	cbz	r5, 8000916 <__udivmoddi4+0xa2>
 800090e:	40f3      	lsrs	r3, r6
 8000910:	2200      	movs	r2, #0
 8000912:	e9c5 3200 	strd	r3, r2, [r5]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d905      	bls.n	800092a <__udivmoddi4+0xb6>
 800091e:	b10d      	cbz	r5, 8000924 <__udivmoddi4+0xb0>
 8000920:	e9c5 0100 	strd	r0, r1, [r5]
 8000924:	2100      	movs	r1, #0
 8000926:	4608      	mov	r0, r1
 8000928:	e7f5      	b.n	8000916 <__udivmoddi4+0xa2>
 800092a:	fab3 f183 	clz	r1, r3
 800092e:	2900      	cmp	r1, #0
 8000930:	d146      	bne.n	80009c0 <__udivmoddi4+0x14c>
 8000932:	4573      	cmp	r3, lr
 8000934:	d302      	bcc.n	800093c <__udivmoddi4+0xc8>
 8000936:	4282      	cmp	r2, r0
 8000938:	f200 8105 	bhi.w	8000b46 <__udivmoddi4+0x2d2>
 800093c:	1a84      	subs	r4, r0, r2
 800093e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000942:	2001      	movs	r0, #1
 8000944:	4690      	mov	r8, r2
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e5      	beq.n	8000916 <__udivmoddi4+0xa2>
 800094a:	e9c5 4800 	strd	r4, r8, [r5]
 800094e:	e7e2      	b.n	8000916 <__udivmoddi4+0xa2>
 8000950:	2a00      	cmp	r2, #0
 8000952:	f000 8090 	beq.w	8000a76 <__udivmoddi4+0x202>
 8000956:	fab2 f682 	clz	r6, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	f040 80a4 	bne.w	8000aa8 <__udivmoddi4+0x234>
 8000960:	1a8a      	subs	r2, r1, r2
 8000962:	0c03      	lsrs	r3, r0, #16
 8000964:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000968:	b280      	uxth	r0, r0
 800096a:	b2bc      	uxth	r4, r7
 800096c:	2101      	movs	r1, #1
 800096e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000972:	fb0e 221c 	mls	r2, lr, ip, r2
 8000976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097a:	fb04 f20c 	mul.w	r2, r4, ip
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x11e>
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x11c>
 800098a:	429a      	cmp	r2, r3
 800098c:	f200 80e0 	bhi.w	8000b50 <__udivmoddi4+0x2dc>
 8000990:	46c4      	mov	ip, r8
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	fbb3 f2fe 	udiv	r2, r3, lr
 8000998:	fb0e 3312 	mls	r3, lr, r2, r3
 800099c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009a0:	fb02 f404 	mul.w	r4, r2, r4
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x144>
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x142>
 80009b0:	429c      	cmp	r4, r3
 80009b2:	f200 80ca 	bhi.w	8000b4a <__udivmoddi4+0x2d6>
 80009b6:	4602      	mov	r2, r0
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009be:	e7a5      	b.n	800090c <__udivmoddi4+0x98>
 80009c0:	f1c1 0620 	rsb	r6, r1, #32
 80009c4:	408b      	lsls	r3, r1
 80009c6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ca:	431f      	orrs	r7, r3
 80009cc:	fa0e f401 	lsl.w	r4, lr, r1
 80009d0:	fa20 f306 	lsr.w	r3, r0, r6
 80009d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009dc:	4323      	orrs	r3, r4
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	fa1f fc87 	uxth.w	ip, r7
 80009e6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ea:	0c1c      	lsrs	r4, r3, #16
 80009ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80009f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f8:	45a6      	cmp	lr, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	d909      	bls.n	8000a14 <__udivmoddi4+0x1a0>
 8000a00:	193c      	adds	r4, r7, r4
 8000a02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a06:	f080 809c 	bcs.w	8000b42 <__udivmoddi4+0x2ce>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f240 8099 	bls.w	8000b42 <__udivmoddi4+0x2ce>
 8000a10:	3802      	subs	r0, #2
 8000a12:	443c      	add	r4, r7
 8000a14:	eba4 040e 	sub.w	r4, r4, lr
 8000a18:	fa1f fe83 	uxth.w	lr, r3
 8000a1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a20:	fb09 4413 	mls	r4, r9, r3, r4
 8000a24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a2c:	45a4      	cmp	ip, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x1ce>
 8000a30:	193c      	adds	r4, r7, r4
 8000a32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a36:	f080 8082 	bcs.w	8000b3e <__udivmoddi4+0x2ca>
 8000a3a:	45a4      	cmp	ip, r4
 8000a3c:	d97f      	bls.n	8000b3e <__udivmoddi4+0x2ca>
 8000a3e:	3b02      	subs	r3, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a46:	eba4 040c 	sub.w	r4, r4, ip
 8000a4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a4e:	4564      	cmp	r4, ip
 8000a50:	4673      	mov	r3, lr
 8000a52:	46e1      	mov	r9, ip
 8000a54:	d362      	bcc.n	8000b1c <__udivmoddi4+0x2a8>
 8000a56:	d05f      	beq.n	8000b18 <__udivmoddi4+0x2a4>
 8000a58:	b15d      	cbz	r5, 8000a72 <__udivmoddi4+0x1fe>
 8000a5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a62:	fa04 f606 	lsl.w	r6, r4, r6
 8000a66:	fa22 f301 	lsr.w	r3, r2, r1
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a72:	2100      	movs	r1, #0
 8000a74:	e74f      	b.n	8000916 <__udivmoddi4+0xa2>
 8000a76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a7a:	0c01      	lsrs	r1, r0, #16
 8000a7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a80:	b280      	uxth	r0, r0
 8000a82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a86:	463b      	mov	r3, r7
 8000a88:	4638      	mov	r0, r7
 8000a8a:	463c      	mov	r4, r7
 8000a8c:	46b8      	mov	r8, r7
 8000a8e:	46be      	mov	lr, r7
 8000a90:	2620      	movs	r6, #32
 8000a92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a96:	eba2 0208 	sub.w	r2, r2, r8
 8000a9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a9e:	e766      	b.n	800096e <__udivmoddi4+0xfa>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	e718      	b.n	80008d6 <__udivmoddi4+0x62>
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	e72c      	b.n	8000902 <__udivmoddi4+0x8e>
 8000aa8:	f1c6 0220 	rsb	r2, r6, #32
 8000aac:	fa2e f302 	lsr.w	r3, lr, r2
 8000ab0:	40b7      	lsls	r7, r6
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	430a      	orrs	r2, r1
 8000abe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac8:	0c11      	lsrs	r1, r2, #16
 8000aca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ace:	fb08 f904 	mul.w	r9, r8, r4
 8000ad2:	40b0      	lsls	r0, r6
 8000ad4:	4589      	cmp	r9, r1
 8000ad6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ada:	b280      	uxth	r0, r0
 8000adc:	d93e      	bls.n	8000b5c <__udivmoddi4+0x2e8>
 8000ade:	1879      	adds	r1, r7, r1
 8000ae0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ae4:	d201      	bcs.n	8000aea <__udivmoddi4+0x276>
 8000ae6:	4589      	cmp	r9, r1
 8000ae8:	d81f      	bhi.n	8000b2a <__udivmoddi4+0x2b6>
 8000aea:	eba1 0109 	sub.w	r1, r1, r9
 8000aee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af2:	fb09 f804 	mul.w	r8, r9, r4
 8000af6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000afa:	b292      	uxth	r2, r2
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d229      	bcs.n	8000b58 <__udivmoddi4+0x2e4>
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b0a:	d2c4      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b0c:	4542      	cmp	r2, r8
 8000b0e:	d2c2      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b10:	f1a9 0102 	sub.w	r1, r9, #2
 8000b14:	443a      	add	r2, r7
 8000b16:	e7be      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b18:	45f0      	cmp	r8, lr
 8000b1a:	d29d      	bcs.n	8000a58 <__udivmoddi4+0x1e4>
 8000b1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b24:	3801      	subs	r0, #1
 8000b26:	46e1      	mov	r9, ip
 8000b28:	e796      	b.n	8000a58 <__udivmoddi4+0x1e4>
 8000b2a:	eba7 0909 	sub.w	r9, r7, r9
 8000b2e:	4449      	add	r1, r9
 8000b30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b38:	fb09 f804 	mul.w	r8, r9, r4
 8000b3c:	e7db      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b3e:	4673      	mov	r3, lr
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1ce>
 8000b42:	4650      	mov	r0, sl
 8000b44:	e766      	b.n	8000a14 <__udivmoddi4+0x1a0>
 8000b46:	4608      	mov	r0, r1
 8000b48:	e6fd      	b.n	8000946 <__udivmoddi4+0xd2>
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3a02      	subs	r2, #2
 8000b4e:	e733      	b.n	80009b8 <__udivmoddi4+0x144>
 8000b50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b54:	443b      	add	r3, r7
 8000b56:	e71c      	b.n	8000992 <__udivmoddi4+0x11e>
 8000b58:	4649      	mov	r1, r9
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b5c:	eba1 0109 	sub.w	r1, r1, r9
 8000b60:	46c4      	mov	ip, r8
 8000b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b66:	fb09 f804 	mul.w	r8, r9, r4
 8000b6a:	e7c4      	b.n	8000af6 <__udivmoddi4+0x282>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <readADC>:
float ki = 0.01f; // Integral gain for voltage control




int readADC(uint32_t pin){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  sConfig.Channel = pin;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	480f      	ldr	r0, [pc, #60]	@ (8000bd8 <readADC+0x68>)
 8000b9a:	f000 ff91 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <readADC+0x38>
  {
    Error_Handler();
 8000ba4:	f000 fb76 	bl	8001294 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8000ba8:	480b      	ldr	r0, [pc, #44]	@ (8000bd8 <readADC+0x68>)
 8000baa:	f000 fe09 	bl	80017c0 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8000bae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bb2:	4809      	ldr	r0, [pc, #36]	@ (8000bd8 <readADC+0x68>)
 8000bb4:	f000 feeb 	bl	800198e <HAL_ADC_PollForConversion>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <readADC+0x52>
  {
    Error_Handler();
 8000bbe:	f000 fb69 	bl	8001294 <Error_Handler>
  }
  HAL_ADC_Stop(&hadc1);
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <readADC+0x68>)
 8000bc4:	f000 feb0 	bl	8001928 <HAL_ADC_Stop>

  return HAL_ADC_GetValue(&hadc1);
 8000bc8:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <readADC+0x68>)
 8000bca:	f000 ff6b 	bl	8001aa4 <HAL_ADC_GetValue>
 8000bce:	4603      	mov	r3, r0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000012c 	.word	0x2000012c

08000bdc <pwm>:

void pwm(float pulseWidth) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	ed87 0a01 	vstr	s0, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfa:	2360      	movs	r3, #96	@ 0x60
 8000bfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = pulseWidth * 4095; // Scale pulse width to match timer resolution
 8000bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c02:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000c44 <pwm+0x68>
 8000c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0e:	ee17 3a90 	vmov	r3, s15
 8000c12:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2208      	movs	r2, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <pwm+0x6c>)
 8000c26:	f003 fd75 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <pwm+0x58>
  {
    Error_Handler();
 8000c30:	f000 fb30 	bl	8001294 <Error_Handler>
  }

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c34:	2108      	movs	r1, #8
 8000c36:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <pwm+0x6c>)
 8000c38:	f003 fcbc 	bl	80045b4 <HAL_TIM_PWM_Start>
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	@ 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	457ff000 	.word	0x457ff000
 8000c48:	20000210 	.word	0x20000210

08000c4c <toggle>:

void toggle(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <toggle+0x14>)
 8000c56:	f001 fc10 	bl	800247a <HAL_GPIO_TogglePin>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020800 	.word	0x40020800
 8000c64:	00000000 	.word	0x00000000

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6e:	f000 fccd 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c72:	f000 f8f1 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f000 fa9d 	bl	80011b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c7a:	f000 f955 	bl	8000f28 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c7e:	f000 f9a5 	bl	8000fcc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000c82:	f000 f9d1 	bl	8001028 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c86:	f000 fa1f 	bl	80010c8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c8a:	f007 fd0b 	bl	80086a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  toggle(); // Initial toggle to indicate start
 8000c8e:	f7ff ffdd 	bl	8000c4c <toggle>
  toggle();
 8000c92:	f7ff ffdb 	bl	8000c4c <toggle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    v_out = readADC(ADC_CHANNEL_0) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff ff6a 	bl	8000b70 <readADC>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd16 	bl	80006d0 <__aeabi_i2d>
 8000ca4:	a35e      	add	r3, pc, #376	@ (adr r3, 8000e20 <main+0x1b8>)
 8000ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000caa:	f7ff fa95 	bl	80001d8 <__aeabi_dmul>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	a35c      	add	r3, pc, #368	@ (adr r3, 8000e28 <main+0x1c0>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fa8c 	bl	80001d8 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f7ff fd6c 	bl	80007a4 <__aeabi_d2f>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a5a      	ldr	r2, [pc, #360]	@ (8000e38 <main+0x1d0>)
 8000cd0:	6013      	str	r3, [r2, #0]

    v_in = readADC(ADC_CHANNEL_9) *5.7* (3.3f / 4095.0f); // Read ADC value and convert to voltage
 8000cd2:	2009      	movs	r0, #9
 8000cd4:	f7ff ff4c 	bl	8000b70 <readADC>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fcf8 	bl	80006d0 <__aeabi_i2d>
 8000ce0:	a34f      	add	r3, pc, #316	@ (adr r3, 8000e20 <main+0x1b8>)
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	f7ff fa77 	bl	80001d8 <__aeabi_dmul>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	a34d      	add	r3, pc, #308	@ (adr r3, 8000e28 <main+0x1c0>)
 8000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf8:	f7ff fa6e 	bl	80001d8 <__aeabi_dmul>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff fd4e 	bl	80007a4 <__aeabi_d2f>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8000e3c <main+0x1d4>)
 8000d0c:	6013      	str	r3, [r2, #0]

    i_out = readADC(ADC_CHANNEL_2) *(10000.0/22)* (3.3f / 4095.0f); // Read ADC value and convert to current
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f7ff ff2e 	bl	8000b70 <readADC>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fcda 	bl	80006d0 <__aeabi_i2d>
 8000d1c:	a344      	add	r3, pc, #272	@ (adr r3, 8000e30 <main+0x1c8>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fa59 	bl	80001d8 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	a33e      	add	r3, pc, #248	@ (adr r3, 8000e28 <main+0x1c0>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	f7ff fa50 	bl	80001d8 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f7ff fd30 	bl	80007a4 <__aeabi_d2f>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a3e      	ldr	r2, [pc, #248]	@ (8000e40 <main+0x1d8>)
 8000d48:	6013      	str	r3, [r2, #0]

    // Voltage control loop
    float voltageError = targetVoltage - v_out; // Calculate voltage error
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e44 <main+0x1dc>)
 8000d4c:	ed93 7a00 	vldr	s14, [r3]
 8000d50:	4b39      	ldr	r3, [pc, #228]	@ (8000e38 <main+0x1d0>)
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5a:	edc7 7a03 	vstr	s15, [r7, #12]
    float voltageControl = kp * voltageError; // Proportional control for voltage
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e48 <main+0x1e0>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6c:	edc7 7a02 	vstr	s15, [r7, #8]
    // } else if (pulseWidth > 1.0f) {
    //   pulseWidth = 1.0f; // Ensure pulse width does not exceed 1
    // }

    // Current control loop
    float currentError = targetCurrent - i_out; // Calculate current error
 8000d70:	4b36      	ldr	r3, [pc, #216]	@ (8000e4c <main+0x1e4>)
 8000d72:	ed93 7a00 	vldr	s14, [r3]
 8000d76:	4b32      	ldr	r3, [pc, #200]	@ (8000e40 <main+0x1d8>)
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d80:	edc7 7a01 	vstr	s15, [r7, #4]
    float currentControl = ki * currentError; // Integral control for current
 8000d84:	4b32      	ldr	r3, [pc, #200]	@ (8000e50 <main+0x1e8>)
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d92:	edc7 7a00 	vstr	s15, [r7]

    if(i_out > targetCurrent) 
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <main+0x1d8>)
 8000d98:	ed93 7a00 	vldr	s14, [r3]
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <main+0x1e4>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	dd0a      	ble.n	8000dc2 <main+0x15a>
      pulseWidth += currentControl; // Adjust pulse width based on current control
 8000dac:	4b29      	ldr	r3, [pc, #164]	@ (8000e54 <main+0x1ec>)
 8000dae:	ed93 7a00 	vldr	s14, [r3]
 8000db2:	edd7 7a00 	vldr	s15, [r7]
 8000db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dba:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <main+0x1ec>)
 8000dbc:	edc3 7a00 	vstr	s15, [r3]
 8000dc0:	e009      	b.n	8000dd6 <main+0x16e>
    else 
      pulseWidth += voltageControl; // Adjust pulse width based on voltage control
 8000dc2:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <main+0x1ec>)
 8000dc4:	ed93 7a00 	vldr	s14, [r3]
 8000dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd0:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <main+0x1ec>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]

    if (pulseWidth < 0.0f) {
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <main+0x1ec>)
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	d504      	bpl.n	8000df0 <main+0x188>
      pulseWidth = 0.0f; // Ensure pulse width does not go below 0
 8000de6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <main+0x1ec>)
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e00d      	b.n	8000e0c <main+0x1a4>
    } else if (pulseWidth > 1.0f) {
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <main+0x1ec>)
 8000df2:	edd3 7a00 	vldr	s15, [r3]
 8000df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	dd03      	ble.n	8000e0c <main+0x1a4>
      pulseWidth = 1.0f; // Ensure pulse width does not exceed 1
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <main+0x1ec>)
 8000e06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e0a:	601a      	str	r2, [r3, #0]
    }

    pwm(pulseWidth); // Set PWM output based on pulse width
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <main+0x1ec>)
 8000e0e:	edd3 7a00 	vldr	s15, [r3]
 8000e12:	eeb0 0a67 	vmov.f32	s0, s15
 8000e16:	f7ff fee1 	bl	8000bdc <pwm>
  {
 8000e1a:	e73c      	b.n	8000c96 <main+0x2e>
 8000e1c:	f3af 8000 	nop.w
 8000e20:	cccccccd 	.word	0xcccccccd
 8000e24:	4016cccc 	.word	0x4016cccc
 8000e28:	e0000000 	.word	0xe0000000
 8000e2c:	3f4a680c 	.word	0x3f4a680c
 8000e30:	2e8ba2e9 	.word	0x2e8ba2e9
 8000e34:	407c68ba 	.word	0x407c68ba
 8000e38:	20000258 	.word	0x20000258
 8000e3c:	2000025c 	.word	0x2000025c
 8000e40:	20000260 	.word	0x20000260
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000000 	.word	0x20000000

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b094      	sub	sp, #80	@ 0x50
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	2230      	movs	r2, #48	@ 0x30
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f008 f906 	bl	8009078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <SystemClock_Config+0xc8>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	4a26      	ldr	r2, [pc, #152]	@ (8000f20 <SystemClock_Config+0xc8>)
 8000e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <SystemClock_Config+0xc8>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <SystemClock_Config+0xcc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <SystemClock_Config+0xcc>)
 8000ea2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <SystemClock_Config+0xcc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 92;
 8000ecc:	235c      	movs	r3, #92	@ 0x5c
 8000ece:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fe7d 	bl	8003bdc <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee8:	f000 f9d4 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 f8df 	bl	80040cc <HAL_RCC_ClockConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f14:	f000 f9be 	bl	8001294 <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3750      	adds	r7, #80	@ 0x50
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40007000 	.word	0x40007000

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <MX_ADC1_Init+0xa0>)
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f86:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000f88:	f000 fbd6 	bl	8001738 <HAL_ADC_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f000 f97f 	bl	8001294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f96:	2309      	movs	r3, #9
 8000f98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_ADC1_Init+0x98>)
 8000fa8:	f000 fd8a 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 f96f 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000012c 	.word	0x2000012c
 8000fc4:	40012000 	.word	0x40012000
 8000fc8:	0f000001 	.word	0x0f000001

08000fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fd2:	4a13      	ldr	r2, [pc, #76]	@ (8001020 <MX_I2C1_Init+0x54>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fd8:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_I2C1_Init+0x58>)
 8000fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_I2C1_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_I2C1_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <MX_I2C1_Init+0x50>)
 800100a:	f001 fa51 	bl	80024b0 <HAL_I2C_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001014:	f000 f93e 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000174 	.word	0x20000174
 8001020:	40005400 	.word	0x40005400
 8001024:	000186a0 	.word	0x000186a0

08001028 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <MX_TIM1_Init+0x98>)
 8001046:	4a1f      	ldr	r2, [pc, #124]	@ (80010c4 <MX_TIM1_Init+0x9c>)
 8001048:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800104a:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <MX_TIM1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <MX_TIM1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <MX_TIM1_Init+0x98>)
 8001058:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800105c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <MX_TIM1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <MX_TIM1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <MX_TIM1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001070:	4813      	ldr	r0, [pc, #76]	@ (80010c0 <MX_TIM1_Init+0x98>)
 8001072:	f003 f9f7 	bl	8004464 <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800107c:	f000 f90a 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4619      	mov	r1, r3
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <MX_TIM1_Init+0x98>)
 800108e:	f003 fc03 	bl	8004898 <HAL_TIM_ConfigClockSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001098:	f000 f8fc 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_TIM1_Init+0x98>)
 80010aa:	f003 ff8f 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010b4:	f000 f8ee 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200001c8 	.word	0x200001c8
 80010c4:	40010000 	.word	0x40010000

080010c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	@ 0x38
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 80010fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 800110e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001112:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001120:	4823      	ldr	r0, [pc, #140]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 8001122:	f003 f99f 	bl	8004464 <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800112c:	f000 f8b2 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800113a:	4619      	mov	r1, r3
 800113c:	481c      	ldr	r0, [pc, #112]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 800113e:	f003 fbab 	bl	8004898 <HAL_TIM_ConfigClockSource>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001148:	f000 f8a4 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800114c:	4818      	ldr	r0, [pc, #96]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 800114e:	f003 f9d8 	bl	8004502 <HAL_TIM_PWM_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001158:	f000 f89c 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	4619      	mov	r1, r3
 800116a:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 800116c:	f003 ff2e 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001176:	f000 f88d 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117a:	2360      	movs	r3, #96	@ 0x60
 800117c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2208      	movs	r2, #8
 800118e:	4619      	mov	r1, r3
 8001190:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 8001192:	f003 fabf 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800119c:	f000 f87a 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <MX_TIM2_Init+0xe8>)
 80011a2:	f000 f983 	bl	80014ac <HAL_TIM_MspPostInit>

}
 80011a6:	bf00      	nop
 80011a8:	3738      	adds	r7, #56	@ 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000210 	.word	0x20000210

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <MX_GPIO_Init+0xd4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001288 <MX_GPIO_Init+0xd4>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_GPIO_Init+0xd4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <MX_GPIO_Init+0xd4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a26      	ldr	r2, [pc, #152]	@ (8001288 <MX_GPIO_Init+0xd4>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <MX_GPIO_Init+0xd4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <MX_GPIO_Init+0xd4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a1f      	ldr	r2, [pc, #124]	@ (8001288 <MX_GPIO_Init+0xd4>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <MX_GPIO_Init+0xd4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <MX_GPIO_Init+0xd4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <MX_GPIO_Init+0xd4>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_GPIO_Init+0xd4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001240:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_GPIO_Init+0xd8>)
 8001242:	f001 f901 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	@ (800128c <MX_GPIO_Init+0xd8>)
 8001260:	f000 ff6e 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_GPIO_Init+0xdc>)
 800127a:	f000 ff61 	bl	8002140 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	@ 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020800 	.word	0x40020800
 8001290:	40020400 	.word	0x40020400

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <Error_Handler+0x8>

080012a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a24      	ldr	r2, [pc, #144]	@ (80013a0 <HAL_ADC_MspInit+0xb0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d141      	bne.n	8001396 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_ADC_MspInit+0xb4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001366:	2305      	movs	r3, #5
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <HAL_ADC_MspInit+0xb8>)
 800137a:	f000 fee1 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800137e:	2302      	movs	r3, #2
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4806      	ldr	r0, [pc, #24]	@ (80013ac <HAL_ADC_MspInit+0xbc>)
 8001392:	f000 fed5 	bl	8002140 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40012000 	.word	0x40012000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400

080013b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	@ (8001434 <HAL_I2C_MspInit+0x84>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12b      	bne.n	800142a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <HAL_I2C_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_I2C_MspInit+0x88>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_I2C_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ee:	23c0      	movs	r3, #192	@ 0xc0
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f2:	2312      	movs	r3, #18
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fe:	2304      	movs	r3, #4
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <HAL_I2C_MspInit+0x8c>)
 800140a:	f000 fe99 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_I2C_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_I2C_MspInit+0x88>)
 8001418:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_I2C_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40005400 	.word	0x40005400
 8001438:	40023800 	.word	0x40023800
 800143c:	40020400 	.word	0x40020400

08001440 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <HAL_TIM_Base_MspInit+0x64>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10e      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800146e:	e012      	b.n	8001496 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001478:	d10d      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014cc:	d11e      	bne.n	800150c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_TIM_MspPostInit+0x68>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <HAL_TIM_MspPostInit+0x68>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_TIM_MspPostInit+0x68>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	4804      	ldr	r0, [pc, #16]	@ (8001518 <HAL_TIM_MspPostInit+0x6c>)
 8001508:	f000 fe1a 	bl	8002140 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <NMI_Handler+0x4>

08001524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <UsageFault_Handler+0x4>

08001544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001572:	f000 f89d 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */



  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <OTG_FS_IRQHandler+0x14>)
 8001582:	f001 fa1d 	bl	80029c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  toggle();
 8001586:	f7ff fb61 	bl	8000c4c <toggle>

  

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20001748 	.word	0x20001748

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f007 fd4f 	bl	8009088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fb3d 	bl	8000c68 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80015fc:	08009158 	.word	0x08009158
  ldr r2, =_sbss
 8001600:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001604:	20001e4c 	.word	0x20001e4c

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	@ (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fd41 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fe2e 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fd59 	bl	8002126 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800168c:	f000 fd21 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000014 	.word	0x20000014
 80016a8:	2000001c 	.word	0x2000001c
 80016ac:	20000018 	.word	0x20000018

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	2000001c 	.word	0x2000001c
 80016d4:	20000264 	.word	0x20000264

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000264 	.word	0x20000264

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000001c 	.word	0x2000001c

08001738 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e033      	b.n	80017b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fdca 	bl	80012f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800177e:	f023 0302 	bic.w	r3, r3, #2
 8001782:	f043 0202 	orr.w	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 faca 	bl	8001d24 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_Start+0x1a>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e097      	b.n	800190a <HAL_ADC_Start+0x14a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d018      	beq.n	8001822 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001800:	4b45      	ldr	r3, [pc, #276]	@ (8001918 <HAL_ADC_Start+0x158>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a45      	ldr	r2, [pc, #276]	@ (800191c <HAL_ADC_Start+0x15c>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9a      	lsrs	r2, r3, #18
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001814:	e002      	b.n	800181c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3b01      	subs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f9      	bne.n	8001816 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	d15f      	bne.n	80018f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800185a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800186e:	d106      	bne.n	800187e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001874:	f023 0206 	bic.w	r2, r3, #6
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	645a      	str	r2, [r3, #68]	@ 0x44
 800187c:	e002      	b.n	8001884 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800188c:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <HAL_ADC_Start+0x160>)
 800188e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001898:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d129      	bne.n	8001908 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e020      	b.n	8001908 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a16      	ldr	r2, [pc, #88]	@ (8001924 <HAL_ADC_Start+0x164>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d11b      	bne.n	8001908 <HAL_ADC_Start+0x148>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d114      	bne.n	8001908 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e00b      	b.n	8001908 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000014 	.word	0x20000014
 800191c:	431bde83 	.word	0x431bde83
 8001920:	40012300 	.word	0x40012300
 8001924:	40012000 	.word	0x40012000

08001928 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_ADC_Stop+0x16>
 800193a:	2302      	movs	r3, #2
 800193c:	e021      	b.n	8001982 <HAL_ADC_Stop+0x5a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d113      	bne.n	80019d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019ba:	d10b      	bne.n	80019d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e063      	b.n	8001a9c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d4:	f7ff fe80 	bl	80016d8 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019da:	e021      	b.n	8001a20 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019e2:	d01d      	beq.n	8001a20 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_ADC_PollForConversion+0x6c>
 80019ea:	f7ff fe75 	bl	80016d8 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d212      	bcs.n	8001a20 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d00b      	beq.n	8001a20 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f043 0204 	orr.w	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e03d      	b.n	8001a9c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d1d6      	bne.n	80019dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f06f 0212 	mvn.w	r2, #18
 8001a36:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d123      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11f      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d111      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e113      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x244>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d925      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4403      	add	r3, r0
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e022      	b.n	8001b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6919      	ldr	r1, [r3, #16]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4403      	add	r3, r0
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d824      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b05      	subs	r3, #5
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bce:	e04c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d824      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	@ 0x23
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b23      	subs	r3, #35	@ 0x23
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c20:	e023      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	@ 0x41
 8001c34:	221f      	movs	r2, #31
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b41      	subs	r3, #65	@ 0x41
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_ADC_ConfigChannel+0x250>)
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <HAL_ADC_ConfigChannel+0x254>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10f      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1d8>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d10b      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <HAL_ADC_ConfigChannel+0x254>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12b      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <HAL_ADC_ConfigChannel+0x258>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b11      	cmp	r3, #17
 8001cb2:	d122      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	@ (8001d18 <HAL_ADC_ConfigChannel+0x258>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <HAL_ADC_ConfigChannel+0x25c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a11      	ldr	r2, [pc, #68]	@ (8001d20 <HAL_ADC_ConfigChannel+0x260>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9a      	lsrs	r2, r3, #18
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40012300 	.word	0x40012300
 8001d14:	40012000 	.word	0x40012000
 8001d18:	10000012 	.word	0x10000012
 8001d1c:	20000014 	.word	0x20000014
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2c:	4b79      	ldr	r3, [pc, #484]	@ (8001f14 <ADC_Init+0x1f0>)
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	021a      	lsls	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6899      	ldr	r1, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	4a58      	ldr	r2, [pc, #352]	@ (8001f18 <ADC_Init+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e00f      	b.n	8001e22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0202 	bic.w	r2, r2, #2
 8001e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7e1b      	ldrb	r3, [r3, #24]
 8001e3c:	005a      	lsls	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01b      	beq.n	8001e88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	035a      	lsls	r2, r3, #13
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	e007      	b.n	8001e98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051a      	lsls	r2, r3, #20
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eda:	025a      	lsls	r2, r3, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6899      	ldr	r1, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	029a      	lsls	r2, r3, #10
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40012300 	.word	0x40012300
 8001f18:	0f000001 	.word	0x0f000001

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff29 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff3e 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff8e 	bl	8002010 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5d 	bl	8001fbc <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff31 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	@ 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e159      	b.n	8002410 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8148 	bne.w	800240a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d005      	beq.n	8002192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218e:	2b02      	cmp	r3, #2
 8002190:	d130      	bne.n	80021f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 0201 	and.w	r2, r3, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d017      	beq.n	8002230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d123      	bne.n	8002284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80a2 	beq.w	800240a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b57      	ldr	r3, [pc, #348]	@ (8002428 <HAL_GPIO_Init+0x2e8>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	4a56      	ldr	r2, [pc, #344]	@ (8002428 <HAL_GPIO_Init+0x2e8>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d6:	4b54      	ldr	r3, [pc, #336]	@ (8002428 <HAL_GPIO_Init+0x2e8>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e2:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_GPIO_Init+0x2ec>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a49      	ldr	r2, [pc, #292]	@ (8002430 <HAL_GPIO_Init+0x2f0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x202>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a48      	ldr	r2, [pc, #288]	@ (8002434 <HAL_GPIO_Init+0x2f4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x1fe>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a47      	ldr	r2, [pc, #284]	@ (8002438 <HAL_GPIO_Init+0x2f8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1fa>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a46      	ldr	r2, [pc, #280]	@ (800243c <HAL_GPIO_Init+0x2fc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1f6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a45      	ldr	r2, [pc, #276]	@ (8002440 <HAL_GPIO_Init+0x300>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1f2>
 800232e:	2304      	movs	r3, #4
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002332:	2307      	movs	r3, #7
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x204>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x204>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	@ (800242c <HAL_GPIO_Init+0x2ec>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b38      	ldr	r3, [pc, #224]	@ (8002444 <HAL_GPIO_Init+0x304>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002386:	4a2f      	ldr	r2, [pc, #188]	@ (8002444 <HAL_GPIO_Init+0x304>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238c:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <HAL_GPIO_Init+0x304>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b0:	4a24      	ldr	r2, [pc, #144]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023b6:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023da:	4a1a      	ldr	r2, [pc, #104]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002404:	4a0f      	ldr	r2, [pc, #60]	@ (8002444 <HAL_GPIO_Init+0x304>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f aea2 	bls.w	800215c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800248c:	887a      	ldrh	r2, [r7, #2]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	041a      	lsls	r2, r3, #16
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43d9      	mvns	r1, r3
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	400b      	ands	r3, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	619a      	str	r2, [r3, #24]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e12b      	b.n	800271a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe ff6a 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2224      	movs	r2, #36	@ 0x24
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002514:	f001 ff92 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8002518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a81      	ldr	r2, [pc, #516]	@ (8002724 <HAL_I2C_Init+0x274>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d807      	bhi.n	8002534 <HAL_I2C_Init+0x84>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a80      	ldr	r2, [pc, #512]	@ (8002728 <HAL_I2C_Init+0x278>)
 8002528:	4293      	cmp	r3, r2
 800252a:	bf94      	ite	ls
 800252c:	2301      	movls	r3, #1
 800252e:	2300      	movhi	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e006      	b.n	8002542 <HAL_I2C_Init+0x92>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a7d      	ldr	r2, [pc, #500]	@ (800272c <HAL_I2C_Init+0x27c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	bf94      	ite	ls
 800253c:	2301      	movls	r3, #1
 800253e:	2300      	movhi	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0e7      	b.n	800271a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a78      	ldr	r2, [pc, #480]	@ (8002730 <HAL_I2C_Init+0x280>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9b      	lsrs	r3, r3, #18
 8002554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a6a      	ldr	r2, [pc, #424]	@ (8002724 <HAL_I2C_Init+0x274>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d802      	bhi.n	8002584 <HAL_I2C_Init+0xd4>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3301      	adds	r3, #1
 8002582:	e009      	b.n	8002598 <HAL_I2C_Init+0xe8>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	4a69      	ldr	r2, [pc, #420]	@ (8002734 <HAL_I2C_Init+0x284>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	3301      	adds	r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	430b      	orrs	r3, r1
 800259e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	495c      	ldr	r1, [pc, #368]	@ (8002724 <HAL_I2C_Init+0x274>)
 80025b4:	428b      	cmp	r3, r1
 80025b6:	d819      	bhi.n	80025ec <HAL_I2C_Init+0x13c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e59      	subs	r1, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c6:	1c59      	adds	r1, r3, #1
 80025c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025cc:	400b      	ands	r3, r1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_I2C_Init+0x138>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e59      	subs	r1, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	e051      	b.n	800268c <HAL_I2C_Init+0x1dc>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e04f      	b.n	800268c <HAL_I2C_Init+0x1dc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d111      	bne.n	8002618 <HAL_I2C_Init+0x168>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1e58      	subs	r0, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e012      	b.n	800263e <HAL_I2C_Init+0x18e>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e58      	subs	r0, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	0099      	lsls	r1, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	fbb0 f3f3 	udiv	r3, r0, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Init+0x196>
 8002642:	2301      	movs	r3, #1
 8002644:	e022      	b.n	800268c <HAL_I2C_Init+0x1dc>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10e      	bne.n	800266c <HAL_I2C_Init+0x1bc>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e58      	subs	r0, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800266a:	e00f      	b.n	800268c <HAL_I2C_Init+0x1dc>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e58      	subs	r0, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	0099      	lsls	r1, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	6809      	ldr	r1, [r1, #0]
 8002690:	4313      	orrs	r3, r2
 8002692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6911      	ldr	r1, [r2, #16]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68d2      	ldr	r2, [r2, #12]
 80026c6:	4311      	orrs	r1, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	000186a0 	.word	0x000186a0
 8002728:	001e847f 	.word	0x001e847f
 800272c:	003d08ff 	.word	0x003d08ff
 8002730:	431bde83 	.word	0x431bde83
 8002734:	10624dd3 	.word	0x10624dd3

08002738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af02      	add	r7, sp, #8
 800273e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e101      	b.n	800294e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f006 f97d 	bl	8008a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2203      	movs	r2, #3
 800276e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002778:	d102      	bne.n	8002780 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fda6 	bl	80052d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7c1a      	ldrb	r2, [r3, #16]
 8002792:	f88d 2000 	strb.w	r2, [sp]
 8002796:	3304      	adds	r3, #4
 8002798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279a:	f002 fc85 	bl	80050a8 <USB_CoreInit>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0ce      	b.n	800294e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fd9e 	bl	80052f8 <USB_SetCurrentMode>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0bf      	b.n	800294e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e04a      	b.n	800286a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3315      	adds	r3, #21
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3314      	adds	r3, #20
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	b298      	uxth	r0, r3
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	332e      	adds	r3, #46	@ 0x2e
 8002810:	4602      	mov	r2, r0
 8002812:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3318      	adds	r3, #24
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	331c      	adds	r3, #28
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3320      	adds	r3, #32
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3324      	adds	r3, #36	@ 0x24
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	3301      	adds	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	791b      	ldrb	r3, [r3, #4]
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	429a      	cmp	r2, r3
 8002872:	d3af      	bcc.n	80027d4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e044      	b.n	8002904 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	3301      	adds	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	791b      	ldrb	r3, [r3, #4]
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	429a      	cmp	r2, r3
 800290c:	d3b5      	bcc.n	800287a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7c1a      	ldrb	r2, [r3, #16]
 8002916:	f88d 2000 	strb.w	r2, [sp]
 800291a:	3304      	adds	r3, #4
 800291c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291e:	f002 fd37 	bl	8005390 <USB_DevInit>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e00c      	b.n	800294e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f003 fd81 	bl	800644e <USB_DevDisconnect>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_PCD_Start+0x1c>
 800296e:	2302      	movs	r3, #2
 8002970:	e022      	b.n	80029b8 <HAL_PCD_Start+0x62>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800298a:	2b01      	cmp	r3, #1
 800298c:	d105      	bne.n	800299a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002992:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fc88 	bl	80052b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fd2f 	bl	800640c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08d      	sub	sp, #52	@ 0x34
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fded 	bl	80065b6 <USB_GetMode>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 848c 	bne.w	80032fc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fd51 	bl	8006490 <USB_ReadInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8482 	beq.w	80032fa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fd3e 	bl	8006490 <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f002 0202 	and.w	r2, r2, #2
 8002a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 fd2c 	bl	8006490 <USB_ReadInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d161      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0210 	bic.w	r2, r2, #16
 8002a50:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 020f 	and.w	r2, r3, #15
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3304      	adds	r3, #4
 8002a70:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002a78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a7c:	d124      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d035      	beq.n	8002af6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6a38      	ldr	r0, [r7, #32]
 8002a9e:	f003 fb63 	bl	8006168 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aae:	441a      	add	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac0:	441a      	add	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	615a      	str	r2, [r3, #20]
 8002ac6:	e016      	b.n	8002af6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ace:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ad2:	d110      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ada:	2208      	movs	r2, #8
 8002adc:	4619      	mov	r1, r3
 8002ade:	6a38      	ldr	r0, [r7, #32]
 8002ae0:	f003 fb42 	bl	8006168 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af0:	441a      	add	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0210 	orr.w	r2, r2, #16
 8002b04:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fcc0 	bl	8006490 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b1a:	f040 80a7 	bne.w	8002c6c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fcc5 	bl	80064b6 <USB_ReadDevAllOutEpInterrupt>
 8002b2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b2e:	e099      	b.n	8002c64 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 808e 	beq.w	8002c58 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fce9 	bl	800651e <USB_ReadDevOutEPInterrupt>
 8002b4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00c      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b64:	461a      	mov	r2, r3
 8002b66:	2301      	movs	r3, #1
 8002b68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fea3 	bl	80038b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00c      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 ff79 	bl	8003a88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bac:	461a      	mov	r2, r3
 8002bae:	2310      	movs	r3, #16
 8002bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d030      	beq.n	8002c1e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc4:	2b80      	cmp	r3, #128	@ 0x80
 8002bc6:	d109      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bda:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	78db      	ldrb	r3, [r3, #3]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d108      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f006 f828 	bl	8008c5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c34:	461a      	mov	r2, r3
 8002c36:	2320      	movs	r3, #32
 8002c38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c50:	461a      	mov	r2, r3
 8002c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f47f af62 	bne.w	8002b30 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fc0d 	bl	8006490 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c80:	f040 80db 	bne.w	8002e3a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fc2e 	bl	80064ea <USB_ReadDevAllInEpInterrupt>
 8002c8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002c94:	e0cd      	b.n	8002e32 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80c2 	beq.w	8002e26 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fc54 	bl	800655a <USB_ReadDevInEPInterrupt>
 8002cb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d057      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69f9      	ldr	r1, [r7, #28]
 8002cda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cde:	4013      	ands	r3, r2
 8002ce0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d132      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3320      	adds	r3, #32
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4403      	add	r3, r0
 8002d1c:	331c      	adds	r3, #28
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4419      	add	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4403      	add	r3, r0
 8002d30:	3320      	adds	r3, #32
 8002d32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d113      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x3a2>
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3324      	adds	r3, #36	@ 0x24
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	f003 fc5b 	bl	8006618 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f005 fefc 	bl	8008b66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d84:	461a      	mov	r2, r3
 8002d86:	2308      	movs	r3, #8
 8002d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da0:	461a      	mov	r2, r3
 8002da2:	2310      	movs	r3, #16
 8002da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2340      	movs	r3, #64	@ 0x40
 8002dc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002dcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dce:	6a38      	ldr	r0, [r7, #32]
 8002dd0:	f002 fc42 	bl	8005658 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	3310      	adds	r3, #16
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	3304      	adds	r3, #4
 8002de6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	78db      	ldrb	r3, [r3, #3]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d108      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f005 ff3f 	bl	8008c80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2302      	movs	r3, #2
 8002e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fcbd 	bl	80037a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	3301      	adds	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f47f af2e 	bne.w	8002c96 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fb26 	bl	8006490 <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e4e:	d122      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d108      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e76:	2100      	movs	r1, #0
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fea3 	bl	8003bc4 <HAL_PCDEx_LPM_Callback>
 8002e7e:	e002      	b.n	8002e86 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f005 fedd 	bl	8008c40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 faf8 	bl	8006490 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eaa:	d112      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d102      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f005 fe99 	bl	8008bf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ed0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fada 	bl	8006490 <USB_ReadInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee6:	f040 80b7 	bne.w	8003058 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2110      	movs	r1, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fba7 	bl	8005658 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f0e:	e046      	b.n	8002f9e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f34:	0151      	lsls	r1, r2, #5
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	440a      	add	r2, r1
 8002f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f68:	0151      	lsls	r1, r2, #5
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	440a      	add	r2, r1
 8002f6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f88:	0151      	lsls	r1, r2, #5
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	440a      	add	r2, r1
 8002f8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	791b      	ldrb	r3, [r3, #4]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d3b2      	bcc.n	8002f10 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7bdb      	ldrb	r3, [r3, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d016      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fd6:	f043 030b 	orr.w	r3, r3, #11
 8002fda:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fec:	f043 030b 	orr.w	r3, r3, #11
 8002ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ff2:	e015      	b.n	8003020 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003002:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003006:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800300a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800301a:	f043 030b 	orr.w	r3, r3, #11
 800301e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003032:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003042:	461a      	mov	r2, r3
 8003044:	f003 fae8 	bl	8006618 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fa17 	bl	8006490 <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800306c:	d123      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f003 faad 	bl	80065d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fb64 	bl	800574a <USB_GetDevSpeed>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681c      	ldr	r4, [r3, #0]
 800308e:	f001 f9c9 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8003092:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003098:	461a      	mov	r2, r3
 800309a:	4620      	mov	r0, r4
 800309c:	f002 f868 	bl	8005170 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f005 fd88 	bl	8008bb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f9e8 	bl	8006490 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d10a      	bne.n	80030e0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f005 fd65 	bl	8008b9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f002 0208 	and.w	r2, r2, #8
 80030de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f003 f9d3 	bl	8006490 <USB_ReadInterrupts>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d123      	bne.n	800313c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003100:	2301      	movs	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
 8003104:	e014      	b.n	8003130 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fb0a 	bl	800373e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	3301      	adds	r3, #1
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	791b      	ldrb	r3, [r3, #4]
 8003134:	461a      	mov	r2, r3
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	4293      	cmp	r3, r2
 800313a:	d3e4      	bcc.n	8003106 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f003 f9a5 	bl	8006490 <USB_ReadInterrupts>
 8003146:	4603      	mov	r3, r0
 8003148:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003150:	d13c      	bne.n	80031cc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003152:	2301      	movs	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
 8003156:	e02b      	b.n	80031b0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3318      	adds	r3, #24
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d115      	bne.n	80031aa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800317e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	da12      	bge.n	80031aa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3317      	adds	r3, #23
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 faca 	bl	800373e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	3301      	adds	r3, #1
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	791b      	ldrb	r3, [r3, #4]
 80031b4:	461a      	mov	r2, r3
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d3cd      	bcc.n	8003158 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 f95d 	bl	8006490 <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031e0:	d156      	bne.n	8003290 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e2:	2301      	movs	r3, #1
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e6:	e045      	b.n	8003274 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d12e      	bne.n	800326e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003210:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003212:	2b00      	cmp	r3, #0
 8003214:	da2b      	bge.n	800326e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	0c1a      	lsrs	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003220:	4053      	eors	r3, r2
 8003222:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003226:	2b00      	cmp	r3, #0
 8003228:	d121      	bne.n	800326e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800326a:	6053      	str	r3, [r2, #4]
            break;
 800326c:	e008      	b.n	8003280 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	3301      	adds	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	791b      	ldrb	r3, [r3, #4]
 8003278:	461a      	mov	r2, r3
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	4293      	cmp	r3, r2
 800327e:	d3b3      	bcc.n	80031e8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800328e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f003 f8fb 	bl	8006490 <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a4:	d10a      	bne.n	80032bc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f005 fcfc 	bl	8008ca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 f8e5 	bl	8006490 <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d115      	bne.n	80032fc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f005 fcec 	bl	8008cc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	e000      	b.n	80032fc <HAL_PCD_IRQHandler+0x93c>
      return;
 80032fa:	bf00      	nop
    }
  }
}
 80032fc:	3734      	adds	r7, #52	@ 0x34
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}

08003302 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_SetAddress+0x1a>
 8003318:	2302      	movs	r3, #2
 800331a:	e012      	b.n	8003342 <HAL_PCD_SetAddress+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f003 f844 	bl	80063c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	4608      	mov	r0, r1
 8003354:	4611      	mov	r1, r2
 8003356:	461a      	mov	r2, r3
 8003358:	4603      	mov	r3, r0
 800335a:	70fb      	strb	r3, [r7, #3]
 800335c:	460b      	mov	r3, r1
 800335e:	803b      	strh	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800336c:	2b00      	cmp	r3, #0
 800336e:	da0f      	bge.n	8003390 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 020f 	and.w	r2, r3, #15
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3310      	adds	r3, #16
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	705a      	strb	r2, [r3, #1]
 800338e:	e00f      	b.n	80033b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 020f 	and.w	r2, r3, #15
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80033bc:	883b      	ldrh	r3, [r7, #0]
 80033be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	78ba      	ldrb	r2, [r7, #2]
 80033ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033de:	78bb      	ldrb	r3, [r7, #2]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d102      	bne.n	80033ea <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_PCD_EP_Open+0xae>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e00e      	b.n	8003416 <HAL_PCD_EP_Open+0xcc>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	4618      	mov	r0, r3
 8003408:	f002 f9c4 	bl	8005794 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003414:	7afb      	ldrb	r3, [r7, #11]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800342a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800342e:	2b00      	cmp	r3, #0
 8003430:	da0f      	bge.n	8003452 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	3310      	adds	r3, #16
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	705a      	strb	r2, [r3, #1]
 8003450:	e00f      	b.n	8003472 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 020f 	and.w	r2, r3, #15
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	3304      	adds	r3, #4
 800346a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_PCD_EP_Close+0x6e>
 8003488:	2302      	movs	r3, #2
 800348a:	e00e      	b.n	80034aa <HAL_PCD_EP_Close+0x8c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	4618      	mov	r0, r3
 800349c:	f002 fa02 	bl	80058a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	460b      	mov	r3, r1
 80034c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c2:	7afb      	ldrb	r3, [r7, #11]
 80034c4:	f003 020f 	and.w	r2, r3, #15
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f4:	7afb      	ldrb	r3, [r7, #11]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	799b      	ldrb	r3, [r3, #6]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	799b      	ldrb	r3, [r3, #6]
 8003516:	461a      	mov	r2, r3
 8003518:	6979      	ldr	r1, [r7, #20]
 800351a:	f002 fa9f 	bl	8005a5c <USB_EPStartXfer>

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	460b      	mov	r3, r1
 8003566:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003568:	7afb      	ldrb	r3, [r7, #11]
 800356a:	f003 020f 	and.w	r2, r3, #15
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	3310      	adds	r3, #16
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2201      	movs	r2, #1
 8003596:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003598:	7afb      	ldrb	r3, [r7, #11]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	799b      	ldrb	r3, [r3, #6]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	799b      	ldrb	r3, [r3, #6]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6979      	ldr	r1, [r7, #20]
 80035be:	f002 fa4d 	bl	8005a5c <USB_EPStartXfer>

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	7912      	ldrb	r2, [r2, #4]
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e04f      	b.n	800368a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da0f      	bge.n	8003612 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	3310      	adds	r3, #16
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	705a      	strb	r2, [r3, #1]
 8003610:	e00d      	b.n	800362e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_PCD_EP_SetStall+0x82>
 800364a:	2302      	movs	r3, #2
 800364c:	e01d      	b.n	800368a <HAL_PCD_EP_SetStall+0xbe>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fddb 	bl	8006218 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7999      	ldrb	r1, [r3, #6]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800367a:	461a      	mov	r2, r3
 800367c:	f002 ffcc 	bl	8006618 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	7912      	ldrb	r2, [r2, #4]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e042      	b.n	8003736 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	da0f      	bge.n	80036d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	3310      	adds	r3, #16
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	705a      	strb	r2, [r3, #1]
 80036d6:	e00f      	b.n	80036f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	3304      	adds	r3, #4
 80036f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_PCD_EP_ClrStall+0x86>
 8003714:	2302      	movs	r3, #2
 8003716:	e00e      	b.n	8003736 <HAL_PCD_EP_ClrStall+0xa4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	4618      	mov	r0, r3
 8003728:	f002 fde4 	bl	80062f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800374a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374e:	2b00      	cmp	r3, #0
 8003750:	da0c      	bge.n	800376c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 020f 	and.w	r2, r3, #15
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	3310      	adds	r3, #16
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	3304      	adds	r3, #4
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e00c      	b.n	8003786 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 020f 	and.w	r2, r3, #15
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fc03 	bl	8005f98 <USB_EPStopXfer>
 8003792:	4603      	mov	r3, r0
 8003794:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003796:	7afb      	ldrb	r3, [r7, #11]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	@ 0x28
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	3310      	adds	r3, #16
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	3304      	adds	r3, #4
 80037c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d901      	bls.n	80037d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e06b      	b.n	80038b0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d902      	bls.n	80037f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3303      	adds	r3, #3
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037fc:	e02a      	b.n	8003854 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	429a      	cmp	r2, r3
 8003812:	d902      	bls.n	800381a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3303      	adds	r3, #3
 800381e:	089b      	lsrs	r3, r3, #2
 8003820:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4603      	mov	r3, r0
 8003836:	6978      	ldr	r0, [r7, #20]
 8003838:	f002 fc58 	bl	80060ec <USB_WritePacket>

    ep->xfer_buff  += len;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	441a      	add	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	441a      	add	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	429a      	cmp	r2, r3
 8003868:	d809      	bhi.n	800387e <PCD_WriteEmptyTxFifo+0xde>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003872:	429a      	cmp	r2, r3
 8003874:	d203      	bcs.n	800387e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1bf      	bne.n	80037fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	429a      	cmp	r2, r3
 8003888:	d811      	bhi.n	80038ae <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	2201      	movs	r2, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	6939      	ldr	r1, [r7, #16]
 80038a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038aa:	4013      	ands	r3, r2
 80038ac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	333c      	adds	r3, #60	@ 0x3c
 80038d0:	3304      	adds	r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	799b      	ldrb	r3, [r3, #6]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d17b      	bne.n	80039e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4a61      	ldr	r2, [pc, #388]	@ (8003a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	f240 80b9 	bls.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80b3 	beq.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003920:	6093      	str	r3, [r2, #8]
 8003922:	e0a7      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	2320      	movs	r3, #32
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	e098      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 8093 	bne.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a4b      	ldr	r2, [pc, #300]	@ (8003a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d90f      	bls.n	8003976 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003972:	6093      	str	r3, [r2, #8]
 8003974:	e07e      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	3304      	adds	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	0159      	lsls	r1, r3, #5
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	440b      	add	r3, r1
 8003998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d114      	bne.n	80039d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039c0:	461a      	mov	r2, r3
 80039c2:	2101      	movs	r1, #1
 80039c4:	f002 fe28 	bl	8006618 <USB_EP0_OutStart>
 80039c8:	e006      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f005 f8a6 	bl	8008b30 <HAL_PCD_DataOutStageCallback>
 80039e4:	e046      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4a26      	ldr	r2, [pc, #152]	@ (8003a84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d124      	bne.n	8003a38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	e032      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2320      	movs	r3, #32
 8003a28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f005 f87d 	bl	8008b30 <HAL_PCD_DataOutStageCallback>
 8003a36:	e01d      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d114      	bne.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a60:	461a      	mov	r2, r3
 8003a62:	2100      	movs	r1, #0
 8003a64:	f002 fdd8 	bl	8006618 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f005 f85e 	bl	8008b30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	4f54300a 	.word	0x4f54300a
 8003a84:	4f54310a 	.word	0x4f54310a

08003a88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	333c      	adds	r3, #60	@ 0x3c
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d90e      	bls.n	8003adc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ada:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f005 f815 	bl	8008b0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d90c      	bls.n	8003b04 <PCD_EP_OutSetupPacket_int+0x7c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	799b      	ldrb	r3, [r3, #6]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003afc:	461a      	mov	r2, r3
 8003afe:	2101      	movs	r1, #1
 8003b00:	f002 fd8a 	bl	8006618 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	4f54300a 	.word	0x4f54300a

08003b14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
 8003b20:	4613      	mov	r3, r2
 8003b22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	0419      	lsls	r1, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b40:	e028      	b.n	8003b94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e00d      	b.n	8003b72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3340      	adds	r3, #64	@ 0x40
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3ec      	bcc.n	8003b56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b7c:	883b      	ldrh	r3, [r7, #0]
 8003b7e:	0418      	lsls	r0, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4302      	orrs	r2, r0
 8003b8c:	3340      	adds	r3, #64	@ 0x40
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e267      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bfa:	4b88      	ldr	r3, [pc, #544]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b85      	ldr	r3, [pc, #532]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b82      	ldr	r3, [pc, #520]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	4b7e      	ldr	r3, [pc, #504]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05b      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d157      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e242      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x74>
 8003c42:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a75      	ldr	r2, [pc, #468]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x98>
 8003c5a:	4b70      	ldr	r3, [pc, #448]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b6d      	ldr	r3, [pc, #436]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6c      	ldr	r2, [pc, #432]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c74:	4b69      	ldr	r3, [pc, #420]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a68      	ldr	r2, [pc, #416]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b66      	ldr	r3, [pc, #408]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a65      	ldr	r2, [pc, #404]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd fd20 	bl	80016d8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fd1c 	bl	80016d8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	@ 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e207      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b5b      	ldr	r3, [pc, #364]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fd0c 	bl	80016d8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fd08 	bl	80016d8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1f3      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b51      	ldr	r3, [pc, #324]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b47      	ldr	r3, [pc, #284]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b44      	ldr	r3, [pc, #272]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1c7      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4937      	ldr	r1, [pc, #220]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b34      	ldr	r3, [pc, #208]	@ (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fd fcc1 	bl	80016d8 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fd fcbd 	bl	80016d8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a8      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b28      	ldr	r3, [pc, #160]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4925      	ldr	r1, [pc, #148]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fca0 	bl	80016d8 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fc9c 	bl	80016d8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e187      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d036      	beq.n	8003e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fd fc80 	bl	80016d8 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fc7c 	bl	80016d8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e167      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x200>
 8003dfa:	e01b      	b.n	8003e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fc69 	bl	80016d8 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e00e      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fd fc65 	bl	80016d8 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d907      	bls.n	8003e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e150      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470000 	.word	0x42470000
 8003e24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b88      	ldr	r3, [pc, #544]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ea      	bne.n	8003e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8097 	beq.w	8003f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b81      	ldr	r3, [pc, #516]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b7d      	ldr	r3, [pc, #500]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e62:	4b7a      	ldr	r3, [pc, #488]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b77      	ldr	r3, [pc, #476]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d118      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7e:	4b74      	ldr	r3, [pc, #464]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a73      	ldr	r2, [pc, #460]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8a:	f7fd fc25 	bl	80016d8 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e92:	f7fd fc21 	bl	80016d8 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e10c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <HAL_RCC_OscConfig+0x474>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2ea>
 8003eb8:	4b64      	ldr	r3, [pc, #400]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebc:	4a63      	ldr	r2, [pc, #396]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x30c>
 8003ece:	4b5f      	ldr	r3, [pc, #380]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eda:	4b5c      	ldr	r3, [pc, #368]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	4a5b      	ldr	r2, [pc, #364]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ee8:	4b58      	ldr	r3, [pc, #352]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	4a57      	ldr	r2, [pc, #348]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef4:	4b55      	ldr	r3, [pc, #340]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef8:	4a54      	ldr	r2, [pc, #336]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 0304 	bic.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd fbe6 	bl	80016d8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd fbe2 	bl	80016d8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0cb      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b49      	ldr	r3, [pc, #292]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCC_OscConfig+0x334>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7fd fbd0 	bl	80016d8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd fbcc 	bl	80016d8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0b5      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ee      	bne.n	8003f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	4b39      	ldr	r3, [pc, #228]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	4a38      	ldr	r2, [pc, #224]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a1 	beq.w	80040bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d05c      	beq.n	8004040 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d141      	bne.n	8004012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <HAL_RCC_OscConfig+0x478>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fd fba0 	bl	80016d8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd fb9c 	bl	80016d8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e087      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b27      	ldr	r3, [pc, #156]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	491b      	ldr	r1, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <HAL_RCC_OscConfig+0x478>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fd fb75 	bl	80016d8 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fd fb71 	bl	80016d8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e05c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x416>
 8004010:	e054      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCC_OscConfig+0x478>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd fb5e 	bl	80016d8 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd fb5a 	bl	80016d8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_RCC_OscConfig+0x470>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x444>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e038      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	40007000 	.word	0x40007000
 8004054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004058:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d028      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d121      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800408e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cc      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b68      	ldr	r3, [pc, #416]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d90c      	bls.n	8004108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b65      	ldr	r3, [pc, #404]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d044      	beq.n	80041ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d119      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	2b03      	cmp	r3, #3
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	4b3b      	ldr	r3, [pc, #236]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e067      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b37      	ldr	r3, [pc, #220]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4934      	ldr	r1, [pc, #208]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fd fa8c 	bl	80016d8 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd fa88 	bl	80016d8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e04f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2b      	ldr	r3, [pc, #172]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d20c      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b22      	ldr	r3, [pc, #136]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	@ (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423e:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	@ (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd f9ec 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	08009130 	.word	0x08009130
 8004290:	20000014 	.word	0x20000014
 8004294:	20000018 	.word	0x20000018

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b090      	sub	sp, #64	@ 0x40
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b0:	4b59      	ldr	r3, [pc, #356]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f200 80a1 	bhi.w	8004404 <HAL_RCC_GetSysClockFreq+0x16c>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ca:	e09b      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b53      	ldr	r3, [pc, #332]	@ (800441c <HAL_RCC_GetSysClockFreq+0x184>)
 80042ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042d0:	e09b      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b53      	ldr	r3, [pc, #332]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x188>)
 80042d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042d6:	e098      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d028      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	2200      	movs	r2, #0
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004300:	2100      	movs	r1, #0
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x188>)
 8004304:	fb03 f201 	mul.w	r2, r3, r1
 8004308:	2300      	movs	r3, #0
 800430a:	fb00 f303 	mul.w	r3, r0, r3
 800430e:	4413      	add	r3, r2
 8004310:	4a43      	ldr	r2, [pc, #268]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x188>)
 8004312:	fba0 1202 	umull	r1, r2, r0, r2
 8004316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004318:	460a      	mov	r2, r1
 800431a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800431c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800431e:	4413      	add	r3, r2
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004324:	2200      	movs	r2, #0
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800432e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004332:	f7fc fa87 	bl	8000844 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4613      	mov	r3, r2
 800433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800433e:	e053      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004340:	4b35      	ldr	r3, [pc, #212]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	2200      	movs	r2, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	617a      	str	r2, [r7, #20]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004352:	f04f 0b00 	mov.w	fp, #0
 8004356:	4652      	mov	r2, sl
 8004358:	465b      	mov	r3, fp
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004368:	0150      	lsls	r0, r2, #5
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	ebb2 080a 	subs.w	r8, r2, sl
 8004372:	eb63 090b 	sbc.w	r9, r3, fp
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800438a:	ebb2 0408 	subs.w	r4, r2, r8
 800438e:	eb63 0509 	sbc.w	r5, r3, r9
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	00eb      	lsls	r3, r5, #3
 800439c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a0:	00e2      	lsls	r2, r4, #3
 80043a2:	4614      	mov	r4, r2
 80043a4:	461d      	mov	r5, r3
 80043a6:	eb14 030a 	adds.w	r3, r4, sl
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	eb45 030b 	adc.w	r3, r5, fp
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043be:	4629      	mov	r1, r5
 80043c0:	028b      	lsls	r3, r1, #10
 80043c2:	4621      	mov	r1, r4
 80043c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c8:	4621      	mov	r1, r4
 80043ca:	028a      	lsls	r2, r1, #10
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d2:	2200      	movs	r2, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	60fa      	str	r2, [r7, #12]
 80043d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043dc:	f7fc fa32 	bl	8000844 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004402:	e002      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCC_GetSysClockFreq+0x184>)
 8004406:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800440c:	4618      	mov	r0, r3
 800440e:	3740      	adds	r7, #64	@ 0x40
 8004410:	46bd      	mov	sp, r7
 8004412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	017d7840 	.word	0x017d7840

08004424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b03      	ldr	r3, [pc, #12]	@ (8004438 <HAL_RCC_GetHCLKFreq+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000014 	.word	0x20000014

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004440:	f7ff fff0 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	@ (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	08009140 	.word	0x08009140

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc ffd8 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fac0 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e041      	b.n	8004598 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f839 	bl	80045a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f000 fa71 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start+0x24>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e022      	b.n	800461e <HAL_TIM_PWM_Start+0x6a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d109      	bne.n	80045f2 <HAL_TIM_PWM_Start+0x3e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	e015      	b.n	800461e <HAL_TIM_PWM_Start+0x6a>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start+0x58>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e008      	b.n	800461e <HAL_TIM_PWM_Start+0x6a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e068      	b.n	80046f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Start+0x82>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004634:	e013      	b.n	800465e <HAL_TIM_PWM_Start+0xaa>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d104      	bne.n	8004646 <HAL_TIM_PWM_Start+0x92>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004644:	e00b      	b.n	800465e <HAL_TIM_PWM_Start+0xaa>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Start+0xa2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004654:	e003      	b.n	800465e <HAL_TIM_PWM_Start+0xaa>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2201      	movs	r2, #1
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fc8a 	bl	8004f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a23      	ldr	r2, [pc, #140]	@ (8004700 <HAL_TIM_PWM_Start+0x14c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d107      	bne.n	8004686 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1d      	ldr	r2, [pc, #116]	@ (8004700 <HAL_TIM_PWM_Start+0x14c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x10e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004698:	d013      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x10e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <HAL_TIM_PWM_Start+0x150>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x10e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <HAL_TIM_PWM_Start+0x154>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x10e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a16      	ldr	r2, [pc, #88]	@ (800470c <HAL_TIM_PWM_Start+0x158>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x10e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a14      	ldr	r2, [pc, #80]	@ (8004710 <HAL_TIM_PWM_Start+0x15c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d111      	bne.n	80046e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d010      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	e007      	b.n	80046f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40014000 	.word	0x40014000

08004714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800472e:	2302      	movs	r3, #2
 8004730:	e0ae      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	f200 809f 	bhi.w	8004880 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004742:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800477d 	.word	0x0800477d
 800474c:	08004881 	.word	0x08004881
 8004750:	08004881 	.word	0x08004881
 8004754:	08004881 	.word	0x08004881
 8004758:	080047bd 	.word	0x080047bd
 800475c:	08004881 	.word	0x08004881
 8004760:	08004881 	.word	0x08004881
 8004764:	08004881 	.word	0x08004881
 8004768:	080047ff 	.word	0x080047ff
 800476c:	08004881 	.word	0x08004881
 8004770:	08004881 	.word	0x08004881
 8004774:	08004881 	.word	0x08004881
 8004778:	0800483f 	.word	0x0800483f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f9d6 	bl	8004b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0208 	orr.w	r2, r2, #8
 8004796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0204 	bic.w	r2, r2, #4
 80047a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6999      	ldr	r1, [r3, #24]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	619a      	str	r2, [r3, #24]
      break;
 80047ba:	e064      	b.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fa1c 	bl	8004c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6999      	ldr	r1, [r3, #24]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	021a      	lsls	r2, r3, #8
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	619a      	str	r2, [r3, #24]
      break;
 80047fc:	e043      	b.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fa67 	bl	8004cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0208 	orr.w	r2, r2, #8
 8004818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0204 	bic.w	r2, r2, #4
 8004828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69d9      	ldr	r1, [r3, #28]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	61da      	str	r2, [r3, #28]
      break;
 800483c:	e023      	b.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fab1 	bl	8004dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69d9      	ldr	r1, [r3, #28]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	021a      	lsls	r2, r3, #8
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	61da      	str	r2, [r3, #28]
      break;
 800487e:	e002      	b.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
      break;
 8004884:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_TIM_ConfigClockSource+0x1c>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e0b4      	b.n	8004a1e <HAL_TIM_ConfigClockSource+0x186>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ec:	d03e      	beq.n	800496c <HAL_TIM_ConfigClockSource+0xd4>
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f2:	f200 8087 	bhi.w	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048fa:	f000 8086 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x172>
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004902:	d87f      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b70      	cmp	r3, #112	@ 0x70
 8004906:	d01a      	beq.n	800493e <HAL_TIM_ConfigClockSource+0xa6>
 8004908:	2b70      	cmp	r3, #112	@ 0x70
 800490a:	d87b      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b60      	cmp	r3, #96	@ 0x60
 800490e:	d050      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004910:	2b60      	cmp	r3, #96	@ 0x60
 8004912:	d877      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 8004914:	2b50      	cmp	r3, #80	@ 0x50
 8004916:	d03c      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0xfa>
 8004918:	2b50      	cmp	r3, #80	@ 0x50
 800491a:	d873      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	d058      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004920:	2b40      	cmp	r3, #64	@ 0x40
 8004922:	d86f      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 8004924:	2b30      	cmp	r3, #48	@ 0x30
 8004926:	d064      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004928:	2b30      	cmp	r3, #48	@ 0x30
 800492a:	d86b      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d060      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d867      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d05c      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004938:	2b10      	cmp	r3, #16
 800493a:	d05a      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15a>
 800493c:	e062      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800494e:	f000 faf7 	bl	8004f40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	609a      	str	r2, [r3, #8]
      break;
 800496a:	e04f      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800497c:	f000 fae0 	bl	8004f40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800498e:	609a      	str	r2, [r3, #8]
      break;
 8004990:	e03c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499e:	461a      	mov	r2, r3
 80049a0:	f000 fa54 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2150      	movs	r1, #80	@ 0x50
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 faad 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 80049b0:	e02c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049be:	461a      	mov	r2, r3
 80049c0:	f000 fa73 	bl	8004eaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2160      	movs	r1, #96	@ 0x60
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fa9d 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 80049d0:	e01c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 fa34 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2140      	movs	r1, #64	@ 0x40
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fa8d 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 80049f0:	e00c      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4610      	mov	r0, r2
 80049fe:	f000 fa84 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004a02:	e003      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      break;
 8004a08:	e000      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a37      	ldr	r2, [pc, #220]	@ (8004b18 <TIM_Base_SetConfig+0xf0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00f      	beq.n	8004a60 <TIM_Base_SetConfig+0x38>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a46:	d00b      	beq.n	8004a60 <TIM_Base_SetConfig+0x38>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a34      	ldr	r2, [pc, #208]	@ (8004b1c <TIM_Base_SetConfig+0xf4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <TIM_Base_SetConfig+0x38>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a33      	ldr	r2, [pc, #204]	@ (8004b20 <TIM_Base_SetConfig+0xf8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_Base_SetConfig+0x38>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <TIM_Base_SetConfig+0xfc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d108      	bne.n	8004a72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a28      	ldr	r2, [pc, #160]	@ (8004b18 <TIM_Base_SetConfig+0xf0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01b      	beq.n	8004ab2 <TIM_Base_SetConfig+0x8a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a80:	d017      	beq.n	8004ab2 <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a25      	ldr	r2, [pc, #148]	@ (8004b1c <TIM_Base_SetConfig+0xf4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <TIM_Base_SetConfig+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a24      	ldr	r2, [pc, #144]	@ (8004b20 <TIM_Base_SetConfig+0xf8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00f      	beq.n	8004ab2 <TIM_Base_SetConfig+0x8a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a23      	ldr	r2, [pc, #140]	@ (8004b24 <TIM_Base_SetConfig+0xfc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_Base_SetConfig+0x8a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a22      	ldr	r2, [pc, #136]	@ (8004b28 <TIM_Base_SetConfig+0x100>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a21      	ldr	r2, [pc, #132]	@ (8004b2c <TIM_Base_SetConfig+0x104>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a20      	ldr	r2, [pc, #128]	@ (8004b30 <TIM_Base_SetConfig+0x108>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d108      	bne.n	8004ac4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <TIM_Base_SetConfig+0xf0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d103      	bne.n	8004af2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f023 0201 	bic.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 0302 	bic.w	r3, r3, #2
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <TIM_OC1_SetConfig+0xc8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10c      	bne.n	8004baa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0308 	bic.w	r3, r3, #8
 8004b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a13      	ldr	r2, [pc, #76]	@ (8004bfc <TIM_OC1_SetConfig+0xc8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40010000 	.word	0x40010000

08004c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f023 0210 	bic.w	r2, r3, #16
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0320 	bic.w	r3, r3, #32
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd4 <TIM_OC2_SetConfig+0xd4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10d      	bne.n	8004c7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	@ (8004cd4 <TIM_OC2_SetConfig+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000

08004cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1d      	ldr	r2, [pc, #116]	@ (8004da8 <TIM_OC3_SetConfig+0xd0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10d      	bne.n	8004d52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a14      	ldr	r2, [pc, #80]	@ (8004da8 <TIM_OC3_SetConfig+0xd0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d113      	bne.n	8004d82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40010000 	.word	0x40010000

08004dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a10      	ldr	r2, [pc, #64]	@ (8004e48 <TIM_OC4_SetConfig+0x9c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000

08004e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 030a 	bic.w	r3, r3, #10
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f023 0210 	bic.w	r2, r3, #16
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ee6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f043 0307 	orr.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2201      	movs	r2, #1
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e050      	b.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005030:	d013      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a16      	ldr	r2, [pc, #88]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d10c      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40014000 	.word	0x40014000

080050a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a8:	b084      	sub	sp, #16
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	f107 001c 	add.w	r0, r7, #28
 80050b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d123      	bne.n	800510a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80050d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 fae8 	bl	80066d4 <USB_CoreReset>
 8005104:	4603      	mov	r3, r0
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e01b      	b.n	8005142 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fadc 	bl	80066d4 <USB_CoreReset>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005120:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
 8005134:	e005      	b.n	8005142 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005142:	7fbb      	ldrb	r3, [r7, #30]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d10b      	bne.n	8005160 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f043 0206 	orr.w	r2, r3, #6
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800516c:	b004      	add	sp, #16
 800516e:	4770      	bx	lr

08005170 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4613      	mov	r3, r2
 800517c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d165      	bne.n	8005250 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4a41      	ldr	r2, [pc, #260]	@ (800528c <USB_SetTurnaroundTime+0x11c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d906      	bls.n	800519a <USB_SetTurnaroundTime+0x2a>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a40      	ldr	r2, [pc, #256]	@ (8005290 <USB_SetTurnaroundTime+0x120>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d202      	bcs.n	800519a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005194:	230f      	movs	r3, #15
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e062      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4a3c      	ldr	r2, [pc, #240]	@ (8005290 <USB_SetTurnaroundTime+0x120>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d306      	bcc.n	80051b0 <USB_SetTurnaroundTime+0x40>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005294 <USB_SetTurnaroundTime+0x124>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d202      	bcs.n	80051b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051aa:	230e      	movs	r3, #14
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e057      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4a38      	ldr	r2, [pc, #224]	@ (8005294 <USB_SetTurnaroundTime+0x124>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d306      	bcc.n	80051c6 <USB_SetTurnaroundTime+0x56>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a37      	ldr	r2, [pc, #220]	@ (8005298 <USB_SetTurnaroundTime+0x128>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d202      	bcs.n	80051c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051c0:	230d      	movs	r3, #13
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e04c      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4a33      	ldr	r2, [pc, #204]	@ (8005298 <USB_SetTurnaroundTime+0x128>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d306      	bcc.n	80051dc <USB_SetTurnaroundTime+0x6c>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a32      	ldr	r2, [pc, #200]	@ (800529c <USB_SetTurnaroundTime+0x12c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d802      	bhi.n	80051dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051d6:	230c      	movs	r3, #12
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e041      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4a2f      	ldr	r2, [pc, #188]	@ (800529c <USB_SetTurnaroundTime+0x12c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d906      	bls.n	80051f2 <USB_SetTurnaroundTime+0x82>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a2e      	ldr	r2, [pc, #184]	@ (80052a0 <USB_SetTurnaroundTime+0x130>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d802      	bhi.n	80051f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051ec:	230b      	movs	r3, #11
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e036      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <USB_SetTurnaroundTime+0x130>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d906      	bls.n	8005208 <USB_SetTurnaroundTime+0x98>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <USB_SetTurnaroundTime+0x134>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d802      	bhi.n	8005208 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005202:	230a      	movs	r3, #10
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	e02b      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4a26      	ldr	r2, [pc, #152]	@ (80052a4 <USB_SetTurnaroundTime+0x134>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d906      	bls.n	800521e <USB_SetTurnaroundTime+0xae>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a25      	ldr	r2, [pc, #148]	@ (80052a8 <USB_SetTurnaroundTime+0x138>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d202      	bcs.n	800521e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005218:	2309      	movs	r3, #9
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e020      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4a21      	ldr	r2, [pc, #132]	@ (80052a8 <USB_SetTurnaroundTime+0x138>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d306      	bcc.n	8005234 <USB_SetTurnaroundTime+0xc4>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4a20      	ldr	r2, [pc, #128]	@ (80052ac <USB_SetTurnaroundTime+0x13c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d802      	bhi.n	8005234 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800522e:	2308      	movs	r3, #8
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e015      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <USB_SetTurnaroundTime+0x13c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d906      	bls.n	800524a <USB_SetTurnaroundTime+0xda>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4a1c      	ldr	r2, [pc, #112]	@ (80052b0 <USB_SetTurnaroundTime+0x140>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d202      	bcs.n	800524a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005244:	2307      	movs	r3, #7
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e00a      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800524a:	2306      	movs	r3, #6
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e007      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005256:	2309      	movs	r3, #9
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e001      	b.n	8005260 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800525c:	2309      	movs	r3, #9
 800525e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	029b      	lsls	r3, r3, #10
 8005274:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	00d8acbf 	.word	0x00d8acbf
 8005290:	00e4e1c0 	.word	0x00e4e1c0
 8005294:	00f42400 	.word	0x00f42400
 8005298:	01067380 	.word	0x01067380
 800529c:	011a499f 	.word	0x011a499f
 80052a0:	01312cff 	.word	0x01312cff
 80052a4:	014ca43f 	.word	0x014ca43f
 80052a8:	016e3600 	.word	0x016e3600
 80052ac:	01a6ab1f 	.word	0x01a6ab1f
 80052b0:	01e84800 	.word	0x01e84800

080052b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d115      	bne.n	8005346 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005326:	200a      	movs	r0, #10
 8005328:	f7fc f9e2 	bl	80016f0 <HAL_Delay>
      ms += 10U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	330a      	adds	r3, #10
 8005330:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 f93f 	bl	80065b6 <USB_GetMode>
 8005338:	4603      	mov	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d01e      	beq.n	800537c <USB_SetCurrentMode+0x84>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2bc7      	cmp	r3, #199	@ 0xc7
 8005342:	d9f0      	bls.n	8005326 <USB_SetCurrentMode+0x2e>
 8005344:	e01a      	b.n	800537c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d115      	bne.n	8005378 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005358:	200a      	movs	r0, #10
 800535a:	f7fc f9c9 	bl	80016f0 <HAL_Delay>
      ms += 10U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	330a      	adds	r3, #10
 8005362:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 f926 	bl	80065b6 <USB_GetMode>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <USB_SetCurrentMode+0x84>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2bc7      	cmp	r3, #199	@ 0xc7
 8005374:	d9f0      	bls.n	8005358 <USB_SetCurrentMode+0x60>
 8005376:	e001      	b.n	800537c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e005      	b.n	8005388 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005380:	d101      	bne.n	8005386 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005390:	b084      	sub	sp, #16
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800539e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e009      	b.n	80053c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3340      	adds	r3, #64	@ 0x40
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3301      	adds	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b0e      	cmp	r3, #14
 80053c8:	d9f2      	bls.n	80053b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11c      	bne.n	800540c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	@ 0x38
 800540a:	e00b      	b.n	8005424 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800542a:	461a      	mov	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005430:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10d      	bne.n	8005454 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005440:	2100      	movs	r1, #0
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f968 	bl	8005718 <USB_SetDevSpeed>
 8005448:	e008      	b.n	800545c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800544a:	2101      	movs	r1, #1
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f963 	bl	8005718 <USB_SetDevSpeed>
 8005452:	e003      	b.n	800545c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005454:	2103      	movs	r1, #3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f95e 	bl	8005718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800545c:	2110      	movs	r1, #16
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8fa 	bl	8005658 <USB_FlushTxFifo>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f924 	bl	80056bc <USB_FlushRxFifo>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005484:	461a      	mov	r2, r3
 8005486:	2300      	movs	r3, #0
 8005488:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	461a      	mov	r2, r3
 8005492:	2300      	movs	r3, #0
 8005494:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	e043      	b.n	8005530 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054be:	d118      	bne.n	80054f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d2:	461a      	mov	r2, r3
 80054d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e013      	b.n	8005504 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	461a      	mov	r2, r3
 80054ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e008      	b.n	8005504 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054fe:	461a      	mov	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005522:	461a      	mov	r2, r3
 8005524:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005528:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3301      	adds	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005534:	461a      	mov	r2, r3
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4293      	cmp	r3, r2
 800553a:	d3b5      	bcc.n	80054a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e043      	b.n	80055ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005558:	d118      	bne.n	800558c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e013      	b.n	800559e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005582:	461a      	mov	r2, r3
 8005584:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e008      	b.n	800559e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3301      	adds	r3, #1
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055ce:	461a      	mov	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d3b5      	bcc.n	8005542 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80055f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f043 0210 	orr.w	r2, r3, #16
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <USB_DevInit+0x2c4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005618:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f043 0208 	orr.w	r2, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800562c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800563c:	f043 0304 	orr.w	r3, r3, #4
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005650:	b004      	add	sp, #16
 8005652:	4770      	bx	lr
 8005654:	803c3800 	.word	0x803c3800

08005658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3301      	adds	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005672:	d901      	bls.n	8005678 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e01b      	b.n	80056b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	daf2      	bge.n	8005666 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	019b      	lsls	r3, r3, #6
 8005688:	f043 0220 	orr.w	r2, r3, #32
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3301      	adds	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800569c:	d901      	bls.n	80056a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e006      	b.n	80056b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d0f0      	beq.n	8005690 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056d4:	d901      	bls.n	80056da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e018      	b.n	800570c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	daf2      	bge.n	80056c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2210      	movs	r2, #16
 80056ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056f8:	d901      	bls.n	80056fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e006      	b.n	800570c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d0f0      	beq.n	80056ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b087      	sub	sp, #28
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 0306 	and.w	r3, r3, #6
 8005762:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
 800576e:	e00a      	b.n	8005786 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d002      	beq.n	800577c <USB_GetDevSpeed+0x32>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d102      	bne.n	8005782 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800577c:	2302      	movs	r3, #2
 800577e:	75fb      	strb	r3, [r7, #23]
 8005780:	e001      	b.n	8005786 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005782:	230f      	movs	r3, #15
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d13a      	bne.n	8005826 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	2101      	movs	r1, #1
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d155      	bne.n	8005894 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	791b      	ldrb	r3, [r3, #4]
 8005802:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005804:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	059b      	lsls	r3, r3, #22
 800580a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800580c:	4313      	orrs	r3, r2
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	e036      	b.n	8005894 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	2101      	movs	r1, #1
 8005838:	fa01 f303 	lsl.w	r3, r1, r3
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005844:	4313      	orrs	r3, r2
 8005846:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d11a      	bne.n	8005894 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	791b      	ldrb	r3, [r3, #4]
 8005878:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800587a:	430b      	orrs	r3, r1
 800587c:	4313      	orrs	r3, r2
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005892:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d161      	bne.n	8005984 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058d6:	d11f      	bne.n	8005918 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005912:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800591e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	2101      	movs	r1, #1
 800592a:	fa01 f303 	lsl.w	r3, r1, r3
 800592e:	b29b      	uxth	r3, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005938:	4013      	ands	r3, r2
 800593a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f303 	lsl.w	r3, r1, r3
 8005952:	b29b      	uxth	r3, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800595c:	4013      	ands	r3, r2
 800595e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	0159      	lsls	r1, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	440b      	add	r3, r1
 8005976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800597a:	4619      	mov	r1, r3
 800597c:	4b35      	ldr	r3, [pc, #212]	@ (8005a54 <USB_DeactivateEndpoint+0x1b0>)
 800597e:	4013      	ands	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
 8005982:	e060      	b.n	8005a46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800599a:	d11f      	bne.n	80059dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f303 	lsl.w	r3, r1, r3
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	43db      	mvns	r3, r3
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059fc:	4013      	ands	r3, r2
 80059fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	2101      	movs	r1, #1
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a20:	4013      	ands	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	0159      	lsls	r1, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	440b      	add	r3, r1
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <USB_DeactivateEndpoint+0x1b4>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	ec337800 	.word	0xec337800
 8005a58:	eff37800 	.word	0xeff37800

08005a5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	@ 0x28
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	f040 817f 	bne.w	8005d7c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d132      	bne.n	8005aec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005aa4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ae4:	0cdb      	lsrs	r3, r3, #19
 8005ae6:	04db      	lsls	r3, r3, #19
 8005ae8:	6113      	str	r3, [r2, #16]
 8005aea:	e097      	b.n	8005c1c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b06:	0cdb      	lsrs	r3, r3, #19
 8005b08:	04db      	lsls	r3, r3, #19
 8005b0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b26:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b2a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b2e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11a      	bne.n	8005b6c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d903      	bls.n	8005b4a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b68:	6113      	str	r3, [r2, #16]
 8005b6a:	e044      	b.n	8005bf6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4413      	add	r3, r2
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	8afb      	ldrh	r3, [r7, #22]
 8005b92:	04d9      	lsls	r1, r3, #19
 8005b94:	4ba4      	ldr	r3, [pc, #656]	@ (8005e28 <USB_EPStartXfer+0x3cc>)
 8005b96:	400b      	ands	r3, r1
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	0148      	lsls	r0, r1, #5
 8005b9c:	69f9      	ldr	r1, [r7, #28]
 8005b9e:	4401      	add	r1, r0
 8005ba0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	791b      	ldrb	r3, [r3, #4]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d122      	bne.n	8005bf6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005bce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	8afb      	ldrh	r3, [r7, #22]
 8005be0:	075b      	lsls	r3, r3, #29
 8005be2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005be6:	69b9      	ldr	r1, [r7, #24]
 8005be8:	0148      	lsls	r0, r1, #5
 8005bea:	69f9      	ldr	r1, [r7, #28]
 8005bec:	4401      	add	r1, r0
 8005bee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d14b      	bne.n	8005cba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c36:	461a      	mov	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	791b      	ldrb	r3, [r3, #4]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d128      	bne.n	8005c98 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d110      	bne.n	8005c78 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e00f      	b.n	8005c98 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c96:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e166      	b.n	8005f88 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cd8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	791b      	ldrb	r3, [r3, #4]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d015      	beq.n	8005d0e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 814e 	beq.w	8005f88 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	69f9      	ldr	r1, [r7, #28]
 8005d04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d0c:	e13c      	b.n	8005f88 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d110      	bne.n	8005d40 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e00f      	b.n	8005d60 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d5e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68d9      	ldr	r1, [r3, #12]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	b298      	uxth	r0, r3
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	4603      	mov	r3, r0
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f9b9 	bl	80060ec <USB_WritePacket>
 8005d7a:	e105      	b.n	8005f88 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d96:	0cdb      	lsrs	r3, r3, #19
 8005d98:	04db      	lsls	r3, r3, #19
 8005d9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005db6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dbe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d132      	bne.n	8005e2c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df4:	69b9      	ldr	r1, [r7, #24]
 8005df6:	0148      	lsls	r0, r1, #5
 8005df8:	69f9      	ldr	r1, [r7, #28]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e00:	4313      	orrs	r3, r2
 8005e02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e22:	6113      	str	r3, [r2, #16]
 8005e24:	e062      	b.n	8005eec <USB_EPStartXfer+0x490>
 8005e26:	bf00      	nop
 8005e28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d123      	bne.n	8005e7c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e4a:	69b9      	ldr	r1, [r7, #24]
 8005e4c:	0148      	lsls	r0, r1, #5
 8005e4e:	69f9      	ldr	r1, [r7, #28]
 8005e50:	4401      	add	r1, r0
 8005e52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e56:	4313      	orrs	r3, r2
 8005e58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e78:	6113      	str	r3, [r2, #16]
 8005e7a:	e037      	b.n	8005eec <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	4413      	add	r3, r2
 8005e86:	1e5a      	subs	r2, r3, #1
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	8afa      	ldrh	r2, [r7, #22]
 8005e98:	fb03 f202 	mul.w	r2, r3, r2
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	8afb      	ldrh	r3, [r7, #22]
 8005eb0:	04d9      	lsls	r1, r3, #19
 8005eb2:	4b38      	ldr	r3, [pc, #224]	@ (8005f94 <USB_EPStartXfer+0x538>)
 8005eb4:	400b      	ands	r3, r1
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	0148      	lsls	r0, r1, #5
 8005eba:	69f9      	ldr	r1, [r7, #28]
 8005ebc:	4401      	add	r1, r0
 8005ebe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	0148      	lsls	r0, r1, #5
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10d      	bne.n	8005f0e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68d9      	ldr	r1, [r3, #12]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	791b      	ldrb	r3, [r3, #4]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d128      	bne.n	8005f68 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d110      	bne.n	8005f48 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e00f      	b.n	8005f68 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	1ff80000 	.word	0x1ff80000

08005f98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d14a      	bne.n	800604c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fce:	f040 8086 	bne.w	80060de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ff4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006014:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006018:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006026:	4293      	cmp	r3, r2
 8006028:	d902      	bls.n	8006030 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	75fb      	strb	r3, [r7, #23]
          break;
 800602e:	e056      	b.n	80060de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006044:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006048:	d0e7      	beq.n	800601a <USB_EPStopXfer+0x82>
 800604a:	e048      	b.n	80060de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006064:	d13b      	bne.n	80060de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006084:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006088:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d902      	bls.n	80060c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
          break;
 80060c2:	e00c      	b.n	80060de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060dc:	d0e7      	beq.n	80060ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b089      	sub	sp, #36	@ 0x24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4611      	mov	r1, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	460b      	mov	r3, r1
 80060fc:	71fb      	strb	r3, [r7, #7]
 80060fe:	4613      	mov	r3, r2
 8006100:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800610a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d123      	bne.n	800615a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006112:	88bb      	ldrh	r3, [r7, #4]
 8006114:	3303      	adds	r3, #3
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e018      	b.n	8006152 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	031a      	lsls	r2, r3, #12
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
 8006128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612c:	461a      	mov	r2, r3
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	3301      	adds	r3, #1
 8006138:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3301      	adds	r3, #1
 800613e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3301      	adds	r3, #1
 800614a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	3301      	adds	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	429a      	cmp	r2, r3
 8006158:	d3e2      	bcc.n	8006120 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3724      	adds	r7, #36	@ 0x24
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006168:	b480      	push	{r7}
 800616a:	b08b      	sub	sp, #44	@ 0x2c
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	089b      	lsrs	r3, r3, #2
 8006182:	b29b      	uxth	r3, r3
 8006184:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	623b      	str	r3, [r7, #32]
 8006192:	e014      	b.n	80061be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	601a      	str	r2, [r3, #0]
    pDest++;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	3301      	adds	r3, #1
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	3301      	adds	r3, #1
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	3301      	adds	r3, #1
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	3301      	adds	r3, #1
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	3301      	adds	r3, #1
 80061bc:	623b      	str	r3, [r7, #32]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d3e6      	bcc.n	8006194 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061c6:	8bfb      	ldrh	r3, [r7, #30]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01e      	beq.n	800620a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061d6:	461a      	mov	r2, r3
 80061d8:	f107 0310 	add.w	r3, r7, #16
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	701a      	strb	r2, [r3, #0]
      i++;
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	3301      	adds	r3, #1
 80061f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	3301      	adds	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80061fe:	8bfb      	ldrh	r3, [r7, #30]
 8006200:	3b01      	subs	r3, #1
 8006202:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006204:	8bfb      	ldrh	r3, [r7, #30]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1ea      	bne.n	80061e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800620c:	4618      	mov	r0, r3
 800620e:	372c      	adds	r7, #44	@ 0x2c
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d12c      	bne.n	800628e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	db12      	blt.n	800626c <USB_EPSetStall+0x54>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00f      	beq.n	800626c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006266:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800626a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006286:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e02b      	b.n	80062e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	db12      	blt.n	80062c6 <USB_EPSetStall+0xae>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00f      	beq.n	80062c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d128      	bne.n	8006362 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	440a      	add	r2, r1
 8006326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800632e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	791b      	ldrb	r3, [r3, #4]
 8006334:	2b03      	cmp	r3, #3
 8006336:	d003      	beq.n	8006340 <USB_EPClearStall+0x4c>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d138      	bne.n	80063b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800635a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	e027      	b.n	80063b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800637c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006380:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	791b      	ldrb	r3, [r3, #4]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d003      	beq.n	8006392 <USB_EPClearStall+0x9e>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d10f      	bne.n	80063b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80063e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80063f4:	68f9      	ldr	r1, [r7, #12]
 80063f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800643a:	f023 0302 	bic.w	r3, r3, #2
 800643e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800644e:	b480      	push	{r7}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006468:	f023 0303 	bic.w	r3, r3, #3
 800646c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800647c:	f043 0302 	orr.w	r3, r3, #2
 8006480:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064a8:	68fb      	ldr	r3, [r7, #12]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	0c1b      	lsrs	r3, r3, #16
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	4013      	ands	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	b29b      	uxth	r3, r3
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4013      	ands	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800654c:	68bb      	ldr	r3, [r7, #8]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800655a:	b480      	push	{r7}
 800655c:	b087      	sub	sp, #28
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800657a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800657c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	b2db      	uxtb	r3, r3
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065a8:	68bb      	ldr	r3, [r7, #8]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0301 	and.w	r3, r3, #1
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065f0:	f023 0307 	bic.w	r3, r3, #7
 80065f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006608:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	460b      	mov	r3, r1
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	333c      	adds	r3, #60	@ 0x3c
 800662e:	3304      	adds	r3, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4a26      	ldr	r2, [pc, #152]	@ (80066d0 <USB_EP0_OutStart+0xb8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d90a      	bls.n	8006652 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800664c:	d101      	bne.n	8006652 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e037      	b.n	80066c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800666c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006680:	f043 0318 	orr.w	r3, r3, #24
 8006684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006694:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006698:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10f      	bne.n	80066c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a6:	461a      	mov	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80066be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	4f54300a 	.word	0x4f54300a

080066d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066ec:	d901      	bls.n	80066f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e022      	b.n	8006738 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	daf2      	bge.n	80066e0 <USB_CoreReset+0xc>

  count = 10U;
 80066fa:	230a      	movs	r3, #10
 80066fc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80066fe:	e002      	b.n	8006706 <USB_CoreReset+0x32>
  {
    count--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b01      	subs	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f9      	bne.n	8006700 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f043 0201 	orr.w	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3301      	adds	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006724:	d901      	bls.n	800672a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e006      	b.n	8006738 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	d0f0      	beq.n	8006718 <USB_CoreReset+0x44>

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006750:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006754:	f002 fc4c 	bl	8008ff0 <USBD_static_malloc>
 8006758:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	32b0      	adds	r2, #176	@ 0xb0
 800676a:	2100      	movs	r1, #0
 800676c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006770:	2302      	movs	r3, #2
 8006772:	e0d4      	b.n	800691e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006774:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006778:	2100      	movs	r1, #0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f002 fc7c 	bl	8009078 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32b0      	adds	r2, #176	@ 0xb0
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	32b0      	adds	r2, #176	@ 0xb0
 800679a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	7c1b      	ldrb	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d138      	bne.n	800681e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80067ac:	4b5e      	ldr	r3, [pc, #376]	@ (8006928 <USBD_CDC_Init+0x1e4>)
 80067ae:	7819      	ldrb	r1, [r3, #0]
 80067b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067b4:	2202      	movs	r2, #2
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f002 faf7 	bl	8008daa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80067bc:	4b5a      	ldr	r3, [pc, #360]	@ (8006928 <USBD_CDC_Init+0x1e4>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 020f 	and.w	r2, r3, #15
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3323      	adds	r3, #35	@ 0x23
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067d6:	4b55      	ldr	r3, [pc, #340]	@ (800692c <USBD_CDC_Init+0x1e8>)
 80067d8:	7819      	ldrb	r1, [r3, #0]
 80067da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067de:	2202      	movs	r2, #2
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f002 fae2 	bl	8008daa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067e6:	4b51      	ldr	r3, [pc, #324]	@ (800692c <USBD_CDC_Init+0x1e8>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006802:	4b4b      	ldr	r3, [pc, #300]	@ (8006930 <USBD_CDC_Init+0x1ec>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	f003 020f 	and.w	r2, r3, #15
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	331c      	adds	r3, #28
 8006818:	2210      	movs	r2, #16
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e035      	b.n	800688a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800681e:	4b42      	ldr	r3, [pc, #264]	@ (8006928 <USBD_CDC_Init+0x1e4>)
 8006820:	7819      	ldrb	r1, [r3, #0]
 8006822:	2340      	movs	r3, #64	@ 0x40
 8006824:	2202      	movs	r2, #2
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f002 fabf 	bl	8008daa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800682c:	4b3e      	ldr	r3, [pc, #248]	@ (8006928 <USBD_CDC_Init+0x1e4>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 020f 	and.w	r2, r3, #15
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	3323      	adds	r3, #35	@ 0x23
 8006842:	2201      	movs	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006846:	4b39      	ldr	r3, [pc, #228]	@ (800692c <USBD_CDC_Init+0x1e8>)
 8006848:	7819      	ldrb	r1, [r3, #0]
 800684a:	2340      	movs	r3, #64	@ 0x40
 800684c:	2202      	movs	r2, #2
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f002 faab 	bl	8008daa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006854:	4b35      	ldr	r3, [pc, #212]	@ (800692c <USBD_CDC_Init+0x1e8>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f003 020f 	and.w	r2, r3, #15
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006870:	4b2f      	ldr	r3, [pc, #188]	@ (8006930 <USBD_CDC_Init+0x1ec>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 020f 	and.w	r2, r3, #15
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	331c      	adds	r3, #28
 8006886:	2210      	movs	r2, #16
 8006888:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800688a:	4b29      	ldr	r3, [pc, #164]	@ (8006930 <USBD_CDC_Init+0x1ec>)
 800688c:	7819      	ldrb	r1, [r3, #0]
 800688e:	2308      	movs	r3, #8
 8006890:	2203      	movs	r2, #3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f002 fa89 	bl	8008daa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006898:	4b25      	ldr	r3, [pc, #148]	@ (8006930 <USBD_CDC_Init+0x1ec>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	f003 020f 	and.w	r2, r3, #15
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	3323      	adds	r3, #35	@ 0x23
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	33b0      	adds	r3, #176	@ 0xb0
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80068e8:	2302      	movs	r3, #2
 80068ea:	e018      	b.n	800691e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7c1b      	ldrb	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068f4:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <USBD_CDC_Init+0x1e8>)
 80068f6:	7819      	ldrb	r1, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f002 fb40 	bl	8008f88 <USBD_LL_PrepareReceive>
 8006908:	e008      	b.n	800691c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800690a:	4b08      	ldr	r3, [pc, #32]	@ (800692c <USBD_CDC_Init+0x1e8>)
 800690c:	7819      	ldrb	r1, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006914:	2340      	movs	r3, #64	@ 0x40
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f002 fb36 	bl	8008f88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	200000a7 	.word	0x200000a7
 800692c:	200000a8 	.word	0x200000a8
 8006930:	200000a9 	.word	0x200000a9

08006934 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006940:	4b3a      	ldr	r3, [pc, #232]	@ (8006a2c <USBD_CDC_DeInit+0xf8>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f002 fa55 	bl	8008df6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800694c:	4b37      	ldr	r3, [pc, #220]	@ (8006a2c <USBD_CDC_DeInit+0xf8>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	f003 020f 	and.w	r2, r3, #15
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	3323      	adds	r3, #35	@ 0x23
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006966:	4b32      	ldr	r3, [pc, #200]	@ (8006a30 <USBD_CDC_DeInit+0xfc>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f002 fa42 	bl	8008df6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006972:	4b2f      	ldr	r3, [pc, #188]	@ (8006a30 <USBD_CDC_DeInit+0xfc>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f003 020f 	and.w	r2, r3, #15
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800698e:	4b29      	ldr	r3, [pc, #164]	@ (8006a34 <USBD_CDC_DeInit+0x100>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f002 fa2e 	bl	8008df6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800699a:	4b26      	ldr	r3, [pc, #152]	@ (8006a34 <USBD_CDC_DeInit+0x100>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f003 020f 	and.w	r2, r3, #15
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	3323      	adds	r3, #35	@ 0x23
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80069b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a34 <USBD_CDC_DeInit+0x100>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 020f 	and.w	r2, r3, #15
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	331c      	adds	r3, #28
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	32b0      	adds	r2, #176	@ 0xb0
 80069d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01f      	beq.n	8006a20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	33b0      	adds	r3, #176	@ 0xb0
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32b0      	adds	r2, #176	@ 0xb0
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 fb02 	bl	800900c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	32b0      	adds	r2, #176	@ 0xb0
 8006a12:	2100      	movs	r1, #0
 8006a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200000a7 	.word	0x200000a7
 8006a30:	200000a8 	.word	0x200000a8
 8006a34:	200000a9 	.word	0x200000a9

08006a38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	32b0      	adds	r2, #176	@ 0xb0
 8006a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e0bf      	b.n	8006be8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d050      	beq.n	8006b16 <USBD_CDC_Setup+0xde>
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	f040 80af 	bne.w	8006bd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d03a      	beq.n	8006af8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da1b      	bge.n	8006ac4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	33b0      	adds	r3, #176	@ 0xb0
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006aa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	88d2      	ldrh	r2, [r2, #6]
 8006aa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	88db      	ldrh	r3, [r3, #6]
 8006aae:	2b07      	cmp	r3, #7
 8006ab0:	bf28      	it	cs
 8006ab2:	2307      	movcs	r3, #7
 8006ab4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	89fa      	ldrh	r2, [r7, #14]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fd69 	bl	8008594 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ac2:	e090      	b.n	8006be6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	785a      	ldrb	r2, [r3, #1]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88db      	ldrh	r3, [r3, #6]
 8006ad2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ad4:	d803      	bhi.n	8006ade <USBD_CDC_Setup+0xa6>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	e000      	b.n	8006ae0 <USBD_CDC_Setup+0xa8>
 8006ade:	2240      	movs	r2, #64	@ 0x40
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ae6:	6939      	ldr	r1, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006aee:	461a      	mov	r2, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fd7e 	bl	80085f2 <USBD_CtlPrepareRx>
      break;
 8006af6:	e076      	b.n	8006be6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	33b0      	adds	r3, #176	@ 0xb0
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	7850      	ldrb	r0, [r2, #1]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	4798      	blx	r3
      break;
 8006b14:	e067      	b.n	8006be6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	2b0b      	cmp	r3, #11
 8006b1c:	d851      	bhi.n	8006bc2 <USBD_CDC_Setup+0x18a>
 8006b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b24 <USBD_CDC_Setup+0xec>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b55 	.word	0x08006b55
 8006b28:	08006bd1 	.word	0x08006bd1
 8006b2c:	08006bc3 	.word	0x08006bc3
 8006b30:	08006bc3 	.word	0x08006bc3
 8006b34:	08006bc3 	.word	0x08006bc3
 8006b38:	08006bc3 	.word	0x08006bc3
 8006b3c:	08006bc3 	.word	0x08006bc3
 8006b40:	08006bc3 	.word	0x08006bc3
 8006b44:	08006bc3 	.word	0x08006bc3
 8006b48:	08006bc3 	.word	0x08006bc3
 8006b4c:	08006b7f 	.word	0x08006b7f
 8006b50:	08006ba9 	.word	0x08006ba9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d107      	bne.n	8006b70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b60:	f107 030a 	add.w	r3, r7, #10
 8006b64:	2202      	movs	r2, #2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 fd13 	bl	8008594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b6e:	e032      	b.n	8006bd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fc91 	bl	800849a <USBD_CtlError>
            ret = USBD_FAIL;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b7c:	e02b      	b.n	8006bd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d107      	bne.n	8006b9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b8a:	f107 030d 	add.w	r3, r7, #13
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 fcfe 	bl	8008594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b98:	e01d      	b.n	8006bd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fc7c 	bl	800849a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ba6:	e016      	b.n	8006bd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d00f      	beq.n	8006bd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 fc6f 	bl	800849a <USBD_CtlError>
            ret = USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006bc0:	e008      	b.n	8006bd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fc68 	bl	800849a <USBD_CtlError>
          ret = USBD_FAIL;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006bce:	e002      	b.n	8006bd6 <USBD_CDC_Setup+0x19e>
          break;
 8006bd0:	bf00      	nop
 8006bd2:	e008      	b.n	8006be6 <USBD_CDC_Setup+0x1ae>
          break;
 8006bd4:	bf00      	nop
      }
      break;
 8006bd6:	e006      	b.n	8006be6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fc5d 	bl	800849a <USBD_CtlError>
      ret = USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	32b0      	adds	r2, #176	@ 0xb0
 8006c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e065      	b.n	8006ce6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	32b0      	adds	r2, #176	@ 0xb0
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	f003 020f 	and.w	r2, r3, #15
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3314      	adds	r3, #20
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02f      	beq.n	8006ca4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	f003 020f 	and.w	r2, r3, #15
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	3314      	adds	r3, #20
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	f003 010f 	and.w	r1, r3, #15
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	460b      	mov	r3, r1
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	440b      	add	r3, r1
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4403      	add	r3, r0
 8006c6c:	331c      	adds	r3, #28
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d112      	bne.n	8006ca4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	3314      	adds	r3, #20
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c96:	78f9      	ldrb	r1, [r7, #3]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f002 f952 	bl	8008f46 <USBD_LL_Transmit>
 8006ca2:	e01f      	b.n	8006ce4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	33b0      	adds	r3, #176	@ 0xb0
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	33b0      	adds	r3, #176	@ 0xb0
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	32b0      	adds	r2, #176	@ 0xb0
 8006d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	32b0      	adds	r2, #176	@ 0xb0
 8006d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e01a      	b.n	8006d56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f002 f950 	bl	8008fca <USBD_LL_GetRxDataSize>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	33b0      	adds	r3, #176	@ 0xb0
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006d50:	4611      	mov	r1, r2
 8006d52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	32b0      	adds	r2, #176	@ 0xb0
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e024      	b.n	8006dca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	33b0      	adds	r3, #176	@ 0xb0
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d019      	beq.n	8006dc8 <USBD_CDC_EP0_RxReady+0x6a>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d9a:	2bff      	cmp	r3, #255	@ 0xff
 8006d9c:	d014      	beq.n	8006dc8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	33b0      	adds	r3, #176	@ 0xb0
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006db6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006dbe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	22ff      	movs	r2, #255	@ 0xff
 8006dc4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ddc:	2182      	movs	r1, #130	@ 0x82
 8006dde:	4818      	ldr	r0, [pc, #96]	@ (8006e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006de0:	f000 fd22 	bl	8007828 <USBD_GetEpDesc>
 8006de4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006de6:	2101      	movs	r1, #1
 8006de8:	4815      	ldr	r0, [pc, #84]	@ (8006e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006dea:	f000 fd1d 	bl	8007828 <USBD_GetEpDesc>
 8006dee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006df0:	2181      	movs	r1, #129	@ 0x81
 8006df2:	4813      	ldr	r0, [pc, #76]	@ (8006e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006df4:	f000 fd18 	bl	8007828 <USBD_GetEpDesc>
 8006df8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2210      	movs	r2, #16
 8006e04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d006      	beq.n	8006e1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e14:	711a      	strb	r2, [r3, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d006      	beq.n	8006e2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e28:	711a      	strb	r2, [r3, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2243      	movs	r2, #67	@ 0x43
 8006e32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e34:	4b02      	ldr	r3, [pc, #8]	@ (8006e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000064 	.word	0x20000064

08006e44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e4c:	2182      	movs	r1, #130	@ 0x82
 8006e4e:	4818      	ldr	r0, [pc, #96]	@ (8006eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e50:	f000 fcea 	bl	8007828 <USBD_GetEpDesc>
 8006e54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e56:	2101      	movs	r1, #1
 8006e58:	4815      	ldr	r0, [pc, #84]	@ (8006eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e5a:	f000 fce5 	bl	8007828 <USBD_GetEpDesc>
 8006e5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e60:	2181      	movs	r1, #129	@ 0x81
 8006e62:	4813      	ldr	r0, [pc, #76]	@ (8006eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006e64:	f000 fce0 	bl	8007828 <USBD_GetEpDesc>
 8006e68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2210      	movs	r2, #16
 8006e74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	711a      	strb	r2, [r3, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f042 0202 	orr.w	r2, r2, #2
 8006e88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d006      	beq.n	8006e9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	711a      	strb	r2, [r3, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f042 0202 	orr.w	r2, r2, #2
 8006e9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2243      	movs	r2, #67	@ 0x43
 8006ea2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ea4:	4b02      	ldr	r3, [pc, #8]	@ (8006eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000064 	.word	0x20000064

08006eb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ebc:	2182      	movs	r1, #130	@ 0x82
 8006ebe:	4818      	ldr	r0, [pc, #96]	@ (8006f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ec0:	f000 fcb2 	bl	8007828 <USBD_GetEpDesc>
 8006ec4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4815      	ldr	r0, [pc, #84]	@ (8006f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006eca:	f000 fcad 	bl	8007828 <USBD_GetEpDesc>
 8006ece:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ed0:	2181      	movs	r1, #129	@ 0x81
 8006ed2:	4813      	ldr	r0, [pc, #76]	@ (8006f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ed4:	f000 fca8 	bl	8007828 <USBD_GetEpDesc>
 8006ed8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d006      	beq.n	8006efa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ef4:	711a      	strb	r2, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d006      	beq.n	8006f0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f08:	711a      	strb	r2, [r3, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2243      	movs	r2, #67	@ 0x43
 8006f12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f14:	4b02      	ldr	r3, [pc, #8]	@ (8006f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000064 	.word	0x20000064

08006f24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	220a      	movs	r2, #10
 8006f30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	@ (8006f40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000020 	.word	0x20000020

08006f44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e009      	b.n	8006f6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	33b0      	adds	r3, #176	@ 0xb0
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	32b0      	adds	r2, #176	@ 0xb0
 8006f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e008      	b.n	8006fb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	32b0      	adds	r2, #176	@ 0xb0
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e004      	b.n	8006fea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32b0      	adds	r2, #176	@ 0xb0
 800700a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32b0      	adds	r2, #176	@ 0xb0
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	e018      	b.n	8007058 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	7c1b      	ldrb	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800702e:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <USBD_CDC_ReceivePacket+0x68>)
 8007030:	7819      	ldrb	r1, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007038:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 ffa3 	bl	8008f88 <USBD_LL_PrepareReceive>
 8007042:	e008      	b.n	8007056 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007044:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <USBD_CDC_ReceivePacket+0x68>)
 8007046:	7819      	ldrb	r1, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800704e:	2340      	movs	r3, #64	@ 0x40
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 ff99 	bl	8008f88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	200000a8 	.word	0x200000a8

08007064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	e01f      	b.n	80070bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	79fa      	ldrb	r2, [r7, #7]
 80070ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f001 fe13 	bl	8008cdc <USBD_LL_Init>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070d8:	2303      	movs	r3, #3
 80070da:	e025      	b.n	8007128 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32ae      	adds	r2, #174	@ 0xae
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00f      	beq.n	8007118 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32ae      	adds	r2, #174	@ 0xae
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	f107 020e 	add.w	r2, r7, #14
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	4602      	mov	r2, r0
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fe1b 	bl	8008d74 <USBD_LL_Start>
 800713e:	4603      	mov	r3, r0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	4611      	mov	r1, r2
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	4611      	mov	r1, r2
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 f922 	bl	8008426 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2b02      	cmp	r3, #2
 8007204:	d01a      	beq.n	800723c <USBD_LL_SetupStage+0x72>
 8007206:	2b02      	cmp	r3, #2
 8007208:	d822      	bhi.n	8007250 <USBD_LL_SetupStage+0x86>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <USBD_LL_SetupStage+0x4a>
 800720e:	2b01      	cmp	r3, #1
 8007210:	d00a      	beq.n	8007228 <USBD_LL_SetupStage+0x5e>
 8007212:	e01d      	b.n	8007250 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fb77 	bl	8007910 <USBD_StdDevReq>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]
      break;
 8007226:	e020      	b.n	800726a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fbdf 	bl	80079f4 <USBD_StdItfReq>
 8007236:	4603      	mov	r3, r0
 8007238:	73fb      	strb	r3, [r7, #15]
      break;
 800723a:	e016      	b.n	800726a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fc41 	bl	8007acc <USBD_StdEPReq>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]
      break;
 800724e:	e00c      	b.n	800726a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007256:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800725a:	b2db      	uxtb	r3, r3
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fde8 	bl	8008e34 <USBD_LL_StallEP>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
      break;
 8007268:	bf00      	nop
  }

  return ret;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	460b      	mov	r3, r1
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d177      	bne.n	800737c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800729a:	2b03      	cmp	r3, #3
 800729c:	f040 80a1 	bne.w	80073e2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	8992      	ldrh	r2, [r2, #12]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d91c      	bls.n	80072e6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	8992      	ldrh	r2, [r2, #12]
 80072b4:	1a9a      	subs	r2, r3, r2
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	8992      	ldrh	r2, [r2, #12]
 80072c2:	441a      	add	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6919      	ldr	r1, [r3, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	899b      	ldrh	r3, [r3, #12]
 80072d0:	461a      	mov	r2, r3
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bf38      	it	cc
 80072da:	4613      	movcc	r3, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f001 f9a8 	bl	8008634 <USBD_CtlContinueRx>
 80072e4:	e07d      	b.n	80073e2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d014      	beq.n	800731e <USBD_LL_DataOutStage+0xaa>
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d81d      	bhi.n	8007334 <USBD_LL_DataOutStage+0xc0>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <USBD_LL_DataOutStage+0x8e>
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d003      	beq.n	8007308 <USBD_LL_DataOutStage+0x94>
 8007300:	e018      	b.n	8007334 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	75bb      	strb	r3, [r7, #22]
            break;
 8007306:	e018      	b.n	800733a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800730e:	b2db      	uxtb	r3, r3
 8007310:	4619      	mov	r1, r3
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fa6e 	bl	80077f4 <USBD_CoreFindIF>
 8007318:	4603      	mov	r3, r0
 800731a:	75bb      	strb	r3, [r7, #22]
            break;
 800731c:	e00d      	b.n	800733a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007324:	b2db      	uxtb	r3, r3
 8007326:	4619      	mov	r1, r3
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fa70 	bl	800780e <USBD_CoreFindEP>
 800732e:	4603      	mov	r3, r0
 8007330:	75bb      	strb	r3, [r7, #22]
            break;
 8007332:	e002      	b.n	800733a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	75bb      	strb	r3, [r7, #22]
            break;
 8007338:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800733a:	7dbb      	ldrb	r3, [r7, #22]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d119      	bne.n	8007374 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b03      	cmp	r3, #3
 800734a:	d113      	bne.n	8007374 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800734c:	7dba      	ldrb	r2, [r7, #22]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	32ae      	adds	r2, #174	@ 0xae
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800735c:	7dba      	ldrb	r2, [r7, #22]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007364:	7dba      	ldrb	r2, [r7, #22]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	32ae      	adds	r2, #174	@ 0xae
 800736a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f001 f96e 	bl	8008656 <USBD_CtlSendStatus>
 800737a:	e032      	b.n	80073e2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007382:	b2db      	uxtb	r3, r3
 8007384:	4619      	mov	r1, r3
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fa41 	bl	800780e <USBD_CoreFindEP>
 800738c:	4603      	mov	r3, r0
 800738e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007390:	7dbb      	ldrb	r3, [r7, #22]
 8007392:	2bff      	cmp	r3, #255	@ 0xff
 8007394:	d025      	beq.n	80073e2 <USBD_LL_DataOutStage+0x16e>
 8007396:	7dbb      	ldrb	r3, [r7, #22]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d122      	bne.n	80073e2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d117      	bne.n	80073d8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80073a8:	7dba      	ldrb	r2, [r7, #22]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	32ae      	adds	r2, #174	@ 0xae
 80073ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00f      	beq.n	80073d8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80073b8:	7dba      	ldrb	r2, [r7, #22]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80073c0:	7dba      	ldrb	r2, [r7, #22]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	32ae      	adds	r2, #174	@ 0xae
 80073c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	7afa      	ldrb	r2, [r7, #11]
 80073ce:	4611      	mov	r1, r2
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80073de:	7dfb      	ldrb	r3, [r7, #23]
 80073e0:	e000      	b.n	80073e4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	460b      	mov	r3, r1
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d178      	bne.n	80074f2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3314      	adds	r3, #20
 8007404:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800740c:	2b02      	cmp	r3, #2
 800740e:	d163      	bne.n	80074d8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	8992      	ldrh	r2, [r2, #12]
 8007418:	4293      	cmp	r3, r2
 800741a:	d91c      	bls.n	8007456 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	8992      	ldrh	r2, [r2, #12]
 8007424:	1a9a      	subs	r2, r3, r2
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	8992      	ldrh	r2, [r2, #12]
 8007432:	441a      	add	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	6919      	ldr	r1, [r3, #16]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	461a      	mov	r2, r3
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f001 f8c4 	bl	80085d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007448:	2300      	movs	r3, #0
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f001 fd9a 	bl	8008f88 <USBD_LL_PrepareReceive>
 8007454:	e040      	b.n	80074d8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	899b      	ldrh	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d11c      	bne.n	800749e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800746c:	4293      	cmp	r3, r2
 800746e:	d316      	bcc.n	800749e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800747a:	429a      	cmp	r2, r3
 800747c:	d20f      	bcs.n	800749e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f001 f8a4 	bl	80085d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007490:	2300      	movs	r3, #0
 8007492:	2200      	movs	r2, #0
 8007494:	2100      	movs	r1, #0
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f001 fd76 	bl	8008f88 <USBD_LL_PrepareReceive>
 800749c:	e01c      	b.n	80074d8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d10f      	bne.n	80074ca <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ca:	2180      	movs	r1, #128	@ 0x80
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f001 fcb1 	bl	8008e34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f001 f8d2 	bl	800867c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d03a      	beq.n	8007558 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff fe30 	bl	8007148 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80074f0:	e032      	b.n	8007558 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	4619      	mov	r1, r3
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f986 	bl	800780e <USBD_CoreFindEP>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	2bff      	cmp	r3, #255	@ 0xff
 800750a:	d025      	beq.n	8007558 <USBD_LL_DataInStage+0x16c>
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d122      	bne.n	8007558 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d11c      	bne.n	8007558 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800751e:	7dfa      	ldrb	r2, [r7, #23]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	32ae      	adds	r2, #174	@ 0xae
 8007524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d014      	beq.n	8007558 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800752e:	7dfa      	ldrb	r2, [r7, #23]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007536:	7dfa      	ldrb	r2, [r7, #23]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	32ae      	adds	r2, #174	@ 0xae
 800753c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	7afa      	ldrb	r2, [r7, #11]
 8007544:	4611      	mov	r1, r2
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800754e:	7dbb      	ldrb	r3, [r7, #22]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007554:	7dbb      	ldrb	r3, [r7, #22]
 8007556:	e000      	b.n	800755a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d014      	beq.n	80075c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00e      	beq.n	80075c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6852      	ldr	r2, [r2, #4]
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	4611      	mov	r1, r2
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c8:	2340      	movs	r3, #64	@ 0x40
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 fbeb 	bl	8008daa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2240      	movs	r2, #64	@ 0x40
 80075e0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075e4:	2340      	movs	r3, #64	@ 0x40
 80075e6:	2200      	movs	r2, #0
 80075e8:	2180      	movs	r1, #128	@ 0x80
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fbdd 	bl	8008daa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2240      	movs	r2, #64	@ 0x40
 80075fc:	841a      	strh	r2, [r3, #32]

  return ret;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b04      	cmp	r3, #4
 800763a:	d006      	beq.n	800764a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007642:	b2da      	uxtb	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2204      	movs	r2, #4
 800764e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b04      	cmp	r3, #4
 8007672:	d106      	bne.n	8007682 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800767a:	b2da      	uxtb	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d110      	bne.n	80076c6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	32ae      	adds	r2, #174	@ 0xae
 80076e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e01c      	b.n	800772c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d115      	bne.n	800772a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	32ae      	adds	r2, #174	@ 0xae
 8007708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	32ae      	adds	r2, #174	@ 0xae
 800771c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4611      	mov	r1, r2
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	32ae      	adds	r2, #174	@ 0xae
 800774a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007752:	2303      	movs	r3, #3
 8007754:	e01c      	b.n	8007790 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d115      	bne.n	800778e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	32ae      	adds	r2, #174	@ 0xae
 800776c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	32ae      	adds	r2, #174	@ 0xae
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	78fa      	ldrb	r2, [r7, #3]
 8007788:	4611      	mov	r1, r2
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00e      	beq.n	80077ea <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6852      	ldr	r2, [r2, #4]
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	4611      	mov	r1, r2
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80077e6:	2303      	movs	r3, #3
 80077e8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007800:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800781a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	885b      	ldrh	r3, [r3, #2]
 8007844:	b29b      	uxth	r3, r3
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	7812      	ldrb	r2, [r2, #0]
 800784a:	4293      	cmp	r3, r2
 800784c:	d91f      	bls.n	800788e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007854:	e013      	b.n	800787e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007856:	f107 030a 	add.w	r3, r7, #10
 800785a:	4619      	mov	r1, r3
 800785c:	6978      	ldr	r0, [r7, #20]
 800785e:	f000 f81b 	bl	8007898 <USBD_GetNextDesc>
 8007862:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b05      	cmp	r3, #5
 800786a:	d108      	bne.n	800787e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	789b      	ldrb	r3, [r3, #2]
 8007874:	78fa      	ldrb	r2, [r7, #3]
 8007876:	429a      	cmp	r2, r3
 8007878:	d008      	beq.n	800788c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	b29a      	uxth	r2, r3
 8007884:	897b      	ldrh	r3, [r7, #10]
 8007886:	429a      	cmp	r2, r3
 8007888:	d8e5      	bhi.n	8007856 <USBD_GetEpDesc+0x2e>
 800788a:	e000      	b.n	800788e <USBD_GetEpDesc+0x66>
          break;
 800788c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800788e:	693b      	ldr	r3, [r7, #16]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	7812      	ldrb	r2, [r2, #0]
 80078ae:	4413      	add	r3, r2
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	3301      	adds	r3, #1
 80078e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	b21a      	sxth	r2, r3
 80078f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	b21b      	sxth	r3, r3
 80078fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007900:	89fb      	ldrh	r3, [r7, #14]
}
 8007902:	4618      	mov	r0, r3
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d005      	beq.n	8007936 <USBD_StdDevReq+0x26>
 800792a:	2b40      	cmp	r3, #64	@ 0x40
 800792c:	d857      	bhi.n	80079de <USBD_StdDevReq+0xce>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00f      	beq.n	8007952 <USBD_StdDevReq+0x42>
 8007932:	2b20      	cmp	r3, #32
 8007934:	d153      	bne.n	80079de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	32ae      	adds	r2, #174	@ 0xae
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
      break;
 8007950:	e04a      	b.n	80079e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	2b09      	cmp	r3, #9
 8007958:	d83b      	bhi.n	80079d2 <USBD_StdDevReq+0xc2>
 800795a:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <USBD_StdDevReq+0x50>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	080079b5 	.word	0x080079b5
 8007964:	080079c9 	.word	0x080079c9
 8007968:	080079d3 	.word	0x080079d3
 800796c:	080079bf 	.word	0x080079bf
 8007970:	080079d3 	.word	0x080079d3
 8007974:	08007993 	.word	0x08007993
 8007978:	08007989 	.word	0x08007989
 800797c:	080079d3 	.word	0x080079d3
 8007980:	080079ab 	.word	0x080079ab
 8007984:	0800799d 	.word	0x0800799d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa3e 	bl	8007e0c <USBD_GetDescriptor>
          break;
 8007990:	e024      	b.n	80079dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fba3 	bl	80080e0 <USBD_SetAddress>
          break;
 800799a:	e01f      	b.n	80079dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fbe2 	bl	8008168 <USBD_SetConfig>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73fb      	strb	r3, [r7, #15]
          break;
 80079a8:	e018      	b.n	80079dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fc85 	bl	80082bc <USBD_GetConfig>
          break;
 80079b2:	e013      	b.n	80079dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fcb6 	bl	8008328 <USBD_GetStatus>
          break;
 80079bc:	e00e      	b.n	80079dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fce5 	bl	8008390 <USBD_SetFeature>
          break;
 80079c6:	e009      	b.n	80079dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fd09 	bl	80083e2 <USBD_ClrFeature>
          break;
 80079d0:	e004      	b.n	80079dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fd60 	bl	800849a <USBD_CtlError>
          break;
 80079da:	bf00      	nop
      }
      break;
 80079dc:	e004      	b.n	80079e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fd5a 	bl	800849a <USBD_CtlError>
      break;
 80079e6:	bf00      	nop
  }

  return ret;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop

080079f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a0a:	2b40      	cmp	r3, #64	@ 0x40
 8007a0c:	d005      	beq.n	8007a1a <USBD_StdItfReq+0x26>
 8007a0e:	2b40      	cmp	r3, #64	@ 0x40
 8007a10:	d852      	bhi.n	8007ab8 <USBD_StdItfReq+0xc4>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <USBD_StdItfReq+0x26>
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d14e      	bne.n	8007ab8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d840      	bhi.n	8007aaa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	889b      	ldrh	r3, [r3, #4]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d836      	bhi.n	8007aa0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	889b      	ldrh	r3, [r3, #4]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff feda 	bl	80077f4 <USBD_CoreFindIF>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2bff      	cmp	r3, #255	@ 0xff
 8007a48:	d01d      	beq.n	8007a86 <USBD_StdItfReq+0x92>
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d11a      	bne.n	8007a86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a50:	7bba      	ldrb	r2, [r7, #14]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	32ae      	adds	r2, #174	@ 0xae
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00f      	beq.n	8007a80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007a60:	7bba      	ldrb	r2, [r7, #14]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a68:	7bba      	ldrb	r2, [r7, #14]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32ae      	adds	r2, #174	@ 0xae
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a7e:	e004      	b.n	8007a8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a80:	2303      	movs	r3, #3
 8007a82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a84:	e001      	b.n	8007a8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a86:	2303      	movs	r3, #3
 8007a88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	88db      	ldrh	r3, [r3, #6]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d110      	bne.n	8007ab4 <USBD_StdItfReq+0xc0>
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10d      	bne.n	8007ab4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fddc 	bl	8008656 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a9e:	e009      	b.n	8007ab4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fcf9 	bl	800849a <USBD_CtlError>
          break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fcf4 	bl	800849a <USBD_CtlError>
          break;
 8007ab2:	e000      	b.n	8007ab6 <USBD_StdItfReq+0xc2>
          break;
 8007ab4:	bf00      	nop
      }
      break;
 8007ab6:	e004      	b.n	8007ac2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fced 	bl	800849a <USBD_CtlError>
      break;
 8007ac0:	bf00      	nop
  }

  return ret;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	889b      	ldrh	r3, [r3, #4]
 8007ade:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ae8:	2b40      	cmp	r3, #64	@ 0x40
 8007aea:	d007      	beq.n	8007afc <USBD_StdEPReq+0x30>
 8007aec:	2b40      	cmp	r3, #64	@ 0x40
 8007aee:	f200 8181 	bhi.w	8007df4 <USBD_StdEPReq+0x328>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d02a      	beq.n	8007b4c <USBD_StdEPReq+0x80>
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	f040 817c 	bne.w	8007df4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fe84 	bl	800780e <USBD_CoreFindEP>
 8007b06:	4603      	mov	r3, r0
 8007b08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b0a:	7b7b      	ldrb	r3, [r7, #13]
 8007b0c:	2bff      	cmp	r3, #255	@ 0xff
 8007b0e:	f000 8176 	beq.w	8007dfe <USBD_StdEPReq+0x332>
 8007b12:	7b7b      	ldrb	r3, [r7, #13]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 8172 	bne.w	8007dfe <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007b1a:	7b7a      	ldrb	r2, [r7, #13]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b22:	7b7a      	ldrb	r2, [r7, #13]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	32ae      	adds	r2, #174	@ 0xae
 8007b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8165 	beq.w	8007dfe <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b34:	7b7a      	ldrb	r2, [r7, #13]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	32ae      	adds	r2, #174	@ 0xae
 8007b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b4a:	e158      	b.n	8007dfe <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d008      	beq.n	8007b66 <USBD_StdEPReq+0x9a>
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	f300 8147 	bgt.w	8007de8 <USBD_StdEPReq+0x31c>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 809b 	beq.w	8007c96 <USBD_StdEPReq+0x1ca>
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d03c      	beq.n	8007bde <USBD_StdEPReq+0x112>
 8007b64:	e140      	b.n	8007de8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d002      	beq.n	8007b78 <USBD_StdEPReq+0xac>
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d016      	beq.n	8007ba4 <USBD_StdEPReq+0xd8>
 8007b76:	e02c      	b.n	8007bd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <USBD_StdEPReq+0xce>
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b80      	cmp	r3, #128	@ 0x80
 8007b82:	d00a      	beq.n	8007b9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 f953 	bl	8008e34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b8e:	2180      	movs	r1, #128	@ 0x80
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 f94f 	bl	8008e34 <USBD_LL_StallEP>
 8007b96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b98:	e020      	b.n	8007bdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fc7c 	bl	800849a <USBD_CtlError>
              break;
 8007ba2:	e01b      	b.n	8007bdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	885b      	ldrh	r3, [r3, #2]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10e      	bne.n	8007bca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00b      	beq.n	8007bca <USBD_StdEPReq+0xfe>
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b80      	cmp	r3, #128	@ 0x80
 8007bb6:	d008      	beq.n	8007bca <USBD_StdEPReq+0xfe>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	88db      	ldrh	r3, [r3, #6]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f935 	bl	8008e34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fd43 	bl	8008656 <USBD_CtlSendStatus>

              break;
 8007bd0:	e004      	b.n	8007bdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fc60 	bl	800849a <USBD_CtlError>
              break;
 8007bda:	bf00      	nop
          }
          break;
 8007bdc:	e109      	b.n	8007df2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d002      	beq.n	8007bf0 <USBD_StdEPReq+0x124>
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d016      	beq.n	8007c1c <USBD_StdEPReq+0x150>
 8007bee:	e04b      	b.n	8007c88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00d      	beq.n	8007c12 <USBD_StdEPReq+0x146>
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b80      	cmp	r3, #128	@ 0x80
 8007bfa:	d00a      	beq.n	8007c12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 f917 	bl	8008e34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c06:	2180      	movs	r1, #128	@ 0x80
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f913 	bl	8008e34 <USBD_LL_StallEP>
 8007c0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c10:	e040      	b.n	8007c94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fc40 	bl	800849a <USBD_CtlError>
              break;
 8007c1a:	e03b      	b.n	8007c94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	885b      	ldrh	r3, [r3, #2]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d136      	bne.n	8007c92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 f91d 	bl	8008e72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fd0c 	bl	8008656 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fde3 	bl	800780e <USBD_CoreFindEP>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c4c:	7b7b      	ldrb	r3, [r7, #13]
 8007c4e:	2bff      	cmp	r3, #255	@ 0xff
 8007c50:	d01f      	beq.n	8007c92 <USBD_StdEPReq+0x1c6>
 8007c52:	7b7b      	ldrb	r3, [r7, #13]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d11c      	bne.n	8007c92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007c58:	7b7a      	ldrb	r2, [r7, #13]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c60:	7b7a      	ldrb	r2, [r7, #13]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	32ae      	adds	r2, #174	@ 0xae
 8007c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d010      	beq.n	8007c92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c70:	7b7a      	ldrb	r2, [r7, #13]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	32ae      	adds	r2, #174	@ 0xae
 8007c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c86:	e004      	b.n	8007c92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fc05 	bl	800849a <USBD_CtlError>
              break;
 8007c90:	e000      	b.n	8007c94 <USBD_StdEPReq+0x1c8>
              break;
 8007c92:	bf00      	nop
          }
          break;
 8007c94:	e0ad      	b.n	8007df2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d002      	beq.n	8007ca8 <USBD_StdEPReq+0x1dc>
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d033      	beq.n	8007d0e <USBD_StdEPReq+0x242>
 8007ca6:	e099      	b.n	8007ddc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d007      	beq.n	8007cbe <USBD_StdEPReq+0x1f2>
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b80      	cmp	r3, #128	@ 0x80
 8007cb2:	d004      	beq.n	8007cbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fbef 	bl	800849a <USBD_CtlError>
                break;
 8007cbc:	e093      	b.n	8007de6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da0b      	bge.n	8007cde <USBD_StdEPReq+0x212>
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	3310      	adds	r3, #16
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	4413      	add	r3, r2
 8007cda:	3304      	adds	r3, #4
 8007cdc:	e00b      	b.n	8007cf6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	330e      	adds	r3, #14
 8007d02:	2202      	movs	r2, #2
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fc44 	bl	8008594 <USBD_CtlSendData>
              break;
 8007d0c:	e06b      	b.n	8007de6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da11      	bge.n	8007d3a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	3323      	adds	r3, #35	@ 0x23
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d117      	bne.n	8007d60 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fbb1 	bl	800849a <USBD_CtlError>
                  break;
 8007d38:	e055      	b.n	8007de6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	f003 020f 	and.w	r2, r3, #15
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	440b      	add	r3, r1
 8007d4c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d104      	bne.n	8007d60 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb9e 	bl	800849a <USBD_CtlError>
                  break;
 8007d5e:	e042      	b.n	8007de6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	da0b      	bge.n	8007d80 <USBD_StdEPReq+0x2b4>
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	3310      	adds	r3, #16
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	e00b      	b.n	8007d98 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	3304      	adds	r3, #4
 8007d98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <USBD_StdEPReq+0x2da>
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	2b80      	cmp	r3, #128	@ 0x80
 8007da4:	d103      	bne.n	8007dae <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2200      	movs	r2, #0
 8007daa:	739a      	strb	r2, [r3, #14]
 8007dac:	e00e      	b.n	8007dcc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 f87c 	bl	8008eb0 <USBD_LL_IsStallEP>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	739a      	strb	r2, [r3, #14]
 8007dc4:	e002      	b.n	8007dcc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	330e      	adds	r3, #14
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fbdd 	bl	8008594 <USBD_CtlSendData>
              break;
 8007dda:	e004      	b.n	8007de6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fb5b 	bl	800849a <USBD_CtlError>
              break;
 8007de4:	bf00      	nop
          }
          break;
 8007de6:	e004      	b.n	8007df2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fb55 	bl	800849a <USBD_CtlError>
          break;
 8007df0:	bf00      	nop
      }
      break;
 8007df2:	e005      	b.n	8007e00 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fb4f 	bl	800849a <USBD_CtlError>
      break;
 8007dfc:	e000      	b.n	8007e00 <USBD_StdEPReq+0x334>
      break;
 8007dfe:	bf00      	nop
  }

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	885b      	ldrh	r3, [r3, #2]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	2b06      	cmp	r3, #6
 8007e2e:	f200 8128 	bhi.w	8008082 <USBD_GetDescriptor+0x276>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <USBD_GetDescriptor+0x2c>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e55 	.word	0x08007e55
 8007e3c:	08007e6d 	.word	0x08007e6d
 8007e40:	08007ead 	.word	0x08007ead
 8007e44:	08008083 	.word	0x08008083
 8007e48:	08008083 	.word	0x08008083
 8007e4c:	08008023 	.word	0x08008023
 8007e50:	0800804f 	.word	0x0800804f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	7c12      	ldrb	r2, [r2, #16]
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
      break;
 8007e6a:	e112      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7c1b      	ldrb	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10d      	bne.n	8007e90 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7c:	f107 0208 	add.w	r2, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e8e:	e100      	b.n	8008092 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e98:	f107 0208 	add.w	r2, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	701a      	strb	r2, [r3, #0]
      break;
 8007eaa:	e0f2      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	885b      	ldrh	r3, [r3, #2]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	f200 80ac 	bhi.w	8008010 <USBD_GetDescriptor+0x204>
 8007eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec0 <USBD_GetDescriptor+0xb4>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007ed9 	.word	0x08007ed9
 8007ec4:	08007f0d 	.word	0x08007f0d
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f75 	.word	0x08007f75
 8007ed0:	08007fa9 	.word	0x08007fa9
 8007ed4:	08007fdd 	.word	0x08007fdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7c12      	ldrb	r2, [r2, #16]
 8007ef0:	f107 0108 	add.w	r1, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efa:	e091      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 facb 	bl	800849a <USBD_CtlError>
            err++;
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	3301      	adds	r3, #1
 8007f08:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0a:	e089      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7c12      	ldrb	r2, [r2, #16]
 8007f24:	f107 0108 	add.w	r1, r7, #8
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2e:	e077      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fab1 	bl	800849a <USBD_CtlError>
            err++;
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3e:	e06f      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	7c12      	ldrb	r2, [r2, #16]
 8007f58:	f107 0108 	add.w	r1, r7, #8
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
 8007f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f62:	e05d      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa97 	bl	800849a <USBD_CtlError>
            err++;
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	72fb      	strb	r3, [r7, #11]
          break;
 8007f72:	e055      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	7c12      	ldrb	r2, [r2, #16]
 8007f8c:	f107 0108 	add.w	r1, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f96:	e043      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa7d 	bl	800849a <USBD_CtlError>
            err++;
 8007fa0:	7afb      	ldrb	r3, [r7, #11]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fa6:	e03b      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	7c12      	ldrb	r2, [r2, #16]
 8007fc0:	f107 0108 	add.w	r1, r7, #8
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fca:	e029      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa63 	bl	800849a <USBD_CtlError>
            err++;
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fda:	e021      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7c12      	ldrb	r2, [r2, #16]
 8007ff4:	f107 0108 	add.w	r1, r7, #8
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
 8007ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ffe:	e00f      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa49 	bl	800849a <USBD_CtlError>
            err++;
 8008008:	7afb      	ldrb	r3, [r7, #11]
 800800a:	3301      	adds	r3, #1
 800800c:	72fb      	strb	r3, [r7, #11]
          break;
 800800e:	e007      	b.n	8008020 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa41 	bl	800849a <USBD_CtlError>
          err++;
 8008018:	7afb      	ldrb	r3, [r7, #11]
 800801a:	3301      	adds	r3, #1
 800801c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800801e:	bf00      	nop
      }
      break;
 8008020:	e037      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7c1b      	ldrb	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008032:	f107 0208 	add.w	r2, r7, #8
 8008036:	4610      	mov	r0, r2
 8008038:	4798      	blx	r3
 800803a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800803c:	e029      	b.n	8008092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fa2a 	bl	800849a <USBD_CtlError>
        err++;
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	3301      	adds	r3, #1
 800804a:	72fb      	strb	r3, [r7, #11]
      break;
 800804c:	e021      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7c1b      	ldrb	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10d      	bne.n	8008072 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800805c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805e:	f107 0208 	add.w	r2, r7, #8
 8008062:	4610      	mov	r0, r2
 8008064:	4798      	blx	r3
 8008066:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	2207      	movs	r2, #7
 800806e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008070:	e00f      	b.n	8008092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fa10 	bl	800849a <USBD_CtlError>
        err++;
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	3301      	adds	r3, #1
 800807e:	72fb      	strb	r3, [r7, #11]
      break;
 8008080:	e007      	b.n	8008092 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fa08 	bl	800849a <USBD_CtlError>
      err++;
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	3301      	adds	r3, #1
 800808e:	72fb      	strb	r3, [r7, #11]
      break;
 8008090:	bf00      	nop
  }

  if (err != 0U)
 8008092:	7afb      	ldrb	r3, [r7, #11]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11e      	bne.n	80080d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	88db      	ldrh	r3, [r3, #6]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d016      	beq.n	80080ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080a0:	893b      	ldrh	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00e      	beq.n	80080c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	88da      	ldrh	r2, [r3, #6]
 80080aa:	893b      	ldrh	r3, [r7, #8]
 80080ac:	4293      	cmp	r3, r2
 80080ae:	bf28      	it	cs
 80080b0:	4613      	movcs	r3, r2
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80080b6:	893b      	ldrh	r3, [r7, #8]
 80080b8:	461a      	mov	r2, r3
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa69 	bl	8008594 <USBD_CtlSendData>
 80080c2:	e009      	b.n	80080d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9e7 	bl	800849a <USBD_CtlError>
 80080cc:	e004      	b.n	80080d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fac1 	bl	8008656 <USBD_CtlSendStatus>
 80080d4:	e000      	b.n	80080d8 <USBD_GetDescriptor+0x2cc>
    return;
 80080d6:	bf00      	nop
  }
}
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop

080080e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	889b      	ldrh	r3, [r3, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d131      	bne.n	8008156 <USBD_SetAddress+0x76>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	88db      	ldrh	r3, [r3, #6]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d12d      	bne.n	8008156 <USBD_SetAddress+0x76>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	885b      	ldrh	r3, [r3, #2]
 80080fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8008100:	d829      	bhi.n	8008156 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800810c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d104      	bne.n	8008124 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f9bc 	bl	800849a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008122:	e01d      	b.n	8008160 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7bfa      	ldrb	r2, [r7, #15]
 8008128:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fee9 	bl	8008f08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa8d 	bl	8008656 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d004      	beq.n	800814c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814a:	e009      	b.n	8008160 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008154:	e004      	b.n	8008160 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f99e 	bl	800849a <USBD_CtlError>
  }
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	885b      	ldrh	r3, [r3, #2]
 800817a:	b2da      	uxtb	r2, r3
 800817c:	4b4e      	ldr	r3, [pc, #312]	@ (80082b8 <USBD_SetConfig+0x150>)
 800817e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008180:	4b4d      	ldr	r3, [pc, #308]	@ (80082b8 <USBD_SetConfig+0x150>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d905      	bls.n	8008194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f985 	bl	800849a <USBD_CtlError>
    return USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	e08c      	b.n	80082ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d002      	beq.n	80081a6 <USBD_SetConfig+0x3e>
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d029      	beq.n	80081f8 <USBD_SetConfig+0x90>
 80081a4:	e075      	b.n	8008292 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081a6:	4b44      	ldr	r3, [pc, #272]	@ (80082b8 <USBD_SetConfig+0x150>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d020      	beq.n	80081f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80081ae:	4b42      	ldr	r3, [pc, #264]	@ (80082b8 <USBD_SetConfig+0x150>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081b8:	4b3f      	ldr	r3, [pc, #252]	@ (80082b8 <USBD_SetConfig+0x150>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fe ffcd 	bl	800715e <USBD_SetClassConfig>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f962 	bl	800849a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081de:	e065      	b.n	80082ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa38 	bl	8008656 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2203      	movs	r2, #3
 80081ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80081ee:	e05d      	b.n	80082ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fa30 	bl	8008656 <USBD_CtlSendStatus>
      break;
 80081f6:	e059      	b.n	80082ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081f8:	4b2f      	ldr	r3, [pc, #188]	@ (80082b8 <USBD_SetConfig+0x150>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d112      	bne.n	8008226 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008208:	4b2b      	ldr	r3, [pc, #172]	@ (80082b8 <USBD_SetConfig+0x150>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008212:	4b29      	ldr	r3, [pc, #164]	@ (80082b8 <USBD_SetConfig+0x150>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe ffbc 	bl	8007196 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa19 	bl	8008656 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008224:	e042      	b.n	80082ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008226:	4b24      	ldr	r3, [pc, #144]	@ (80082b8 <USBD_SetConfig+0x150>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d02a      	beq.n	800828a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fe ffaa 	bl	8007196 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008242:	4b1d      	ldr	r3, [pc, #116]	@ (80082b8 <USBD_SetConfig+0x150>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800824c:	4b1a      	ldr	r3, [pc, #104]	@ (80082b8 <USBD_SetConfig+0x150>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7fe ff83 	bl	800715e <USBD_SetClassConfig>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00f      	beq.n	8008282 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f918 	bl	800849a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fe ff8f 	bl	8007196 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008280:	e014      	b.n	80082ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9e7 	bl	8008656 <USBD_CtlSendStatus>
      break;
 8008288:	e010      	b.n	80082ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f9e3 	bl	8008656 <USBD_CtlSendStatus>
      break;
 8008290:	e00c      	b.n	80082ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f900 	bl	800849a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800829a:	4b07      	ldr	r3, [pc, #28]	@ (80082b8 <USBD_SetConfig+0x150>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fe ff78 	bl	8007196 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082a6:	2303      	movs	r3, #3
 80082a8:	73fb      	strb	r3, [r7, #15]
      break;
 80082aa:	bf00      	nop
  }

  return ret;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000268 	.word	0x20000268

080082bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	88db      	ldrh	r3, [r3, #6]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d004      	beq.n	80082d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f8e2 	bl	800849a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80082d6:	e023      	b.n	8008320 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	dc02      	bgt.n	80082ea <USBD_GetConfig+0x2e>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dc03      	bgt.n	80082f0 <USBD_GetConfig+0x34>
 80082e8:	e015      	b.n	8008316 <USBD_GetConfig+0x5a>
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d00b      	beq.n	8008306 <USBD_GetConfig+0x4a>
 80082ee:	e012      	b.n	8008316 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3308      	adds	r3, #8
 80082fa:	2201      	movs	r2, #1
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f948 	bl	8008594 <USBD_CtlSendData>
        break;
 8008304:	e00c      	b.n	8008320 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3304      	adds	r3, #4
 800830a:	2201      	movs	r2, #1
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f940 	bl	8008594 <USBD_CtlSendData>
        break;
 8008314:	e004      	b.n	8008320 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f8be 	bl	800849a <USBD_CtlError>
        break;
 800831e:	bf00      	nop
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008338:	b2db      	uxtb	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	2b02      	cmp	r3, #2
 800833e:	d81e      	bhi.n	800837e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	88db      	ldrh	r3, [r3, #6]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d004      	beq.n	8008352 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8a5 	bl	800849a <USBD_CtlError>
        break;
 8008350:	e01a      	b.n	8008388 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d005      	beq.n	800836e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f043 0202 	orr.w	r2, r3, #2
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	330c      	adds	r3, #12
 8008372:	2202      	movs	r2, #2
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f90c 	bl	8008594 <USBD_CtlSendData>
      break;
 800837c:	e004      	b.n	8008388 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f88a 	bl	800849a <USBD_CtlError>
      break;
 8008386:	bf00      	nop
  }
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	885b      	ldrh	r3, [r3, #2]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d107      	bne.n	80083b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f953 	bl	8008656 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80083b0:	e013      	b.n	80083da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	885b      	ldrh	r3, [r3, #2]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d10b      	bne.n	80083d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	889b      	ldrh	r3, [r3, #4]
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f943 	bl	8008656 <USBD_CtlSendStatus>
}
 80083d0:	e003      	b.n	80083da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f860 	bl	800849a <USBD_CtlError>
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d80b      	bhi.n	8008412 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d10c      	bne.n	800841c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f923 	bl	8008656 <USBD_CtlSendStatus>
      }
      break;
 8008410:	e004      	b.n	800841c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f840 	bl	800849a <USBD_CtlError>
      break;
 800841a:	e000      	b.n	800841e <USBD_ClrFeature+0x3c>
      break;
 800841c:	bf00      	nop
  }
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	781a      	ldrb	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3301      	adds	r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3301      	adds	r3, #1
 800844e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f7ff fa3d 	bl	80078d0 <SWAPBYTE>
 8008456:	4603      	mov	r3, r0
 8008458:	461a      	mov	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f7ff fa30 	bl	80078d0 <SWAPBYTE>
 8008470:	4603      	mov	r3, r0
 8008472:	461a      	mov	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3301      	adds	r3, #1
 800847c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff fa23 	bl	80078d0 <SWAPBYTE>
 800848a:	4603      	mov	r3, r0
 800848c:	461a      	mov	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	80da      	strh	r2, [r3, #6]
}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a4:	2180      	movs	r1, #128	@ 0x80
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fcc4 	bl	8008e34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084ac:	2100      	movs	r1, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fcc0 	bl	8008e34 <USBD_LL_StallEP>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d042      	beq.n	8008558 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80084d6:	6938      	ldr	r0, [r7, #16]
 80084d8:	f000 f842 	bl	8008560 <USBD_GetLen>
 80084dc:	4603      	mov	r3, r0
 80084de:	3301      	adds	r3, #1
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e6:	d808      	bhi.n	80084fa <USBD_GetString+0x3e>
 80084e8:	6938      	ldr	r0, [r7, #16]
 80084ea:	f000 f839 	bl	8008560 <USBD_GetLen>
 80084ee:	4603      	mov	r3, r0
 80084f0:	3301      	adds	r3, #1
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	e001      	b.n	80084fe <USBD_GetString+0x42>
 80084fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	4413      	add	r3, r2
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	701a      	strb	r2, [r3, #0]
  idx++;
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	3301      	adds	r3, #1
 8008512:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	4413      	add	r3, r2
 800851a:	2203      	movs	r2, #3
 800851c:	701a      	strb	r2, [r3, #0]
  idx++;
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	3301      	adds	r3, #1
 8008522:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008524:	e013      	b.n	800854e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	4413      	add	r3, r2
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	7812      	ldrb	r2, [r2, #0]
 8008530:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	3301      	adds	r3, #1
 8008536:	613b      	str	r3, [r7, #16]
    idx++;
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	3301      	adds	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	4413      	add	r3, r2
 8008544:	2200      	movs	r2, #0
 8008546:	701a      	strb	r2, [r3, #0]
    idx++;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	3301      	adds	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e7      	bne.n	8008526 <USBD_GetString+0x6a>
 8008556:	e000      	b.n	800855a <USBD_GetString+0x9e>
    return;
 8008558:	bf00      	nop
  }
}
 800855a:	3718      	adds	r7, #24
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008570:	e005      	b.n	800857e <USBD_GetLen+0x1e>
  {
    len++;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	3301      	adds	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3301      	adds	r3, #1
 800857c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f5      	bne.n	8008572 <USBD_GetLen+0x12>
  }

  return len;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	2100      	movs	r1, #0
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fcc0 	bl	8008f46 <USBD_LL_Transmit>

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	2100      	movs	r1, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 fcaf 	bl	8008f46 <USBD_LL_Transmit>

  return USBD_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2203      	movs	r2, #3
 8008602:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	2100      	movs	r1, #0
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fcaf 	bl	8008f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	2100      	movs	r1, #0
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fc9e 	bl	8008f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2204      	movs	r2, #4
 8008662:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008666:	2300      	movs	r3, #0
 8008668:	2200      	movs	r2, #0
 800866a:	2100      	movs	r1, #0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc6a 	bl	8008f46 <USBD_LL_Transmit>

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2205      	movs	r2, #5
 8008688:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800868c:	2300      	movs	r3, #0
 800868e:	2200      	movs	r2, #0
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc78 	bl	8008f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086a8:	2200      	movs	r2, #0
 80086aa:	4912      	ldr	r1, [pc, #72]	@ (80086f4 <MX_USB_DEVICE_Init+0x50>)
 80086ac:	4812      	ldr	r0, [pc, #72]	@ (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086ae:	f7fe fcd9 	bl	8007064 <USBD_Init>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086b8:	f7f8 fdec 	bl	8001294 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086bc:	490f      	ldr	r1, [pc, #60]	@ (80086fc <MX_USB_DEVICE_Init+0x58>)
 80086be:	480e      	ldr	r0, [pc, #56]	@ (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086c0:	f7fe fd00 	bl	80070c4 <USBD_RegisterClass>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086ca:	f7f8 fde3 	bl	8001294 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086ce:	490c      	ldr	r1, [pc, #48]	@ (8008700 <MX_USB_DEVICE_Init+0x5c>)
 80086d0:	4809      	ldr	r0, [pc, #36]	@ (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086d2:	f7fe fc37 	bl	8006f44 <USBD_CDC_RegisterInterface>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086dc:	f7f8 fdda 	bl	8001294 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086e0:	4805      	ldr	r0, [pc, #20]	@ (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086e2:	f7fe fd25 	bl	8007130 <USBD_Start>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086ec:	f7f8 fdd2 	bl	8001294 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086f0:	bf00      	nop
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	200000c0 	.word	0x200000c0
 80086f8:	2000026c 	.word	0x2000026c
 80086fc:	2000002c 	.word	0x2000002c
 8008700:	200000ac 	.word	0x200000ac

08008704 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008708:	2200      	movs	r2, #0
 800870a:	4905      	ldr	r1, [pc, #20]	@ (8008720 <CDC_Init_FS+0x1c>)
 800870c:	4805      	ldr	r0, [pc, #20]	@ (8008724 <CDC_Init_FS+0x20>)
 800870e:	f7fe fc33 	bl	8006f78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008712:	4905      	ldr	r1, [pc, #20]	@ (8008728 <CDC_Init_FS+0x24>)
 8008714:	4803      	ldr	r0, [pc, #12]	@ (8008724 <CDC_Init_FS+0x20>)
 8008716:	f7fe fc51 	bl	8006fbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800871a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800871c:	4618      	mov	r0, r3
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000d48 	.word	0x20000d48
 8008724:	2000026c 	.word	0x2000026c
 8008728:	20000548 	.word	0x20000548

0800872c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008730:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008732:	4618      	mov	r0, r3
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
 8008748:	4613      	mov	r3, r2
 800874a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b23      	cmp	r3, #35	@ 0x23
 8008750:	d84a      	bhi.n	80087e8 <CDC_Control_FS+0xac>
 8008752:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <CDC_Control_FS+0x1c>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	080087e9 	.word	0x080087e9
 800875c:	080087e9 	.word	0x080087e9
 8008760:	080087e9 	.word	0x080087e9
 8008764:	080087e9 	.word	0x080087e9
 8008768:	080087e9 	.word	0x080087e9
 800876c:	080087e9 	.word	0x080087e9
 8008770:	080087e9 	.word	0x080087e9
 8008774:	080087e9 	.word	0x080087e9
 8008778:	080087e9 	.word	0x080087e9
 800877c:	080087e9 	.word	0x080087e9
 8008780:	080087e9 	.word	0x080087e9
 8008784:	080087e9 	.word	0x080087e9
 8008788:	080087e9 	.word	0x080087e9
 800878c:	080087e9 	.word	0x080087e9
 8008790:	080087e9 	.word	0x080087e9
 8008794:	080087e9 	.word	0x080087e9
 8008798:	080087e9 	.word	0x080087e9
 800879c:	080087e9 	.word	0x080087e9
 80087a0:	080087e9 	.word	0x080087e9
 80087a4:	080087e9 	.word	0x080087e9
 80087a8:	080087e9 	.word	0x080087e9
 80087ac:	080087e9 	.word	0x080087e9
 80087b0:	080087e9 	.word	0x080087e9
 80087b4:	080087e9 	.word	0x080087e9
 80087b8:	080087e9 	.word	0x080087e9
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	080087e9 	.word	0x080087e9
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	080087e9 	.word	0x080087e9
 80087cc:	080087e9 	.word	0x080087e9
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	080087e9 	.word	0x080087e9
 80087e0:	080087e9 	.word	0x080087e9
 80087e4:	080087e9 	.word	0x080087e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80087e8:	bf00      	nop
  }

  return (USBD_OK);
 80087ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4805      	ldr	r0, [pc, #20]	@ (800881c <CDC_Receive_FS+0x24>)
 8008806:	f7fe fbd9 	bl	8006fbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800880a:	4804      	ldr	r0, [pc, #16]	@ (800881c <CDC_Receive_FS+0x24>)
 800880c:	f7fe fbf4 	bl	8006ff8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008810:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	2000026c 	.word	0x2000026c

08008820 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008836:	4618      	mov	r0, r3
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
	...

08008844 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2212      	movs	r2, #18
 8008854:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008856:	4b03      	ldr	r3, [pc, #12]	@ (8008864 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	200000dc 	.word	0x200000dc

08008868 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2204      	movs	r2, #4
 8008878:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800887a:	4b03      	ldr	r3, [pc, #12]	@ (8008888 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	200000f0 	.word	0x200000f0

0800888c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	6039      	str	r1, [r7, #0]
 8008896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	4907      	ldr	r1, [pc, #28]	@ (80088c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80088a2:	4808      	ldr	r0, [pc, #32]	@ (80088c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80088a4:	f7ff fe0a 	bl	80084bc <USBD_GetString>
 80088a8:	e004      	b.n	80088b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	4904      	ldr	r1, [pc, #16]	@ (80088c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80088ae:	4805      	ldr	r0, [pc, #20]	@ (80088c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80088b0:	f7ff fe04 	bl	80084bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80088b4:	4b02      	ldr	r3, [pc, #8]	@ (80088c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20001548 	.word	0x20001548
 80088c4:	080090e8 	.word	0x080090e8

080088c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	4904      	ldr	r1, [pc, #16]	@ (80088e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088d8:	4804      	ldr	r0, [pc, #16]	@ (80088ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088da:	f7ff fdef 	bl	80084bc <USBD_GetString>
  return USBD_StrDesc;
 80088de:	4b02      	ldr	r3, [pc, #8]	@ (80088e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20001548 	.word	0x20001548
 80088ec:	08009100 	.word	0x08009100

080088f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	221a      	movs	r2, #26
 8008900:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008902:	f000 f843 	bl	800898c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008906:	4b02      	ldr	r3, [pc, #8]	@ (8008910 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	200000f4 	.word	0x200000f4

08008914 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	6039      	str	r1, [r7, #0]
 800891e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d105      	bne.n	8008932 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	4907      	ldr	r1, [pc, #28]	@ (8008948 <USBD_FS_ConfigStrDescriptor+0x34>)
 800892a:	4808      	ldr	r0, [pc, #32]	@ (800894c <USBD_FS_ConfigStrDescriptor+0x38>)
 800892c:	f7ff fdc6 	bl	80084bc <USBD_GetString>
 8008930:	e004      	b.n	800893c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	4904      	ldr	r1, [pc, #16]	@ (8008948 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008936:	4805      	ldr	r0, [pc, #20]	@ (800894c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008938:	f7ff fdc0 	bl	80084bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800893c:	4b02      	ldr	r3, [pc, #8]	@ (8008948 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20001548 	.word	0x20001548
 800894c:	08009114 	.word	0x08009114

08008950 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d105      	bne.n	800896e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	4907      	ldr	r1, [pc, #28]	@ (8008984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008966:	4808      	ldr	r0, [pc, #32]	@ (8008988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008968:	f7ff fda8 	bl	80084bc <USBD_GetString>
 800896c:	e004      	b.n	8008978 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	4904      	ldr	r1, [pc, #16]	@ (8008984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008972:	4805      	ldr	r0, [pc, #20]	@ (8008988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008974:	f7ff fda2 	bl	80084bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008978:	4b02      	ldr	r3, [pc, #8]	@ (8008984 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20001548 	.word	0x20001548
 8008988:	08009120 	.word	0x08009120

0800898c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008992:	4b0f      	ldr	r3, [pc, #60]	@ (80089d0 <Get_SerialNum+0x44>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008998:	4b0e      	ldr	r3, [pc, #56]	@ (80089d4 <Get_SerialNum+0x48>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800899e:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <Get_SerialNum+0x4c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4413      	add	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d009      	beq.n	80089c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089b2:	2208      	movs	r2, #8
 80089b4:	4909      	ldr	r1, [pc, #36]	@ (80089dc <Get_SerialNum+0x50>)
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f814 	bl	80089e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089bc:	2204      	movs	r2, #4
 80089be:	4908      	ldr	r1, [pc, #32]	@ (80089e0 <Get_SerialNum+0x54>)
 80089c0:	68b8      	ldr	r0, [r7, #8]
 80089c2:	f000 f80f 	bl	80089e4 <IntToUnicode>
  }
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	1fff7a10 	.word	0x1fff7a10
 80089d4:	1fff7a14 	.word	0x1fff7a14
 80089d8:	1fff7a18 	.word	0x1fff7a18
 80089dc:	200000f6 	.word	0x200000f6
 80089e0:	20000106 	.word	0x20000106

080089e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089f6:	2300      	movs	r3, #0
 80089f8:	75fb      	strb	r3, [r7, #23]
 80089fa:	e027      	b.n	8008a4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	0f1b      	lsrs	r3, r3, #28
 8008a00:	2b09      	cmp	r3, #9
 8008a02:	d80b      	bhi.n	8008a1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	0f1b      	lsrs	r3, r3, #28
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	4619      	mov	r1, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	440b      	add	r3, r1
 8008a14:	3230      	adds	r2, #48	@ 0x30
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	e00a      	b.n	8008a32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	0f1b      	lsrs	r3, r3, #28
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	4619      	mov	r1, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3237      	adds	r2, #55	@ 0x37
 8008a2e:	b2d2      	uxtb	r2, r2
 8008a30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	2200      	movs	r2, #0
 8008a44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	75fb      	strb	r3, [r7, #23]
 8008a4c:	7dfa      	ldrb	r2, [r7, #23]
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d3d3      	bcc.n	80089fc <IntToUnicode+0x18>
  }
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	@ 0x28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a6c:	f107 0314 	add.w	r3, r7, #20
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	609a      	str	r2, [r3, #8]
 8008a78:	60da      	str	r2, [r3, #12]
 8008a7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a84:	d13a      	bne.n	8008afc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a86:	2300      	movs	r3, #0
 8008a88:	613b      	str	r3, [r7, #16]
 8008a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008a90:	f043 0301 	orr.w	r3, r3, #1
 8008a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a96:	4b1b      	ldr	r3, [pc, #108]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008aa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ab4:	230a      	movs	r3, #10
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4619      	mov	r1, r3
 8008abe:	4812      	ldr	r0, [pc, #72]	@ (8008b08 <HAL_PCD_MspInit+0xa4>)
 8008ac0:	f7f9 fb3e 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ace:	6353      	str	r3, [r2, #52]	@ 0x34
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ade:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ae0:	4b08      	ldr	r3, [pc, #32]	@ (8008b04 <HAL_PCD_MspInit+0xa0>)
 8008ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008aec:	2200      	movs	r2, #0
 8008aee:	2100      	movs	r1, #0
 8008af0:	2043      	movs	r0, #67	@ 0x43
 8008af2:	f7f9 faee 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008af6:	2043      	movs	r0, #67	@ 0x43
 8008af8:	f7f9 fb07 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008afc:	bf00      	nop
 8008afe:	3728      	adds	r7, #40	@ 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	40023800 	.word	0x40023800
 8008b08:	40020000 	.word	0x40020000

08008b0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fe fb51 	bl	80071ca <USBD_LL_SetupStage>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	4613      	mov	r3, r2
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	440b      	add	r3, r1
 8008b50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f7fe fb8b 	bl	8007274 <USBD_LL_DataOutStage>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	3320      	adds	r3, #32
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f7fe fc2d 	bl	80073ec <USBD_LL_DataInStage>
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe fd71 	bl	8007690 <USBD_LL_SOF>
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	79db      	ldrb	r3, [r3, #7]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d001      	beq.n	8008bce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008bca:	f7f8 fb63 	bl	8001294 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bd4:	7bfa      	ldrb	r2, [r7, #15]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe fd15 	bl	8007608 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe fcbc 	bl	8007562 <USBD_LL_Reset>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fd10 	bl	8007628 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	7adb      	ldrb	r3, [r3, #11]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c28:	4b04      	ldr	r3, [pc, #16]	@ (8008c3c <HAL_PCD_SuspendCallback+0x48>)
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	4a03      	ldr	r2, [pc, #12]	@ (8008c3c <HAL_PCD_SuspendCallback+0x48>)
 8008c2e:	f043 0306 	orr.w	r3, r3, #6
 8008c32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	e000ed00 	.word	0xe000ed00

08008c40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fd06 	bl	8007660 <USBD_LL_Resume>
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fd5e 	bl	8007734 <USBD_LL_IsoOUTIncomplete>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fd1a 	bl	80076d0 <USBD_LL_IsoINIncomplete>
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe fd70 	bl	8007798 <USBD_LL_DevConnected>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fd6d 	bl	80077ae <USBD_LL_DevDisconnected>
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d13c      	bne.n	8008d66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cec:	4a20      	ldr	r2, [pc, #128]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008cf8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008cfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008d02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d04:	4b1a      	ldr	r3, [pc, #104]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d06:	2204      	movs	r2, #4
 8008d08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d0a:	4b19      	ldr	r3, [pc, #100]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d10:	4b17      	ldr	r3, [pc, #92]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d16:	4b16      	ldr	r3, [pc, #88]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d18:	2202      	movs	r2, #2
 8008d1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d1c:	4b14      	ldr	r3, [pc, #80]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d22:	4b13      	ldr	r3, [pc, #76]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d28:	4b11      	ldr	r3, [pc, #68]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d2e:	4b10      	ldr	r3, [pc, #64]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d34:	4b0e      	ldr	r3, [pc, #56]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d3a:	480d      	ldr	r0, [pc, #52]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d3c:	f7f9 fcfc 	bl	8002738 <HAL_PCD_Init>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d46:	f7f8 faa5 	bl	8001294 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d4a:	2180      	movs	r1, #128	@ 0x80
 8008d4c:	4808      	ldr	r0, [pc, #32]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d4e:	f7fa ff28 	bl	8003ba2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d52:	2240      	movs	r2, #64	@ 0x40
 8008d54:	2100      	movs	r1, #0
 8008d56:	4806      	ldr	r0, [pc, #24]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d58:	f7fa fedc 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d5c:	2280      	movs	r2, #128	@ 0x80
 8008d5e:	2101      	movs	r1, #1
 8008d60:	4803      	ldr	r0, [pc, #12]	@ (8008d70 <USBD_LL_Init+0x94>)
 8008d62:	f7fa fed7 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20001748 	.word	0x20001748

08008d74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f9 fde3 	bl	8002956 <HAL_PCD_Start>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 f942 	bl	8009020 <USBD_Get_USB_Status>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	4608      	mov	r0, r1
 8008db4:	4611      	mov	r1, r2
 8008db6:	461a      	mov	r2, r3
 8008db8:	4603      	mov	r3, r0
 8008dba:	70fb      	strb	r3, [r7, #3]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70bb      	strb	r3, [r7, #2]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008dd2:	78bb      	ldrb	r3, [r7, #2]
 8008dd4:	883a      	ldrh	r2, [r7, #0]
 8008dd6:	78f9      	ldrb	r1, [r7, #3]
 8008dd8:	f7fa fab7 	bl	800334a <HAL_PCD_EP_Open>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f91c 	bl	8009020 <USBD_Get_USB_Status>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e10:	78fa      	ldrb	r2, [r7, #3]
 8008e12:	4611      	mov	r1, r2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fa fb02 	bl	800341e <HAL_PCD_EP_Close>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 f8fd 	bl	8009020 <USBD_Get_USB_Status>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fa fbba 	bl	80035cc <HAL_PCD_EP_SetStall>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f8de 	bl	8009020 <USBD_Get_USB_Status>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fa fbfe 	bl	8003692 <HAL_PCD_EP_ClrStall>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 f8bf 	bl	8009020 <USBD_Get_USB_Status>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ec2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	da0b      	bge.n	8008ee4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ed2:	68f9      	ldr	r1, [r7, #12]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	3316      	adds	r3, #22
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	e00b      	b.n	8008efc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	4613      	mov	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008efa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fa f9eb 	bl	8003302 <HAL_PCD_SetAddress>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 f874 	bl	8009020 <USBD_Get_USB_Status>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b086      	sub	sp, #24
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
 8008f52:	460b      	mov	r3, r1
 8008f54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f64:	7af9      	ldrb	r1, [r7, #11]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	f7fa faf5 	bl	8003558 <HAL_PCD_EP_Transmit>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f853 	bl	8009020 <USBD_Get_USB_Status>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	460b      	mov	r3, r1
 8008f96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fa6:	7af9      	ldrb	r1, [r7, #11]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	f7fa fa81 	bl	80034b2 <HAL_PCD_EP_Receive>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f832 	bl	8009020 <USBD_Get_USB_Status>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fa faa1 	bl	8003528 <HAL_PCD_EP_GetRxCount>
 8008fe6:	4603      	mov	r3, r0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ff8:	4b03      	ldr	r3, [pc, #12]	@ (8009008 <USBD_static_malloc+0x18>)
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20001c2c 	.word	0x20001c2c

0800900c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]

}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800902e:	79fb      	ldrb	r3, [r7, #7]
 8009030:	2b03      	cmp	r3, #3
 8009032:	d817      	bhi.n	8009064 <USBD_Get_USB_Status+0x44>
 8009034:	a201      	add	r2, pc, #4	@ (adr r2, 800903c <USBD_Get_USB_Status+0x1c>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	0800904d 	.word	0x0800904d
 8009040:	08009053 	.word	0x08009053
 8009044:	08009059 	.word	0x08009059
 8009048:	0800905f 	.word	0x0800905f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
    break;
 8009050:	e00b      	b.n	800906a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009052:	2303      	movs	r3, #3
 8009054:	73fb      	strb	r3, [r7, #15]
    break;
 8009056:	e008      	b.n	800906a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009058:	2301      	movs	r3, #1
 800905a:	73fb      	strb	r3, [r7, #15]
    break;
 800905c:	e005      	b.n	800906a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800905e:	2303      	movs	r3, #3
 8009060:	73fb      	strb	r3, [r7, #15]
    break;
 8009062:	e002      	b.n	800906a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	73fb      	strb	r3, [r7, #15]
    break;
 8009068:	bf00      	nop
  }
  return usb_status;
 800906a:	7bfb      	ldrb	r3, [r7, #15]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <memset>:
 8009078:	4402      	add	r2, r0
 800907a:	4603      	mov	r3, r0
 800907c:	4293      	cmp	r3, r2
 800907e:	d100      	bne.n	8009082 <memset+0xa>
 8009080:	4770      	bx	lr
 8009082:	f803 1b01 	strb.w	r1, [r3], #1
 8009086:	e7f9      	b.n	800907c <memset+0x4>

08009088 <__libc_init_array>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	4d0d      	ldr	r5, [pc, #52]	@ (80090c0 <__libc_init_array+0x38>)
 800908c:	4c0d      	ldr	r4, [pc, #52]	@ (80090c4 <__libc_init_array+0x3c>)
 800908e:	1b64      	subs	r4, r4, r5
 8009090:	10a4      	asrs	r4, r4, #2
 8009092:	2600      	movs	r6, #0
 8009094:	42a6      	cmp	r6, r4
 8009096:	d109      	bne.n	80090ac <__libc_init_array+0x24>
 8009098:	4d0b      	ldr	r5, [pc, #44]	@ (80090c8 <__libc_init_array+0x40>)
 800909a:	4c0c      	ldr	r4, [pc, #48]	@ (80090cc <__libc_init_array+0x44>)
 800909c:	f000 f818 	bl	80090d0 <_init>
 80090a0:	1b64      	subs	r4, r4, r5
 80090a2:	10a4      	asrs	r4, r4, #2
 80090a4:	2600      	movs	r6, #0
 80090a6:	42a6      	cmp	r6, r4
 80090a8:	d105      	bne.n	80090b6 <__libc_init_array+0x2e>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b0:	4798      	blx	r3
 80090b2:	3601      	adds	r6, #1
 80090b4:	e7ee      	b.n	8009094 <__libc_init_array+0xc>
 80090b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ba:	4798      	blx	r3
 80090bc:	3601      	adds	r6, #1
 80090be:	e7f2      	b.n	80090a6 <__libc_init_array+0x1e>
 80090c0:	08009150 	.word	0x08009150
 80090c4:	08009150 	.word	0x08009150
 80090c8:	08009150 	.word	0x08009150
 80090cc:	08009154 	.word	0x08009154

080090d0 <_init>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	bf00      	nop
 80090d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d6:	bc08      	pop	{r3}
 80090d8:	469e      	mov	lr, r3
 80090da:	4770      	bx	lr

080090dc <_fini>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr
